
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
var tui = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var isPure = false;

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.3.3',
	  mode:  'global',
	  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var functionToString = shared('native-function-to-string', Function.toString);

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(functionToString.call(WeakMap));

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(functionToString).split('toString');

	shared('inspectSource', function (it) {
	  return functionToString.call(it);
	});

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || functionToString.call(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var sloppyArrayMethod = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !method || !fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $indexOf = arrayIncludes.indexOf;


	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var SLOPPY_METHOD$1 = sloppyArrayMethod('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD$1 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var Symbol$1 = global_1.Symbol;
	var store$2 = shared('wks');

	var wellKnownSymbol = function (name) {
	  return store$2[name] || (store$2[name] = nativeSymbol && Symbol$1[name]
	    || (nativeSymbol ? Symbol$1 : uid)('Symbol.' + name));
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  return !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var max$1 = Math.max;
	var min$2 = Math.min;
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$2(max$1(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var DatePrototype = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var nativeDateToString = DatePrototype[TO_STRING];
	var getTime = DatePrototype.getTime;

	// `Date.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
	if (new Date(NaN) + '' != INVALID_DATE) {
	  redefine(DatePrototype, TO_STRING, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
	  });
	}

	var defineProperty = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors && !(NAME in FunctionPrototype)) {
	  defineProperty(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	// Forced replacement object prototype accessors methods
	var forcedObjectPrototypeAccessorsMethods =  !fails(function () {
	  var key = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, key, function () { /* empty */ });
	  delete global_1[key];
	});

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// `Object.prototype.__defineGetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
	if (descriptors) {
	  _export({ target: 'Object', proto: true, forced: forcedObjectPrototypeAccessorsMethods }, {
	    __defineGetter__: function __defineGetter__(P, getter) {
	      objectDefineProperty.f(toObject(this), P, { get: aFunction$1(getter), enumerable: true, configurable: true });
	    }
	  });
	}

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG$1] = 'z';

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = String(test) !== '[object z]' ? function toString() {
	  return '[object ' + classof(this) + ']';
	} : test.toString;

	var ObjectPrototype = Object.prototype;

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (objectToString !== ObjectPrototype.toString) {
	  redefine(ObjectPrototype, 'toString', objectToString, { unsafe: true });
	}

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(re, str);

	    if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	var TO_STRING$1 = 'toString';
	var RegExpPrototype = RegExp.prototype;
	var nativeToString = RegExpPrototype[TO_STRING$1];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING$1;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING$1, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var SPECIES$2 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;
	    re.exec = function () { execCalled = true; return null; };

	    if (KEY === 'split') {
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$2] = function () { return re; };
	    }

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	  }
	};

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$1 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$1(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$1(true)
	};

	var charAt = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	var max$2 = Math.max;
	var min$3 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$2(min$3(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var SPECIES$3 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var arrayPush = [].push;
	var min$4 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$2 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$2(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$2(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$2(3)
	};

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var forcedStringTrimMethod = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
	// Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/if (!Element.prototype.matches)
	Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	if (!Element.prototype.closest) Element.prototype.closest = function (s) {
	  var el = this;
	  if (!document.documentElement.contains(el)) return null;

	  do {
	    if (el.matches(s)) return el;
	    el = el.parentElement || el.parentNode;
	  } while (el !== null && el.nodeType === 1);

	  return null;
	};
	/*
	 * classList.js: Cross-browser full element.classList implementation.
	 * 1.1.20170427
	 *
	 * By Eli Grey, http://eligrey.com
	 * License: Dedicated to the public domain.
	 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
	 */

	/*global self, document, DOMException */

	/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

	if ("document" in window.self) {
	  // Full polyfill for browsers with no classList support
	  // Including IE < Edge missing SVGElement.classList
	  if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {
	    (function (view) {

	      if (!('Element' in view)) return;

	      var classListProp = "classList",
	          protoProp = "prototype",
	          elemCtrProto = view.Element[protoProp],
	          objCtr = Object,
	          strTrim = String[protoProp].trim || function () {
	        return this.replace(/^\s+|\s+$/g, "");
	      },
	          arrIndexOf = Array[protoProp].indexOf || function (item) {
	        var i = 0,
	            len = this.length;

	        for (; i < len; i++) {
	          if (i in this && this[i] === item) {
	            return i;
	          }
	        }

	        return -1;
	      } // Vendors: please allow content code to instantiate DOMExceptions
	      ,
	          DOMEx = function DOMEx(type, message) {
	        this.name = type;
	        this.code = DOMException[type];
	        this.message = message;
	      },
	          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
	        if (token === "") {
	          throw new DOMEx("SYNTAX_ERR", "An invalid or illegal string was specified");
	        }

	        if (/\s/.test(token)) {
	          throw new DOMEx("INVALID_CHARACTER_ERR", "String contains an invalid character");
	        }

	        return arrIndexOf.call(classList, token);
	      },
	          ClassList = function ClassList(elem) {
	        var trimmedClasses = strTrim.call(elem.getAttribute("class") || ""),
	            classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [],
	            i = 0,
	            len = classes.length;

	        for (; i < len; i++) {
	          this.push(classes[i]);
	        }

	        this._updateClassName = function () {
	          elem.setAttribute("class", this.toString());
	        };
	      },
	          classListProto = ClassList[protoProp] = [],
	          classListGetter = function classListGetter() {
	        return new ClassList(this);
	      }; // Most DOMException implementations don't allow calling DOMException's toString()
	      // on non-DOMExceptions. Error's toString() is sufficient here.


	      DOMEx[protoProp] = Error[protoProp];

	      classListProto.item = function (i) {
	        return this[i] || null;
	      };

	      classListProto.contains = function (token) {
	        token += "";
	        return checkTokenAndGetIndex(this, token) !== -1;
	      };

	      classListProto.add = function () {
	        var tokens = arguments,
	            i = 0,
	            l = tokens.length,
	            token,
	            updated = false;

	        do {
	          token = tokens[i] + "";

	          if (checkTokenAndGetIndex(this, token) === -1) {
	            this.push(token);
	            updated = true;
	          }
	        } while (++i < l);

	        if (updated) {
	          this._updateClassName();
	        }
	      };

	      classListProto.remove = function () {
	        var tokens = arguments,
	            i = 0,
	            l = tokens.length,
	            token,
	            updated = false,
	            index;

	        do {
	          token = tokens[i] + "";
	          index = checkTokenAndGetIndex(this, token);

	          while (index !== -1) {
	            this.splice(index, 1);
	            updated = true;
	            index = checkTokenAndGetIndex(this, token);
	          }
	        } while (++i < l);

	        if (updated) {
	          this._updateClassName();
	        }
	      };

	      classListProto.toggle = function (token, force) {
	        token += "";
	        var result = this.contains(token),
	            method = result ? force !== true && "remove" : force !== false && "add";

	        if (method) {
	          this[method](token);
	        }

	        if (force === true || force === false) {
	          return force;
	        } else {
	          return !result;
	        }
	      };

	      classListProto.toString = function () {
	        return this.join(" ");
	      };

	      if (objCtr.defineProperty) {
	        var classListPropDesc = {
	          get: classListGetter,
	          enumerable: true,
	          configurable: true
	        };

	        try {
	          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	        } catch (ex) {
	          // IE 8 doesn't support enumerable:true
	          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
	          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
	          if (ex.number === undefined || ex.number === -0x7FF5EC54) {
	            classListPropDesc.enumerable = false;
	            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	          }
	        }
	      } else if (objCtr[protoProp].__defineGetter__) {
	        elemCtrProto.__defineGetter__(classListProp, classListGetter);
	      }
	    })(window.self);
	  } // There is full or partial native classList support, so just check if we need
	  // to normalize the add/remove and toggle APIs.


	  (function () {

	    var testElement = document.createElement("_");
	    testElement.classList.add("c1", "c2"); // Polyfill for IE 10/11 and Firefox <26, where classList.add and
	    // classList.remove exist but support only one argument at a time.

	    if (!testElement.classList.contains("c2")) {
	      var createMethod = function createMethod(method) {
	        var original = DOMTokenList.prototype[method];

	        DOMTokenList.prototype[method] = function (token) {
	          var i,
	              len = arguments.length;

	          for (i = 0; i < len; i++) {
	            token = arguments[i];
	            original.call(this, token);
	          }
	        };
	      };

	      createMethod('add');
	      createMethod('remove');
	    }

	    testElement.classList.toggle("c3", false); // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	    // support the second argument.

	    if (testElement.classList.contains("c3")) {
	      var _toggle = DOMTokenList.prototype.toggle;

	      DOMTokenList.prototype.toggle = function (token, force) {
	        if (1 in arguments && !this.contains(token) === !force) {
	          return force;
	        } else {
	          return _toggle.call(this, token);
	        }
	      };
	    }

	    testElement = null;
	  })();
	}
	/*!
	 * @copyright Copyright (c) 2017 IcoMoon.io
	 * @license   Licensed under MIT license
	 *            See https://github.com/Keyamoon/svgxuse
	 * @version   1.2.6
	 */

	/*jslint browser: true */

	/*global XDomainRequest, MutationObserver, window */


	(function () {

	  if (typeof window !== "undefined" && window.addEventListener) {
	    var cache = Object.create(null); // holds xhr objects to prevent multiple requests

	    var checkUseElems;
	    var tid; // timeout id

	    var debouncedCheck = function debouncedCheck() {
	      clearTimeout(tid);
	      tid = setTimeout(checkUseElems, 100);
	    };

	    var unobserveChanges = function unobserveChanges() {
	      return;
	    };

	    var observeChanges = function observeChanges() {
	      var observer;
	      window.addEventListener("resize", debouncedCheck, false);
	      window.addEventListener("orientationchange", debouncedCheck, false);

	      if (window.MutationObserver) {
	        observer = new MutationObserver(debouncedCheck);
	        observer.observe(document.documentElement, {
	          childList: true,
	          subtree: true,
	          attributes: true
	        });

	        unobserveChanges = function unobserveChanges() {
	          try {
	            observer.disconnect();
	            window.removeEventListener("resize", debouncedCheck, false);
	            window.removeEventListener("orientationchange", debouncedCheck, false);
	          } catch (ignore) {}
	        };
	      } else {
	        document.documentElement.addEventListener("DOMSubtreeModified", debouncedCheck, false);

	        unobserveChanges = function unobserveChanges() {
	          document.documentElement.removeEventListener("DOMSubtreeModified", debouncedCheck, false);
	          window.removeEventListener("resize", debouncedCheck, false);
	          window.removeEventListener("orientationchange", debouncedCheck, false);
	        };
	      }
	    };

	    var createRequest = function createRequest(url) {
	      // In IE 9, cross origin requests can only be sent using XDomainRequest.
	      // XDomainRequest would fail if CORS headers are not set.
	      // Therefore, XDomainRequest should only be used with cross origin requests.
	      function getOrigin(loc) {
	        var a;

	        if (loc.protocol !== undefined) {
	          a = loc;
	        } else {
	          a = document.createElement("a");
	          a.href = loc;
	        }

	        return a.protocol.replace(/:/g, "") + a.host;
	      }

	      var Request;
	      var origin;
	      var origin2;

	      if (window.XMLHttpRequest) {
	        Request = new XMLHttpRequest();
	        origin = getOrigin(location);
	        origin2 = getOrigin(url);

	        if (Request.withCredentials === undefined && origin2 !== "" && origin2 !== origin) {
	          Request = XDomainRequest || undefined;
	        } else {
	          Request = XMLHttpRequest;
	        }
	      }

	      return Request;
	    };

	    var xlinkNS = "http://www.w3.org/1999/xlink";

	    checkUseElems = function checkUseElems() {
	      var base;
	      var bcr;

	      var hash;
	      var href;
	      var i;
	      var inProgressCount = 0;
	      var isHidden;
	      var Request;
	      var url;
	      var uses;
	      var xhr;

	      function observeIfDone() {
	        // If done with making changes, start watching for chagnes in DOM again
	        inProgressCount -= 1;

	        if (inProgressCount === 0) {
	          // if all xhrs were resolved
	          unobserveChanges(); // make sure to remove old handlers

	          observeChanges(); // watch for changes to DOM
	        }
	      }

	      function attrUpdateFunc(spec) {
	        return function () {
	          if (cache[spec.base] !== true) {
	            spec.useEl.setAttributeNS(xlinkNS, "xlink:href", "#" + spec.hash);

	            if (spec.useEl.hasAttribute("href")) {
	              spec.useEl.setAttribute("href", "#" + spec.hash);
	            }
	          }
	        };
	      }

	      function onloadFunc(xhr) {
	        return function () {
	          var body = document.body;
	          var x = document.createElement("x");
	          var svg;
	          xhr.onload = null;
	          x.innerHTML = xhr.responseText;
	          svg = x.getElementsByTagName("svg")[0];

	          if (svg) {
	            svg.setAttribute("aria-hidden", "true");
	            svg.style.position = "absolute";
	            svg.style.width = 0;
	            svg.style.height = 0;
	            svg.style.overflow = "hidden";
	            body.insertBefore(svg, body.firstChild);
	          }

	          observeIfDone();
	        };
	      }

	      function onErrorTimeout(xhr) {
	        return function () {
	          xhr.onerror = null;
	          xhr.ontimeout = null;
	          observeIfDone();
	        };
	      }

	      unobserveChanges(); // stop watching for changes to DOM
	      // find all use elements

	      uses = document.getElementsByTagName("use");

	      for (i = 0; i < uses.length; i += 1) {
	        try {
	          bcr = uses[i].getBoundingClientRect();
	        } catch (ignore) {
	          // failed to get bounding rectangle of the use element
	          bcr = false;
	        }

	        href = uses[i].getAttribute("href") || uses[i].getAttributeNS(xlinkNS, "href") || uses[i].getAttribute("xlink:href");

	        if (href && href.split) {
	          url = href.split("#");
	        } else {
	          url = ["", ""];
	        }

	        base = url[0];
	        hash = url[1];
	        isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;

	        if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {

	          if (uses[i].hasAttribute("href")) {
	            uses[i].setAttributeNS(xlinkNS, "xlink:href", href);
	          }

	          if (base.length) {
	            // schedule updating xlink:href
	            xhr = cache[base];

	            if (xhr !== true) {
	              // true signifies that prepending the SVG was not required
	              setTimeout(attrUpdateFunc({
	                useEl: uses[i],
	                base: base,
	                hash: hash
	              }), 0);
	            }

	            if (xhr === undefined) {
	              Request = createRequest(base);

	              if (Request !== undefined) {
	                xhr = new Request();
	                cache[base] = xhr;
	                xhr.onload = onloadFunc(xhr);
	                xhr.onerror = onErrorTimeout(xhr);
	                xhr.ontimeout = onErrorTimeout(xhr);
	                xhr.open("GET", base);
	                xhr.send();
	                inProgressCount += 1;
	              }
	            }
	          }
	        } else {
	          if (!isHidden) {
	            if (cache[base] === undefined) {
	              // remember this URL if the use element was not empty and no request was sent
	              cache[base] = true;
	            } else if (cache[base].onload) {
	              // if it turns out that prepending the SVG is not necessary,
	              // abort the in-progress xhr.
	              cache[base].abort();
	              delete cache[base].onload;
	              cache[base] = true;
	            }
	          } else if (base.length && cache[base]) {
	            setTimeout(attrUpdateFunc({
	              useEl: uses[i],
	              base: base,
	              hash: hash
	            }), 0);
	          }
	        }
	      }

	      uses = "";
	      inProgressCount += 1;
	      observeIfDone();
	    };

	    var _winLoad;

	    _winLoad = function winLoad() {
	      window.removeEventListener("load", _winLoad, false); // to prevent memory leaks

	      tid = setTimeout(checkUseElems, 0);
	    };

	    if (document.readyState !== "complete") {
	      // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.
	      window.addEventListener("load", _winLoad, false);
	    } else {
	      // No need to add a listener if the document is already loaded, initialize immediately.
	      _winLoad();
	    }
	  }
	})();

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	var IS_CONCAT_SPREADABLE_SUPPORT = !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER$1) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var IE_PROTO = sharedKey('IE_PROTO');

	var PROTOTYPE = 'prototype';
	var Empty = function () { /* empty */ };

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var length = enumBugKeys.length;
	  var lt = '<';
	  var script = 'script';
	  var gt = '>';
	  var js = 'java' + script + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = String(js);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
	  return createDict();
	};

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	hiddenKeys[IE_PROTO] = true;

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] == undefined) {
	  createNonEnumerableProperty(ArrayPrototype, UNSCOPABLES, objectCreate(null));
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var iterators = {};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if ( !has(IteratorPrototype, ITERATOR)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var defineProperty$1 = objectDefineProperty.f;



	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
	    defineProperty$1(it, TO_STRING_TAG$2, { configurable: true, value: TAG });
	  }
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ( IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var nativeAssign = Object.assign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	// should work with symbols and should have deterministic property order (V8 bug)
	var objectAssign = !nativeAssign || fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$4 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$4]) {
	    defineProperty(Constructor, SPECIES$4, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$2] === it);
	};

	// optional / simple context binding
	var bindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$3]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$4] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$4] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var userAgent = getBuiltIn('navigator', 'userAgent') || '';

	var location$1 = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = bindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$1 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$1) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver$1 && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver$1(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$5 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$5
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$5 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$1 = internalState.get;
	var setInternalState$1 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$2 = global_1.process;
	var $fetch = global_1.fetch;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8 || '';
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$2) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$1 = isForced_1(PROMISE, function () {
	  // correct subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var empty = function () { /* empty */ };
	  var FakePromise = (promise.constructor = {})[SPECIES$5] = function (exec) {
	    exec(empty, empty);
	  };
	  // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  return !((IS_NODE$1 || typeof PromiseRejectionEvent == 'function')
	    && (!isPure || promise['finally'])
	    && promise.then(empty) instanceof FakePromise
	    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // we can't detect it synchronously, so just check versions
	    && v8.indexOf('6.6') !== 0
	    && userAgent.indexOf('Chrome/66') === -1);
	});

	var INCORRECT_ITERATION = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$2.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$2.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState$1(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$1(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$2.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$1(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if ( typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = path[PROMISE];

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced:  FORCED$1 }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var charAt$1 = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$2(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$2(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$1(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  if (CollectionPrototype) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype[ITERATOR$5] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype, ITERATOR$5, ArrayValues);
	    } catch (error) {
	      CollectionPrototype[ITERATOR$5] = ArrayValues;
	    }
	    if (!CollectionPrototype[TO_STRING_TAG$3]) {
	      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
	    }
	    if (domIterables[COLLECTION_NAME]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	var ITERATOR$6 = wellKnownSymbol('iterator');

	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return (isPure && !url.toJSON)
	    || !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$6]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#Ð±').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var index = 0;
	  var iteratorMethod = getIteratorMethod(O);
	  var length, result, step, iterator, next;
	  if (mapping) mapfn = bindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      createProperty(result, index, mapping
	        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
	        : step.value
	      );
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	    }
	  }
	  result.length = index;
	  return result;
	};

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$2 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$2(delta / damp) : delta >> 1;
	  delta += floor$2(delta / numPoints);
	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$2(delta / baseMinusTMin);
	  }
	  return floor$2(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements
	var encode = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$2((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        for (var k = base; /* no condition */; k += base) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$2(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }
	  return output.join('');
	};

	var punycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
	  }
	  return encoded.join('.');
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject(iteratorMethod.call(it));
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

















	var ITERATOR$7 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$3 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;

	var replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$3(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$3(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = bindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$7, URLSearchParamsPrototype.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`











	var codeAt = stringMultibyte.codeAt;





	var NativeURL = global_1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$4 = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$3 = Math.floor;
	var pow = Math.pow;

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
	// eslint-disable-next-line no-control-regex
	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;
	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result;
	  // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);
	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }
	    url.host = result;
	  } else {
	    input = punycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }
	    numbers.push(number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = numbers.pop();
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow(256, 3 - index);
	  }
	  return ipv4;
	};

	// eslint-disable-next-line max-statements
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (char()) {
	    if (pieceIndex == 8) return;
	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }
	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (char()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!DIGIT.test(char())) return;
	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$3(host / 256);
	    } return result.join('.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt(char, 0);
	  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0))
	    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
	    string.length == 2 ||
	    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;
	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	// eslint-disable-next-line max-statements
	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');

	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];
	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (
	            (isSpecial(url) != has(specialSchemes, buffer)) ||
	            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
	            (url.scheme == 'file' && !url.host)
	          )) return;
	          url.scheme = buffer;
	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }
	          buffer = '';
	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case NO_SCHEME:
	        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }
	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        } break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;
	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        } break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        } break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        } break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);
	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];
	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }
	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;
	            else url.username += encodedCodePoints;
	          }
	          buffer = '';
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;
	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;
	          else if (char == ']') seenBracket = false;
	          buffer += char;
	        } break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url)) ||
	          stateOverride
	        ) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
	            buffer = '';
	          }
	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;
	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;
	        else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }
	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        } break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }
	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
	          else url.host = base.host;
	        }
	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          } continue;
	        } else buffer += char;
	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        } break;

	      case PATH:
	        if (
	          char == EOF || char == '/' ||
	          (char == '\\' && isSpecial(url)) ||
	          (!stateOverride && (char == '?' || char == '#'))
	        ) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }
	            url.path.push(buffer);
	          }
	          buffer = '';
	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }
	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        } break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';
	          else if (char == '#') url.query += '%23';
	          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$4(that, { type: 'URL' });
	  var baseState, failure;
	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
	    else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }
	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);
	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };
	  if (!descriptors) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';
	  if (host !== null) {
	    output += '//';
	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }
	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';
	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? ''
	    : port === null ? serializeHost(host)
	    : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return { get: getter, set: setter, configurable: true, enumerable: true };
	};

	if (descriptors) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;
	      else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);
	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);
	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }
	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  });
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');

	_export({ global: true, forced: !nativeUrl, sham: !descriptors }, {
	  URL: URLConstructor
	});

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  }
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
	    return;
	  }

	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var SPECIES$6 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$3 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$6];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$3(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var defineProperty$2 = objectDefineProperty.f;





	var DataView = global_1.DataView;
	var DataViewPrototype = DataView && DataView.prototype;
	var Int8Array$1 = global_1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray$1 = global_1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$2 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$2.isPrototypeOf;

	var TO_STRING_TAG$4 = wellKnownSymbol('toStringTag');
	var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
	var NATIVE_ARRAY_BUFFER = !!(global_1.ArrayBuffer && DataView);
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!objectSetPrototypeOf && classof(global_1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var isView = function isView(it) {
	  var klass = classof(it);
	  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
	  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
	  if (isTypedArray(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
	  if (objectSetPrototypeOf) {
	    if (isPrototypeOf.call(TypedArray, C)) return C;
	  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME$1)) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
	      return C;
	    }
	  } throw TypeError('Target is not a typed array constructor');
	};

	var exportProto = function (KEY, property, forced) {
	  if (!descriptors) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
	      delete TypedArrayConstructor.prototype[KEY];
	    }
	  }
	  if (!TypedArrayPrototype[KEY] || forced) {
	    redefine(TypedArrayPrototype, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportStatic = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!descriptors) return;
	  if (objectSetPrototypeOf) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global_1[ARRAY];
	      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
	        delete TypedArrayConstructor[KEY];
	      }
	    }
	    if (!TypedArray[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global_1[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  if (!global_1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
	  // eslint-disable-next-line no-shadow
	  TypedArray = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1], TypedArray);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$2) {
	  TypedArrayPrototype = TypedArray.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1[NAME$1]) objectSetPrototypeOf(global_1[NAME$1].prototype, TypedArrayPrototype);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
	  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors && !has(TypedArrayPrototype, TO_STRING_TAG$4)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$2(TypedArrayPrototype, TO_STRING_TAG$4, { get: function () {
	    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
	  } });
	  for (NAME$1 in TypedArrayConstructorsList) if (global_1[NAME$1]) {
	    createNonEnumerableProperty(global_1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
	  }
	}

	// WebKit bug - the same parent prototype for typed arrays and data view
	if (NATIVE_ARRAY_BUFFER && objectSetPrototypeOf && objectGetPrototypeOf(DataViewPrototype) !== ObjectPrototype$2) {
	  objectSetPrototypeOf(DataViewPrototype, ObjectPrototype$2);
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
	  aTypedArray: aTypedArray,
	  aTypedArrayConstructor: aTypedArrayConstructor,
	  exportProto: exportProto,
	  exportStatic: exportStatic,
	  isView: isView,
	  isTypedArray: isTypedArray,
	  TypedArray: TypedArray,
	  TypedArrayPrototype: TypedArrayPrototype
	};

	// `ToIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-toindex
	var toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var NATIVE_ARRAY_BUFFER$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER;







	var getOwnPropertyNames = objectGetOwnPropertyNames.f;
	var defineProperty$3 = objectDefineProperty.f;




	var getInternalState$3 = internalState.get;
	var setInternalState$5 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$1 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1[DATA_VIEW];
	var Math$1 = global_1.Math;
	var RangeError$1 = global_1.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs = Math$1.abs;
	var pow$1 = Math$1.pow;
	var floor$4 = Math$1.floor;
	var log = Math$1.log;
	var LN2 = Math$1.LN2;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	var packIEEE754 = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$1(2, -24) - pow$1(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs(number);
	  // eslint-disable-next-line no-self-compare
	  if (number != number || number === Infinity$1) {
	    // eslint-disable-next-line no-self-compare
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$4(log(number) / LN2);
	    if (number * (c = pow$1(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$1(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$1(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$1(2, eBias - 1) * pow$1(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpackIEEE754 = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
	  } else {
	    mantissa = mantissa + pow$1(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow$1(2, exponent - mantissaLength);
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
	  defineProperty$3(Constructor[PROTOTYPE$1], key, { get: function () { return getInternalState$3(this)[key]; } });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  var store = getInternalState$3(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$3(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set$2 = function (view, count, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  var store = getInternalState$3(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$3(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!NATIVE_ARRAY_BUFFER$1) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    setInternalState$5(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!descriptors) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$3(buffer).byteLength;
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
	    setInternalState$5(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!descriptors) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (descriptors) {
	    addGetter($ArrayBuffer, 'byteLength');
	    addGetter($DataView, 'buffer');
	    addGetter($DataView, 'byteLength');
	    addGetter($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE$1], {
	    getInt8: function getInt8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set$2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  if (!fails(function () {
	    NativeArrayBuffer(1);
	  }) || !fails(function () {
	    new NativeArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new NativeArrayBuffer(); // eslint-disable-line no-new
	    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
	    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex(length));
	    };
	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$1] = NativeArrayBuffer[PROTOTYPE$1];
	    for (var keys$1 = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys$1.length > j;) {
	      if (!((key = keys$1[j++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
	      }
	    }
	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var nativeSetInt8 = $DataView[PROTOTYPE$1].setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE$1], {
	    setInt8: function setInt8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var ArrayBuffer$1 = arrayBuffer.ArrayBuffer;
	var DataView$1 = arrayBuffer.DataView;
	var nativeArrayBufferSlice = ArrayBuffer$1.prototype.slice;

	var INCORRECT_SLICE = fails(function () {
	  return !new ArrayBuffer$1(2).slice(1, undefined).byteLength;
	});

	// `ArrayBuffer.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
	_export({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
	  slice: function slice(start, end) {
	    if (nativeArrayBufferSlice !== undefined && end === undefined) {
	      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
	    }
	    var length = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    var result = new (speciesConstructor(this, ArrayBuffer$1))(toLength(fin - first));
	    var viewSource = new DataView$1(this);
	    var viewTarget = new DataView$1(result);
	    var index = 0;
	    while (first < fin) {
	      viewTarget.setUint8(index++, viewSource.getUint8(first++));
	    } return result;
	  }
	});

	var trim = stringTrim.trim;


	var nativeParseInt = global_1.parseInt;
	var hex = /^[+-]?0[Xx]/;
	var FORCED$2 = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	var _parseInt = FORCED$2 ? function parseInt(string, radix) {
	  var S = trim(String(string));
	  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
	} : nativeParseInt;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != _parseInt }, {
	  parseInt: _parseInt
	});

	/* eslint-disable no-new */



	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$2 = global_1.ArrayBuffer;
	var Int8Array$2 = global_1.Int8Array;

	var typedArraysConstructorsRequiresWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails(function () {
	  Int8Array$2(1);
	}) || !fails(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails(function () {
	  // Safari 11 bug
	  return new Int8Array$2(new ArrayBuffer$2(2), 1, undefined).length !== 1;
	});

	var toPositiveInteger = function (it) {
	  var result = toInteger(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toOffset = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
	  var O = toObject(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    O = [];
	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = bindContext(mapfn, arguments[2], 2);
	  }
	  length = toLength(O.length);
	  result = new (aTypedArrayConstructor$1(this))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$3 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = bindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$3(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$3(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$3(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$3(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$3(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$3(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$3(6)
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {


















	var getOwnPropertyNames = objectGetOwnPropertyNames.f;

	var forEach = arrayIteration.forEach;





	var getInternalState = internalState.get;
	var setInternalState = internalState.set;
	var nativeDefineProperty = objectDefineProperty.f;
	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	var round = Math.round;
	var RangeError = global_1.RangeError;
	var ArrayBuffer = arrayBuffer.ArrayBuffer;
	var DataView = arrayBuffer.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
	var TypedArray = arrayBufferViewCore.TypedArray;
	var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
	var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
	var isTypedArray = arrayBufferViewCore.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray(target)
	    && typeof key != 'symbol'
	    && key in target
	    && String(+key) == String(key);
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  return isTypedArrayIndex(target, key = toPrimitive(key, true))
	    ? createPropertyDescriptor(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
	    && isObject(descriptor)
	    && has(descriptor, 'value')
	    && !has(descriptor, 'get')
	    && !has(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!has(descriptor, 'writable') || descriptor.writable)
	    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (descriptors) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    objectGetOwnPropertyDescriptor.f = wrappedGetOwnPropertyDescriptor;
	    objectDefineProperty.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype, 'buffer');
	    addGetter(TypedArrayPrototype, 'byteOffset');
	    addGetter(TypedArrayPrototype, 'byteLength');
	    addGetter(TypedArrayPrototype, 'length');
	  }

	  _export({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  module.exports = function (TYPE, BYTES, wrapper, CLAMPED) {
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global_1[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }
	        setInternalState(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
	    } else if (typedArraysConstructorsRequiresWrappers) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
	        if (isArrayBuffer(data)) return $length !== undefined
	          ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
	          : typedArrayOffset !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
	            : new NativeTypedArrayConstructor(data);
	        if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	        return typedArrayFrom.call(TypedArrayConstructor, data);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    _export({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else module.exports = function () { /* empty */ };
	});

	// `Uint8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var min$5 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$5((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
	arrayBufferViewCore.exportProto('copyWithin', function copyWithin(target, start /* , end */) {
	  return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every = arrayIteration.every;

	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
	arrayBufferViewCore.exportProto('every', function every(callbackfn /* , thisArg */) {
	  return $every(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars
	arrayBufferViewCore.exportProto('fill', function fill(value /* , start, end */) {
	  return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter = arrayIteration.filter;


	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
	arrayBufferViewCore.exportProto('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$2(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	});

	var $find = arrayIteration.find;

	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
	arrayBufferViewCore.exportProto('find', function find(predicate /* , thisArg */) {
	  return $find(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex = arrayIteration.findIndex;

	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
	arrayBufferViewCore.exportProto('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach = arrayIteration.forEach;

	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
	arrayBufferViewCore.exportProto('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes = arrayIncludes.includes;

	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
	arrayBufferViewCore.exportProto('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes.indexOf;

	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
	arrayBufferViewCore.exportProto('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$8 = wellKnownSymbol('iterator');
	var Uint8Array$1 = global_1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportProto$1 = arrayBufferViewCore.exportProto;
	var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR$8];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
	  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$a(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
	exportProto$1('entries', function entries() {
	  return arrayEntries.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
	exportProto$1('keys', function keys() {
	  return arrayKeys.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
	exportProto$1('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportProto$1(ITERATOR$8, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars
	arrayBufferViewCore.exportProto('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	var min$6 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var SLOPPY_METHOD$2 = sloppyArrayMethod('lastIndexOf');

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = (NEGATIVE_ZERO$1 || SLOPPY_METHOD$2) ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
	  var O = toIndexedObject(this);
	  var length = toLength(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$6(index, toInteger(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : nativeLastIndexOf;

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars
	arrayBufferViewCore.exportProto('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map = arrayIteration.map;


	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;

	// `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
	arrayBufferViewCore.exportProto('map', function map(mapfn /* , thisArg */) {
	  return $map(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (aTypedArrayConstructor$3(speciesConstructor(O, O.constructor)))(length);
	  });
	});

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$1(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;

	var aTypedArray$e = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
	arrayBufferViewCore.exportProto('reduce', function reduce(callbackfn /* , initialValue */) {
	  return $reduce(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight = arrayReduce.right;

	var aTypedArray$f = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
	arrayBufferViewCore.exportProto('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  return $reduceRight(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var floor$5 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
	arrayBufferViewCore.exportProto('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$g(that).length;
	  var middle = floor$5(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;

	var FORCED$3 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
	arrayBufferViewCore.exportProto('set', function set(arrayLike /* , offset */) {
	  aTypedArray$h(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject(arrayLike);
	  var len = toLength(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$3);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var $slice = [].slice;

	var FORCED$4 = fails(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
	arrayBufferViewCore.exportProto('slice', function slice(start, end) {
	  var list = $slice.call(aTypedArray$i(this), start, end);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$4(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$4);

	var $some = arrayIteration.some;

	var aTypedArray$j = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
	arrayBufferViewCore.exportProto('some', function some(callbackfn /* , thisArg */) {
	  return $some(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var $sort = [].sort;

	// `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
	arrayBufferViewCore.exportProto('sort', function sort(comparefn) {
	  return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
	arrayBufferViewCore.exportProto('subarray', function subarray(begin, end) {
	  var O = aTypedArray$l(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex(begin, length);
	  return new (speciesConstructor(O, O.constructor))(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
	  );
	});

	var Int8Array$3 = global_1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails(function () {
	  $toLocaleString.call(new Int8Array$3(1));
	});

	var FORCED$5 = fails(function () {
	  return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails(function () {
	  Int8Array$3.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
	arrayBufferViewCore.exportProto('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$5);

	var Uint8Array$2 = global_1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$2 && Uint8Array$2.prototype;
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	// `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
	arrayBufferViewCore.exportProto('toString', arrayToString, (Uint8ArrayPrototype || {}).toString != arrayToString);

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	var _arrayEach = arrayEach;

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	var _createBaseFor = createBaseFor;

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = _createBaseFor();

	var _baseFor = baseFor;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = _freeGlobal || freeSelf || Function('return this')();

	var _root = root;

	/** Built-in value references. */
	var Symbol$2 = _root.Symbol;

	var _Symbol = Symbol$2;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString$1;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
	}

	var _baseIsArguments = baseIsArguments;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
	  return isObjectLike_1(value) && hasOwnProperty$2.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	var isArguments_1 = isArguments;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray$1 = Array.isArray;

	var isArray_1 = isArray$1;

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	var isBuffer_1 = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? _root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse_1;

	module.exports = isBuffer;
	});

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$2 = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER$2 : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$3 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$3;
	}

	var isLength_1 = isLength;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike_1(value) &&
	    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary;

	var _nodeUtil = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && _freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
	});

	/* Node.js helper references. */
	var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray$1 = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

	var isTypedArray_1 = isTypedArray$1;

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray_1(value),
	      isArg = !isArr && isArguments_1(value),
	      isBuff = !isArr && !isArg && isBuffer_1(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? _baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$3.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           _isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;

	  return value === proto;
	}

	var _isPrototype = isPrototype;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = _overArg(Object.keys, Object);

	var _nativeKeys = nativeKeys;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!_isPrototype(object)) {
	    return _nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$4.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag$1 = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength_1(value.length) && !isFunction_1(value);
	}

	var isArrayLike_1 = isArrayLike;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$2(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
	}

	var keys_1 = keys$2;

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && _baseFor(object, iteratee, keys_1);
	}

	var _baseForOwn = baseForOwn;

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike_1(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	var _createBaseEach = createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = _createBaseEach(_baseForOwn);

	var _baseEach = baseEach;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	var identity_1 = identity;

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity_1;
	}

	var _castFunction = castFunction;

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  var func = isArray_1(collection) ? _arrayEach : _baseEach;
	  return func(collection, _castFunction(iteratee));
	}

	var forEach_1 = forEach;

	var min$7 = Math.min,
	    max$4 = Math.max;
	/**
	 * Extend the target object from other objects.
	 * @param {object} target - Object that will be extended
	 * @param {...object} objects - Objects as sources
	 * @returns {object} Extended object
	 * @memberof module:object
	 */

	function extend(target, objects) {
	  // eslint-disable-line no-unused-vars
	  var hasOwnProp = Object.prototype.hasOwnProperty;
	  var source, prop, i, len;

	  for (i = 1, len = arguments.length; i < len; i += 1) {
	    source = arguments[i];

	    for (prop in source) {
	      if (hasOwnProp.call(source, prop)) {
	        target[prop] = source[prop];
	      }
	    }
	  }

	  return target;
	}
	/**
	 * Clamp value
	 * @param {number} value - Value
	 * @param {number} minValue - Minimum value
	 * @param {number} maxValue - Maximum value
	 * @returns {number} clamped value
	 */

	function clamp(value, minValue, maxValue) {
	  var temp;

	  if (minValue > maxValue) {
	    temp = minValue;
	    minValue = maxValue;
	    maxValue = temp;
	  }

	  return max$4(minValue, min$7(value, maxValue));
	}
	/**
	 * The last id of stamp
	 * @type {number}
	 * @private
	 */

	var lastId = 0;
	/**
	 * Assign a unique id to an object
	 * @param {object} obj - Object that will be assigned id.
	 * @returns {number} Stamped id
	 * @memberof tui.util
	 */

	function stamp(obj) {
	  if (!obj.__fe_id) {
	    lastId += 1;
	    obj.__fe_id = lastId; // eslint-disable-line camelcase
	  }

	  return obj.__fe_id;
	}
	/**
	 * Make key-value object from arguments
	 * @returns {object.<string, string>}
	 */

	function keyMirror() {
	  var obj = {};

	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  forEach_1(args, function (key) {
	    obj[key] = key;
	  });
	  return obj;
	}
	/**
	 * Make CSSText
	 * @param {Object} styleObj - Style info object
	 * @returns {string} Connected string of style
	 */

	function makeStyleText(styleObj) {
	  var styleStr = '';
	  forEach_1(styleObj, function (value, prop) {
	    styleStr += "".concat(prop, ": ").concat(value, ";");
	  });
	  return styleStr;
	}
	/**
	 * Get object's properties
	 * @param {Object} obj - object
	 * @param {Array} keys - keys
	 * @returns {Object} properties object
	 */

	function getProperties(obj, keys) {
	  var props = {};
	  var length = keys.length;
	  var i = 0;
	  var key;

	  for (i = 0; i < length; i += 1) {
	    key = keys[i];
	    props[key] = obj[key];
	  }

	  return props;
	}
	/**
	 * ParseInt simpliment
	 * @param {number} value - Value
	 * @returns {number}
	 */

	function toInteger$1(value) {
	  return parseInt(value, 10);
	}
	/**
	 * String to camelcase string
	 * @param {string} targetString - change target
	 * @returns {string}
	 * @private
	 */

	function toCamelCase(targetString) {
	  return targetString.replace(/-([a-z])/g, function ($0, $1) {
	    return $1.toUpperCase();
	  });
	}
	/**
	 * Check browser file api support
	 * @returns {boolean}
	 * @private
	 */

	function isSupportFileApi() {
	  return !!(window.File && window.FileList && window.FileReader);
	}
	/**
	 * hex to rgb
	 * @param {string} color - hex color
	 * @param {string} alpha - color alpha value
	 * @returns {string} rgb expression
	 */

	function getRgb(color, alpha) {
	  if (color.length === 4) {
	    color = "".concat(color).concat(color.slice(1, 4));
	  }

	  var r = parseInt(color.slice(1, 3), 16);
	  var g = parseInt(color.slice(3, 5), 16);
	  var b = parseInt(color.slice(5, 7), 16);
	  var a = alpha || 1;
	  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
	}
	/**
	 * Apply css resource
	 * @param {string} styleBuffer - serialized css text
	 * @param {string} tagId - style tag id
	 */

	function styleLoad(styleBuffer, tagId) {
	  var _document$getElements = document.getElementsByTagName('head'),
	      _document$getElements2 = _slicedToArray(_document$getElements, 1),
	      head = _document$getElements2[0];

	  var linkElement = document.createElement('link');
	  var styleData = encodeURIComponent(styleBuffer);

	  if (tagId) {
	    linkElement.id = tagId; // linkElement.id = 'tui-image-editor-theme-style';
	  }

	  linkElement.setAttribute('rel', 'stylesheet');
	  linkElement.setAttribute('type', 'text/css');
	  linkElement.setAttribute('href', "data:text/css;charset=UTF-8,".concat(styleData));
	  head.appendChild(linkElement);
	}
	/**
	 * Get selector
	 * @param {HTMLElement} targetElement - target element
	 * @returns {Function} selector
	 */

	function getSelector(targetElement) {
	  return function (str) {
	    return targetElement.querySelector(str);
	  };
	}
	/**
	 * Change base64 to blob
	 * @param {String} data - base64 string data
	 * @returns {Blob} Blob Data
	 */

	function base64ToBlob(data) {
	  var rImageType = /data:(image\/.+);base64,/;
	  var mimeString = '';
	  var raw, uInt8Array, i;
	  raw = data.replace(rImageType, function (header, imageType) {
	    mimeString = imageType;
	    return '';
	  });
	  raw = atob(raw);
	  var rawLength = raw.length;
	  uInt8Array = new Uint8Array(rawLength); // eslint-disable-line

	  for (i = 0; i < rawLength; i += 1) {
	    uInt8Array[i] = raw.charCodeAt(i);
	  }

	  return new Blob([uInt8Array], {
	    type: mimeString
	  });
	}

	var messages = {
	  UN_IMPLEMENTATION: 'Should implement a method: ',
	  NO_COMPONENT_NAME: 'Should set a component name'
	};
	var map = {
	  UN_IMPLEMENTATION: function UN_IMPLEMENTATION(methodName) {
	    return messages.UN_IMPLEMENTATION + methodName;
	  },
	  NO_COMPONENT_NAME: function NO_COMPONENT_NAME() {
	    return messages.NO_COMPONENT_NAME;
	  }
	};
	var errorTypes = Object.assign({}, keyMirror('UN_IMPLEMENTATION', 'NO_COMPONENT_NAME'));
	function createMessage(type) {
	  type = type.toLowerCase();
	  var func = map[type];

	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return func.apply(void 0, args);
	}

	/**
	 * Command class
	 * @class
	 * @param {{name:function, execute: function, undo: function,
	 *          executeCallback: function, undoCallback: function}} actions - Command actions
	 * @param {Array} args - passing arguments on execute, undo
	 * @ignore
	 */

	var Command =
	/*#__PURE__*/
	function () {
	  function Command(actions, args) {
	    _classCallCheck(this, Command);

	    /**
	     * command name
	     * @type {string}
	     */
	    this.name = actions.name;
	    /**
	     * arguments
	     * @type {Array}
	     */

	    this.args = args;
	    /**
	     * Execute function
	     * @type {function}
	     */

	    this.execute = actions.execute;
	    /**
	     * Undo function
	     * @type {function}
	     */

	    this.undo = actions.undo;
	    /**
	     * executeCallback
	     * @type {function}
	     */

	    this.executeCallback = actions.executeCallback || null;
	    /**
	     * undoCallback
	     * @type {function}
	     */

	    this.undoCallback = actions.undoCallback || null;
	    /**
	     * data for undo
	     * @type {Object}
	     */

	    this.undoData = {};
	  }
	  /**
	   * Execute action
	   * @param {Object.<string, Component>} compMap - Components injection
	   * @abstract
	   */


	  _createClass(Command, [{
	    key: "execute",
	    value: function execute() {
	      throw new Error(createMessage(errorTypes.UN_IMPLEMENTATION, 'execute'));
	    }
	    /**
	     * Undo action
	     * @param {Object.<string, Component>} compMap - Components injection
	     * @abstract
	     */

	  }, {
	    key: "undo",
	    value: function undo() {
	      throw new Error(createMessage(errorTypes.UN_IMPLEMENTATION, 'undo'));
	    }
	    /**
	     * Attach execute callabck
	     * @param {function} callback - Callback after execution
	     * @returns {Command} this
	     */

	  }, {
	    key: "setExecuteCallback",
	    value: function setExecuteCallback(callback) {
	      this.executeCallback = callback;
	      return this;
	    }
	    /**
	     * Attach undo callback
	     * @param {function} callback - Callback after undo
	     * @returns {Command} this
	     */

	  }, {
	    key: "setUndoCallback",
	    value: function setUndoCallback(callback) {
	      this.undoCallback = callback;
	      return this;
	    }
	  }]);

	  return Command;
	}();

	var commands$1 = {};
	/**
	 * Create a command
	 * @param {string} name - Command name
	 * @param {...*} args - Arguments for creating command
	 * @returns {Command}
	 * @ignore
	 */

	function create(name) {
	  var actions = commands$1[name];

	  if (actions) {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return new Command(actions, args);
	  }

	  return null;
	}
	/**
	 * Register a command with name as a key
	 * @param {Object} command - {name:{string}, execute: {function}, undo: {function}}
	 * @param {string} command.name - command name
	 * @param {function} command.execute - executable function
	 * @param {function} command.undo - undo function
	 * @ignore
	 */

	function register(command) {
	  commands$1[command.name] = command;
	}

	var commandFactory = /*#__PURE__*/Object.freeze({
		__proto__: null,
		create: create,
		register: register
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Constants
	 */
	/**
	 * Component names
	 * @type {Object.<string, string>}
	 */

	var componentNames = keyMirror('IMAGE_LOADER', 'CROPPER', 'FLIP', 'ROTATION', 'FREE_DRAWING', 'LINE', 'TEXT', 'ICON', 'FILTER', 'SHAPE');
	/**
	 * Command names
	 * @type {Object.<string, string>}
	 */

	var commandNames = {
	  CLEAR_OBJECTS: 'clearObjects',
	  LOAD_IMAGE: 'loadImage',
	  FLIP_IMAGE: 'flip',
	  ROTATE_IMAGE: 'rotate',
	  ADD_OBJECT: 'addObject',
	  REMOVE_OBJECT: 'removeObject',
	  APPLY_FILTER: 'applyFilter',
	  REMOVE_FILTER: 'removeFilter',
	  ADD_ICON: 'addIcon',
	  CHANGE_ICON_COLOR: 'changeIconColor',
	  ADD_SHAPE: 'addShape',
	  CHANGE_SHAPE: 'changeShape',
	  ADD_TEXT: 'addText',
	  CHANGE_TEXT: 'changeText',
	  CHANGE_TEXT_STYLE: 'changeTextStyle',
	  ADD_IMAGE_OBJECT: 'addImageObject',
	  RESIZE_CANVAS_DIMENSION: 'resizeCanvasDimension',
	  SET_OBJECT_PROPERTIES: 'setObjectProperties',
	  SET_OBJECT_POSITION: 'setObjectPosition'
	};
	/**
	 * Event names
	 * @type {Object.<string, string>}
	 */

	var eventNames = {
	  OBJECT_ACTIVATED: 'objectActivated',
	  OBJECT_MOVED: 'objectMoved',
	  OBJECT_SCALED: 'objectScaled',
	  OBJECT_CREATED: 'objectCreated',
	  TEXT_EDITING: 'textEditing',
	  TEXT_CHANGED: 'textChanged',
	  ICON_CREATE_RESIZE: 'iconCreateResize',
	  ICON_CREATE_END: 'iconCreateEnd',
	  ADD_TEXT: 'addText',
	  ADD_OBJECT: 'addObject',
	  ADD_OBJECT_AFTER: 'addObjectAfter',
	  MOUSE_DOWN: 'mousedown',
	  MOUSE_UP: 'mouseup',
	  MOUSE_MOVE: 'mousemove',
	  // UNDO/REDO Events
	  REDO_STACK_CHANGED: 'redoStackChanged',
	  UNDO_STACK_CHANGED: 'undoStackChanged',
	  SELECTION_CLEARED: 'selectionCleared',
	  SELECTION_CREATED: 'selectionCreated'
	};
	/**
	 * Editor states
	 * @type {Object.<string, string>}
	 */

	var drawingModes = keyMirror('NORMAL', 'CROPPER', 'FREE_DRAWING', 'LINE_DRAWING', 'TEXT', 'SHAPE');
	/**
	 * Shortcut key values
	 * @type {Object.<string, number>}
	 */

	var keyCodes = {
	  Z: 90,
	  Y: 89,
	  SHIFT: 16,
	  BACKSPACE: 8,
	  DEL: 46
	};
	/**
	 * Fabric object options
	 * @type {Object.<string, Object>}
	 */

	var fObjectOptions = {
	  SELECTION_STYLE: {
	    borderColor: 'red',
	    cornerColor: 'green',
	    cornerSize: 10,
	    originX: 'center',
	    originY: 'center',
	    transparentCorners: false
	  }
	};
	/**
	 * Promise reject messages
	 * @type {Object.<string, string>}
	 */

	var rejectMessages = {
	  addedObject: 'The object is already added.',
	  flip: 'The flipX and flipY setting values are not changed.',
	  invalidDrawingMode: 'This operation is not supported in the drawing mode.',
	  invalidParameters: 'Invalid parameters.',
	  isLock: 'The executing command state is locked.',
	  loadImage: 'The background image is empty.',
	  loadingImageFailed: 'Invalid image loaded.',
	  noActiveObject: 'There is no active object.',
	  noObject: 'The object is not in canvas.',
	  redo: 'The promise of redo command is reject.',
	  rotation: 'The current angle is same the old angle.',
	  undo: 'The promise of undo command is reject.',
	  unsupportedOperation: 'Unsupported operation.',
	  unsupportedType: 'Unsupported object type.'
	};
	/**
	 * Default icon menu svg path
	 * @type {Object.<string, string>}
	 */

	var defaultIconPath = {
	  'icon-arrow': 'M40 12V0l24 24-24 24V36H0V12h40z',
	  'icon-arrow-2': 'M49,32 H3 V22 h46 l-18,-18 h12 l23,23 L43,50 h-12 l18,-18  z ',
	  'icon-arrow-3': 'M43.349998,27 L17.354,53 H1.949999 l25.996,-26 L1.949999,1 h15.404 L43.349998,27  z ',
	  'icon-star': 'M35,54.557999 l-19.912001,10.468 l3.804,-22.172001 l-16.108,-15.7 l22.26,-3.236 L35,3.746 l9.956,20.172001 l22.26,3.236 l-16.108,15.7 l3.804,22.172001  z ',
	  'icon-star-2': 'M17,31.212 l-7.194,4.08 l-4.728,-6.83 l-8.234,0.524 l-1.328,-8.226 l-7.644,-3.14 l2.338,-7.992 l-5.54,-6.18 l5.54,-6.176 l-2.338,-7.994 l7.644,-3.138 l1.328,-8.226 l8.234,0.522 l4.728,-6.83 L17,-24.312 l7.194,-4.08 l4.728,6.83 l8.234,-0.522 l1.328,8.226 l7.644,3.14 l-2.338,7.992 l5.54,6.178 l-5.54,6.178 l2.338,7.992 l-7.644,3.14 l-1.328,8.226 l-8.234,-0.524 l-4.728,6.83  z ',
	  'icon-polygon': 'M3,31 L19,3 h32 l16,28 l-16,28 H19  z ',
	  'icon-location': 'M24 62C8 45.503 0 32.837 0 24 0 10.745 10.745 0 24 0s24 10.745 24 24c0 8.837-8 21.503-24 38zm0-28c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10z',
	  'icon-heart': 'M49.994999,91.349998 l-6.96,-6.333 C18.324001,62.606995 2.01,47.829002 2.01,29.690998 C2.01,14.912998 13.619999,3.299999 28.401001,3.299999 c8.349,0 16.362,5.859 21.594,12 c5.229,-6.141 13.242001,-12 21.591,-12 c14.778,0 26.390999,11.61 26.390999,26.390999 c0,18.138 -16.314001,32.916 -41.025002,55.374001 l-6.96,6.285  z ',
	  'icon-bubble': 'M44 48L34 58V48H12C5.373 48 0 42.627 0 36V12C0 5.373 5.373 0 12 0h40c6.627 0 12 5.373 12 12v24c0 6.627-5.373 12-12 12h-8z'
	};
	var defaultRotateRangeValus = {
	  realTimeEvent: true,
	  min: -360,
	  max: 360,
	  value: 0
	};
	var defaultDrawRangeValus = {
	  min: 5,
	  max: 30,
	  value: 12
	};
	var defaultShapeStrokeValus = {
	  realTimeEvent: false,
	  min: 2,
	  max: 300,
	  value: 3
	};
	var defaultTextRangeValus = {
	  realTimeEvent: true,
	  min: 10,
	  max: 100,
	  value: 50
	};
	var defaultFilterRangeValus = {
	  tintOpacityRange: {
	    min: 0,
	    max: 1,
	    value: 0.7
	  },
	  removewhiteThresholdRange: {
	    min: 0,
	    max: 255,
	    value: 60
	  },
	  removewhiteDistanceRange: {
	    min: 0,
	    max: 1,
	    value: 0.2
	  },
	  gradientTransparencyRange: {
	    min: 0,
	    max: 255,
	    value: 100
	  },
	  brightnessRange: {
	    min: -1,
	    max: 1,
	    value: 0
	  },
	  noiseRange: {
	    min: 0,
	    max: 1000,
	    value: 100
	  },
	  pixelateRange: {
	    min: 2,
	    max: 20,
	    value: 4
	  },
	  colorfilterThresholeRange: {
	    min: 0,
	    max: 1,
	    value: 0.2
	  }
	};

	/** `Object#toString` result references. */
	var stringTag$1 = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag$1);
	}

	var isString_1 = isString;

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined(value) {
	  return value === undefined;
	}

	var isUndefined_1 = isUndefined;

	var R_EVENTNAME_SPLIT = /\s+/g;
	/**
	 * A unit of event handler item.
	 * @ignore
	 * @typedef {object} HandlerItem
	 * @property {function} fn - event handler
	 * @property {object} ctx - context of event handler
	 */

	/**
	 * @class
	 * @memberof tui.util
	 * @example
	 * // node, commonjs
	 * var CustomEvents = require('tui-code-snippet').CustomEvents;
	 * @example
	 * // distribution file, script
	 * <script src='path-to/tui-code-snippt.js'></script>
	 * <script>
	 * var CustomEvents = tui.util.CustomEvents;
	 * </script>
	 */

	function CustomEvents() {
	  /**
	   * @type {HandlerItem[]}
	   */
	  this.events = null;
	  /**
	   * only for checking specific context event was binded
	   * @type {object[]}
	   */

	  this.contexts = null;
	}
	/**
	 * Mixin custom events feature to specific constructor
	 * @param {function} func - constructor
	 * @example
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * var model;
	 * function Model() {
	 *     this.name = '';
	 * }
	 * CustomEvents.mixin(Model);
	 *
	 * model = new Model();
	 * model.on('change', function() { this.name = 'model'; }, this);
	 * model.fire('change');
	 * alert(model.name); // 'model';
	 */

	CustomEvents.mixin = function (func) {
	  extend(func.prototype, CustomEvents.prototype);
	};
	/**
	 * Get HandlerItem object
	 * @param {function} handler - handler function
	 * @param {object} [context] - context for handler
	 * @returns {HandlerItem} HandlerItem object
	 * @private
	 */


	CustomEvents.prototype._getHandlerItem = function (handler, context) {
	  var item = {
	    handler: handler
	  };

	  if (context) {
	    item.context = context;
	  }

	  return item;
	};
	/**
	 * Get event object safely
	 * @param {string} [eventName] - create sub event map if not exist.
	 * @returns {(object|array)} event object. if you supplied `eventName`
	 *  parameter then make new array and return it
	 * @private
	 */


	CustomEvents.prototype._safeEvent = function (eventName) {
	  var events = this.events;
	  var byName;

	  if (!events) {
	    events = this.events = {};
	  }

	  if (eventName) {
	    byName = events[eventName];

	    if (!byName) {
	      byName = [];
	      events[eventName] = byName;
	    }

	    events = byName;
	  }

	  return events;
	};
	/**
	 * Get context array safely
	 * @returns {array} context array
	 * @private
	 */


	CustomEvents.prototype._safeContext = function () {
	  var context = this.contexts;

	  if (!context) {
	    context = this.contexts = [];
	  }

	  return context;
	};
	/**
	 * Get index of context
	 * @param {object} ctx - context that used for bind custom event
	 * @returns {number} index of context
	 * @private
	 */


	CustomEvents.prototype._indexOfContext = function (ctx) {
	  var context = this._safeContext();

	  var index = 0;

	  while (context[index]) {
	    if (ctx === context[index][0]) {
	      return index;
	    }

	    index += 1;
	  }

	  return -1;
	};
	/**
	 * Memorize supplied context for recognize supplied object is context or
	 *  name: handler pair object when off()
	 * @param {object} ctx - context object to memorize
	 * @private
	 */


	CustomEvents.prototype._memorizeContext = function (ctx) {
	  var context, index;

	  if (isUndefined_1(ctx)) {
	    return;
	  }

	  context = this._safeContext();
	  index = this._indexOfContext(ctx);

	  if (index > -1) {
	    context[index][1] += 1;
	  } else {
	    context.push([ctx, 1]);
	  }
	};
	/**
	 * Forget supplied context object
	 * @param {object} ctx - context object to forget
	 * @private
	 */


	CustomEvents.prototype._forgetContext = function (ctx) {
	  var context, contextIndex;

	  if (isUndefined_1(ctx)) {
	    return;
	  }

	  context = this._safeContext();
	  contextIndex = this._indexOfContext(ctx);

	  if (contextIndex > -1) {
	    context[contextIndex][1] -= 1;

	    if (context[contextIndex][1] <= 0) {
	      context.splice(contextIndex, 1);
	    }
	  }
	};
	/**
	 * Bind event handler
	 * @param {(string|{name:string, handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {(function|object)} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 * @private
	 */


	CustomEvents.prototype._bindEvent = function (eventName, handler, context) {
	  var events = this._safeEvent(eventName);

	  this._memorizeContext(context);

	  events.push(this._getHandlerItem(handler, context));
	};
	/**
	 * Bind event handlers
	 * @param {(string|{name:string, handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {(function|object)} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * // # 2.1 Basic Usage
	 * CustomEvents.on('onload', handler);
	 *
	 * // # 2.2 With context
	 * CustomEvents.on('onload', handler, myObj);
	 *
	 * // # 2.3 Bind by object that name, handler pairs
	 * CustomEvents.on({
	 *     'play': handler,
	 *     'pause': handler2
	 * });
	 *
	 * // # 2.4 Bind by object that name, handler pairs with context object
	 * CustomEvents.on({
	 *     'play': handler
	 * }, myObj);
	 */


	CustomEvents.prototype.on = function (eventName, handler, context) {
	  var self = this;

	  if (isString_1(eventName)) {
	    // [syntax 1, 2]
	    eventName = eventName.split(R_EVENTNAME_SPLIT);
	    forEach_1(eventName, function (name) {
	      self._bindEvent(name, handler, context);
	    });
	  } else if (isObject_1(eventName)) {
	    // [syntax 3, 4]
	    context = handler;
	    forEach_1(eventName, function (func, name) {
	      self.on(name, func, context);
	    });
	  }
	};
	/**
	 * Bind one-shot event handlers
	 * @param {(string|{name:string,handler:function})} eventName - custom
	 *  event name or an object {eventName: handler}
	 * @param {function|object} [handler] - handler function or context
	 * @param {object} [context] - context for binding
	 */


	CustomEvents.prototype.once = function (eventName, handler, context) {
	  var self = this;

	  if (isObject_1(eventName)) {
	    context = handler;
	    forEach_1(eventName, function (func, name) {
	      self.once(name, func, context);
	    });
	    return;
	  }

	  function onceHandler() {
	    // eslint-disable-line require-jsdoc
	    handler.apply(context, arguments);
	    self.off(eventName, onceHandler, context);
	  }

	  this.on(eventName, onceHandler, context);
	};
	/**
	 * Splice supplied array by callback result
	 * @param {array} arr - array to splice
	 * @param {function} predicate - function return boolean
	 * @private
	 */


	CustomEvents.prototype._spliceMatches = function (arr, predicate) {
	  var i = 0;
	  var len;

	  if (!type.isArray(arr)) {
	    return;
	  }

	  for (len = arr.length; i < len; i += 1) {
	    if (predicate(arr[i]) === true) {
	      arr.splice(i, 1);
	      len -= 1;
	      i -= 1;
	    }
	  }
	};
	/**
	 * Get matcher for unbind specific handler events
	 * @param {function} handler - handler function
	 * @returns {function} handler matcher
	 * @private
	 */


	CustomEvents.prototype._matchHandler = function (handler) {
	  var self = this;
	  return function (item) {
	    var needRemove = handler === item.handler;

	    if (needRemove) {
	      self._forgetContext(item.context);
	    }

	    return needRemove;
	  };
	};
	/**
	 * Get matcher for unbind specific context events
	 * @param {object} context - context
	 * @returns {function} object matcher
	 * @private
	 */


	CustomEvents.prototype._matchContext = function (context) {
	  var self = this;
	  return function (item) {
	    var needRemove = context === item.context;

	    if (needRemove) {
	      self._forgetContext(item.context);
	    }

	    return needRemove;
	  };
	};
	/**
	 * Get matcher for unbind specific hander, context pair events
	 * @param {function} handler - handler function
	 * @param {object} context - context
	 * @returns {function} handler, context matcher
	 * @private
	 */


	CustomEvents.prototype._matchHandlerAndContext = function (handler, context) {
	  var self = this;
	  return function (item) {
	    var matchHandler = handler === item.handler;
	    var matchContext = context === item.context;
	    var needRemove = matchHandler && matchContext;

	    if (needRemove) {
	      self._forgetContext(item.context);
	    }

	    return needRemove;
	  };
	};
	/**
	 * Unbind event by event name
	 * @param {string} eventName - custom event name to unbind
	 * @param {function} [handler] - handler function
	 * @private
	 */


	CustomEvents.prototype._offByEventName = function (eventName, handler) {
	  var self = this;
	  var forEach = forEachArray;
	  var andByHandler = isFunction_1(handler);

	  var matchHandler = self._matchHandler(handler);

	  eventName = eventName.split(R_EVENTNAME_SPLIT);
	  forEach(eventName, function (name) {
	    var handlerItems = self._safeEvent(name);

	    if (andByHandler) {
	      self._spliceMatches(handlerItems, matchHandler);
	    } else {
	      forEach(handlerItems, function (item) {
	        self._forgetContext(item.context);
	      });
	      self.events[name] = [];
	    }
	  });
	};
	/**
	 * Unbind event by handler function
	 * @param {function} handler - handler function
	 * @private
	 */


	CustomEvents.prototype._offByHandler = function (handler) {
	  var self = this;

	  var matchHandler = this._matchHandler(handler);

	  forEach_1(this._safeEvent(), function (handlerItems) {
	    self._spliceMatches(handlerItems, matchHandler);
	  });
	};
	/**
	 * Unbind event by object(name: handler pair object or context object)
	 * @param {object} obj - context or {name: handler} pair object
	 * @param {function} handler - handler function
	 * @private
	 */


	CustomEvents.prototype._offByObject = function (obj, handler) {
	  var self = this;
	  var matchFunc;

	  if (this._indexOfContext(obj) < 0) {
	    forEach_1(obj, function (func, name) {
	      self.off(name, func);
	    });
	  } else if (isString_1(handler)) {
	    matchFunc = this._matchContext(obj);

	    self._spliceMatches(this._safeEvent(handler), matchFunc);
	  } else if (isFunction_1(handler)) {
	    matchFunc = this._matchHandlerAndContext(handler, obj);
	    forEach_1(this._safeEvent(), function (handlerItems) {
	      self._spliceMatches(handlerItems, matchFunc);
	    });
	  } else {
	    matchFunc = this._matchContext(obj);
	    forEach_1(this._safeEvent(), function (handlerItems) {
	      self._spliceMatches(handlerItems, matchFunc);
	    });
	  }
	};
	/**
	 * Unbind custom events
	 * @param {(string|object|function)} eventName - event name or context or
	 *  {name: handler} pair object or handler function
	 * @param {(function)} handler - handler function
	 * @example
	 * //-- #1. Get Module --//
	 * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs
	 * var CustomEvents = tui.util.CustomEvents; // distribution file
	 *
	 * //-- #2. Use property --//
	 * // # 2.1 off by event name
	 * CustomEvents.off('onload');
	 *
	 * // # 2.2 off by event name and handler
	 * CustomEvents.off('play', handler);
	 *
	 * // # 2.3 off by handler
	 * CustomEvents.off(handler);
	 *
	 * // # 2.4 off by context
	 * CustomEvents.off(myObj);
	 *
	 * // # 2.5 off by context and handler
	 * CustomEvents.off(myObj, handler);
	 *
	 * // # 2.6 off by context and event name
	 * CustomEvents.off(myObj, 'onload');
	 *
	 * // # 2.7 off by an Object.<string, function> that is {eventName: handler}
	 * CustomEvents.off({
	 *   'play': handler,
	 *   'pause': handler2
	 * });
	 *
	 * // # 2.8 off the all events
	 * CustomEvents.off();
	 */


	CustomEvents.prototype.off = function (eventName, handler) {
	  if (isString_1(eventName)) {
	    // [syntax 1, 2]
	    this._offByEventName(eventName, handler);
	  } else if (!arguments.length) {
	    // [syntax 8]
	    this.events = {};
	    this.contexts = [];
	  } else if (isFunction_1(eventName)) {
	    // [syntax 3]
	    this._offByHandler(eventName);
	  } else if (isObject_1(eventName)) {
	    // [syntax 4, 5, 6]
	    this._offByObject(eventName, handler);
	  }
	};
	/**
	 * Fire custom event
	 * @param {string} eventName - name of custom event
	 */


	CustomEvents.prototype.fire = function (eventName) {
	  // eslint-disable-line
	  this.invoke.apply(this, arguments);
	};
	/**
	 * Fire a event and returns the result of operation 'boolean AND' with all
	 *  listener's results.
	 *
	 * So, It is different from {@link CustomEvents#fire}.
	 *
	 * In service code, use this as a before event in component level usually
	 *  for notifying that the event is cancelable.
	 * @param {string} eventName - Custom event name
	 * @param {...*} data - Data for event
	 * @returns {boolean} The result of operation 'boolean AND'
	 * @example
	 * var map = new Map();
	 * map.on({
	 *     'beforeZoom': function() {
	 *         // It should cancel the 'zoom' event by some conditions.
	 *         if (that.disabled && this.getState()) {
	 *             return false;
	 *         }
	 *         return true;
	 *     }
	 * });
	 *
	 * if (this.invoke('beforeZoom')) {    // check the result of 'beforeZoom'
	 *     // if true,
	 *     // doSomething
	 * }
	 */


	CustomEvents.prototype.invoke = function (eventName) {
	  var events, args, index, item;

	  if (!this.hasListener(eventName)) {
	    return true;
	  }

	  events = this._safeEvent(eventName);
	  args = Array.prototype.slice.call(arguments, 1);
	  index = 0;

	  while (events[index]) {
	    item = events[index];

	    if (item.handler.apply(item.context, args) === false) {
	      return false;
	    }

	    index += 1;
	  }

	  return true;
	};
	/**
	 * Return whether at least one of the handlers is registered in the given
	 *  event name.
	 * @param {string} eventName - Custom event name
	 * @returns {boolean} Is there at least one handler in event name?
	 */


	CustomEvents.prototype.hasListener = function (eventName) {
	  return this.getListenerLength(eventName) > 0;
	};
	/**
	 * Return a count of events registered.
	 * @param {string} eventName - Custom event name
	 * @returns {number} number of event
	 */


	CustomEvents.prototype.getListenerLength = function (eventName) {
	  var events = this._safeEvent(eventName);

	  return events.length;
	};

	/**
	 * Invoker
	 * @class
	 * @ignore
	 */

	var Invoker =
	/*#__PURE__*/
	function () {
	  function Invoker() {
	    _classCallCheck(this, Invoker);

	    /**
	     * Undo stack
	     * @type {Array.<Command>}
	     * @private
	     */
	    this._undoStack = [];
	    /**
	     * Redo stack
	     * @type {Array.<Command>}
	     * @private
	     */

	    this._redoStack = [];
	    /**
	     * Lock-flag for executing command
	     * @type {boolean}
	     * @private
	     */

	    this._isLocked = false;
	  }
	  /**
	   * Invoke command execution
	   * @param {Command} command - Command
	   * @returns {Promise}
	   * @private
	   */


	  _createClass(Invoker, [{
	    key: "_invokeExecution",
	    value: function _invokeExecution(command) {
	      var _this = this;

	      console.log('command', command);
	      this.lock();
	      var args = command.args;

	      if (!args) {
	        args = [];
	      }

	      return command.execute.apply(command, _toConsumableArray(args)).then(function (value) {
	        if (!_this._isSilent) {
	          _this.pushUndoStack(command);
	        }

	        _this.unlock();

	        if (isFunction_1(command.executeCallback)) {
	          command.executeCallback(value);
	        }

	        return value;
	      })['catch'](function (message) {
	        _this.unlock();

	        return Promise.reject(message);
	      });
	    }
	    /**
	     * Invoke command undo
	     * @param {Command} command - Command
	     * @returns {Promise}
	     * @private
	     */

	  }, {
	    key: "_invokeUndo",
	    value: function _invokeUndo(command) {
	      var _this2 = this;

	      this.lock();
	      var args = command.args;

	      if (!args) {
	        args = [];
	      }

	      return command.undo.apply(command, _toConsumableArray(args)).then(function (value) {
	        _this2.pushRedoStack(command);

	        _this2.unlock();

	        if (isFunction_1(command.undoCallback)) {
	          command.undoCallback(value);
	        }

	        return value;
	      })['catch'](function (message) {
	        _this2.unlock();

	        return Promise.reject(message);
	      });
	    }
	    /**
	     * fire REDO_STACK_CHANGED event
	     * @private
	     */

	  }, {
	    key: "_fireRedoStackChanged",
	    value: function _fireRedoStackChanged() {
	      this.fire(eventNames.REDO_STACK_CHANGED, this._redoStack.length);
	    }
	    /**
	     * fire UNDO_STACK_CHANGED event
	     * @private
	     */

	  }, {
	    key: "_fireUndoStackChanged",
	    value: function _fireUndoStackChanged() {
	      this.fire(eventNames.UNDO_STACK_CHANGED, this._undoStack.length);
	    }
	    /**
	     * Lock this invoker
	     */

	  }, {
	    key: "lock",
	    value: function lock() {
	      this._isLocked = true;
	    }
	    /**
	     * Unlock this invoker
	     */

	  }, {
	    key: "unlock",
	    value: function unlock() {
	      this._isLocked = false;
	    }
	  }, {
	    key: "executeSilent",
	    value: function () {
	      var _executeSilent = _asyncToGenerator(
	      /*#__PURE__*/
	      regeneratorRuntime.mark(function _callee() {
	        var _len,
	            args,
	            _key,
	            _args = arguments;

	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                this._isSilent = true;

	                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	                  args[_key] = _args[_key];
	                }

	                _context.next = 4;
	                return this.execute.apply(this, args.concat([this._isSilent]));

	              case 4:
	                this._isSilent = false;

	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function executeSilent() {
	        return _executeSilent.apply(this, arguments);
	      }

	      return executeSilent;
	    }()
	    /**
	     * Invoke command
	     * Store the command to the undoStack
	     * Clear the redoStack
	     * @param {String} commandName - Command name
	     * @param {...*} args - Arguments for creating command
	     * @returns {Promise}
	     */

	  }, {
	    key: "execute",
	    value: function () {
	      var _execute = _asyncToGenerator(
	      /*#__PURE__*/
	      regeneratorRuntime.mark(function _callee2() {
	        var _len2,
	            args,
	            _key2,
	            command,
	            value,
	            _args2 = arguments;

	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                if (!this._isLocked) {
	                  _context2.next = 2;
	                  break;
	                }

	                return _context2.abrupt("return", Promise.reject(rejectMessages.isLock));

	              case 2:
	                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                  args[_key2] = _args2[_key2];
	                }

	                command = args[0];

	                if (isString_1(command)) {
	                  command = create.apply(commandFactory, args);
	                }

	                _context2.next = 7;
	                return this._invokeExecution(command);

	              case 7:
	                value = _context2.sent;
	                this.clearRedoStack();
	                return _context2.abrupt("return", value);

	              case 10:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function execute() {
	        return _execute.apply(this, arguments);
	      }

	      return execute;
	    }()
	    /**
	     * Undo command
	     * @returns {Promise}
	     */

	  }, {
	    key: "undo",
	    value: function undo() {
	      var command = this._undoStack.pop();

	      var promise;
	      var message = '';

	      if (command && this._isLocked) {
	        this.pushUndoStack(command, true);
	        command = null;
	      }

	      if (command) {
	        if (this.isEmptyUndoStack()) {
	          this._fireUndoStackChanged();
	        }

	        promise = this._invokeUndo(command);
	      } else {
	        message = rejectMessages.undo;

	        if (this._isLocked) {
	          message = "".concat(message, " Because ").concat(rejectMessages.isLock);
	        }

	        promise = Promise.reject(message);
	      }

	      return promise;
	    }
	    /**
	     * Redo command
	     * @returns {Promise}
	     */

	  }, {
	    key: "redo",
	    value: function redo() {
	      var command = this._redoStack.pop();

	      var promise;
	      var message = '';

	      if (command && this._isLocked) {
	        this.pushRedoStack(command, true);
	        command = null;
	      }

	      if (command) {
	        if (this.isEmptyRedoStack()) {
	          this._fireRedoStackChanged();
	        }

	        promise = this._invokeExecution(command);
	      } else {
	        message = rejectMessages.redo;

	        if (this._isLocked) {
	          message = "".concat(message, " Because ").concat(rejectMessages.isLock);
	        }

	        promise = Promise.reject(message);
	      }

	      return promise;
	    }
	    /**
	     * Push undo stack
	     * @param {Command} command - command
	     * @param {boolean} [isSilent] - Fire event or not
	     */

	  }, {
	    key: "pushUndoStack",
	    value: function pushUndoStack(command, isSilent) {
	      this._undoStack.push(command);

	      if (!isSilent) {
	        this._fireUndoStackChanged();
	      }
	    }
	    /**
	     * Push redo stack
	     * @param {Command} command - command
	     * @param {boolean} [isSilent] - Fire event or not
	     */

	  }, {
	    key: "pushRedoStack",
	    value: function pushRedoStack(command, isSilent) {
	      this._redoStack.push(command);

	      if (!isSilent) {
	        this._fireRedoStackChanged();
	      }
	    }
	    /**
	     * Return whether the redoStack is empty
	     * @returns {boolean}
	     */

	  }, {
	    key: "isEmptyRedoStack",
	    value: function isEmptyRedoStack() {
	      return this._redoStack.length === 0;
	    }
	    /**
	     * Return whether the undoStack is empty
	     * @returns {boolean}
	     */

	  }, {
	    key: "isEmptyUndoStack",
	    value: function isEmptyUndoStack() {
	      return this._undoStack.length === 0;
	    }
	    /**
	     * Clear undoStack
	     */

	  }, {
	    key: "clearUndoStack",
	    value: function clearUndoStack() {
	      if (!this.isEmptyUndoStack()) {
	        this._undoStack = [];

	        this._fireUndoStackChanged();
	      }
	    }
	    /**
	     * Clear redoStack
	     */

	  }, {
	    key: "clearRedoStack",
	    value: function clearRedoStack() {
	      if (!this.isEmptyRedoStack()) {
	        this._redoStack = [];

	        this._fireRedoStackChanged();
	      }
	    }
	  }]);

	  return Invoker;
	}();
	CustomEvents.mixin(Invoker);

	var $forEach$1 = arrayIteration.forEach;


	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var $map$1 = arrayIteration.map;


	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('map') }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var trim$1 = stringTrim.trim;


	var nativeParseFloat = global_1.parseFloat;
	var FORCED$6 = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	var _parseFloat = FORCED$6 ? function parseFloat(string) {
	  var trimmedString = trim$1(String(string));
	  var result = nativeParseFloat(trimmedString);
	  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
	} : nativeParseFloat;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	_export({ global: true, forced: parseFloat != _parseFloat }, {
	  parseFloat: _parseFloat
	});

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype$1 && CollectionPrototype$1.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype$1, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype$1.forEach = arrayForEach;
	  }
	}

	var mainContainer = (function (_ref) {
	  var locale = _ref.locale,
	      biImage = _ref.biImage,
	      commonStyle = _ref.commonStyle,
	      headerStyle = _ref.headerStyle,
	      loadButtonStyle = _ref.loadButtonStyle,
	      downloadButtonStyle = _ref.downloadButtonStyle,
	      submenuStyle = _ref.submenuStyle;
	  return "\n    <div class=\"tui-image-editor-main-container\" style=\"".concat(commonStyle, "\">\n        <div class=\"tui-image-editor-header\" style=\"").concat(headerStyle, "\">\n            <div class=\"tui-image-editor-header-logo\">\n                <img src=\"").concat(biImage, "\" />\n            </div>\n            <div class=\"tui-image-editor-header-buttons\">\n                <button style=\"").concat(loadButtonStyle, "\">\n                    ").concat(locale.localize('Load'), "\n                    <input type=\"file\" class=\"tui-image-editor-load-btn\" />\n                </button>\n                <button class=\"tui-image-editor-download-btn\" style=\"").concat(downloadButtonStyle, "\">\n                    ").concat(locale.localize('Download'), "\n                </button>\n            </div>\n        </div>\n        <div class=\"tui-image-editor-main\">\n            <div class=\"tui-image-editor-submenu\">\n                <div class=\"tui-image-editor-submenu-style\" style=\"").concat(submenuStyle, "\"></div>\n            </div>\n            <div class=\"tui-image-editor-wrap\">\n                <div class=\"tui-image-editor-size-wrap\">\n                    <div class=\"tui-image-editor-align-wrap\">\n                        <div class=\"tui-image-editor\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n");
	});

	var controls = (function (_ref) {
	  var locale = _ref.locale,
	      biImage = _ref.biImage,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      hover = _ref$iconStyle.hover,
	      disabled = _ref$iconStyle.disabled,
	      loadButtonStyle = _ref.loadButtonStyle,
	      downloadButtonStyle = _ref.downloadButtonStyle;
	  return "\n    <div class=\"tui-image-editor-controls\">\n        <div class=\"tui-image-editor-controls-logo\">\n            <img src=\"".concat(biImage, "\" />\n        </div>\n        <ul class=\"tui-image-editor-menu\">\n            <li id=\"tie-btn-undo\" class=\"tui-image-editor-item\" title=\"").concat(locale.localize('Undo'), "\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-undo\" class=\"enabled\"/>\n                    <use xlink:href=\"").concat(disabled.path, "#").concat(disabled.name, "-ic-undo\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-undo\" class=\"hover\"/>\n                </svg>\n            </li>\n            <li id=\"tie-btn-redo\" class=\"tui-image-editor-item\" title=\"").concat(locale.localize('Redo'), "\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-redo\" class=\"enabled\"/>\n                    <use xlink:href=\"").concat(disabled.path, "#").concat(disabled.name, "-ic-redo\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-redo\" class=\"hover\"/>\n                </svg>\n            </li>\n            <li id=\"tie-btn-reset\" class=\"tui-image-editor-item\" title=\"").concat(locale.localize('Reset'), "\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-reset\" class=\"enabled\"/>\n                    <use xlink:href=\"").concat(disabled.path, "#").concat(disabled.name, "-ic-reset\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-reset\" class=\"hover\"/>\n                </svg>\n            </li>\n            <li class=\"tui-image-editor-item\">\n                <div class=\"tui-image-editor-icpartition\"></div>\n            </li>\n            <li id=\"tie-btn-delete\" class=\"tui-image-editor-item\" title=\"").concat(locale.localize('Delete'), "\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-delete\" class=\"enabled\"/>\n                    <use xlink:href=\"").concat(disabled.path, "#").concat(disabled.name, "-ic-delete\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-delete\" class=\"hover\"/>\n                </svg>\n            </li>\n            <li id=\"tie-btn-delete-all\" class=\"tui-image-editor-item\" title=\"").concat(locale.localize('Delete-all'), "\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-delete-all\" class=\"enabled\"/>\n                    <use xlink:href=\"").concat(disabled.path, "#").concat(disabled.name, "-ic-delete-all\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-delete-all\" class=\"hover\"/>\n                </svg>\n            </li>\n            <li class=\"tui-image-editor-item\">\n                <div class=\"tui-image-editor-icpartition\"></div>\n            </li>\n        </ul>\n\n        <div class=\"tui-image-editor-controls-buttons\">\n            <button style=\"").concat(loadButtonStyle, "\">\n                ").concat(locale.localize('Load'), "\n                <input type=\"file\" class=\"tui-image-editor-load-btn\" />\n            </button>\n            <button class=\"tui-image-editor-download-btn\" style=\"").concat(downloadButtonStyle, "\">\n                ").concat(locale.localize('Download'), "\n            </button>\n        </div>\n    </div>\n");
	});

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible(this);
	      var matcher = regexp == undefined ? undefined : regexp[MATCH];
	      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	    function (regexp) {
	      var res = maybeCallNative(nativeMatch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      if (!rx.global) return regexpExecAbstract(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = String(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _nativeKeysIn = nativeKeysIn;

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject_1(object)) {
	    return _nativeKeysIn(object);
	  }
	  var isProto = _isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$5.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeysIn = baseKeysIn;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
	}

	var keysIn_1 = keysIn;

	/**
	 * Iterates over own and inherited enumerable string keyed properties of an
	 * object and invokes `iteratee` for each property. The iteratee is invoked
	 * with three arguments: (value, key, object). Iteratee functions may exit
	 * iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forInRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forIn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	 */
	function forIn(object, iteratee) {
	  return object == null
	    ? object
	    : _baseFor(object, _castFunction(iteratee), keysIn_1);
	}

	var forIn_1 = forIn;

	var style = function style(_ref) {
	  var subMenuLabelActive = _ref.subMenuLabelActive,
	      subMenuLabelNormal = _ref.subMenuLabelNormal,
	      subMenuRangeTitle = _ref.subMenuRangeTitle,
	      submenuPartitionVertical = _ref.submenuPartitionVertical,
	      submenuPartitionHorizontal = _ref.submenuPartitionHorizontal,
	      submenuCheckbox = _ref.submenuCheckbox,
	      submenuRangePointer = _ref.submenuRangePointer,
	      submenuRangeValue = _ref.submenuRangeValue,
	      submenuColorpickerTitle = _ref.submenuColorpickerTitle,
	      submenuColorpickerButton = _ref.submenuColorpickerButton,
	      submenuRangeBar = _ref.submenuRangeBar,
	      submenuRangeSubbar = _ref.submenuRangeSubbar,
	      submenuDisabledRangePointer = _ref.submenuDisabledRangePointer,
	      submenuDisabledRangeBar = _ref.submenuDisabledRangeBar,
	      submenuDisabledRangeSubbar = _ref.submenuDisabledRangeSubbar,
	      submenuIconSize = _ref.submenuIconSize,
	      menuIconSize = _ref.menuIconSize,
	      biSize = _ref.biSize;
	  return "\n    #tie-icon-add-button.icon-bubble .tui-image-editor-button[data-icontype=\"icon-bubble\"] label,\n    #tie-icon-add-button.icon-heart .tui-image-editor-button[data-icontype=\"icon-heart\"] label,\n    #tie-icon-add-button.icon-location .tui-image-editor-button[data-icontype=\"icon-location\"] label,\n    #tie-icon-add-button.icon-polygon .tui-image-editor-button[data-icontype=\"icon-polygon\"] label,\n    #tie-icon-add-button.icon-star .tui-image-editor-button[data-icontype=\"icon-star\"] label,\n    #tie-icon-add-button.icon-star-2 .tui-image-editor-button[data-icontype=\"icon-star-2\"] label,\n    #tie-icon-add-button.icon-arrow-3 .tui-image-editor-button[data-icontype=\"icon-arrow-3\"] label,\n    #tie-icon-add-button.icon-arrow-2 .tui-image-editor-button[data-icontype=\"icon-arrow-2\"] label,\n    #tie-icon-add-button.icon-arrow .tui-image-editor-button[data-icontype=\"icon-arrow\"] label,\n    #tie-icon-add-button.icon-bubble .tui-image-editor-button[data-icontype=\"icon-bubble\"] label,\n    #tie-draw-line-select-button.line .tui-image-editor-button.line label,\n    #tie-draw-line-select-button.free .tui-image-editor-button.free label,\n    #tie-flip-button.flipX .tui-image-editor-button.flipX label,\n    #tie-flip-button.flipY .tui-image-editor-button.flipY label,\n    #tie-flip-button.resetFlip .tui-image-editor-button.resetFlip label,\n    #tie-crop-button .tui-image-editor-button.apply.active label,\n    #tie-crop-preset-button .tui-image-editor-button.preset.active label,\n    #tie-shape-button.rect .tui-image-editor-button.rect label,\n    #tie-shape-button.circle .tui-image-editor-button.circle label,\n    #tie-shape-button.triangle .tui-image-editor-button.triangle label,\n    #tie-text-effect-button .tui-image-editor-button.active label,\n    #tie-text-align-button.left .tui-image-editor-button.left label,\n    #tie-text-align-button.center .tui-image-editor-button.center label,\n    #tie-text-align-button.right .tui-image-editor-button.right label,\n    #tie-mask-apply.apply.active .tui-image-editor-button.apply label,\n    .tui-image-editor-container .tui-image-editor-submenu .tui-image-editor-button:hover > label,\n    .tui-image-editor-container .tui-image-editor-checkbox input + label {\n        ".concat(subMenuLabelActive, "\n    }\n    .tui-image-editor-container .tui-image-editor-submenu .tui-image-editor-button > label,\n    .tui-image-editor-container .tui-image-editor-range-wrap.tui-image-editor-newline.short label {\n        ").concat(subMenuLabelNormal, "\n    }\n    .tui-image-editor-container .tui-image-editor-range-wrap label {\n        ").concat(subMenuRangeTitle, "\n    }\n    .tui-image-editor-container .tui-image-editor-partition > div {\n        ").concat(submenuPartitionVertical, "\n    }\n    .tui-image-editor-container.left .tui-image-editor-submenu .tui-image-editor-partition > div,\n    .tui-image-editor-container.right .tui-image-editor-submenu .tui-image-editor-partition > div {\n        ").concat(submenuPartitionHorizontal, "\n    }\n    .tui-image-editor-container .tui-image-editor-checkbox input + label:before {\n        ").concat(submenuCheckbox, "\n    }\n    .tui-image-editor-container .tui-image-editor-checkbox input:checked + label:before {\n        border: 0;\n    }\n    .tui-image-editor-container .tui-image-editor-virtual-range-pointer {\n        ").concat(submenuRangePointer, "\n    }\n    .tui-image-editor-container .tui-image-editor-virtual-range-bar {\n        ").concat(submenuRangeBar, "\n    }\n    .tui-image-editor-container .tui-image-editor-virtual-range-subbar {\n        ").concat(submenuRangeSubbar, "\n    }\n    .tui-image-editor-container .tui-image-editor-disabled .tui-image-editor-virtual-range-pointer {\n        ").concat(submenuDisabledRangePointer, "\n    }\n    .tui-image-editor-container .tui-image-editor-disabled .tui-image-editor-virtual-range-subbar {\n        ").concat(submenuDisabledRangeSubbar, "\n    }\n    .tui-image-editor-container .tui-image-editor-disabled .tui-image-editor-virtual-range-bar {\n        ").concat(submenuDisabledRangeBar, "\n    }\n    .tui-image-editor-container .tui-image-editor-range-value {\n        ").concat(submenuRangeValue, "\n    }\n    .tui-image-editor-container .tui-image-editor-submenu .tui-image-editor-button .color-picker-value + label {\n        ").concat(submenuColorpickerTitle, "\n    }\n    .tui-image-editor-container .tui-image-editor-submenu .tui-image-editor-button .color-picker-value {\n        ").concat(submenuColorpickerButton, "\n    }\n    .tui-image-editor-container .svg_ic-menu {\n        ").concat(menuIconSize, "\n    }\n    .tui-image-editor-container .svg_ic-submenu {\n        ").concat(submenuIconSize, "\n    }\n    .tui-image-editor-container .tui-image-editor-controls-logo > img,\n    .tui-image-editor-container .tui-image-editor-header-logo > img {\n        ").concat(biSize, "\n    }\n\n");
	};

	/**
	 * @fileoverview The standard theme
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 */

	/**
	 * Full configuration for theme.<br>
	 * @typedef {object} themeConfig
	 * @property {string} common.bi.image - Brand icon image
	 * @property {string} common.bisize.width - Icon image width
	 * @property {string} common.bisize.height - Icon Image Height
	 * @property {string} common.backgroundImage - Background image
	 * @property {string} common.backgroundColor - Background color
	 * @property {string} common.border - Full area border style
	 * @property {string} header.backgroundImage - header area background
	 * @property {string} header.backgroundColor - header area background color
	 * @property {string} header.border - header area border style
	 * @property {string} loadButton.backgroundColor - load button background color
	 * @property {string} loadButton.border - load button border style
	 * @property {string} loadButton.color - load button foreground color
	 * @property {string} loadButton.fontFamily - load button font type
	 * @property {string} loadButton.fontSize - load button font size
	 * @property {string} downloadButton.backgroundColor - download button background color
	 * @property {string} downloadButton.border - download button border style
	 * @property {string} downloadButton.color - download button foreground color
	 * @property {string} downloadButton.fontFamily - download button font type
	 * @property {string} downloadButton.fontSize - download button font size
	 * @property {string} menu.normalIcon.path - Menu default icon svg bundle file path
	 * @property {string} menu.normalIcon.name - Menu default icon svg bundle name
	 * @property {string} menu.activeIcon.path - Menu active icon svg bundle file path
	 * @property {string} menu.activeIcon.name - Menu active icon svg bundle name
	 * @property {string} menu.iconSize.width - Menu icon Size Width
	 * @property {string} menu.iconSize.height - Menu Icon Size Height
	 * @property {string} submenu.backgroundColor - Sub-menu area background color
	 * @property {string} submenu.partition.color - Submenu partition line color
	 * @property {string} submenu.normalIcon.path - Submenu default icon svg bundle file path
	 * @property {string} submenu.normalIcon.name - Submenu default icon svg bundle name
	 * @property {string} submenu.activeIcon.path - Submenu active icon svg bundle file path
	 * @property {string} submenu.activeIcon.name - Submenu active icon svg bundle name
	 * @property {string} submenu.iconSize.width - Submenu icon Size Width
	 * @property {string} submenu.iconSize.height - Submenu Icon Size Height
	 * @property {string} submenu.normalLabel.color - Submenu default label color
	 * @property {string} submenu.normalLabel.fontWeight - Sub Menu Default Label Font Thickness
	 * @property {string} submenu.activeLabel.color - Submenu active label color
	 * @property {string} submenu.activeLabel.fontWeight - Submenu active label Font thickness
	 * @property {string} checkbox.border - Checkbox border style
	 * @property {string} checkbox.backgroundColor - Checkbox background color
	 * @property {string} range.pointer.color - range control pointer color
	 * @property {string} range.bar.color - range control bar color
	 * @property {string} range.subbar.color - range control subbar color
	 * @property {string} range.value.color - range number box font color
	 * @property {string} range.value.fontWeight - range number box font thickness
	 * @property {string} range.value.fontSize - range number box font size
	 * @property {string} range.value.border - range number box border style
	 * @property {string} range.value.backgroundColor - range number box background color
	 * @property {string} range.title.color - range title font color
	 * @property {string} range.title.fontWeight - range title font weight
	 * @property {string} colorpicker.button.border - colorpicker button border style
	 * @property {string} colorpicker.title.color - colorpicker button title font color
	 * @example
	 // default keys and styles
	 var customTheme = {
	    'common.bi.image': 'https://uicdn.toast.com/toastui/img/tui-image-editor-bi.png',
	    'common.bisize.width': '251px',
	    'common.bisize.height': '21px',
	    'common.backgroundImage': 'none',
	    'common.backgroundColor': '#1e1e1e',
	    'common.border': '0px',

	    // header
	    'header.backgroundImage': 'none',
	    'header.backgroundColor': 'transparent',
	    'header.border': '0px',

	    // load button
	    'loadButton.backgroundColor': '#fff',
	    'loadButton.border': '1px solid #ddd',
	    'loadButton.color': '#222',
	    'loadButton.fontFamily': 'NotoSans, sans-serif',
	    'loadButton.fontSize': '12px',

	    // download button
	    'downloadButton.backgroundColor': '#fdba3b',
	    'downloadButton.border': '1px solid #fdba3b',
	    'downloadButton.color': '#fff',
	    'downloadButton.fontFamily': 'NotoSans, sans-serif',
	    'downloadButton.fontSize': '12px',

	    // main icons
	    'menu.normalIcon.path': '/svg/icon-b.svg',
	    'menu.normalIcon.name': 'icon-b',
	    'menu.activeIcon.path': '/svg/icon-a.svg',
	    'menu.activeIcon.name': 'icon-a',
	    'menu.iconSize.width': '24px',
	    'menu.iconSize.height': '24px',

	    // submenu primary color
	    'submenu.backgroundColor': '#1e1e1e',
	    'submenu.partition.color': '#858585',

	    // submenu icons
	    'submenu.normalIcon.path': '/svg/icon-a.svg',
	    'submenu.normalIcon.name': 'icon-a',
	    'submenu.activeIcon.path': '/svg/icon-c.svg',
	    'submenu.activeIcon.name': 'icon-c',
	    'submenu.iconSize.width': '32px',
	    'submenu.iconSize.height': '32px',

	    // submenu labels
	    'submenu.normalLabel.color': '#858585',
	    'submenu.normalLabel.fontWeight': 'lighter',
	    'submenu.activeLabel.color': '#fff',
	    'submenu.activeLabel.fontWeight': 'lighter',

	    // checkbox style
	    'checkbox.border': '1px solid #ccc',
	    'checkbox.backgroundColor': '#fff',

	    // rango style
	    'range.pointer.color': '#fff',
	    'range.bar.color': '#666',
	    'range.subbar.color': '#d1d1d1',
	    'range.value.color': '#fff',
	    'range.value.fontWeight': 'lighter',
	    'range.value.fontSize': '11px',
	    'range.value.border': '1px solid #353535',
	    'range.value.backgroundColor': '#151515',
	    'range.title.color': '#fff',
	    'range.title.fontWeight': 'lighter',

	    // colorpicker style
	    'colorpicker.button.border': '1px solid #1e1e1e',
	    'colorpicker.title.color': '#fff'
	};
	 */
	var standardTheme = {
	  'common.bi.image': 'https://uicdn.toast.com/toastui/img/tui-image-editor-bi.png',
	  'common.bisize.width': '251px',
	  'common.bisize.height': '21px',
	  'common.backgroundImage': 'none',
	  'common.backgroundColor': '#1e1e1e',
	  'common.border': '0px',
	  // header
	  'header.backgroundImage': 'none',
	  'header.backgroundColor': 'transparent',
	  'header.border': '0px',
	  // load button
	  'loadButton.backgroundColor': '#fff',
	  'loadButton.border': '1px solid #ddd',
	  'loadButton.color': '#222',
	  'loadButton.fontFamily': '\'Noto Sans\', sans-serif',
	  'loadButton.fontSize': '12px',
	  // download button
	  'downloadButton.backgroundColor': '#fdba3b',
	  'downloadButton.border': '1px solid #fdba3b',
	  'downloadButton.color': '#fff',
	  'downloadButton.fontFamily': '\'Noto Sans\', sans-serif',
	  'downloadButton.fontSize': '12px',
	  // main icons
	  'menu.normalIcon.path': 'icon-d.svg',
	  'menu.normalIcon.name': 'icon-d',
	  'menu.activeIcon.path': 'icon-b.svg',
	  'menu.activeIcon.name': 'icon-b',
	  'menu.disabledIcon.path': 'icon-a.svg',
	  'menu.disabledIcon.name': 'icon-a',
	  'menu.hoverIcon.path': 'icon-c.svg',
	  'menu.hoverIcon.name': 'icon-c',
	  'menu.iconSize.width': '24px',
	  'menu.iconSize.height': '24px',
	  // submenu primary color
	  'submenu.backgroundColor': '#1e1e1e',
	  'submenu.partition.color': '#3c3c3c',
	  // submenu icons
	  'submenu.normalIcon.path': 'icon-d.svg',
	  'submenu.normalIcon.name': 'icon-d',
	  'submenu.activeIcon.path': 'icon-c.svg',
	  'submenu.activeIcon.name': 'icon-c',
	  'submenu.iconSize.width': '32px',
	  'submenu.iconSize.height': '32px',
	  // submenu labels
	  'submenu.normalLabel.color': '#8a8a8a',
	  'submenu.normalLabel.fontWeight': 'lighter',
	  'submenu.activeLabel.color': '#fff',
	  'submenu.activeLabel.fontWeight': 'lighter',
	  // checkbox style
	  'checkbox.border': '0px',
	  'checkbox.backgroundColor': '#fff',
	  // range style
	  'range.pointer.color': '#fff',
	  'range.bar.color': '#666',
	  'range.subbar.color': '#d1d1d1',
	  'range.disabledPointer.color': '#414141',
	  'range.disabledBar.color': '#282828',
	  'range.disabledSubbar.color': '#414141',
	  'range.value.color': '#fff',
	  'range.value.fontWeight': 'lighter',
	  'range.value.fontSize': '11px',
	  'range.value.border': '1px solid #353535',
	  'range.value.backgroundColor': '#151515',
	  'range.title.color': '#fff',
	  'range.title.fontWeight': 'lighter',
	  // colorpicker style
	  'colorpicker.button.border': '1px solid #1e1e1e',
	  'colorpicker.title.color': '#fff'
	};

	/**
	 * Theme manager
	 * @class
	 * @param {Object} customTheme - custom theme
	 * @ignore
	 */

	var Theme =
	/*#__PURE__*/
	function () {
	  function Theme(customTheme) {
	    _classCallCheck(this, Theme);

	    this.styles = this._changeToObject(Object.assign(standardTheme, customTheme));
	    styleLoad(this._styleMaker());
	  }
	  /**
	   * Get a Style cssText or StyleObject
	   * @param {string} type - style type
	   * @returns {string|object} - cssText or StyleObject
	   */


	  _createClass(Theme, [{
	    key: "getStyle",
	    value: function getStyle(type) {
	      // eslint-disable-line
	      var result = null;
	      var firstProperty = type.replace(/\..+$/, '');
	      var option = this.styles[type];

	      switch (type) {
	        case 'common.bi':
	          result = this.styles[type].image;
	          break;

	        case 'menu.icon':
	        case 'submenu.icon':
	          result = {
	            active: this.styles["".concat(firstProperty, ".activeIcon")],
	            normal: this.styles["".concat(firstProperty, ".normalIcon")],
	            hover: this.styles["".concat(firstProperty, ".hoverIcon")],
	            disabled: this.styles["".concat(firstProperty, ".disabledIcon")]
	          };
	          break;

	        case 'submenu.label':
	          result = {
	            active: this._makeCssText(this.styles["".concat(firstProperty, ".activeLabel")]),
	            normal: this._makeCssText(this.styles["".concat(firstProperty, ".normalLabel")])
	          };
	          break;

	        case 'submenu.partition':
	          result = {
	            vertical: this._makeCssText(Object.assign({}, option, {
	              borderLeft: "1px solid ".concat(option.color)
	            })),
	            horizontal: this._makeCssText(Object.assign({}, option, {
	              borderBottom: "1px solid ".concat(option.color)
	            }))
	          };
	          break;

	        case 'range.disabledPointer':
	        case 'range.disabledBar':
	        case 'range.disabledSubbar':
	        case 'range.pointer':
	        case 'range.bar':
	        case 'range.subbar':
	          option.backgroundColor = option.color;
	          result = this._makeCssText(option);
	          break;

	        default:
	          result = this._makeCssText(option);
	          break;
	      }

	      return result;
	    }
	    /**
	     * Make css resource
	     * @returns {string} - serialized css text
	     * @private
	     */

	  }, {
	    key: "_styleMaker",
	    value: function _styleMaker() {
	      var submenuLabelStyle = this.getStyle('submenu.label');
	      var submenuPartitionStyle = this.getStyle('submenu.partition');
	      return style({
	        subMenuLabelActive: submenuLabelStyle.active,
	        subMenuLabelNormal: submenuLabelStyle.normal,
	        submenuPartitionVertical: submenuPartitionStyle.vertical,
	        submenuPartitionHorizontal: submenuPartitionStyle.horizontal,
	        biSize: this.getStyle('common.bisize'),
	        subMenuRangeTitle: this.getStyle('range.title'),
	        submenuRangePointer: this.getStyle('range.pointer'),
	        submenuRangeBar: this.getStyle('range.bar'),
	        submenuRangeSubbar: this.getStyle('range.subbar'),
	        submenuDisabledRangePointer: this.getStyle('range.disabledPointer'),
	        submenuDisabledRangeBar: this.getStyle('range.disabledBar'),
	        submenuDisabledRangeSubbar: this.getStyle('range.disabledSubbar'),
	        submenuRangeValue: this.getStyle('range.value'),
	        submenuColorpickerTitle: this.getStyle('colorpicker.title'),
	        submenuColorpickerButton: this.getStyle('colorpicker.button'),
	        submenuCheckbox: this.getStyle('checkbox'),
	        menuIconSize: this.getStyle('menu.iconSize'),
	        submenuIconSize: this.getStyle('submenu.iconSize')
	      });
	    }
	    /**
	     * Change to low dimensional object.
	     * @param {object} styleOptions - style object of user interface
	     * @returns {object} low level object for style apply
	     * @private
	     */

	  }, {
	    key: "_changeToObject",
	    value: function _changeToObject(styleOptions) {
	      var styleObject = {};
	      forIn_1(styleOptions, function (value, key) {
	        var keyExplode = key.match(/^(.+)\.([a-z]+)$/i);

	        var _keyExplode = _slicedToArray(keyExplode, 3),
	            property = _keyExplode[1],
	            subProperty = _keyExplode[2];

	        if (!styleObject[property]) {
	          styleObject[property] = {};
	        }

	        styleObject[property][subProperty] = value;
	      });
	      return styleObject;
	    }
	    /**
	     * Style object to Csstext serialize
	     * @param {object} styleObject - style object
	     * @returns {string} - css text string
	     * @private
	     */

	  }, {
	    key: "_makeCssText",
	    value: function _makeCssText(styleObject) {
	      var _this = this;

	      var converterStack = [];
	      forIn_1(styleObject, function (value, key) {
	        if (['backgroundImage'].indexOf(key) > -1 && value !== 'none') {
	          value = "url(".concat(value, ")");
	        }

	        converterStack.push("".concat(_this._toUnderScore(key), ": ").concat(value));
	      });
	      return converterStack.join(';');
	    }
	    /**
	     * Camel key string to Underscore string
	     * @param {string} targetString - change target
	     * @returns {string}
	     * @private
	     */

	  }, {
	    key: "_toUnderScore",
	    value: function _toUnderScore(targetString) {
	      return targetString.replace(/([A-Z])/g, function ($0, $1) {
	        return "-".concat($1.toLowerCase());
	      });
	    }
	  }]);

	  return Theme;
	}();

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export({ target: 'Array', proto: true }, {
	  fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	var pickr_min = createCommonjsModule(function (module, exports) {
	/*! Pickr 1.4.5 MIT | https://github.com/Simonwep/pickr */
	!function(t,e){module.exports=e();}(window,function(){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t){t.exports=JSON.parse('{"a":"1.4.5"}');},function(t,e,o){o.r(e);var n={};function i(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),o.push.apply(o,n);}return o}function r(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(o,!0).forEach(function(e){s(t,e,o[e]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):i(o).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e));});}return t}function s(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}o.r(n),o.d(n,"on",function(){return c}),o.d(n,"off",function(){return a}),o.d(n,"createElementFromString",function(){return p}),o.d(n,"removeAttribute",function(){return u}),o.d(n,"createFromTemplate",function(){return h}),o.d(n,"eventPath",function(){return d}),o.d(n,"resolveElement",function(){return f}),o.d(n,"adjustableInputNumbers",function(){return m});const c=l.bind(null,"addEventListener"),a=l.bind(null,"removeEventListener");function l(t,e,o,n,i={}){e instanceof HTMLCollection||e instanceof NodeList?e=Array.from(e):Array.isArray(e)||(e=[e]),Array.isArray(o)||(o=[o]);for(const s of e)for(const e of o)s[t](e,n,r({capture:!1},i));return Array.prototype.slice.call(arguments,1)}function p(t){const e=document.createElement("div");return e.innerHTML=t.trim(),e.firstElementChild}function u(t,e){const o=t.getAttribute(e);return t.removeAttribute(e),o}function h(t){return function t(e,o={}){const n=u(e,":obj"),i=u(e,":ref"),r=n?o[n]={}:o;i&&(o[i]=e);for(const o of Array.from(e.children)){const e=u(o,":arr"),n=t(o,e?{}:r);e&&(r[e]||(r[e]=[])).push(Object.keys(n).length?n:o);}return o}(p(t))}function d(t){let e=t.path||t.composedPath&&t.composedPath();if(e)return e;let o=t.target.parentElement;for(e=[t.target,o];o=o.parentElement;)e.push(o);return e.push(document,window),e}function f(t){return t instanceof Element?t:"string"==typeof t?t.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document):null}function m(t,e=(t=>t)){function o(o){const n=[.001,.01,.1][Number(o.shiftKey||2*o.ctrlKey)]*(o.deltaY<0?1:-1);let i=0,r=t.selectionStart;t.value=t.value.replace(/[\d.]+/g,(t,o)=>o<=r&&o+t.length>=r?(r=o,e(Number(t),n,i)):(i++,t)),t.focus(),t.setSelectionRange(r,r),o.preventDefault(),t.dispatchEvent(new Event("input"));}c(t,"focus",()=>c(window,"wheel",o,{passive:!1})),c(t,"blur",()=>a(window,"wheel",o));}var v=o(0);const{min:b,max:g,floor:y,round:_}=Math;function w(t,e,o){e/=100,o/=100;const n=y(t=t/360*6),i=t-n,r=o*(1-e),s=o*(1-i*e),c=o*(1-(1-i)*e),a=n%6;return [255*[o,s,r,r,c,o][a],255*[c,o,o,s,r,r][a],255*[r,r,c,o,o,s][a]]}function C(t,e,o){const n=(2-(e/=100))*(o/=100)/2;return 0!==n&&(e=1===n?0:n<.5?e*o/(2*n):e*o/(2-2*n)),[t,100*e,100*n]}function A(t,e,o){let n,i,r;const s=b(t/=255,e/=255,o/=255),c=g(t,e,o),a=c-s;if(0===a)n=i=0;else{i=a/c;const r=((c-t)/6+a/2)/a,s=((c-e)/6+a/2)/a,l=((c-o)/6+a/2)/a;t===c?n=l-s:e===c?n=1/3+r-l:o===c&&(n=2/3+s-r),n<0?n+=1:n>1&&(n-=1);}return [360*n,100*i,100*(r=c)]}function k(t,e,o,n){return e/=100,o/=100,[...A(255*(1-b(1,(t/=100)*(1-(n/=100))+n)),255*(1-b(1,e*(1-n)+n)),255*(1-b(1,o*(1-n)+n)))]}function S(t,e,o){return e/=100,[t,2*(e*=(o/=100)<.5?o:1-o)/(o+e)*100,100*(o+e)]}function O(t){return A(...t.match(/.{2}/g).map(t=>parseInt(t,16)))}function j(t){t=t.match(/^[a-zA-Z]+$/)?function(t){if("black"===t.toLowerCase())return "#000";const e=document.createElement("canvas").getContext("2d");return e.fillStyle=t,"#000"===e.fillStyle?null:e.fillStyle}(t):t;const e={cmyk:/^cmyk[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)/i,rgba:/^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsla:/^((hsla)|hsl)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsva:/^((hsva)|hsv)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hexa:/^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i},o=t=>t.map(t=>/^(|\d+)\.\d+|\d+$/.test(t)?Number(t):void 0);let n;t:for(const i in e){if(!(n=e[i].exec(t)))continue;const r=t=>!!n[2]==("number"==typeof t);switch(i){case"cmyk":{const[,t,e,r,s]=o(n);if(t>100||e>100||r>100||s>100)break t;return {values:k(t,e,r,s),type:i}}case"rgba":{const[,,,t,e,s,c]=o(n);if(t>255||e>255||s>255||c<0||c>1||!r(c))break t;return {values:[...A(t,e,s),c],a:c,type:i}}case"hexa":{let[,t]=n;4!==t.length&&3!==t.length||(t=t.split("").map(t=>t+t).join(""));const e=t.substring(0,6);let o=t.substring(6);return o=o?parseInt(o,16)/255:void 0,{values:[...O(e),o],a:o,type:i}}case"hsla":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return {values:[...S(t,e,s),c],a:c,type:i}}case"hsva":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return {values:[t,e,s,c],a:c,type:i}}}}return {values:null,type:null}}function x(t=0,e=0,o=0,n=1){const i=(t,e)=>(o=-1)=>e(~o?t.map(t=>Number(t.toFixed(o))):t),r={h:t,s:e,v:o,a:n,toHSVA(){const t=[r.h,r.s,r.v,r.a];return t.toString=i(t,t=>"hsva(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toHSLA(){const t=[...C(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"hsla(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toRGBA(){const t=[...w(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"rgba(".concat(t[0],", ").concat(t[1],", ").concat(t[2],", ").concat(r.a,")")),t},toCMYK(){const t=function(t,e,o){const n=w(t,e,o),i=n[0]/255,r=n[1]/255,s=n[2]/255;let c,a,l,p;return [100*(a=1===(c=b(1-i,1-r,1-s))?0:(1-i-c)/(1-c)),100*(l=1===c?0:(1-r-c)/(1-c)),100*(p=1===c?0:(1-s-c)/(1-c)),100*c]}(r.h,r.s,r.v);return t.toString=i(t,t=>"cmyk(".concat(t[0],"%, ").concat(t[1],"%, ").concat(t[2],"%, ").concat(t[3],"%)")),t},toHEXA(){const t=function(t,e,o){return w(t,e,o).map(t=>_(t).toString(16).padStart(2,"0"))}(r.h,r.s,r.v),e=r.a>=1?"":Number((255*r.a).toFixed(0)).toString(16).toUpperCase().padStart(2,"0");return e&&t.push(e),t.toString=()=>"#".concat(t.join("").toUpperCase()),t},clone:()=>x(r.h,r.s,r.v,r.a)};return r}const E=t=>Math.max(Math.min(t,1),0);function L(t){const e={options:Object.assign({lock:null,onchange:()=>0,onstop:()=>0},t),_keyboard(t){const{type:n,key:i}=t;if(document.activeElement===o.wrapper){const{lock:o}=e.options,r="ArrowUp"===i,s="ArrowRight"===i,c="ArrowDown"===i,a="ArrowLeft"===i;if("keydown"===n&&(r||s||c||a)){let t=0,n=0;"v"===o?t=r||s?1:-1:"h"===o?t=r||s?-1:1:(n=r?-1:c?1:0,t=a?-1:s?1:0),e.update(E(e.cache.x+.01*t),E(e.cache.y+.01*n));}else i.startsWith("Arrow")&&(e.options.onstop(),t.preventDefault());}},_tapstart(t){c(document,["mouseup","touchend","touchcancel"],e._tapstop),c(document,["mousemove","touchmove"],e._tapmove),t.preventDefault(),e._tapmove(t);},_tapmove(t){const{options:{lock:n},cache:i}=e,{element:r,wrapper:s}=o,c=s.getBoundingClientRect();let a=0,l=0;if(t){const e=t&&t.touches&&t.touches[0];a=t?(e||t).clientX:0,l=t?(e||t).clientY:0,a<c.left?a=c.left:a>c.left+c.width&&(a=c.left+c.width),l<c.top?l=c.top:l>c.top+c.height&&(l=c.top+c.height),a-=c.left,l-=c.top;}else i&&(a=i.x*c.width,l=i.y*c.height);"h"!==n&&(r.style.left="calc(".concat(a/c.width*100,"% - ").concat(r.offsetWidth/2,"px)")),"v"!==n&&(r.style.top="calc(".concat(l/c.height*100,"% - ").concat(r.offsetHeight/2,"px)")),e.cache={x:a/c.width,y:l/c.height};const p=E(a/s.offsetWidth),u=E(l/s.offsetHeight);switch(n){case"v":return o.onchange(p);case"h":return o.onchange(u);default:return o.onchange(p,u)}},_tapstop(){e.options.onstop(),a(document,["mouseup","touchend","touchcancel"],e._tapstop),a(document,["mousemove","touchmove"],e._tapmove);},trigger(){e._tapmove();},update(t=0,o=0){const{left:n,top:i,width:r,height:s}=e.options.wrapper.getBoundingClientRect();"h"===e.options.lock&&(o=t),e._tapmove({clientX:n+r*t,clientY:i+s*o});},destroy(){const{options:t,_tapstart:o}=e;a([t.wrapper,t.element],"mousedown",o),a([t.wrapper,t.element],"touchstart",o,{passive:!1});}},{options:o,_tapstart:n,_keyboard:i}=e;return c([o.wrapper,o.element],"mousedown",n),c([o.wrapper,o.element],"touchstart",n,{passive:!1}),c(document,["keydown","keyup"],i),e}function P(t={}){t=Object.assign({onchange:()=>0,className:"",elements:[]},t);const e=c(t.elements,"click",e=>{t.elements.forEach(o=>o.classList[e.target===o?"add":"remove"](t.className)),t.onchange(e);});return {destroy:()=>a(...e)}}function B({el:t,reference:e,padding:o=8}){const n={start:"sme",middle:"mse",end:"ems"},i={top:"tbrl",right:"rltb",bottom:"btrl",left:"lrbt"},r=((t={})=>(e,o=t[e])=>{if(o)return o;const[n,i="middle"]=e.split("-"),r="top"===n||"bottom"===n;return t[e]={position:n,variant:i,isVertical:r}})();return {update(s){const{position:c,variant:a,isVertical:l}=r(s),p=e.getBoundingClientRect(),u=t.getBoundingClientRect(),h=t=>t?{t:p.top-u.height-o,b:p.bottom+o}:{r:p.right+o,l:p.left-u.width-o},d=t=>t?{s:p.left+p.width-u.width,m:-u.width/2+(p.left+p.width/2),e:p.left}:{s:p.bottom-u.height,m:p.bottom-p.height/2-u.height/2,e:p.bottom-p.height},f={};function m(e,o,n){const i="top"===n,r=i?u.height:u.width,s=window[i?"innerHeight":"innerWidth"];for(const i of e){const e=o[i],c=f[n]="".concat(e,"px");if(e>0&&e+r<s)return t.style[n]=c,!0}return !1}for(const t of [l,!l]){const e=m(i[c],h(t),t?"top":"left"),o=m(n[a],d(t),t?"left":"top");if(e&&o)return}t.style.left=f.left,t.style.top=f.top;}}}var R=({components:t,strings:e,useAsButton:o,inline:n,appClass:i,theme:r,lockOpacity:s})=>{const c=t=>t?"":'style="display:none" hidden',a=h('\n      <div :ref="root" class="pickr">\n\n        '.concat(o?"":'<button type="button" :ref="button" class="pcr-button"></button>','\n\n        <div :ref="app" class="pcr-app ').concat(i||"",'" data-theme="').concat(r,'" ').concat(n?'style="position: unset"':"",' aria-label="color picker dialog" role="window">\n          <div class="pcr-selection" ').concat(c(t.palette),'>\n            <div :obj="preview" class="pcr-color-preview" ').concat(c(t.preview),'>\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="use previous color"></button>\n              <div :ref="currentColor" class="pcr-current-color"></div>\n            </div>\n\n            <div :obj="palette" class="pcr-color-palette">\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="color selection area" role="widget"></div>\n            </div>\n\n            <div :obj="hue" class="pcr-color-chooser" ').concat(c(t.hue),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="hue selection slider" role="widget"></div>\n            </div>\n\n            <div :obj="opacity" class="pcr-color-opacity" ').concat(c(t.opacity),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="opacity selection slider" role="widget"></div>\n            </div>\n          </div>\n\n          <div class="pcr-swatches ').concat(t.palette?"":"pcr-last",'" :ref="swatches"></div> \n\n          <div :obj="interaction" class="pcr-interaction" ').concat(c(Object.keys(t.interaction).length),'>\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ').concat(c(t.interaction.input),'>\n\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="').concat(s?"HEX":"HEXA",'" type="button" ').concat(c(t.interaction.hex),'>\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="').concat(s?"RGB":"RGBA",'" type="button" ').concat(c(t.interaction.rgba),'>\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="').concat(s?"HSL":"HSLA",'" type="button" ').concat(c(t.interaction.hsla),'>\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="').concat(s?"HSV":"HSVA",'" type="button" ').concat(c(t.interaction.hsva),'>\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ').concat(c(t.interaction.cmyk),'>\n\n            <input :ref="save" class="pcr-save" value="').concat(e.save||"Save",'" type="button" ').concat(c(t.interaction.save),' aria-label="save and exit">\n            <input :ref="cancel" class="pcr-cancel" value="').concat(e.cancel||"Cancel",'" type="button" ').concat(c(t.interaction.cancel),' aria-label="cancel and exit">\n            <input :ref="clear" class="pcr-clear" value="').concat(e.clear||"Clear",'" type="button" ').concat(c(t.interaction.clear),' aria-label="clear and exit">\n          </div>\n        </div>\n      </div>\n    ')),l=a.interaction;return l.options.find(t=>!t.hidden&&!t.classList.add("active")),l.type=()=>l.options.find(t=>t.classList.contains("active")),a};function H(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class D{constructor(t){H(this,"_initializingActive",!0),H(this,"_recalc",!0),H(this,"_color",x()),H(this,"_lastColor",x()),H(this,"_swatchColors",[]),H(this,"_eventListener",{init:[],save:[],hide:[],show:[],clear:[],change:[],changestop:[],cancel:[],swatchselect:[]}),this.options=t=Object.assign({appClass:null,theme:"classic",useAsButton:!1,padding:8,disabled:!1,comparison:!0,closeOnScroll:!1,outputPrecision:0,lockOpacity:!1,autoReposition:!0,container:"body",components:{interaction:{}},strings:{},swatches:null,inline:!1,sliders:null,default:"#42445a",defaultRepresentation:null,position:"bottom-middle",adjustableNumbers:!0,showAlways:!1,closeWithKey:"Escape"},t);const{swatches:e,components:o,theme:n,sliders:i,lockOpacity:r,padding:s}=t;["nano","monolith"].includes(n)&&!i&&(t.sliders="h"),o.interaction||(o.interaction={});const{preview:c,opacity:a,hue:l,palette:p}=o;o.opacity=!r&&a,o.palette=p||c||a||l,this._preBuild(),this._buildComponents(),this._bindEvents(),this._finalBuild(),e&&e.length&&e.forEach(t=>this.addSwatch(t));const{button:u,app:h}=this._root;this._nanopop=B({reference:u,padding:s,el:h}),u.setAttribute("role","button"),u.setAttribute("aria-label","toggle color picker dialog");const d=this;requestAnimationFrame(function e(){if(!h.offsetWidth&&h.parentElement!==t.container)return requestAnimationFrame(e);d.setColor(t.default),d._rePositioningPicker(),t.defaultRepresentation&&(d._representation=t.defaultRepresentation,d.setColorRepresentation(d._representation)),t.showAlways&&d.show(),d._initializingActive=!1,d._emit("init");});}_preBuild(){const t=this.options;for(const e of ["el","container"])t[e]=f(t[e]);this._root=R(t),t.useAsButton&&(this._root.button=t.el),t.container.appendChild(this._root.root);}_finalBuild(){const t=this.options,e=this._root;if(t.container.removeChild(e.root),t.inline){const o=t.el.parentElement;t.el.nextSibling?o.insertBefore(e.app,t.el.nextSibling):o.appendChild(e.app);}else t.container.appendChild(e.app);t.useAsButton?t.inline&&t.el.remove():t.el.parentNode.replaceChild(e.root,t.el),t.disabled&&this.disable(),t.comparison||(e.button.style.transition="none",t.useAsButton||(e.preview.lastColor.style.transition="none")),this.hide();}_buildComponents(){const t=this,e=this.options.components,o=(t.options.sliders||"v").repeat(2),[n,i]=o.match(/^[vh]+$/g)?o:[],r=()=>this._color||(this._color=this._lastColor.clone()),s={palette:L({element:t._root.palette.picker,wrapper:t._root.palette.palette,onstop:()=>t._emit("changestop",t),onchange(o,n){if(!e.palette)return;const i=r(),{_root:s,options:c}=t;t._recalc&&(i.s=100*o,i.v=100-100*n,i.v<0&&(i.v=0),t._updateOutput());const a=i.toRGBA().toString(0);this.element.style.background=a,this.wrapper.style.background="\n                        linear-gradient(to top, rgba(0, 0, 0, ".concat(i.a,"), transparent),\n                        linear-gradient(to left, hsla(").concat(i.h,", 100%, 50%, ").concat(i.a,"), rgba(255, 255, 255, ").concat(i.a,"))\n                    "),c.comparison?c.useAsButton||t._lastColor||(s.preview.lastColor.style.color=a):s.button.style.color=a;const l=i.toHEXA().toString();for(const e of t._swatchColors){const{el:t,color:o}=e;t.classList[l===o.toHEXA().toString()?"add":"remove"]("pcr-active");}s.preview.currentColor.style.color=a,t.options.comparison||s.button.classList.remove("clear");}}),hue:L({lock:"v"===i?"h":"v",element:t._root.hue.picker,wrapper:t._root.hue.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.hue||!e.palette)return;const n=r();t._recalc&&(n.h=360*o),this.element.style.backgroundColor="hsl(".concat(n.h,", 100%, 50%)"),s.palette.trigger();}}),opacity:L({lock:"v"===n?"h":"v",element:t._root.opacity.picker,wrapper:t._root.opacity.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.opacity||!e.palette)return;const n=r();t._recalc&&(n.a=Math.round(100*o)/100),this.element.style.background="rgba(0, 0, 0, ".concat(n.a,")"),s.palette.trigger();}}),selectable:P({elements:t._root.interaction.options,className:"active",onchange(e){t._representation=e.target.getAttribute("data-type").toUpperCase(),t._recalc&&t._updateOutput();}})};this._components=s;}_bindEvents(){const{_root:t,options:e}=this,o=[c(t.interaction.clear,"click",()=>this._clearColor()),c([t.interaction.cancel,t.preview.lastColor],"click",()=>{this._emit("cancel",this),this.setHSVA(...(this._lastColor||this._color).toHSVA(),!0);}),c(t.interaction.save,"click",()=>{!this.applyColor()&&!e.showAlways&&this.hide();}),c(t.interaction.result,["keyup","input"],t=>{this.setColor(t.target.value,!0)&&!this._initializingActive&&this._emit("change",this._color),t.stopImmediatePropagation();}),c(t.interaction.result,["focus","blur"],t=>{this._recalc="blur"===t.type,this._recalc&&this._updateOutput();}),c([t.palette.palette,t.palette.picker,t.hue.slider,t.hue.picker,t.opacity.slider,t.opacity.picker],["mousedown","touchstart"],()=>this._recalc=!0)];if(!e.showAlways){const n=e.closeWithKey;o.push(c(t.button,"click",()=>this.isOpen()?this.hide():this.show()),c(document,"keyup",t=>this.isOpen()&&(t.key===n||t.code===n)&&this.hide()),c(document,["touchstart","mousedown"],e=>{this.isOpen()&&!d(e).some(e=>e===t.app||e===t.button)&&this.hide();},{capture:!0}));}if(e.adjustableNumbers){const e={rgba:[255,255,255,1],hsva:[360,100,100,1],hsla:[360,100,100,1],cmyk:[100,100,100,100]};m(t.interaction.result,(t,o,n)=>{const i=e[this.getColorRepresentation().toLowerCase()];if(i){const e=i[n],r=t+(e>=100?1e3*o:o);return r<=0?0:Number((r<e?r:e).toPrecision(3))}return t});}if(e.autoReposition&&!e.inline){let t=null;const n=this;o.push(c(window,["scroll","resize"],()=>{n.isOpen()&&(e.closeOnScroll&&n.hide(),null===t?(t=setTimeout(()=>t=null,100),requestAnimationFrame(function e(){n._rePositioningPicker(),null!==t&&requestAnimationFrame(e);})):(clearTimeout(t),t=setTimeout(()=>t=null,100)));},{capture:!0}));}this._eventBindings=o;}_rePositioningPicker(){const{options:t}=this;if(!t.inline){const{app:e}=this._root;matchMedia("(max-width: 576px)").matches?Object.assign(e.style,{margin:"auto",height:"".concat(e.getBoundingClientRect().height,"px"),top:0,bottom:0,left:0,right:0}):(Object.assign(e.style,{margin:null,right:null,top:null,bottom:null,left:null,height:null}),this._nanopop.update(t.position));}}_updateOutput(){const{_root:t,_color:e,options:o}=this;if(t.interaction.type()){const n="to".concat(t.interaction.type().getAttribute("data-type"));t.interaction.result.value="function"==typeof e[n]?e[n]().toString(o.outputPrecision):"";}!this._initializingActive&&this._recalc&&this._emit("change",e);}_clearColor(t=!1){const{_root:e,options:o}=this;o.useAsButton||(e.button.style.color="rgba(0, 0, 0, 0.15)"),e.button.classList.add("clear"),o.showAlways||this.hide(),this._lastColor=null,this._initializingActive||t||(this._emit("save",null),this._emit("clear",this));}_parseLocalColor(t){const{values:e,type:o,a:n}=j(t),{lockOpacity:i}=this.options,r=void 0!==n&&1!==n;return e&&3===e.length&&(e[3]=void 0),{values:!e||i&&r?null:e,type:o}}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this));}on(t,e){return "function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1);}return this}addSwatch(t){const{values:e}=this._parseLocalColor(t);if(e){const{_swatchColors:t,_root:o}=this,n=x(...e),i=p('<button type="button" style="color: '.concat(n.toRGBA().toString(0),'" aria-label="color swatch"/>'));return o.swatches.appendChild(i),t.push({el:i,color:n}),this._eventBindings.push(c(i,"click",()=>{this.setHSVA(...n.toHSVA(),!0),this._emit("swatchselect",n),this._emit("change",n);})),!0}return !1}removeSwatch(t){const e=this._swatchColors[t];if(e){const{el:o}=e;return this._root.swatches.removeChild(o),this._swatchColors.splice(t,1),!0}return !1}applyColor(t=!1){const{preview:e,button:o}=this._root,n=this._color.toRGBA().toString(0);return e.lastColor.style.color=n,this.options.useAsButton||(o.style.color=n),o.classList.remove("clear"),this._lastColor=this._color.clone(),this._initializingActive||t||this._emit("save",this._color),this}destroy(){this._eventBindings.forEach(t=>a(...t)),Object.keys(this._components).forEach(t=>this._components[t].destroy());}destroyAndRemove(){this.destroy();const{root:t,app:e}=this._root;t.parentElement&&t.parentElement.removeChild(t),e.parentElement.removeChild(e),Object.keys(this).forEach(t=>this[t]=null);}hide(){return this._root.app.classList.remove("visible"),this._emit("hide",this),this}show(){return this.options.disabled||(this._root.app.classList.add("visible"),this._rePositioningPicker(),this._emit("show",this)),this}isOpen(){return this._root.app.classList.contains("visible")}setHSVA(t=360,e=0,o=0,n=1,i=!1){const r=this._recalc;if(this._recalc=!1,t<0||t>360||e<0||e>100||o<0||o>100||n<0||n>1)return !1;this._color=x(t,e,o,n);const{hue:s,opacity:c,palette:a}=this._components;return s.update(t/360),c.update(n),a.update(e/100,1-o/100),i||this.applyColor(),r&&this._updateOutput(),this._recalc=r,!0}setColor(t,e=!1){if(null===t)return this._clearColor(e),!0;const{values:o,type:n}=this._parseLocalColor(t);if(o){const t=n.toUpperCase(),{options:i}=this._root.interaction,r=i.find(e=>e.getAttribute("data-type")===t);if(r&&!r.hidden)for(const t of i)t.classList[t===r?"add":"remove"]("active");return this.setColorRepresentation(t),this.setHSVA(...o,e)}return !1}setColorRepresentation(t){return t=t.toUpperCase(),!!this._root.interaction.options.find(e=>e.getAttribute("data-type").startsWith(t)&&!e.click())}getColorRepresentation(){return this._representation}getColor(){return this._color}getSelectedColor(){return this._lastColor}getRoot(){return this._root}disable(){return this.hide(),this.options.disabled=!0,this._root.button.classList.add("disabled"),this}enable(){return this.options.disabled=!1,this._root.button.classList.remove("disabled"),this}}D.utils=n,D.libs={HSVaColor:x,Moveable:L,Nanopop:B,Selectable:P},D.create=t=>new D(t),D.version=v.a;e.default=D;}]).default});

	});

	var Pickr = unwrapExports(pickr_min);
	var pickr_min_1 = pickr_min.Pickr;

	var PICKER_COLOR = ['#000000', '#2a2a2a', '#545454', '#7e7e7e', '#a8a8a8', '#d2d2d2', '#ffffff', '#ff4040', '#ff6518', '#ffbb3b', '#03bd9e', '#00a9ff', '#515ce6', '#9e5fff', '#ff5583', ''];
	/**
	 * Colorpicker control class
	 * @class
	 * @ignore
	 */

	var Colorpicker =
	/*#__PURE__*/
	function () {
	  function Colorpicker(colorpickerElement) {
	    var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#7e7e7e';
	    var toggleDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';

	    _classCallCheck(this, Colorpicker);

	    var title = colorpickerElement.getAttribute('title'); // this._show = false;

	    this._colorpickerElement = colorpickerElement;
	    this._toggleDirection = toggleDirection;

	    this._makePickerLayerElement(colorpickerElement, title);

	    this.color = defaultColor;
	    this.picker = Pickr.create({
	      el: this.pickerControl,
	      theme: 'nano',
	      default: defaultColor,
	      swatches: PICKER_COLOR,
	      useAsButton: false
	    });

	    this._addEvent();
	  }
	  /**
	   * Make picker layer element
	   * @param {HTMLElement} colorpickerElement color picker element
	   * @param {string} title picker title
	   * @private
	   */


	  _createClass(Colorpicker, [{
	    key: "_makePickerLayerElement",
	    value: function _makePickerLayerElement(colorpickerElement, title) {
	      colorpickerElement.classList.add('tui-image-editor-button');
	      var label = document.createElement('label');
	      var triangle = document.createElement('div');
	      this.pickerControl = document.createElement('div');
	      this.pickerControl.className = 'color-picker-control';
	      this.pickerElement = document.createElement('div');
	      this.pickerElement.className = 'color-picker';
	      label.innerHTML = title;
	      triangle.className = 'triangle';
	      this.pickerControl.appendChild(this.pickerElement);
	      this.pickerControl.appendChild(triangle);
	      colorpickerElement.appendChild(this.pickerControl);
	      colorpickerElement.appendChild(label);
	    }
	    /**
	     * Add event
	     * @param {HTMLElement} colorpickerElement color picker element
	     * @private
	     */

	  }, {
	    key: "_addEvent",
	    value: function _addEvent() {
	      var _this = this;

	      this.picker.on('change', function (value) {
	        var colour = "#".concat(value.toHEXA().join(''));
	        console.log({
	          colour: colour
	        });

	        _this.picker.applyColor();

	        _this.picker.hide();

	        _this.color = colour;
	        _this.picker;

	        _this.fire('change', colour);
	      });
	    }
	  }]);

	  return Colorpicker;
	}();
	CustomEvents.mixin(Colorpicker);

	/**
	 * Range control class
	 * @class
	 * @ignore
	 */

	var Range =
	/*#__PURE__*/
	function () {
	  function Range(rangeElement) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, Range);

	    this._value = options.value || 0;
	    this.rangeElement = rangeElement;

	    this._drawRangeElement();

	    this.rangeWidth = toInteger$1(window.getComputedStyle(rangeElement, null).width) - 12;
	    this._min = options.min || 0;
	    this._max = options.max || 100;
	    this._absMax = this._min * -1 + this._max;
	    this.realTimeEvent = options.realTimeEvent || false;

	    this._addClickEvent();

	    this._addDragEvent();

	    this.value = options.value;
	    this.trigger('change');
	  }
	  /**
	   * Set range max value and re position cursor
	   * @param {number} maxValue - max value
	   */


	  _createClass(Range, [{
	    key: "trigger",

	    /**
	     * event tirigger
	     * @param {string} type - type
	     */
	    value: function trigger(type) {
	      this.fire(type, this._value);
	    }
	    /**
	     * Make range element
	     * @private
	     */

	  }, {
	    key: "_drawRangeElement",
	    value: function _drawRangeElement() {
	      this.rangeElement.classList.add('tui-image-editor-range');
	      this.bar = document.createElement('div');
	      this.bar.className = 'tui-image-editor-virtual-range-bar';
	      this.subbar = document.createElement('div');
	      this.subbar.className = 'tui-image-editor-virtual-range-subbar';
	      this.pointer = document.createElement('div');
	      this.pointer.className = 'tui-image-editor-virtual-range-pointer';
	      this.bar.appendChild(this.subbar);
	      this.bar.appendChild(this.pointer);
	      this.rangeElement.appendChild(this.bar);
	    }
	    /**
	     * Add Range click event
	     * @private
	     */

	  }, {
	    key: "_addClickEvent",
	    value: function _addClickEvent() {
	      var _this = this;

	      this.rangeElement.addEventListener('click', function (event) {
	        event.stopPropagation();

	        if (event.target.className !== 'tui-image-editor-range') {
	          return;
	        }

	        var touchPx = event.offsetX;
	        var ratio = touchPx / _this.rangeWidth;
	        var value = _this._absMax * ratio + _this._min;
	        _this.pointer.style.left = "".concat(ratio * _this.rangeWidth, "px");
	        _this.subbar.style.right = "".concat((1 - ratio) * _this.rangeWidth, "px");
	        _this._value = value;

	        _this.fire('change', value, true);
	      });
	    }
	    /**
	     * Add Range drag event
	     * @private
	     */

	  }, {
	    key: "_addDragEvent",
	    value: function _addDragEvent() {
	      var _this2 = this;

	      this.pointer.addEventListener('mousedown', function (event) {
	        _this2.firstPosition = event.screenX;
	        _this2.firstLeft = toInteger$1(_this2.pointer.style.left) || 0;
	        _this2.dragEventHandler = {
	          changeAngle: _this2._changeAngle.bind(_this2),
	          stopChangingAngle: _this2._stopChangingAngle.bind(_this2)
	        };
	        document.addEventListener('mousemove', _this2.dragEventHandler.changeAngle);
	        document.addEventListener('mouseup', _this2.dragEventHandler.stopChangingAngle);
	      });
	    }
	    /**
	     * change angle event
	     * @param {object} event - change event
	     * @private
	     */

	  }, {
	    key: "_changeAngle",
	    value: function _changeAngle(event) {
	      var changePosition = event.screenX;
	      var diffPosition = changePosition - this.firstPosition;
	      var touchPx = this.firstLeft + diffPosition;
	      touchPx = touchPx > this.rangeWidth ? this.rangeWidth : touchPx;
	      touchPx = touchPx < 0 ? 0 : touchPx;
	      this.pointer.style.left = "".concat(touchPx, "px");
	      this.subbar.style.right = "".concat(this.rangeWidth - touchPx, "px");
	      var ratio = touchPx / this.rangeWidth;
	      var value = this._absMax * ratio + this._min;
	      this._value = value;

	      if (this.realTimeEvent) {
	        this.fire('change', value, fakse);
	      }
	    }
	    /**
	     * stop change angle event
	     * @private
	     */

	  }, {
	    key: "_stopChangingAngle",
	    value: function _stopChangingAngle() {
	      this.fire('change', this._value, true);
	      document.removeEventListener('mousemove', this.dragEventHandler.changeAngle);
	      document.removeEventListener('mouseup', this.dragEventHandler.stopChangingAngle);
	    }
	  }, {
	    key: "max",
	    set: function set(maxValue) {
	      this._max = maxValue;
	      this._absMax = this._min * -1 + this._max;
	      this.value = this._value;
	    },
	    get: function get() {
	      return this._max;
	    }
	    /**
	     * Get range value
	     * @returns {Number} range value
	     */

	  }, {
	    key: "value",
	    get: function get() {
	      return this._value;
	    }
	    /**
	     * Set range value
	     * @param {Number} value range value
	     * @param {Boolean} fire whether fire custom event or not
	     */
	    ,
	    set: function set(value) {
	      var absValue = value - this._min;
	      var leftPosition = absValue * this.rangeWidth / this._absMax;

	      if (this.rangeWidth < leftPosition) {
	        leftPosition = this.rangeWidth;
	      }

	      this.pointer.style.left = "".concat(leftPosition, "px");
	      this.subbar.style.right = "".concat(this.rangeWidth - leftPosition, "px");
	      this._value = value;
	    }
	  }]);

	  return Range;
	}();
	CustomEvents.mixin(Range);

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var defineProperty$4 = objectDefineProperty.f;
	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;







	var MATCH$1 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype$1 = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var FORCED$7 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || fails(function () {
	  re2[MATCH$1] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$7) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
	      : inheritIfRequired(CORRECT_NEW
	        ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
	        : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
	          ? pattern.source
	          : pattern, patternIsRegExp && flagsAreUndefined ? regexpFlags.call(pattern) : flags)
	      , thisIsRegExp ? this : RegExpPrototype$1, RegExpWrapper);
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$4(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$3 = getOwnPropertyNames$1(NativeRegExp);
	  var index = 0;
	  while (keys$3.length > index) proxy(keys$3[index++]);
	  RegExpPrototype$1.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$1;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	/**
	 * Submenu Base Class
	 * @class
	 * @ignore
	 */
	var Submenu =
	/*#__PURE__*/
	function () {
	  /**
	   * @param {HTMLElement} subMenuElement - submenu dom element
	   * @param {Locale} locale - translate text
	   * @param {string} name - name of sub menu
	   * @param {Object} iconStyle - style of icon
	   * @param {string} menuBarPosition - position of menu
	   * @param {*} templateHtml - template for SubMenuElement
	   */
	  function Submenu(subMenuElement, _ref) {
	    var locale = _ref.locale,
	        name = _ref.name,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition,
	        templateHtml = _ref.templateHtml;

	    _classCallCheck(this, Submenu);

	    this.selector = function (str) {
	      return subMenuElement.querySelector(str);
	    };

	    this.menuBarPosition = menuBarPosition;
	    this.toggleDirection = menuBarPosition === 'top' ? 'down' : 'up';
	    this.colorPickerControls = [];

	    this._makeSubMenuElement(subMenuElement, {
	      locale: locale,
	      name: name,
	      iconStyle: iconStyle,
	      templateHtml: templateHtml
	    });
	  }

	  _createClass(Submenu, [{
	    key: "colorPickerChangeShow",
	    value: function colorPickerChangeShow(occurredControl) {
	      this.colorPickerControls.forEach(function (pickerControl) {
	        if (occurredControl !== pickerControl) {
	          pickerControl.hide();
	        }
	      });
	    }
	    /**
	     * Get butten type
	     * @param {HTMLElement} button - event target element
	     * @param {array} buttonNames - Array of button names
	     * @returns {string} - button type
	     */

	  }, {
	    key: "getButtonType",
	    value: function getButtonType(button, buttonNames) {
	      return button.className.match(RegExp("(".concat(buttonNames.join('|'), ")")))[0];
	    }
	    /**
	     * Get butten type
	     * @param {HTMLElement} target - event target element
	     * @param {string} removeClass - remove class name
	     * @param {string} addClass - add class name
	     */

	  }, {
	    key: "changeClass",
	    value: function changeClass(target, removeClass, addClass) {
	      target.classList.remove(removeClass);
	      target.classList.add(addClass);
	    }
	    /**
	     * Interface method whose implementation is optional.
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {}
	    /**
	     * Interface method whose implementation is optional.
	     * Executed when the menu starts.
	     */

	  }, {
	    key: "changeStartMode",
	    value: function changeStartMode() {}
	    /**
	     * Make submenu dom element
	     * @param {HTMLElement} subMenuElement - submenu dom element
	     * @param {Locale} locale - translate text
	     * @param {string} name - submenu name
	     * @param {Object} iconStyle -  icon style
	     * @param {*} templateHtml - template for SubMenuElement
	     * @private
	     */

	  }, {
	    key: "_makeSubMenuElement",
	    value: function _makeSubMenuElement(subMenuElement, _ref2) {
	      var locale = _ref2.locale,
	          name = _ref2.name,
	          iconStyle = _ref2.iconStyle,
	          templateHtml = _ref2.templateHtml;
	      var iconSubMenu = document.createElement('div');
	      iconSubMenu.className = "tui-image-editor-menu-".concat(name);
	      iconSubMenu.innerHTML = templateHtml({
	        locale: locale,
	        iconStyle: iconStyle
	      });
	      subMenuElement.appendChild(iconSubMenu);
	    }
	  }]);

	  return Submenu;
	}();

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-shape-button\">\n            <div class=\"tui-image-editor-button rect\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-shape-rectangle\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-shape-rectangle\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Rectangle'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button circle\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-shape-circle\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-shape-circle\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Circle'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button triangle\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-shape-triangle\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-shape-triangle\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Triangle'), " </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li id=\"tie-shape-color-button\">\n            <div id=\"tie-color-fill\" title=\"").concat(locale.localize('Fill'), "\"></div>\n            <div id=\"tie-color-stroke\" title=\"").concat(locale.localize('Stroke'), "\"></div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-newline tui-image-editor-range-wrap\">\n            <label class=\"range\">").concat(locale.localize('Stroke'), "</label>\n            <div id=\"tie-stroke-range\"></div>\n            <input id=\"tie-stroke-range-value\" class=\"tui-image-editor-range-value\" value=\"0\" />\n        </li>\n    </ul>\n");
	});

	var SHAPE_DEFAULT_OPTION = {
	  stroke: '#ffbb3b',
	  fill: '',
	  strokeWidth: 3
	};
	/**
	 * Shape ui class
	 * @class
	 * @ignore
	 */

	var Shape =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Shape, _Submenu);

	  function Shape(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Shape);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shape).call(this, subMenuElement, {
	      locale: locale,
	      name: 'shape',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml
	    }));
	    _this.type = null;
	    _this.options = SHAPE_DEFAULT_OPTION;
	    _this._els = {
	      shapeSelectButton: _this.selector('#tie-shape-button'),
	      shapeColorButton: _this.selector('#tie-shape-color-button'),
	      strokeRange: new Range(_this.selector('#tie-stroke-range'), defaultShapeStrokeValus),
	      strokeRangeValue: _this.selector('#tie-stroke-range-value'),
	      fillColorpicker: new Colorpicker(_this.selector('#tie-color-fill'), '', _this.toggleDirection),
	      strokeColorpicker: new Colorpicker(_this.selector('#tie-color-stroke'), '#ffbb3b', _this.toggleDirection)
	    };

	    _this.colorPickerControls.push(_this._els.fillColorpicker);

	    _this.colorPickerControls.push(_this._els.strokeColorpicker);

	    return _this;
	  }
	  /**
	   * Add event for shape
	   * @param {Object} actions - actions for shape
	   *   @param {Function} actions.changeShape - change shape mode
	   *   @param {Function} actions.setDrawingShape - set dreawing shape
	   */


	  _createClass(Shape, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this.actions = actions;

	      this._els.shapeSelectButton.addEventListener('click', this._changeShapeHandler.bind(this));

	      this._els.strokeRange.on('change', this._changeStrokeRangeHandler.bind(this));

	      this._els.fillColorpicker.on('change', this._changeFillColorHandler.bind(this));

	      this._els.strokeColorpicker.on('change', this._changeStrokeColorHandler.bind(this));

	      this._els.fillColorpicker.on('changeShow', this.colorPickerChangeShow.bind(this));

	      this._els.strokeColorpicker.on('changeShow', this.colorPickerChangeShow.bind(this));

	      this._els.strokeRangeValue.value = this._els.strokeRange.value;

	      this._els.strokeRangeValue.setAttribute('readonly', true);
	    }
	    /**
	     * Set Shape status
	     * @param {Object} options - options of shape status
	     *   @param {string} strokeWidth - stroke width
	     *   @param {string} strokeColor - stroke color
	     *   @param {string} fillColor - fill color
	     */

	  }, {
	    key: "setShapeStatus",
	    value: function setShapeStatus(_ref2) {
	      var strokeWidth = _ref2.strokeWidth,
	          strokeColor = _ref2.strokeColor,
	          fillColor = _ref2.fillColor;
	      this._els.strokeRange.value = strokeWidth;

	      this._els.strokeRange.trigger('change');

	      this._els.strokeColorpicker.color = strokeColor;
	      this._els.fillColorpicker.color = fillColor;
	      this.options.stroke = strokeColor;
	      this.options.fill = fillColor;
	      this.options.strokeWidth = strokeWidth;
	    }
	    /**
	     * Executed when the menu starts.
	     */

	  }, {
	    key: "changeStartMode",
	    value: function changeStartMode() {
	      this.actions.stopDrawingMode();
	    }
	    /**
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {
	      this.type = null;
	      this.actions.changeSelectableAll(true);

	      this._els.shapeSelectButton.classList.remove('circle');

	      this._els.shapeSelectButton.classList.remove('triangle');

	      this._els.shapeSelectButton.classList.remove('rect');
	    }
	    /**
	     * set range stroke max value
	     * @param {number} maxValue - expect max value for change
	     */

	  }, {
	    key: "setMaxStrokeValue",
	    value: function setMaxStrokeValue(maxValue) {
	      var strokeMaxValue = maxValue;

	      if (strokeMaxValue <= 0) {
	        strokeMaxValue = defaultShapeStrokeValus.max;
	      }

	      this._els.strokeRange.max = strokeMaxValue;
	    }
	    /**
	     * Set stroke value
	     * @param {number} value - expect value for strokeRange change
	     */

	  }, {
	    key: "setStrokeValue",
	    value: function setStrokeValue(value) {
	      this._els.strokeRange.value = value;

	      this._els.strokeRange.trigger('change');
	    }
	    /**
	     * Get stroke value
	     * @returns {number} - stroke range value
	     */

	  }, {
	    key: "getStrokeValue",
	    value: function getStrokeValue() {
	      return this._els.strokeRange.value;
	    }
	    /**
	     * Change icon color
	     * @param {object} event - add button event object
	     * @private
	     */

	  }, {
	    key: "_changeShapeHandler",
	    value: function _changeShapeHandler(event) {
	      var button = event.target.closest('.tui-image-editor-button');

	      if (button) {
	        this.actions.stopDrawingMode();
	        this.actions.discardSelection();
	        var shapeType = this.getButtonType(button, ['circle', 'triangle', 'rect']);

	        if (this.type === shapeType) {
	          this.changeStandbyMode();
	          return;
	        }

	        this.changeStandbyMode();
	        this.type = shapeType;
	        event.currentTarget.classList.add(shapeType);
	        this.actions.changeSelectableAll(false);
	        this.actions.modeChange('shape');
	      }
	    }
	    /**
	     * Change stroke range
	     * @param {number} value - stroke range value
	     * @private
	     */

	  }, {
	    key: "_changeStrokeRangeHandler",
	    value: function _changeStrokeRangeHandler(value) {
	      this.options.strokeWidth = toInteger$1(value);
	      this._els.strokeRangeValue.value = toInteger$1(value);
	      this.actions.changeShape({
	        strokeWidth: value
	      });
	      this.actions.setDrawingShape(this.type, this.options);
	    }
	    /**
	     * Change shape color
	     * @param {string} color - fill color
	     * @private
	     */

	  }, {
	    key: "_changeFillColorHandler",
	    value: function _changeFillColorHandler(color) {
	      color = color || 'transparent';
	      this.options.fill = color;
	      this.actions.changeShape({
	        fill: color
	      });
	    }
	    /**
	     * Change shape stroke color
	     * @param {string} color - fill color
	     * @private
	     */

	  }, {
	    key: "_changeStrokeColorHandler",
	    value: function _changeStrokeColorHandler(color) {
	      color = color || 'transparent';
	      this.options.stroke = color;
	      this.actions.changeShape({
	        stroke: color
	      });
	    }
	  }]);

	  return Shape;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$1 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-crop-preset-button\">\n            <div class=\"tui-image-editor-button preset preset-none active\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-shape-rectangle\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-shape-rectangle\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Custom'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-square\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Square'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-3-2\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('3:2'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-4-3\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('4:3'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-5-4\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('5:4'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-7-5\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('7:5'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button preset preset-16-9\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-crop\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-crop\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('16:9'), " </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition tui-image-editor-newline\">\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li id=\"tie-crop-button\" class=\"action\">\n            <div class=\"tui-image-editor-button apply\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-apply\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-apply\" class=\"active\"/>\n                </svg>\n                <label>\n                    ").concat(locale.localize('Apply'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button cancel\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-cancel\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-cancel\" class=\"active\"/>\n                </svg>\n                <label>\n                    ").concat(locale.localize('Cancel'), "\n                </label>\n            </div>\n        </li>\n    </ul>\n");
	});

	/**
	 * Crop ui class
	 * @class
	 * @ignore
	 */

	var Crop =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Crop, _Submenu);

	  function Crop(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Crop);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Crop).call(this, subMenuElement, {
	      locale: locale,
	      name: 'crop',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$1
	    }));
	    _this.status = 'active';
	    _this._els = {
	      apply: _this.selector('#tie-crop-button .apply'),
	      cancel: _this.selector('#tie-crop-button .cancel'),
	      preset: _this.selector('#tie-crop-preset-button')
	    };
	    _this.defaultPresetButton = _this._els.preset.querySelector('.preset-none');
	    return _this;
	  }
	  /**
	   * Add event for crop
	   * @param {Object} actions - actions for crop
	   *   @param {Function} actions.crop - crop action
	   *   @param {Function} actions.cancel - cancel action
	   *   @param {Function} actions.preset - draw rectzone at a predefined ratio
	   */


	  _createClass(Crop, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      var _this2 = this;

	      this.actions = actions;

	      this._els.apply.addEventListener('click', function () {
	        _this2.actions.crop();

	        _this2._els.apply.classList.remove('active');
	      });

	      this._els.cancel.addEventListener('click', function () {
	        _this2.actions.cancel();

	        _this2._els.apply.classList.remove('active');
	      });

	      this._els.preset.addEventListener('click', function (event) {
	        var button = event.target.closest('.tui-image-editor-button.preset');

	        if (button) {
	          var _button$className$mat = button.className.match(/preset-[^\s]+/),
	              _button$className$mat2 = _slicedToArray(_button$className$mat, 1),
	              presetType = _button$className$mat2[0];

	          _this2._setPresetButtonActive(button);

	          _this2.actions.preset(presetType);
	        }
	      });
	    }
	    /**
	     * Executed when the menu starts.
	     */

	  }, {
	    key: "changeStartMode",
	    value: function changeStartMode() {
	      this.actions.modeChange('crop');
	    }
	    /**
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {
	      this.actions.stopDrawingMode();

	      this._setPresetButtonActive();
	    }
	    /**
	     * Change apply button status
	     * @param {Boolean} enableStatus - apply button status
	     */

	  }, {
	    key: "changeApplyButtonStatus",
	    value: function changeApplyButtonStatus(enableStatus) {
	      if (enableStatus) {
	        this._els.apply.classList.add('active');
	      } else {
	        this._els.apply.classList.remove('active');
	      }
	    }
	    /**
	     * Set preset button to active status
	     * @param {HTMLElement} button - event target element
	     * @private
	     */

	  }, {
	    key: "_setPresetButtonActive",
	    value: function _setPresetButtonActive() {
	      var button = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultPresetButton;
	      [].slice.call(this._els.preset.querySelectorAll('.preset')).map(function (presetButton) {
	        presetButton.classList.remove('active');
	      });

	      if (button) {
	        button.classList.add('active');
	      }
	    }
	  }]);

	  return Crop;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$2 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul id=\"tie-flip-button\" class=\"tui-image-editor-submenu-item\">\n        <li>\n            <div class=\"tui-image-editor-button flipX\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-flip-x\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-flip-x\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Flip X'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button flipY\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-flip-y\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-flip-y\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Flip Y'), "\n                </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li>\n            <div class=\"tui-image-editor-button resetFlip\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-flip-reset\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-flip-reset\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Reset'), "\n                </label>\n            </div>\n        </li>\n    </ul>\n");
	});

	/**
	 * Flip ui class
	 * @class
	 * @ignore
	 */

	var Flip =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Flip, _Submenu);

	  function Flip(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Flip);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Flip).call(this, subMenuElement, {
	      locale: locale,
	      name: 'flip',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$2
	    }));
	    _this.flipStatus = false;
	    _this._els = {
	      flipButton: _this.selector('#tie-flip-button')
	    };
	    return _this;
	  }
	  /**
	   * Add event for flip
	   * @param {Object} actions - actions for flip
	   *   @param {Function} actions.flip - flip action
	   */


	  _createClass(Flip, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this._actions = actions;

	      this._els.flipButton.addEventListener('click', this._changeFlip.bind(this));
	    }
	    /**
	     * change Flip status
	     * @param {object} event - change event
	     * @private
	     */

	  }, {
	    key: "_changeFlip",
	    value: function _changeFlip(event) {
	      var _this2 = this;

	      var button = event.target.closest('.tui-image-editor-button');

	      if (button) {
	        var flipType = this.getButtonType(button, ['flipX', 'flipY', 'resetFlip']);

	        if (!this.flipStatus && flipType === 'resetFlip') {
	          return;
	        }

	        this._actions.flip(flipType).then(function (flipStatus) {
	          var flipClassList = _this2._els.flipButton.classList;
	          _this2.flipStatus = false;
	          flipClassList.remove('resetFlip');
	          ['flipX', 'flipY'].map(function (type) {
	            flipClassList.remove(type);

	            if (flipStatus[type]) {
	              flipClassList.add(type);
	              flipClassList.add('resetFlip');
	              _this2.flipStatus = true;
	            }
	          });
	        });
	      }
	    }
	  }]);

	  return Flip;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$3 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-retate-button\">\n            <div class=\"tui-image-editor-button clockwise\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-rotate-clockwise\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-rotate-clockwise\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> 30 </label>\n            </div>\n            <div class=\"tui-image-editor-button counterclockwise\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-rotate-counterclockwise\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-rotate-counterclockwise\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> -30 </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-newline tui-image-editor-range-wrap\">\n            <label class=\"range\">").concat(locale.localize('Range'), "</label>\n            <div id=\"tie-rotate-range\"></div>\n            <input id=\"tie-ratate-range-value\" class=\"tui-image-editor-range-value\" value=\"0\" />\n        </li>\n    </ul>\n");
	});

	var CLOCKWISE = 30;
	var COUNTERCLOCKWISE = -30;
	/**
	 * Rotate ui class
	 * @class
	 * @ignore
	 */

	var Rotate =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Rotate, _Submenu);

	  function Rotate(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Rotate);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rotate).call(this, subMenuElement, {
	      locale: locale,
	      name: 'rotate',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$3
	    }));
	    _this._value = 0;
	    _this._els = {
	      rotateButton: _this.selector('#tie-retate-button'),
	      rotateRange: new Range(_this.selector('#tie-rotate-range'), defaultRotateRangeValus),
	      rotateRangeValue: _this.selector('#tie-ratate-range-value')
	    };
	    return _this;
	  }

	  _createClass(Rotate, [{
	    key: "setRangeBarAngle",
	    value: function setRangeBarAngle(type, angle) {
	      var resultAngle = angle;

	      if (type === 'rotate') {
	        resultAngle = parseInt(this._els.rotateRangeValue.value, 10) + angle;
	      }

	      this._els.rotateRangeValue.value = resultAngle;

	      this._setRangeBarRatio(resultAngle);
	    }
	  }, {
	    key: "_setRangeBarRatio",
	    value: function _setRangeBarRatio(angle) {
	      this._els.rotateRange.value = angle;
	    }
	    /**
	     * Add event for rotate
	     * @param {Object} actions - actions for crop
	     *   @param {Function} actions.rotate - rotate action
	     *   @param {Function} actions.setAngle - set angle action
	     */

	  }, {
	    key: "addEvent",
	    value: function addEvent(actions) {
	      // {rotate, setAngle}
	      this.actions = actions;

	      this._els.rotateButton.addEventListener('click', this._changeRotateForButton.bind(this));

	      this._els.rotateRange.on('change', this._changeRotateForRange.bind(this));

	      this._els.rotateRangeValue.setAttribute('readonly', true);
	    }
	    /**
	     * Change rotate for range
	     * @param {number} value - angle value
	     * @param {boolean} isLast - Is last change
	     * @private
	     */

	  }, {
	    key: "_changeRotateForRange",
	    value: function _changeRotateForRange(value, isLast) {
	      var angle = toInteger$1(value);
	      this._els.rotateRangeValue.value = angle;
	      this.actions.setAngle(angle, !isLast);
	      this._value = angle;
	    }
	    /**
	     * Change rotate for button
	     * @param {object} event - add button event object
	     * @private
	     */

	  }, {
	    key: "_changeRotateForButton",
	    value: function _changeRotateForButton(event) {
	      var button = event.target.closest('.tui-image-editor-button');
	      var angle = this._els.rotateRangeValue.value;

	      if (button) {
	        var rotateType = this.getButtonType(button, ['counterclockwise', 'clockwise']);
	        var rotateAngle = {
	          clockwise: CLOCKWISE,
	          counterclockwise: COUNTERCLOCKWISE
	        }[rotateType];
	        var newAngle = parseInt(angle, 10) + rotateAngle;
	        var isRotatable = newAngle >= -360 && newAngle <= 360;

	        if (isRotatable) {
	          this.actions.rotate(rotateAngle);
	        }
	      }
	    }
	  }]);

	  return Rotate;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$4 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-text-effect-button\">\n            <div class=\"tui-image-editor-button bold\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                    <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-text-bold\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-bold\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Bold'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button italic\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-text-italic\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-italic\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Italic'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button underline\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-text-underline\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-underline\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Underline'), " </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li id=\"tie-text-align-button\">\n            <div class=\"tui-image-editor-button left\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                     <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-text-align-left\"\n                        class=\"normal\"/>\n                     <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-align-left\"\n                        class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Left'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button center\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                     <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-text-align-center\"\n                        class=\"normal\"/>\n                     <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-align-center\"\n                        class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Center'), " </label>\n            </div>\n            <div class=\"tui-image-editor-button right\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                     <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-text-align-right\"\n                        class=\"normal\"/>\n                     <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-text-align-right\"\n                        class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Right'), " </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li>\n            <div id=\"tie-text-color\" title=\"").concat(locale.localize('Color'), "\"></div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-newline tui-image-editor-range-wrap\">\n            <label class=\"range\">").concat(locale.localize('Text size'), "</label>\n            <div id=\"tie-text-range\"></div>\n            <input id=\"tie-text-range-value\" class=\"tui-image-editor-range-value\" value=\"0\" />\n        </li>\n    </ul>\n");
	});

	/**
	 * Crop ui class
	 * @class
	 * @ignore
	 */

	var Text =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Text, _Submenu);

	  function Text(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Text);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this, subMenuElement, {
	      locale: locale,
	      name: 'text',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$4
	    }));
	    _this.effect = {
	      bold: false,
	      italic: false,
	      underline: false
	    };
	    _this.align = 'left';
	    _this._els = {
	      textEffectButton: _this.selector('#tie-text-effect-button'),
	      textAlignButton: _this.selector('#tie-text-align-button'),
	      textColorpicker: new Colorpicker(_this.selector('#tie-text-color'), '#ffbb3b', _this.toggleDirection),
	      textRange: new Range(_this.selector('#tie-text-range'), defaultTextRangeValus),
	      textRangeValue: _this.selector('#tie-text-range-value')
	    };
	    return _this;
	  }
	  /**
	   * Add event for text
	   * @param {Object} actions - actions for text
	   *   @param {Function} actions.changeTextStyle - change text style
	   */


	  _createClass(Text, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this.actions = actions;

	      this._els.textEffectButton.addEventListener('click', this._setTextEffectHandler.bind(this));

	      this._els.textAlignButton.addEventListener('click', this._setTextAlignHandler.bind(this));

	      this._els.textRange.on('change', this._changeTextRnageHandler.bind(this));

	      this._els.textRangeValue.value = this._els.textRange.value;

	      this._els.textRangeValue.setAttribute('readonly', true);

	      this._els.textColorpicker.on('change', this._changeColorHandler.bind(this));
	    }
	    /**
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {
	      this.actions.stopDrawingMode();
	    }
	    /**
	     * Executed when the menu starts.
	     */

	  }, {
	    key: "changeStartMode",
	    value: function changeStartMode() {
	      this.actions.modeChange('text');
	    }
	    /**
	     * Get text color
	     * @returns {string} - text color
	     */

	  }, {
	    key: "_setTextEffectHandler",

	    /**
	     * text effect set handler
	     * @param {object} event - add button event object
	     * @private
	     */
	    value: function _setTextEffectHandler(event) {
	      var button = event.target.closest('.tui-image-editor-button');

	      var _button$className$mat = button.className.match(/(bold|italic|underline)/),
	          _button$className$mat2 = _slicedToArray(_button$className$mat, 1),
	          styleType = _button$className$mat2[0];

	      var styleObj = {
	        'bold': {
	          fontWeight: 'bold'
	        },
	        'italic': {
	          fontStyle: 'italic'
	        },
	        'underline': {
	          textDecoration: 'underline'
	        }
	      }[styleType];
	      this.effect[styleType] = !this.effect[styleType];
	      button.classList.toggle('active');
	      this.actions.changeTextStyle(styleObj);
	    }
	    /**
	     * text effect set handler
	     * @param {object} event - add button event object
	     * @private
	     */

	  }, {
	    key: "_setTextAlignHandler",
	    value: function _setTextAlignHandler(event) {
	      var button = event.target.closest('.tui-image-editor-button');

	      if (button) {
	        var styleType = this.getButtonType(button, ['left', 'center', 'right']);
	        event.currentTarget.classList.remove(this.align);

	        if (this.align !== styleType) {
	          event.currentTarget.classList.add(styleType);
	        }

	        this.actions.changeTextStyle({
	          textAlign: styleType
	        });
	        this.align = styleType;
	      }
	    }
	    /**
	     * text align set handler
	     * @param {number} value - range value
	     * @private
	     */

	  }, {
	    key: "_changeTextRnageHandler",
	    value: function _changeTextRnageHandler(value) {
	      value = toInteger$1(value);

	      if (toInteger$1(this._els.textRangeValue.value) !== value) {
	        this.actions.changeTextStyle({
	          fontSize: value
	        });
	        this._els.textRangeValue.value = value;
	      }
	    }
	    /**
	     * change color handler
	     * @param {string} color - change color string
	     * @private
	     */

	  }, {
	    key: "_changeColorHandler",
	    value: function _changeColorHandler(color) {
	      color = color || 'transparent';
	      this.actions.changeTextStyle({
	        'fill': color
	      });
	    }
	  }, {
	    key: "textColor",
	    get: function get() {
	      return this._els.textColorpicker.color;
	    }
	    /**
	     * Get text size
	     * @returns {string} - text size
	     */

	  }, {
	    key: "fontSize",
	    get: function get() {
	      return this._els.textRange.value;
	    }
	    /**
	     * Set text size
	     * @param {Number} value - text size
	     */
	    ,
	    set: function set(value) {
	      this._els.textRange.value = value;
	      this._els.textRangeValue.value = value;
	    }
	  }]);

	  return Text;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$5 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li>\n            <div class=\"tui-image-editor-button\">\n                <div>\n                    <input type=\"file\" accept=\"image/*\" id=\"tie-mask-image-file\">\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-mask-load\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-mask-load\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label> ").concat(locale.localize('Load Mask Image'), " </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li id=\"tie-mask-apply\" class=\"tui-image-editor-newline apply\" style=\"margin-top: 22px;margin-bottom: 5px\">\n            <div class=\"tui-image-editor-button apply\">\n                <svg class=\"svg_ic-menu\">\n                    <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-apply\" class=\"normal\"/>\n                    <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-apply\" class=\"active\"/>\n                </svg>\n                <label>\n                    ").concat(locale.localize('Apply'), "\n                </label>\n            </div>\n        </li>\n    </ul>\n");
	});

	/**
	 * Mask ui class
	 * @class
	 * @ignore
	 */

	var Mask =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Mask, _Submenu);

	  function Mask(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Mask);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mask).call(this, subMenuElement, {
	      locale: locale,
	      name: 'mask',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$5
	    }));
	    _this._els = {
	      applyButton: _this.selector('#tie-mask-apply'),
	      maskImageButton: _this.selector('#tie-mask-image-file')
	    };
	    return _this;
	  }
	  /**
	   * Add event for mask
	   * @param {Object} actions - actions for crop
	   *   @param {Function} actions.loadImageFromURL - load image action
	   *   @param {Function} actions.applyFilter - apply filter action
	   */


	  _createClass(Mask, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this.actions = actions;

	      this._els.maskImageButton.addEventListener('change', this._loadMaskFile.bind(this));

	      this._els.applyButton.addEventListener('click', this._applyMask.bind(this));
	    }
	    /**
	     * Apply mask
	     * @private
	     */

	  }, {
	    key: "_applyMask",
	    value: function _applyMask() {
	      this.actions.applyFilter();

	      this._els.applyButton.classList.remove('active');
	    }
	    /**
	     * Load mask file
	     * @param {object} event - File change event object
	     * @private
	     */

	  }, {
	    key: "_loadMaskFile",
	    value: function _loadMaskFile(event) {
	      var imgUrl;

	      if (!isSupportFileApi()) {
	        alert('This browser does not support file-api');
	      }

	      var _event$target$files = _slicedToArray(event.target.files, 1),
	          file = _event$target$files[0];

	      if (file) {
	        imgUrl = URL.createObjectURL(file);
	        this.actions.loadImageFromURL(imgUrl, file);

	        this._els.applyButton.classList.add('active');
	      }
	    }
	  }]);

	  return Mask;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$6 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-icon-add-button\">\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-arrow\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-icon-arrow\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-arrow\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Arrow'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-arrow-2\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-arrow-2\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-arrow-2\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Arrow-2'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-arrow-3\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-arrow-3\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-arrow-3\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Arrow-3'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-star\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-star\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-star\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Star-1'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-star-2\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-star-2\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-star-2\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Star-2'), "\n                </label>\n            </div>\n\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-polygon\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-polygon\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-polygon\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Polygon'), "\n                </label>\n            </div>\n\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-location\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-location\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-location\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Location'), "\n                </label>\n            </div>\n\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-heart\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-heart\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-heart\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Heart'), "\n                </label>\n            </div>\n\n            <div class=\"tui-image-editor-button\" data-icontype=\"icon-bubble\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-bubble\"\n                            class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-bubble\"\n                            class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Bubble'), "\n                </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li id=\"tie-icon-add-button\">\n            <div class=\"tui-image-editor-button\" style=\"margin:0\">\n                <div>\n                    <input type=\"file\" accept=\"image/*\" id=\"tie-icon-image-file\">\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-icon-load\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-icon-load\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Custom icon'), "\n                </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li>\n            <div id=\"tie-icon-color\" title=\"").concat(locale.localize('Color'), "\"></div>\n        </li>\n    </ul>\n");
	});

	/**
	 * Icon ui class
	 * @class
	 * @ignore
	 */

	var Icon =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Icon, _Submenu);

	  function Icon(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Icon);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Icon).call(this, subMenuElement, {
	      locale: locale,
	      name: 'icon',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$6
	    }));
	    _this.iconType = null;
	    _this._iconMap = {};
	    _this._els = {
	      registIconButton: _this.selector('#tie-icon-image-file'),
	      addIconButton: _this.selector('#tie-icon-add-button'),
	      iconColorpicker: new Colorpicker(_this.selector('#tie-icon-color'), '#ffbb3b', _this.toggleDirection)
	    };
	    return _this;
	  }
	  /**
	   * Add event for icon
	   * @param {Object} actions - actions for icon
	   *   @param {Function} actions.registCustomIcon - register icon
	   *   @param {Function} actions.addIcon - add icon
	   *   @param {Function} actions.changeColor - change icon color
	   */


	  _createClass(Icon, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this.actions = actions;

	      this._els.iconColorpicker.on('change', this._changeColorHandler.bind(this));

	      this._els.registIconButton.addEventListener('change', this._registeIconHandler.bind(this));

	      this._els.addIconButton.addEventListener('click', this._addIconHandler.bind(this));
	    }
	    /**
	     * Clear icon type
	     */

	  }, {
	    key: "clearIconType",
	    value: function clearIconType() {
	      this._els.addIconButton.classList.remove(this.iconType);

	      this.iconType = null;
	    }
	    /**
	     * Register default icon
	     */

	  }, {
	    key: "registDefaultIcon",
	    value: function registDefaultIcon() {
	      var _this2 = this;

	      forIn_1(defaultIconPath, function (path, type) {
	        _this2.actions.registDefalutIcons(type, path);
	      });
	    }
	    /**
	     * Set icon picker color
	     * @param {string} iconColor - rgb color string
	     */

	  }, {
	    key: "setIconPickerColor",
	    value: function setIconPickerColor(iconColor) {
	      this._els.iconColorpicker.color = iconColor;
	    }
	    /**
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {
	      this.clearIconType();
	      this.actions.cancelAddIcon();
	    }
	    /**
	     * Change icon color
	     * @param {string} color - color for change
	     * @private
	     */

	  }, {
	    key: "_changeColorHandler",
	    value: function _changeColorHandler(color) {
	      color = color || 'transparent';
	      this.actions.changeColor(color);
	    }
	    /**
	     * Change icon color
	     * @param {object} event - add button event object
	     * @private
	     */

	  }, {
	    key: "_addIconHandler",
	    value: function _addIconHandler(event) {
	      var button = event.target.closest('.tui-image-editor-button');

	      if (button) {
	        var iconType = button.getAttribute('data-icontype');
	        var iconColor = this._els.iconColorpicker.color;
	        this.actions.discardSelection();
	        this.actions.changeSelectableAll(false);

	        this._els.addIconButton.classList.remove(this.iconType);

	        this._els.addIconButton.classList.add(iconType);

	        if (this.iconType === iconType) {
	          this.changeStandbyMode();
	        } else {
	          this.actions.addIcon(iconType, iconColor);
	          this.iconType = iconType;
	        }
	      }
	    }
	    /**
	     * register icon
	     * @param {object} event - file change event object
	     * @private
	     */

	  }, {
	    key: "_registeIconHandler",
	    value: function _registeIconHandler(event) {
	      var imgUrl;

	      if (!isSupportFileApi) {
	        alert('This browser does not support file-api');
	      }

	      var _event$target$files = _slicedToArray(event.target.files, 1),
	          file = _event$target$files[0];

	      if (file) {
	        imgUrl = URL.createObjectURL(file);
	        this.actions.registCustomIcon(imgUrl, file);
	      }
	    }
	  }]);

	  return Icon;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @param {Object} normal - iconStyle
	 * @param {Object} active - iconStyle
	 * @returns {string}
	 */
	var templateHtml$7 = (function (_ref) {
	  var locale = _ref.locale,
	      _ref$iconStyle = _ref.iconStyle,
	      normal = _ref$iconStyle.normal,
	      active = _ref$iconStyle.active;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li id=\"tie-draw-line-select-button\">\n            <div class=\"tui-image-editor-button free\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-draw-free\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-draw-free\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Free'), "\n                </label>\n            </div>\n            <div class=\"tui-image-editor-button line\">\n                <div>\n                    <svg class=\"svg_ic-submenu\">\n                        <use xlink:href=\"").concat(normal.path, "#").concat(normal.name, "-ic-draw-line\" class=\"normal\"/>\n                        <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-draw-line\" class=\"active\"/>\n                    </svg>\n                </div>\n                <label>\n                    ").concat(locale.localize('Straight'), "\n                </label>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li>\n            <div id=\"tie-draw-color\" title=\"").concat(locale.localize('Color'), "\"></div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-newline tui-image-editor-range-wrap\">\n            <label class=\"range\">").concat(locale.localize('Range'), "</label>\n            <div id=\"tie-draw-range\"></div>\n            <input id=\"tie-draw-range-value\" class=\"tui-image-editor-range-value\" value=\"0\" />\n        </li>\n    </ul>\n");
	});

	var DRAW_OPACITY = 0.7;
	/**
	 * Draw ui class
	 * @class
	 * @ignore
	 */

	var Draw =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Draw, _Submenu);

	  function Draw(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Draw);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Draw).call(this, subMenuElement, {
	      locale: locale,
	      name: 'draw',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$7
	    }));
	    _this._els = {
	      lineSelectButton: _this.selector('#tie-draw-line-select-button'),
	      drawColorpicker: new Colorpicker(_this.selector('#tie-draw-color'), '#00a9ff', _this.toggleDirection),
	      drawRange: new Range(_this.selector('#tie-draw-range'), defaultDrawRangeValus),
	      drawRangeValue: _this.selector('#tie-draw-range-value')
	    };
	    _this.type = null;
	    _this.color = _this._els.drawColorpicker.color;
	    _this.width = _this._els.drawRange.value;
	    return _this;
	  }
	  /**
	   * Add event for draw
	   * @param {Object} actions - actions for crop
	   *   @param {Function} actions.setDrawMode - set draw mode
	   */


	  _createClass(Draw, [{
	    key: "addEvent",
	    value: function addEvent(actions) {
	      this.actions = actions;

	      this._els.lineSelectButton.addEventListener('click', this._changeDrawType.bind(this));

	      this._els.drawColorpicker.on('change', this._changeDrawColor.bind(this));

	      this._els.drawRange.on('change', this._changeDrawRange.bind(this));

	      this._els.drawRangeValue.value = this._els.drawRange.value;

	      this._els.drawRangeValue.setAttribute('readonly', true);
	    }
	    /**
	     * set draw mode - action runner
	     */

	  }, {
	    key: "setDrawMode",
	    value: function setDrawMode() {
	      this.actions.setDrawMode(this.type, {
	        width: this.width,
	        color: getRgb(this.color, DRAW_OPACITY)
	      });
	    }
	    /**
	     * Returns the menu to its default state.
	     */

	  }, {
	    key: "changeStandbyMode",
	    value: function changeStandbyMode() {
	      this.type = null;
	      this.actions.stopDrawingMode();
	      this.actions.changeSelectableAll(true);

	      this._els.lineSelectButton.classList.remove('free');

	      this._els.lineSelectButton.classList.remove('line');
	    }
	    /**
	     * Executed when the menu starts.
	     */

	  }, {
	    key: "changeStartMode",
	    value: function changeStartMode() {
	      this.type = 'free';

	      this._els.lineSelectButton.classList.add('free');

	      this.setDrawMode();
	    }
	    /**
	     * Change draw type event
	     * @param {object} event - line select event
	     * @private
	     */

	  }, {
	    key: "_changeDrawType",
	    value: function _changeDrawType(event) {
	      var button = event.target.closest('.tui-image-editor-button');

	      if (button) {
	        var lineType = this.getButtonType(button, ['free', 'line']);
	        this.actions.discardSelection();

	        if (this.type === lineType) {
	          this.changeStandbyMode();
	          return;
	        }

	        this.changeStandbyMode();
	        this.type = lineType;

	        this._els.lineSelectButton.classList.add(lineType);

	        this.setDrawMode();
	      }
	    }
	    /**
	     * Change drawing color
	     * @param {string} color - select drawing color
	     * @private
	     */

	  }, {
	    key: "_changeDrawColor",
	    value: function _changeDrawColor(color) {
	      this.color = color || 'transparent';

	      if (!this.type) {
	        this.changeStartMode();
	      } else {
	        this.setDrawMode();
	      }
	    }
	    /**
	     * Change drawing Range
	     * @param {number} value - select drawing range
	     * @private
	     */

	  }, {
	    key: "_changeDrawRange",
	    value: function _changeDrawRange(value) {
	      value = toInteger$1(value);
	      this._els.drawRangeValue.value = value;
	      this.width = value;

	      if (!this.type) {
	        this.changeStartMode();
	      } else {
	        this.setDrawMode();
	      }
	    }
	  }]);

	  return Draw;
	}(Submenu);

	/**
	 * @param {Locale} locale - Translate text
	 * @returns {string}
	 */
	var templateHtml$8 = (function (_ref) {
	  var locale = _ref.locale;
	  return "\n    <ul class=\"tui-image-editor-submenu-item\">\n        <li class=\"tui-image-editor-submenu-align\">\n            <div class=\"tui-image-editor-checkbox-wrap fixed-width\">\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-grayscale\">\n                    <label for=\"tie-grayscale\">".concat(locale.localize('Grayscale'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-invert\">\n                    <label for=\"tie-invert\">").concat(locale.localize('Invert'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-sepia\">\n                    <label for=\"tie-sepia\">").concat(locale.localize('Sepia'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-sepia2\">\n                    <label for=\"tie-sepia2\">").concat(locale.localize('Sepia2'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-blur\">\n                    <label for=\"tie-blur\">").concat(locale.localize('Blur'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-sharpen\">\n                    <label for=\"tie-sharpen\">").concat(locale.localize('Sharpen'), "</label>\n                </div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-emboss\">\n                    <label for=\"tie-emboss\">").concat(locale.localize('Emboss'), "</label>\n                </div>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-submenu-align\">\n            <div class=\"tui-image-editor-checkbox-group tui-image-editor-disabled\" style=\"margin-bottom: 7px;\">\n                <div class=\"tui-image-editor-checkbox-wrap\">\n                    <div class=\"tui-image-editor-checkbox\">\n                        <input type=\"checkbox\" id=\"tie-remove-white\">\n                        <label for=\"tie-remove-white\">").concat(locale.localize('Remove White'), "</label>\n                    </div>\n                </div>\n                <div class=\"tui-image-editor-newline tui-image-editor-range-wrap short\">\n                    <label>").concat(locale.localize('Distance'), "</label>\n                    <div id=\"tie-removewhite-distance-range\"></div>\n                </div>\n            </div>\n            <div class=\"tui-image-editor-checkbox-group tui-image-editor-disabled\">\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-brightness\">\n                    <label for=\"tie-brightness\">").concat(locale.localize('Brightness'), "</label>\n                </div>\n                <div class=\"tui-image-editor-range-wrap short\">\n                    <div id=\"tie-brightness-range\"></div>\n                </div>\n            </div>\n            <div class=\"tui-image-editor-checkbox-group tui-image-editor-disabled\">\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-noise\">\n                    <label for=\"tie-noise\">").concat(locale.localize('Noise'), "</label>\n                </div>\n                <div class=\"tui-image-editor-range-wrap short\">\n                    <div id=\"tie-noise-range\"></div>\n                </div>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition only-left-right\">\n            <div></div>\n        </li>\n        <li class=\"tui-image-editor-submenu-align\">\n            <div class=\"tui-image-editor-checkbox-group tui-image-editor-disabled\">\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-pixelate\">\n                    <label for=\"tie-pixelate\">").concat(locale.localize('Pixelate'), "</label>\n                </div>\n                <div class=\"tui-image-editor-range-wrap short\">\n                    <div id=\"tie-pixelate-range\"></div>\n                </div>\n            </div>\n            <div class=\"tui-image-editor-checkbox-group tui-image-editor-disabled\">\n                <div class=\"tui-image-editor-newline tui-image-editor-checkbox-wrap\">\n                    <div class=\"tui-image-editor-checkbox\">\n                        <input type=\"checkbox\" id=\"tie-color-filter\">\n                        <label for=\"tie-color-filter\">").concat(locale.localize('Color Filter'), "</label>\n                    </div>\n                </div>\n                <div class=\"tui-image-editor-newline tui-image-editor-range-wrap short\">\n                    <label>").concat(locale.localize('Threshold'), "</label>\n                    <div id=\"tie-colorfilter-threshole-range\"></div>\n                </div>\n            </div>\n        </li>\n        <li class=\"tui-image-editor-partition\">\n            <div></div>\n        </li>\n        <li>\n            <div class=\"filter-color-item\">\n                <div id=\"tie-filter-tint-color\" title=\"").concat(locale.localize('Tint'), "\"></div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-tint\">\n                    <label for=\"tie-tint\"></label>\n                </div>\n            </div>\n            <div class=\"filter-color-item\">\n                <div id=\"tie-filter-multiply-color\" title=\"").concat(locale.localize('Multiply'), "\"></div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-multiply\">\n                    <label for=\"tie-multiply\"></label>\n                </div>\n            </div>\n            <div class=\"filter-color-item\">\n                <div id=\"tie-filter-blend-color\" title=\"").concat(locale.localize('Blend'), "\"></div>\n                <div class=\"tui-image-editor-checkbox\">\n                    <input type=\"checkbox\" id=\"tie-blend\">\n                    <label for=\"tie-blend\"></label>\n                </div>\n            </div>\n        </li>\n    </ul>\n");
	});

	var PICKER_CONTROL_HEIGHT = '130px';
	var BLEND_OPTIONS = ['add', 'diff', 'subtract', 'multiply', 'screen', 'lighten', 'darken'];
	var FILTER_OPTIONS = ['grayscale', 'invert', 'sepia', 'sepia2', 'blur', 'sharpen', 'emboss', 'remove-white', 'brightness', 'noise', 'pixelate', 'color-filter', 'tint', 'multiply', 'blend'];
	var filterNameMap = {
	  grayscale: 'grayscale',
	  invert: 'invert',
	  sepia: 'sepia',
	  sepia2: 'vintage',
	  blur: 'blur',
	  sharpen: 'sharpen',
	  emboss: 'emboss',
	  removeWhite: 'removeColor',
	  brightness: 'brightness',
	  contrast: 'contrast',
	  saturation: 'saturation',
	  vintage: 'vintage',
	  polaroid: 'polaroid',
	  noise: 'noise',
	  pixelate: 'pixelate',
	  colorFilter: 'removeColor',
	  tint: 'blendColor',
	  multiply: 'blendColor',
	  blend: 'blendColor',
	  hue: 'hue',
	  gamma: 'gamma'
	};
	/**
	 * Filter ui class
	 * @class
	 * @ignore
	 */

	var Filter =
	/*#__PURE__*/
	function (_Submenu) {
	  _inherits(Filter, _Submenu);

	  function Filter(subMenuElement, _ref) {
	    var _this;

	    var locale = _ref.locale,
	        iconStyle = _ref.iconStyle,
	        menuBarPosition = _ref.menuBarPosition;

	    _classCallCheck(this, Filter);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, subMenuElement, {
	      locale: locale,
	      name: 'filter',
	      iconStyle: iconStyle,
	      menuBarPosition: menuBarPosition,
	      templateHtml: templateHtml$8
	    }));
	    _this.selectBoxShow = false;
	    _this.checkedMap = {};

	    _this._makeControlElement();

	    return _this;
	  }
	  /**
	   * Add event for filter
	   * @param {Object} actions - actions for crop
	   *   @param {Function} actions.applyFilter - apply filter option
	   */


	  _createClass(Filter, [{
	    key: "addEvent",
	    value: function addEvent(_ref2) {
	      var _this2 = this;

	      var applyFilter = _ref2.applyFilter;

	      var changeRangeValue = this._changeRangeValue.bind(this, applyFilter);

	      FILTER_OPTIONS.map(function (filter) {
	        var filterCheckElement = _this2.selector("#tie-".concat(filter));

	        var filterNameCamelCase = toCamelCase(filter);
	        _this2.checkedMap[filterNameCamelCase] = filterCheckElement;
	        filterCheckElement.addEventListener('change', function () {
	          return changeRangeValue(filterNameCamelCase);
	        });
	      });

	      this._els.removewhiteDistanceRange.on('change', function () {
	        return changeRangeValue('removeWhite');
	      });

	      this._els.colorfilterThresholeRange.on('change', function () {
	        return changeRangeValue('colorFilter');
	      });

	      this._els.pixelateRange.on('change', function () {
	        return changeRangeValue('pixelate');
	      });

	      this._els.noiseRange.on('change', function () {
	        return changeRangeValue('noise');
	      });

	      this._els.brightnessRange.on('change', function () {
	        return changeRangeValue('brightness');
	      });

	      this._els.blendType.addEventListener('change', function () {
	        return changeRangeValue('blend');
	      });

	      this._els.filterBlendColor.on('change', function () {
	        return changeRangeValue('blend');
	      });

	      this._els.filterMultiplyColor.on('change', function () {
	        return changeRangeValue('multiply');
	      });

	      this._els.tintOpacity.on('change', function () {
	        return changeRangeValue('tint');
	      });

	      this._els.filterTintColor.on('change', function () {
	        return changeRangeValue('tint');
	      });

	      this._els.blendType.addEventListener('click', function (event) {
	        return event.stopPropagation();
	      });

	      this._els.filterMultiplyColor.on('changeShow', this.colorPickerChangeShow.bind(this));

	      this._els.filterTintColor.on('changeShow', this.colorPickerChangeShow.bind(this));

	      this._els.filterBlendColor.on('changeShow', this.colorPickerChangeShow.bind(this));
	    }
	    /**
	     * Add event for filter
	     * @param {Function} applyFilter - actions for firter
	     * @param {string} filter - filter name
	     */

	  }, {
	    key: "_changeRangeValue",
	    value: function _changeRangeValue(applyFilter, filter) {
	      var apply = this.checkedMap[filter].checked;
	      var type = filterNameMap[filter];
	      var checkboxGroup = this.checkedMap[filter].closest('.tui-image-editor-checkbox-group');

	      if (checkboxGroup) {
	        if (apply) {
	          checkboxGroup.classList.remove('tui-image-editor-disabled');
	        } else {
	          checkboxGroup.classList.add('tui-image-editor-disabled');
	        }
	      }

	      applyFilter(apply, type, this._getFilterOption(filter));
	    }
	    /**
	     * Get filter option
	     * @param {String} type - filter type
	     * @returns {Object} filter option object
	     * @private
	     */

	  }, {
	    key: "_getFilterOption",
	    value: function _getFilterOption(type) {
	      // eslint-disable-line
	      var option = {};

	      switch (type) {
	        case 'removeWhite':
	          option.color = '#FFFFFF';
	          option.useAlpha = false;
	          option.distance = parseFloat(this._els.removewhiteDistanceRange.value);
	          break;

	        case 'colorFilter':
	          option.color = '#FFFFFF';
	          option.distance = parseFloat(this._els.colorfilterThresholeRange.value);
	          break;

	        case 'pixelate':
	          option.blocksize = toInteger$1(this._els.pixelateRange.value);
	          break;

	        case 'noise':
	          option.noise = toInteger$1(this._els.noiseRange.value);
	          break;

	        case 'brightness':
	          option.brightness = parseFloat(this._els.brightnessRange.value);
	          break;

	        case 'blend':
	          option.mode = 'add';
	          option.color = this._els.filterBlendColor.color;
	          option.mode = this._els.blendType.value;
	          break;

	        case 'multiply':
	          option.mode = 'multiply';
	          option.color = this._els.filterMultiplyColor.color;
	          break;

	        case 'tint':
	          option.mode = 'tint';
	          option.color = this._els.filterTintColor.color;
	          option.alpha = this._els.tintOpacity.value;
	          break;
	      }

	      return option;
	    }
	    /**
	     * Make submenu range and colorpicker control
	     * @private
	     */

	  }, {
	    key: "_makeControlElement",
	    value: function _makeControlElement() {
	      var selector = this.selector;
	      this._els = {
	        removewhiteDistanceRange: new Range(selector('#tie-removewhite-distance-range'), defaultFilterRangeValus.removewhiteDistanceRange),
	        brightnessRange: new Range(selector('#tie-brightness-range'), defaultFilterRangeValus.brightnessRange),
	        noiseRange: new Range(selector('#tie-noise-range'), defaultFilterRangeValus.noiseRange),
	        pixelateRange: new Range(selector('#tie-pixelate-range'), defaultFilterRangeValus.pixelateRange),
	        colorfilterThresholeRange: new Range(selector('#tie-colorfilter-threshole-range'), defaultFilterRangeValus.colorfilterThresholeRange),
	        filterTintColor: new Colorpicker(selector('#tie-filter-tint-color'), '#03bd9e', this.toggleDirection),
	        filterMultiplyColor: new Colorpicker(selector('#tie-filter-multiply-color'), '#515ce6', this.toggleDirection),
	        filterBlendColor: new Colorpicker(selector('#tie-filter-blend-color'), '#ffbb3b', this.toggleDirection)
	      };
	      this._els.tintOpacity = this._pickerWithRange(this._els.filterTintColor.pickerControl);
	      this._els.blendType = this._pickerWithSelectbox(this._els.filterBlendColor.pickerControl);
	      this.colorPickerControls.push(this._els.filterTintColor);
	      this.colorPickerControls.push(this._els.filterMultiplyColor);
	      this.colorPickerControls.push(this._els.filterBlendColor);
	    }
	    /**
	     * Make submenu control for picker & range mixin
	     * @param {HTMLElement} pickerControl - pickerControl dom element
	     * @returns {Range}
	     * @private
	     */

	  }, {
	    key: "_pickerWithRange",
	    value: function _pickerWithRange(pickerControl) {
	      var rangeWrap = document.createElement('div');
	      var rangelabel = document.createElement('label');
	      var range = document.createElement('div');
	      range.id = 'tie-filter-tint-opacity';
	      rangelabel.innerHTML = 'Opacity';
	      rangeWrap.appendChild(rangelabel);
	      rangeWrap.appendChild(range);
	      pickerControl.appendChild(rangeWrap);
	      pickerControl.style.height = PICKER_CONTROL_HEIGHT;
	      return new Range(range, defaultFilterRangeValus.tintOpacityRange);
	    }
	    /**
	     * Make submenu control for picker & selectbox
	     * @param {HTMLElement} pickerControl - pickerControl dom element
	     * @returns {HTMLElement}
	     * @private
	     */

	  }, {
	    key: "_pickerWithSelectbox",
	    value: function _pickerWithSelectbox(pickerControl) {
	      var selectlistWrap = document.createElement('div');
	      var selectlist = document.createElement('select');
	      var optionlist = document.createElement('ul');
	      selectlistWrap.className = 'tui-image-editor-selectlist-wrap';
	      optionlist.className = 'tui-image-editor-selectlist';
	      selectlistWrap.appendChild(selectlist);
	      selectlistWrap.appendChild(optionlist);

	      this._makeSelectOptionList(selectlist);

	      pickerControl.appendChild(selectlistWrap);
	      pickerControl.style.height = PICKER_CONTROL_HEIGHT;

	      this._drawSelectOptionList(selectlist, optionlist);

	      this._pickerWithSelectboxForAddEvent(selectlist, optionlist);

	      return selectlist;
	    }
	    /**
	     * Make selectbox option list custom style
	     * @param {HTMLElement} selectlist - selectbox element
	     * @param {HTMLElement} optionlist - custom option list item element
	     * @private
	     */

	  }, {
	    key: "_drawSelectOptionList",
	    value: function _drawSelectOptionList(selectlist, optionlist) {
	      var options = selectlist.querySelectorAll('option');
	      options.forEach(function (option) {
	        var optionElement = document.createElement('li');
	        optionElement.innerHTML = option.innerHTML;
	        optionElement.setAttribute('data-item', option.value);
	        optionlist.appendChild(optionElement);
	      });
	    }
	    /**
	     * custome selectbox custom event
	     * @param {HTMLElement} selectlist - selectbox element
	     * @param {HTMLElement} optionlist - custom option list item element
	     * @private
	     */

	  }, {
	    key: "_pickerWithSelectboxForAddEvent",
	    value: function _pickerWithSelectboxForAddEvent(selectlist, optionlist) {
	      var _this3 = this;

	      optionlist.addEventListener('click', function (event) {
	        var optionValue = event.target.getAttribute('data-item');
	        var fireEvent = document.createEvent('HTMLEvents');
	        selectlist.querySelector("[value=\"".concat(optionValue, "\"]")).selected = true;
	        fireEvent.initEvent('change', true, true);
	        selectlist.dispatchEvent(fireEvent);
	        _this3.selectBoxShow = false;
	        optionlist.style.display = 'none';
	      });
	      selectlist.addEventListener('mousedown', function (event) {
	        event.preventDefault();
	        _this3.selectBoxShow = !_this3.selectBoxShow;
	        optionlist.style.display = _this3.selectBoxShow ? 'block' : 'none';
	        optionlist.setAttribute('data-selectitem', selectlist.value);
	        optionlist.querySelector("[data-item='".concat(selectlist.value, "']")).classList.add('active');
	      });
	    }
	    /**
	     * Make option list for select control
	     * @param {HTMLElement} selectlist - blend option select list element
	     * @private
	     */

	  }, {
	    key: "_makeSelectOptionList",
	    value: function _makeSelectOptionList(selectlist) {
	      BLEND_OPTIONS.map(function (option) {
	        var selectOption = document.createElement('option');
	        selectOption.setAttribute('value', option);
	        selectOption.innerHTML = option.replace(/^[a-z]/, function ($0) {
	          return $0.toUpperCase();
	        });
	        selectlist.appendChild(selectOption);
	      });
	    }
	  }]);

	  return Filter;
	}(Submenu);

	/**
	 * Translate messages
	 */
	var Locale =
	/*#__PURE__*/
	function () {
	  function Locale(locale) {
	    _classCallCheck(this, Locale);

	    this._locale = locale;
	  }
	  /**
	   * localize message
	   * @param {string} message - message who will be localized
	   * @returns {string}
	   */


	  _createClass(Locale, [{
	    key: "localize",
	    value: function localize(message) {
	      return this._locale[message] || message;
	    }
	  }]);

	  return Locale;
	}();

	var SUB_UI_COMPONENT = {
	  Shape: Shape,
	  Crop: Crop,
	  Flip: Flip,
	  Rotate: Rotate,
	  Text: Text,
	  Mask: Mask,
	  Icon: Icon,
	  Draw: Draw,
	  Filter: Filter
	};
	var BI_EXPRESSION_MINSIZE_WHEN_TOP_POSITION = '1300';
	/**
	 * Ui class
	 * @class
	 * @param {string|jQuery|HTMLElement} element - Wrapper's element or selector
	 * @param {Object} [options] - Ui setting options
	 *   @param {number} options.loadImage - Init default load image
	 *   @param {number} options.initMenu - Init start menu
	 *   @param {Boolean} [options.menuBarPosition=bottom] - Let
	 *   @param {Boolean} [options.applyCropSelectionStyle=false] - Let
	 *   @param {Object} [options.uiSize] - ui size of editor
	 *     @param {string} options.uiSize.width - width of ui
	 *     @param {string} options.uiSize.height - height of ui
	 * @param {Object} actions - ui action instance
	 */

	var UI =
	/*#__PURE__*/
	function () {
	  function UI(element, options, actions) {
	    _classCallCheck(this, UI);

	    this.options = this._initializeOption(options);
	    this._actions = actions;
	    this.submenu = false;
	    this.imageSize = {};
	    this.uiSize = {};
	    this._locale = new Locale(this.options.locale);
	    this.theme = new Theme(this.options.theme);
	    this._submenuChangeTransection = false;
	    this._selectedElement = null;
	    this._mainElement = null;
	    this._editorElementWrap = null;
	    this._editorElement = null;
	    this._menuElement = null;
	    this._subMenuElement = null;

	    this._makeUiElement(element);

	    this._setUiSize();

	    this._initMenuEvent = false;
	    this._els = {
	      'undo': this._menuElement.querySelector('#tie-btn-undo'),
	      'redo': this._menuElement.querySelector('#tie-btn-redo'),
	      'reset': this._menuElement.querySelector('#tie-btn-reset'),
	      'delete': this._menuElement.querySelector('#tie-btn-delete'),
	      'deleteAll': this._menuElement.querySelector('#tie-btn-delete-all'),
	      'download': this._selectedElement.querySelectorAll('.tui-image-editor-download-btn'),
	      'load': this._selectedElement.querySelectorAll('.tui-image-editor-load-btn')
	    };

	    this._makeSubMenu();
	  }
	  /**
	   * Set Default Selection for includeUI
	   * @param {Object} option - imageEditor options
	   * @returns {Object} - extends selectionStyle option
	   * @ignore
	   */


	  _createClass(UI, [{
	    key: "setUiDefaultSelectionStyle",
	    value: function setUiDefaultSelectionStyle(option) {
	      return Object.assign({
	        applyCropSelectionStyle: true,
	        applyGroupSelectionStyle: true,
	        selectionStyle: {
	          cornerStyle: 'circle',
	          cornerSize: 16,
	          cornerColor: '#fff',
	          cornerStrokeColor: '#fff',
	          transparentCorners: false,
	          lineWidth: 2,
	          borderColor: '#fff'
	        }
	      }, option);
	    }
	    /**
	     * Change editor size
	     * @param {Object} resizeInfo - ui & image size info
	     *   @param {Object} resizeInfo.uiSize - image size dimension
	     *     @param {string} resizeInfo.uiSize.width - ui width
	     *     @param {string} resizeInfo.uiSize.height - ui height
	     *   @param {Object} [resizeInfo.imageSize] - image size dimension
	     *     @param {Number} resizeInfo.imageSize.oldWidth - old width
	     *     @param {Number} resizeInfo.imageSize.oldHeight - old height
	     *     @param {Number} resizeInfo.imageSize.newWidth - new width
	     *     @param {Number} resizeInfo.imageSize.newHeight - new height
	     * @example
	     * // Change the image size and ui size, and change the affected ui state together.
	     * imageEditor.ui.resizeEditor({
	     *     imageSize: {oldWidth: 100, oldHeight: 100, newWidth: 700, newHeight: 700},
	     *     uiSize: {width: 1000, height: 1000}
	     * });
	     * @example
	     * // Apply the ui state while preserving the previous attribute (for example, if responsive Ui)
	     * imageEditor.ui.resizeEditor();
	     */

	  }, {
	    key: "resizeEditor",
	    value: function resizeEditor() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          uiSize = _ref.uiSize,
	          _ref$imageSize = _ref.imageSize,
	          imageSize = _ref$imageSize === void 0 ? this.imageSize : _ref$imageSize;

	      if (imageSize !== this.imageSize) {
	        this.imageSize = imageSize;
	      }

	      if (uiSize) {
	        this._setUiSize(uiSize);
	      }

	      var _this$_getEditorDimen = this._getEditorDimension(),
	          width = _this$_getEditorDimen.width,
	          height = _this$_getEditorDimen.height;

	      var editorElementStyle = this._editorElement.style;
	      var menuBarPosition = this.options.menuBarPosition;
	      editorElementStyle.height = "".concat(height, "px");
	      editorElementStyle.width = "".concat(width, "px");

	      this._setEditorPosition(menuBarPosition);

	      this._editorElementWrap.style.bottom = "0px";
	      this._editorElementWrap.style.top = "0px";
	      this._editorElementWrap.style.left = "0px";
	      this._editorElementWrap.style.width = "100%";
	      var selectElementClassList = this._selectedElement.classList;

	      if (menuBarPosition === 'top' && this._selectedElement.offsetWidth < BI_EXPRESSION_MINSIZE_WHEN_TOP_POSITION) {
	        selectElementClassList.add('tui-image-editor-top-optimization');
	      } else {
	        selectElementClassList.remove('tui-image-editor-top-optimization');
	      }
	    }
	    /**
	     * Change undo button status
	     * @param {Boolean} enableStatus - enabled status
	     * @ignore
	     */

	  }, {
	    key: "changeUndoButtonStatus",
	    value: function changeUndoButtonStatus(enableStatus) {
	      if (enableStatus) {
	        this._els.undo.classList.add('enabled');
	      } else {
	        this._els.undo.classList.remove('enabled');
	      }
	    }
	    /**
	     * Change redo button status
	     * @param {Boolean} enableStatus - enabled status
	     * @ignore
	     */

	  }, {
	    key: "changeRedoButtonStatus",
	    value: function changeRedoButtonStatus(enableStatus) {
	      if (enableStatus) {
	        this._els.redo.classList.add('enabled');
	      } else {
	        this._els.redo.classList.remove('enabled');
	      }
	    }
	    /**
	     * Change reset button status
	     * @param {Boolean} enableStatus - enabled status
	     * @ignore
	     */

	  }, {
	    key: "changeResetButtonStatus",
	    value: function changeResetButtonStatus(enableStatus) {
	      if (enableStatus) {
	        this._els.reset.classList.add('enabled');
	      } else {
	        this._els.reset.classList.remove('enabled');
	      }
	    }
	    /**
	     * Change delete-all button status
	     * @param {Boolean} enableStatus - enabled status
	     * @ignore
	     */

	  }, {
	    key: "changeDeleteAllButtonEnabled",
	    value: function changeDeleteAllButtonEnabled(enableStatus) {
	      if (enableStatus) {
	        this._els.deleteAll.classList.add('enabled');
	      } else {
	        this._els.deleteAll.classList.remove('enabled');
	      }
	    }
	    /**
	     * Change delete button status
	     * @param {Boolean} enableStatus - enabled status
	     * @ignore
	     */

	  }, {
	    key: "changeDeleteButtonEnabled",
	    value: function changeDeleteButtonEnabled(enableStatus) {
	      if (enableStatus) {
	        this._els['delete'].classList.add('enabled');
	      } else {
	        this._els['delete'].classList.remove('enabled');
	      }
	    }
	    /**
	     * Change delete button status
	     * @param {Object} [options] - Ui setting options
	     *   @param {object} [options.loadImage] - Init default load image
	     *   @param {string} [options.initMenu] - Init start menu
	     *   @param {string} [options.menuBarPosition=bottom] - Let
	     *   @param {boolean} [options.applyCropSelectionStyle=false] - Let
	     * @returns {Object} initialize option
	     * @private
	     */

	  }, {
	    key: "_initializeOption",
	    value: function _initializeOption(options) {
	      return Object.assign({
	        loadImage: {
	          path: '',
	          name: ''
	        },
	        locale: {},
	        menuIconPath: '',
	        menu: ['crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],
	        initMenu: '',
	        uiSize: {
	          width: '100%',
	          height: '100%'
	        },
	        menuBarPosition: 'bottom'
	      }, options);
	    }
	    /**
	     * Set ui container size
	     * @param {Object} uiSize - ui dimension
	     *   @param {string} uiSize.width - css width property
	     *   @param {string} uiSize.height - css height property
	     * @private
	     */

	  }, {
	    key: "_setUiSize",
	    value: function _setUiSize() {
	      var uiSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.uiSize;
	      var elementDimension = this._selectedElement.style;
	      elementDimension.width = uiSize.width;
	      elementDimension.height = uiSize.height;
	    }
	    /**
	     * Make submenu dom element
	     * @private
	     */

	  }, {
	    key: "_makeSubMenu",
	    value: function _makeSubMenu() {
	      var _this = this;

	      this.options.menu.map(function (menuName) {
	        var SubComponentClass = SUB_UI_COMPONENT[menuName.replace(/^[a-z]/, function ($0) {
	          return $0.toUpperCase();
	        })]; // make menu element

	        _this._makeMenuElement(menuName); // menu btn element


	        _this._els[menuName] = _this._menuElement.querySelector("#tie-btn-".concat(menuName)); // submenu ui instance

	        _this[menuName] = new SubComponentClass(_this._subMenuElement, {
	          locale: _this._locale,
	          iconStyle: _this.theme.getStyle('submenu.icon'),
	          menuBarPosition: _this.options.menuBarPosition
	        });
	      });
	    }
	    /**
	     * Make primary ui dom element
	     * @param {string|jQuery|HTMLElement} element - Wrapper's element or selector
	     * @private
	     */

	  }, {
	    key: "_makeUiElement",
	    value: function _makeUiElement(element) {
	      var selectedElement;

	      if (element.jquery) {
	        var _element = _slicedToArray(element, 1);

	        selectedElement = _element[0];
	      } else if (element.nodeType) {
	        selectedElement = element;
	      } else {
	        selectedElement = document.querySelector(element);
	      }

	      var selector = getSelector(selectedElement);
	      selectedElement.classList.add('tui-image-editor-container');
	      selectedElement.innerHTML = controls({
	        locale: this._locale,
	        biImage: this.theme.getStyle('common.bi'),
	        iconStyle: this.theme.getStyle('menu.icon'),
	        loadButtonStyle: this.theme.getStyle('loadButton'),
	        downloadButtonStyle: this.theme.getStyle('downloadButton')
	      }) + mainContainer({
	        locale: this._locale,
	        biImage: this.theme.getStyle('common.bi'),
	        commonStyle: this.theme.getStyle('common'),
	        headerStyle: this.theme.getStyle('header'),
	        loadButtonStyle: this.theme.getStyle('loadButton'),
	        downloadButtonStyle: this.theme.getStyle('downloadButton'),
	        submenuStyle: this.theme.getStyle('submenu')
	      });
	      this._selectedElement = selectedElement;

	      this._selectedElement.classList.add(this.options.menuBarPosition);

	      this._mainElement = selector('.tui-image-editor-main');
	      this._editorElementWrap = selector('.tui-image-editor-wrap');
	      this._editorElement = selector('.tui-image-editor');
	      this._menuElement = selector('.tui-image-editor-menu');
	      this._subMenuElement = selector('.tui-image-editor-submenu');
	    }
	    /**
	     * Make menu ui dom element
	     * @param {string} menuName - menu name
	     * @private
	     */

	  }, {
	    key: "_makeMenuElement",
	    value: function _makeMenuElement(menuName) {
	      var btnElement = document.createElement('li');

	      var _this$theme$getStyle = this.theme.getStyle('menu.icon'),
	          normal = _this$theme$getStyle.normal,
	          active = _this$theme$getStyle.active,
	          hover = _this$theme$getStyle.hover;

	      var menuItemHtml = "\n            <svg class=\"svg_ic-menu\">\n                <use xlink:href=\"".concat(normal.path, "#").concat(normal.name, "-ic-").concat(menuName, "\" class=\"normal\"/>\n                <use xlink:href=\"").concat(active.path, "#").concat(active.name, "-ic-").concat(menuName, "\" class=\"active\"/>\n                <use xlink:href=\"").concat(hover.path, "#").concat(hover.name, "-ic-").concat(menuName, "\" class=\"hover\"/>\n            </svg>\n        ");
	      btnElement.id = "tie-btn-".concat(menuName);
	      btnElement.className = 'tui-image-editor-item normal';
	      btnElement.title = this._locale.localize(menuName.replace(/^[a-z]/g, function ($0) {
	        return $0.toUpperCase();
	      }));
	      btnElement.innerHTML = menuItemHtml;

	      this._menuElement.appendChild(btnElement);
	    }
	    /**
	     * Add help action event
	     * @param {string} helpName - help menu name
	     * @private
	     */

	  }, {
	    key: "_addHelpActionEvent",
	    value: function _addHelpActionEvent(helpName) {
	      var _this2 = this;

	      this._els[helpName].addEventListener('click', function () {
	        _this2._actions.main[helpName]();
	      });
	    }
	    /**
	     * Add download event
	     * @private
	     */

	  }, {
	    key: "_addDownloadEvent",
	    value: function _addDownloadEvent() {
	      var _this3 = this;

	      this._els.download.forEach(function (element) {
	        element.addEventListener('click', function () {
	          _this3._actions.main.download();
	        });
	      });
	    }
	    /**
	     * Add load event
	     * @private
	     */

	  }, {
	    key: "_addLoadEvent",
	    value: function _addLoadEvent() {
	      var _this4 = this;

	      this._els.load.forEach(function (element) {
	        element.addEventListener('change', function (event) {
	          _this4._actions.main.load(event.target.files[0]);
	        });
	      });
	    }
	    /**
	     * Add menu event
	     * @param {string} menuName - menu name
	     * @private
	     */

	  }, {
	    key: "_addMenuEvent",
	    value: function _addMenuEvent(menuName) {
	      var _this5 = this;

	      this._els[menuName].addEventListener('click', function () {
	        _this5.changeMenu(menuName);
	      });
	    }
	    /**
	     * Add menu event
	     * @param {string} menuName - menu name
	     * @private
	     */

	  }, {
	    key: "_addSubMenuEvent",
	    value: function _addSubMenuEvent(menuName) {
	      this[menuName].addEvent(this._actions[menuName]);
	    }
	    /**
	     * get editor area element
	     * @returns {HTMLElement} editor area html element
	     * @ignore
	     */

	  }, {
	    key: "getEditorArea",
	    value: function getEditorArea() {
	      return this._editorElement;
	    }
	    /**
	     * Add event for menu items
	     * @ignore
	     */

	  }, {
	    key: "activeMenuEvent",
	    value: function activeMenuEvent() {
	      var _this6 = this;

	      if (this._initMenuEvent) {
	        return;
	      }

	      this._addHelpActionEvent('undo');

	      this._addHelpActionEvent('redo');

	      this._addHelpActionEvent('reset');

	      this._addHelpActionEvent('delete');

	      this._addHelpActionEvent('deleteAll');

	      this._addDownloadEvent();

	      this.options.menu.map(function (menuName) {
	        _this6._addMenuEvent(menuName);

	        _this6._addSubMenuEvent(menuName);
	      });

	      this._initMenu();

	      this._initMenuEvent = true;
	    }
	    /**
	     * Init canvas
	     * @ignore
	     */

	  }, {
	    key: "initCanvas",
	    value: function initCanvas() {
	      var _this7 = this;

	      var loadImageInfo = this._getLoadImage();

	      if (loadImageInfo.path) {
	        this._actions.main.initLoadImage(loadImageInfo.path, loadImageInfo.name).then(function () {
	          _this7.activeMenuEvent();
	        });
	      }

	      this._addLoadEvent();

	      var gridVisual = document.createElement('div');
	      gridVisual.className = 'tui-image-editor-grid-visual';
	      var grid = "<table>\n           <tr><td class=\"dot left-top\"></td><td></td><td class=\"dot right-top\"></td></tr>\n           <tr><td></td><td></td><td></td></tr>\n           <tr><td class=\"dot left-bottom\"></td><td></td><td class=\"dot right-bottom\"></td></tr>\n         </table>";
	      gridVisual.innerHTML = grid;
	      this._editorContainerElement = this._editorElement.querySelector('.tui-image-editor-canvas-container');

	      this._editorContainerElement.appendChild(gridVisual);
	    }
	    /**
	     * get editor area element
	     * @returns {Object} load image option
	     * @private
	     */

	  }, {
	    key: "_getLoadImage",
	    value: function _getLoadImage() {
	      return this.options.loadImage;
	    }
	    /**
	     * change menu
	     * @param {string} menuName - menu name
	     * @param {boolean} toggle - whether toogle or not
	     * @param {boolean} discardSelection - discard selection
	     * @ignore
	     */

	  }, {
	    key: "changeMenu",
	    value: function changeMenu(menuName) {
	      var toggle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var discardSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      if (!this._submenuChangeTransection) {
	        this._submenuChangeTransection = true;

	        this._changeMenu(menuName, toggle, discardSelection);

	        this._submenuChangeTransection = false;
	      }
	    }
	    /**
	     * change menu
	     * @param {string} menuName - menu name
	     * @param {boolean} toggle - whether toogle or not
	     * @param {boolean} discardSelection - discard selection
	     * @private
	     */

	  }, {
	    key: "_changeMenu",
	    value: function _changeMenu(menuName, toggle, discardSelection) {
	      if (this.submenu) {
	        this._els[this.submenu].classList.remove('active');

	        this._mainElement.classList.remove("tui-image-editor-menu-".concat(this.submenu));

	        if (discardSelection) {
	          this._actions.main.discardSelection();
	        }

	        this._actions.main.changeSelectableAll(true);

	        this[this.submenu].changeStandbyMode();
	      }

	      if (this.submenu === menuName && toggle) {
	        this.submenu = null;
	      } else {
	        this._els[menuName].classList.add('active');

	        this._mainElement.classList.add("tui-image-editor-menu-".concat(menuName));

	        this.submenu = menuName;
	        this[this.submenu].changeStartMode();
	      }

	      this.resizeEditor();
	    }
	    /**
	     * Init menu
	     * @private
	     */

	  }, {
	    key: "_initMenu",
	    value: function _initMenu() {
	      if (this.options.initMenu) {
	        var evt = document.createEvent('MouseEvents');
	        evt.initEvent('click', true, false);

	        this._els[this.options.initMenu].dispatchEvent(evt);
	      }

	      if (this.icon) {
	        this.icon.registDefaultIcon();
	      }
	    }
	    /**
	     * Get editor dimension
	     * @returns {Object} - width & height of editor
	     * @private
	     */

	  }, {
	    key: "_getEditorDimension",
	    value: function _getEditorDimension() {
	      var maxHeight = parseFloat(this._editorContainerElement.style.maxHeight);
	      var height = this.imageSize.newHeight > maxHeight ? maxHeight : this.imageSize.newHeight;
	      var maxWidth = parseFloat(this._editorContainerElement.style.maxWidth);
	      var width = this.imageSize.newWidth > maxWidth ? maxWidth : this.imageSize.newWidth;
	      return {
	        width: width,
	        height: height
	      };
	    }
	    /**
	     * Set editor position
	     * @param {string} menuBarPosition - top or right or bottom or left
	     * @private
	     */

	  }, {
	    key: "_setEditorPosition",
	    value: function _setEditorPosition(menuBarPosition) {
	      var _this$_getEditorDimen2 = this._getEditorDimension(),
	          width = _this$_getEditorDimen2.width,
	          height = _this$_getEditorDimen2.height;

	      var editorElementStyle = this._editorElement.style;
	      var top = 0;
	      var left = 0;

	      if (this.submenu) {
	        if (menuBarPosition === 'bottom') {
	          if (height > this._editorElementWrap.scrollHeight - 150) {
	            top = (height - this._editorElementWrap.scrollHeight) / 2;
	          } else {
	            top = 150 / 2 * -1;
	          }
	        } else if (menuBarPosition === 'top') {
	          if (height > this._editorElementWrap.offsetHeight - 150) {
	            top = 150 / 2 - (height - (this._editorElementWrap.offsetHeight - 150)) / 2;
	          } else {
	            top = 150 / 2;
	          }
	        } else if (menuBarPosition === 'left') {
	          if (width > this._editorElementWrap.offsetWidth - 248) {
	            left = 248 / 2 - (width - (this._editorElementWrap.offsetWidth - 248)) / 2;
	          } else {
	            left = 248 / 2;
	          }
	        } else if (menuBarPosition === 'right') {
	          if (width > this._editorElementWrap.scrollWidth - 248) {
	            left = (width - this._editorElementWrap.scrollWidth) / 2;
	          } else {
	            left = 248 / 2 * -1;
	          }
	        }
	      }

	      editorElementStyle.top = "".concat(top, "px");
	      editorElementStyle.left = "".concat(left, "px");
	    }
	  }]);

	  return UI;
	}();

	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;
	var defineProperty$5 = objectDefineProperty.f;
	var trim$2 = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = it.charCodeAt(0);
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = it.slice(2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor
	if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper
	      // check on 1..constructor(foo) case
	      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)
	        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };
	  for (var keys$4 = descriptors ? getOwnPropertyNames$2(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j$1 = 0, key$1; keys$4.length > j$1; j$1++) {
	    if (has(NativeNumber, key$1 = keys$4[j$1]) && !has(NumberWrapper, key$1)) {
	      defineProperty$5(NumberWrapper, key$1, getOwnPropertyDescriptor$3(NativeNumber, key$1));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1, NUMBER, NumberWrapper);
	}

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }
	  return +value;
	};

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$6 = Math.floor;

	var pow$2 = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow$2(x, n - 1, acc * x) : pow$2(x * x, n / 2, acc);
	};

	var log$1 = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var FORCED$8 = nativeToFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export({ target: 'Number', proto: true, forced: FORCED$8 }, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;
	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$6(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;
	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$6(c / n);
	        c = (c % n) * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';
	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      } return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log$1(number * pow$2(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow$2(2, -e, 1) : number / pow$2(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow$2(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + stringRepeat.call('0', fractDigits - k) + result
	        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var FAILS_ON_PRIMITIVES = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	// `Uint8ClampedArray` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	/*
	  imagetracer.js version 1.2.4
	  Simple raster image tracer and vectorizer written in JavaScript.
	  andras@jankovics.net
	*/

	/*
	  The Unlicense / PUBLIC DOMAIN
	  This is free and unencumbered software released into the public domain.
	  Anyone is free to copy, modify, publish, use, compile, sell, or
	  distribute this software, either in source code form or as a compiled
	  binary, for any purpose, commercial or non-commercial, and by any
	  means.
	  In jurisdictions that recognize copyright laws, the author or authors
	  of this software dedicate any and all copyright interest in the
	  software to the public domain. We make this dedication for the benefit
	  of the public at large and to the detriment of our heirs and
	  successors. We intend this dedication to be an overt act of
	  relinquishment in perpetuity of all present and future rights to this
	  software under copyright law.
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
	  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
	  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	  OTHER DEALINGS IN THE SOFTWARE.
	  For more information, please refer to http://unlicense.org/
	*/
	var ImageTracer =
	/*#__PURE__*/
	function () {
	  _createClass(ImageTracer, null, [{
	    key: "tracerDefaultOption",
	    value: function tracerDefaultOption() {
	      return {
	        pathomit: 100,
	        ltres: 0.1,
	        qtres: 1,
	        scale: 1,
	        strokewidth: 5,
	        viewbox: false,
	        linefilter: true,
	        desc: false,
	        rightangleenhance: false,
	        pal: [{
	          r: 0,
	          g: 0,
	          b: 0,
	          a: 255
	        }, {
	          r: 255,
	          g: 255,
	          b: 255,
	          a: 255
	        }]
	      };
	    }
	    /* eslint-disable */

	  }]);

	  function ImageTracer() {
	    _classCallCheck(this, ImageTracer);

	    this.versionnumber = '1.2.4';
	    this.optionpresets = {
	      default: {
	        corsenabled: false,
	        ltres: 1,
	        qtres: 1,
	        pathomit: 8,
	        rightangleenhance: true,
	        colorsampling: 2,
	        numberofcolors: 16,
	        mincolorratio: 0,
	        colorquantcycles: 3,
	        layering: 0,
	        strokewidth: 1,
	        linefilter: false,
	        scale: 1,
	        roundcoords: 1,
	        viewbox: false,
	        desc: false,
	        lcpr: 0,
	        qcpr: 0,
	        blurradius: 0,
	        blurdelta: 20
	      },
	      'posterized1': {
	        colorsampling: 0,
	        numberofcolors: 2
	      },
	      'posterized2': {
	        numberofcolors: 4,
	        blurradius: 5
	      },
	      'curvy': {
	        ltres: 0.01,
	        linefilter: true,
	        rightangleenhance: false
	      },
	      'sharp': {
	        qtres: 0.01,
	        linefilter: false
	      },
	      'detailed': {
	        pathomit: 0,
	        roundcoords: 2,
	        ltres: 0.5,
	        qtres: 0.5,
	        numberofcolors: 64
	      },
	      'smoothed': {
	        blurradius: 5,
	        blurdelta: 64
	      },
	      'grayscale': {
	        colorsampling: 0,
	        colorquantcycles: 1,
	        numberofcolors: 7
	      },
	      'fixedpalette': {
	        colorsampling: 0,
	        colorquantcycles: 1,
	        numberofcolors: 27
	      },
	      'randomsampling1': {
	        colorsampling: 1,
	        numberofcolors: 8
	      },
	      'randomsampling2': {
	        colorsampling: 1,
	        numberofcolors: 64
	      },
	      'artistic1': {
	        colorsampling: 0,
	        colorquantcycles: 1,
	        pathomit: 0,
	        blurradius: 5,
	        blurdelta: 64,
	        ltres: 0.01,
	        linefilter: true,
	        numberofcolors: 16,
	        strokewidth: 2
	      },
	      'artistic2': {
	        qtres: 0.01,
	        colorsampling: 0,
	        colorquantcycles: 1,
	        numberofcolors: 4,
	        strokewidth: 0
	      },
	      'artistic3': {
	        qtres: 10,
	        ltres: 10,
	        numberofcolors: 8
	      },
	      'artistic4': {
	        qtres: 10,
	        ltres: 10,
	        numberofcolors: 64,
	        blurradius: 5,
	        blurdelta: 256,
	        strokewidth: 2
	      },
	      'posterized3': {
	        ltres: 1,
	        qtres: 1,
	        pathomit: 20,
	        rightangleenhance: true,
	        colorsampling: 0,
	        numberofcolors: 3,
	        mincolorratio: 0,
	        colorquantcycles: 3,
	        blurradius: 3,
	        blurdelta: 20,
	        strokewidth: 0,
	        linefilter: false,
	        roundcoords: 1,
	        pal: [{
	          r: 0,
	          g: 0,
	          b: 100,
	          a: 255
	        }, {
	          r: 255,
	          g: 255,
	          b: 255,
	          a: 255
	        }]
	      }
	    };
	    this.pathscan_combined_lookup = [[[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]], [[0, 1, 0, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [0, 2, -1, 0]], [[-1, -1, -1, -1], [-1, -1, -1, -1], [0, 1, 0, -1], [0, 0, 1, 0]], [[0, 0, 1, 0], [-1, -1, -1, -1], [0, 2, -1, 0], [-1, -1, -1, -1]], [[-1, -1, -1, -1], [0, 0, 1, 0], [0, 3, 0, 1], [-1, -1, -1, -1]], [[13, 3, 0, 1], [13, 2, -1, 0], [7, 1, 0, -1], [7, 0, 1, 0]], [[-1, -1, -1, -1], [0, 1, 0, -1], [-1, -1, -1, -1], [0, 3, 0, 1]], [[0, 3, 0, 1], [0, 2, -1, 0], [-1, -1, -1, -1], [-1, -1, -1, -1]], [[0, 3, 0, 1], [0, 2, -1, 0], [-1, -1, -1, -1], [-1, -1, -1, -1]], [[-1, -1, -1, -1], [0, 1, 0, -1], [-1, -1, -1, -1], [0, 3, 0, 1]], [[11, 1, 0, -1], [14, 0, 1, 0], [14, 3, 0, 1], [11, 2, -1, 0]], [[-1, -1, -1, -1], [0, 0, 1, 0], [0, 3, 0, 1], [-1, -1, -1, -1]], [[0, 0, 1, 0], [-1, -1, -1, -1], [0, 2, -1, 0], [-1, -1, -1, -1]], [[-1, -1, -1, -1], [-1, -1, -1, -1], [0, 1, 0, -1], [0, 0, 1, 0]], [[0, 1, 0, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [0, 2, -1, 0]], [[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]]];
	    this.gks = [[0.27901, 0.44198, 0.27901], [0.135336, 0.228569, 0.272192, 0.228569, 0.135336], [0.086776, 0.136394, 0.178908, 0.195843, 0.178908, 0.136394, 0.086776], [0.063327, 0.093095, 0.122589, 0.144599, 0.152781, 0.144599, 0.122589, 0.093095, 0.063327], [0.049692, 0.069304, 0.089767, 0.107988, 0.120651, 0.125194, 0.120651, 0.107988, 0.089767, 0.069304, 0.049692]];
	    this.specpalette = [{
	      r: 0,
	      g: 0,
	      b: 0,
	      a: 255
	    }, {
	      r: 128,
	      g: 128,
	      b: 128,
	      a: 255
	    }, {
	      r: 0,
	      g: 0,
	      b: 128,
	      a: 255
	    }, {
	      r: 64,
	      g: 64,
	      b: 128,
	      a: 255
	    }, {
	      r: 192,
	      g: 192,
	      b: 192,
	      a: 255
	    }, {
	      r: 255,
	      g: 255,
	      b: 255,
	      a: 255
	    }, {
	      r: 128,
	      g: 128,
	      b: 192,
	      a: 255
	    }, {
	      r: 0,
	      g: 0,
	      b: 192,
	      a: 255
	    }, {
	      r: 128,
	      g: 0,
	      b: 0,
	      a: 255
	    }, {
	      r: 128,
	      g: 64,
	      b: 64,
	      a: 255
	    }, {
	      r: 128,
	      g: 0,
	      b: 128,
	      a: 255
	    }, {
	      r: 168,
	      g: 168,
	      b: 168,
	      a: 255
	    }, {
	      r: 192,
	      g: 128,
	      b: 128,
	      a: 255
	    }, {
	      r: 192,
	      g: 0,
	      b: 0,
	      a: 255
	    }, {
	      r: 255,
	      g: 255,
	      b: 255,
	      a: 255
	    }, {
	      r: 0,
	      g: 128,
	      b: 0,
	      a: 255
	    }];
	  }

	  _createClass(ImageTracer, [{
	    key: "imageToSVG",
	    value: function imageToSVG(url, callback, options) {
	      var _this = this;

	      options = this.checkoptions(options);
	      this.loadImage(url, function (canvas) {
	        callback(_this.imagedataToSVG(_this.getImgdata(canvas), options));
	      }, options);
	    }
	  }, {
	    key: "imagedataToSVG",
	    value: function imagedataToSVG(imgd, options) {
	      options = this.checkoptions(options);
	      var td = this.imagedataToTracedata(imgd, options);
	      return this.getsvgstring(td, options);
	    }
	  }, {
	    key: "imageToTracedata",
	    value: function imageToTracedata(url, callback, options) {
	      var _this2 = this;

	      options = this.checkoptions(options);
	      this.loadImage(url, function (canvas) {
	        callback(_this2.imagedataToTracedata(_this2.getImgdata(canvas), options));
	      }, options);
	    }
	  }, {
	    key: "imagedataToTracedata",
	    value: function imagedataToTracedata(imgd, options) {
	      options = this.checkoptions(options);
	      var ii = this.colorquantization(imgd, options);
	      var tracedata;

	      if (options.layering === 0) {
	        tracedata = {
	          layers: [],
	          palette: ii.palette,
	          width: ii.array[0].length - 2,
	          height: ii.array.length - 2
	        };

	        for (var colornum = 0; colornum < ii.palette.length; colornum += 1) {
	          var tracedlayer = this.batchtracepaths(this.internodes(this.pathscan(this.layeringstep(ii, colornum), options.pathomit), options), options.ltres, options.qtres);
	          tracedata.layers.push(tracedlayer);
	        }
	      } else {
	        var ls = this.layering(ii);

	        if (options.layercontainerid) {
	          this.drawLayers(ls, this.specpalette, options.scale, options.layercontainerid);
	        }

	        var bps = this.batchpathscan(ls, options.pathomit);
	        var bis = this.batchinternodes(bps, options);
	        tracedata = {
	          layers: this.batchtracelayers(bis, options.ltres, options.qtres),
	          palette: ii.palette,
	          width: imgd.width,
	          height: imgd.height
	        };
	      }

	      return tracedata;
	    }
	  }, {
	    key: "checkoptions",
	    value: function checkoptions(options) {
	      options = options || {};

	      if (typeof options === 'string') {
	        options = options.toLowerCase();

	        if (this.optionpresets[options]) {
	          options = this.optionpresets[options];
	        } else {
	          options = {};
	        }
	      }

	      var ok = Object.keys(this.optionpresets['default']);

	      for (var k = 0; k < ok.length; k += 1) {
	        if (!options.hasOwnProperty(ok[k])) {
	          options[ok[k]] = this.optionpresets['default'][ok[k]];
	        }
	      }

	      return options;
	    }
	  }, {
	    key: "colorquantization",
	    value: function colorquantization(imgd, options) {
	      var arr = [];
	      var idx = 0;
	      var cd;
	      var cdl;
	      var ci;
	      var paletteacc = [];
	      var pixelnum = imgd.width * imgd.height;
	      var i;
	      var j;
	      var k;
	      var cnt;
	      var palette;

	      for (j = 0; j < imgd.height + 2; j += 1) {
	        arr[j] = [];

	        for (i = 0; i < imgd.width + 2; i += 1) {
	          arr[j][i] = -1;
	        }
	      }

	      if (options.pal) {
	        palette = options.pal;
	      } else if (options.colorsampling === 0) {
	        palette = this.generatepalette(options.numberofcolors);
	      } else if (options.colorsampling === 1) {
	        palette = this.samplepalette(options.numberofcolors, imgd);
	      } else {
	        palette = this.samplepalette2(options.numberofcolors, imgd);
	      }

	      if (options.blurradius > 0) {
	        imgd = this.blur(imgd, options.blurradius, options.blurdelta);
	      }

	      for (cnt = 0; cnt < options.colorquantcycles; cnt += 1) {
	        if (cnt > 0) {
	          for (k = 0; k < palette.length; k += 1) {
	            if (paletteacc[k].n > 0) {
	              palette[k] = {
	                r: Math.floor(paletteacc[k].r / paletteacc[k].n),
	                g: Math.floor(paletteacc[k].g / paletteacc[k].n),
	                b: Math.floor(paletteacc[k].b / paletteacc[k].n),
	                a: Math.floor(paletteacc[k].a / paletteacc[k].n)
	              };
	            }

	            if (paletteacc[k].n / pixelnum < options.mincolorratio && cnt < options.colorquantcycles - 1) {
	              palette[k] = {
	                r: Math.floor(Math.random() * 255),
	                g: Math.floor(Math.random() * 255),
	                b: Math.floor(Math.random() * 255),
	                a: Math.floor(Math.random() * 255)
	              };
	            }
	          }
	        }

	        for (i = 0; i < palette.length; i += 1) {
	          paletteacc[i] = {
	            r: 0,
	            g: 0,
	            b: 0,
	            a: 0,
	            n: 0
	          };
	        }

	        for (j = 0; j < imgd.height; j += 1) {
	          for (i = 0; i < imgd.width; i += 1) {
	            idx = (j * imgd.width + i) * 4;
	            ci = 0;
	            cdl = 1024;

	            for (k = 0; k < palette.length; k += 1) {
	              cd = Math.abs(palette[k].r - imgd.data[idx]) + Math.abs(palette[k].g - imgd.data[idx + 1]) + Math.abs(palette[k].b - imgd.data[idx + 2]) + Math.abs(palette[k].a - imgd.data[idx + 3]);

	              if (cd < cdl) {
	                cdl = cd;
	                ci = k;
	              }
	            }

	            paletteacc[ci].r += imgd.data[idx];
	            paletteacc[ci].g += imgd.data[idx + 1];
	            paletteacc[ci].b += imgd.data[idx + 2];
	            paletteacc[ci].a += imgd.data[idx + 3];
	            paletteacc[ci].n += 1;
	            arr[j + 1][i + 1] = ci;
	          }
	        }
	      }

	      return {
	        array: arr,
	        palette: palette
	      };
	    }
	  }, {
	    key: "samplepalette",
	    value: function samplepalette(numberofcolors, imgd) {
	      var idx;
	      var palette = [];

	      for (var i = 0; i < numberofcolors; i += 1) {
	        idx = Math.floor(Math.random() * imgd.data.length / 4) * 4;
	        palette.push({
	          r: imgd.data[idx],
	          g: imgd.data[idx + 1],
	          b: imgd.data[idx + 2],
	          a: imgd.data[idx + 3]
	        });
	      }

	      return palette;
	    }
	  }, {
	    key: "samplepalette2",
	    value: function samplepalette2(numberofcolors, imgd) {
	      var idx;
	      var palette = [];
	      var ni = Math.ceil(Math.sqrt(numberofcolors));
	      var nj = Math.ceil(numberofcolors / ni);
	      var vx = imgd.width / (ni + 1);
	      var vy = imgd.height / (nj + 1);

	      for (var j = 0; j < nj; j += 1) {
	        for (var i = 0; i < ni; i += 1) {
	          if (palette.length === numberofcolors) {
	            break;
	          } else {
	            idx = Math.floor((j + 1) * vy * imgd.width + (i + 1) * vx) * 4;
	            palette.push({
	              r: imgd.data[idx],
	              g: imgd.data[idx + 1],
	              b: imgd.data[idx + 2],
	              a: imgd.data[idx + 3]
	            });
	          }
	        }
	      }

	      return palette;
	    }
	  }, {
	    key: "generatepalette",
	    value: function generatepalette(numberofcolors) {
	      var palette = [];
	      var rcnt;
	      var gcnt;
	      var bcnt;

	      if (numberofcolors < 8) {
	        var graystep = Math.floor(255 / (numberofcolors - 1));

	        for (var i = 0; i < numberofcolors; i += 1) {
	          palette.push({
	            r: i * graystep,
	            g: i * graystep,
	            b: i * graystep,
	            a: 255
	          });
	        }
	      } else {
	        var colorqnum = Math.floor(Math.pow(numberofcolors, 1 / 3));
	        var colorstep = Math.floor(255 / (colorqnum - 1));
	        var rndnum = numberofcolors - colorqnum * colorqnum * colorqnum;

	        for (rcnt = 0; rcnt < colorqnum; rcnt += 1) {
	          for (gcnt = 0; gcnt < colorqnum; gcnt += 1) {
	            for (bcnt = 0; bcnt < colorqnum; bcnt += 1) {
	              palette.push({
	                r: rcnt * colorstep,
	                g: gcnt * colorstep,
	                b: bcnt * colorstep,
	                a: 255
	              });
	            }
	          }
	        }

	        for (rcnt = 0; rcnt < rndnum; rcnt += 1) {
	          palette.push({
	            r: Math.floor(Math.random() * 255),
	            g: Math.floor(Math.random() * 255),
	            b: Math.floor(Math.random() * 255),
	            a: Math.floor(Math.random() * 255)
	          });
	        }
	      }

	      return palette;
	    }
	  }, {
	    key: "layering",
	    value: function layering(ii) {
	      var layers = [];
	      var val = 0;
	      var ah = ii.array.length;
	      var aw = ii.array[0].length;
	      var n1;
	      var n2;
	      var n3;
	      var n4;
	      var n5;
	      var n6;
	      var n7;
	      var n8;
	      var i;
	      var j;
	      var k;

	      for (k = 0; k < ii.palette.length; k += 1) {
	        layers[k] = [];

	        for (j = 0; j < ah; j += 1) {
	          layers[k][j] = [];

	          for (i = 0; i < aw; i += 1) {
	            layers[k][j][i] = 0;
	          }
	        }
	      }

	      for (j = 1; j < ah - 1; j += 1) {
	        for (i = 1; i < aw - 1; i += 1) {
	          val = ii.array[j][i];
	          n1 = ii.array[j - 1][i - 1] === val ? 1 : 0;
	          n2 = ii.array[j - 1][i] === val ? 1 : 0;
	          n3 = ii.array[j - 1][i + 1] === val ? 1 : 0;
	          n4 = ii.array[j][i - 1] === val ? 1 : 0;
	          n5 = ii.array[j][i + 1] === val ? 1 : 0;
	          n6 = ii.array[j + 1][i - 1] === val ? 1 : 0;
	          n7 = ii.array[j + 1][i] === val ? 1 : 0;
	          n8 = ii.array[j + 1][i + 1] === val ? 1 : 0;
	          layers[val][j + 1][i + 1] = 1 + n5 * 2 + n8 * 4 + n7 * 8;

	          if (!n4) {
	            layers[val][j + 1][i] = 0 + 2 + n7 * 4 + n6 * 8;
	          }

	          if (!n2) {
	            layers[val][j][i + 1] = 0 + n3 * 2 + n5 * 4 + 8;
	          }

	          if (!n1) {
	            layers[val][j][i] = 0 + n2 * 2 + 4 + n4 * 8;
	          }
	        }
	      }

	      return layers;
	    }
	  }, {
	    key: "layeringstep",
	    value: function layeringstep(ii, cnum) {
	      var layer = [];
	      var ah = ii.array.length;
	      var aw = ii.array[0].length;
	      var i;
	      var j;

	      for (j = 0; j < ah; j += 1) {
	        layer[j] = [];

	        for (i = 0; i < aw; i += 1) {
	          layer[j][i] = 0;
	        }
	      }

	      for (j = 1; j < ah; j += 1) {
	        for (i = 1; i < aw; i += 1) {
	          layer[j][i] = (ii.array[j - 1][i - 1] === cnum ? 1 : 0) + (ii.array[j - 1][i] === cnum ? 2 : 0) + (ii.array[j][i - 1] === cnum ? 8 : 0) + (ii.array[j][i] === cnum ? 4 : 0);
	        }
	      }

	      return layer;
	    }
	  }, {
	    key: "pathscan",
	    value: function pathscan(arr, pathomit) {
	      var paths = [];
	      var pacnt = 0;
	      var pcnt = 0;
	      var px = 0;
	      var py = 0;
	      var w = arr[0].length;
	      var h = arr.length;
	      var dir = 0;
	      var pathfinished = true;
	      var holepath = false;
	      var lookuprow;

	      for (var j = 0; j < h; j += 1) {
	        for (var i = 0; i < w; i += 1) {
	          if (arr[j][i] === 4 || arr[j][i] === 11) {
	            px = i;
	            py = j;
	            paths[pacnt] = {};
	            paths[pacnt].points = [];
	            paths[pacnt].boundingbox = [px, py, px, py];
	            paths[pacnt].holechildren = [];
	            pathfinished = false;
	            pcnt = 0;
	            holepath = arr[j][i] === 11;
	            dir = 1;

	            while (!pathfinished) {
	              paths[pacnt].points[pcnt] = {};
	              paths[pacnt].points[pcnt].x = px - 1;
	              paths[pacnt].points[pcnt].y = py - 1;
	              paths[pacnt].points[pcnt].t = arr[py][px];

	              if (px - 1 < paths[pacnt].boundingbox[0]) {
	                paths[pacnt].boundingbox[0] = px - 1;
	              }

	              if (px - 1 > paths[pacnt].boundingbox[2]) {
	                paths[pacnt].boundingbox[2] = px - 1;
	              }

	              if (py - 1 < paths[pacnt].boundingbox[1]) {
	                paths[pacnt].boundingbox[1] = py - 1;
	              }

	              if (py - 1 > paths[pacnt].boundingbox[3]) {
	                paths[pacnt].boundingbox[3] = py - 1;
	              }

	              lookuprow = this.pathscan_combined_lookup[arr[py][px]][dir];
	              arr[py][px] = lookuprow[0];
	              dir = lookuprow[1];
	              px += lookuprow[2];
	              py += lookuprow[3];

	              if (px - 1 === paths[pacnt].points[0].x && py - 1 === paths[pacnt].points[0].y) {
	                pathfinished = true;

	                if (paths[pacnt].points.length < pathomit) {
	                  paths.pop();
	                } else {
	                  paths[pacnt].isholepath = !!holepath;

	                  if (holepath) {
	                    var parentidx = 0,
	                        parentbbox = [-1, -1, w + 1, h + 1];

	                    for (var parentcnt = 0; parentcnt < pacnt; parentcnt++) {
	                      if (!paths[parentcnt].isholepath && this.boundingboxincludes(paths[parentcnt].boundingbox, paths[pacnt].boundingbox) && this.boundingboxincludes(parentbbox, paths[parentcnt].boundingbox)) {
	                        parentidx = parentcnt;
	                        parentbbox = paths[parentcnt].boundingbox;
	                      }
	                    }

	                    paths[parentidx].holechildren.push(pacnt);
	                  }

	                  pacnt += 1;
	                }
	              }

	              pcnt += 1;
	            }
	          }
	        }
	      }

	      return paths;
	    }
	  }, {
	    key: "boundingboxincludes",
	    value: function boundingboxincludes(parentbbox, childbbox) {
	      return parentbbox[0] < childbbox[0] && parentbbox[1] < childbbox[1] && parentbbox[2] > childbbox[2] && parentbbox[3] > childbbox[3];
	    }
	  }, {
	    key: "batchpathscan",
	    value: function batchpathscan(layers, pathomit) {
	      var bpaths = [];

	      for (var k in layers) {
	        if (!layers.hasOwnProperty(k)) {
	          continue;
	        }

	        bpaths[k] = this.pathscan(layers[k], pathomit);
	      }

	      return bpaths;
	    }
	  }, {
	    key: "internodes",
	    value: function internodes(paths, options) {
	      var ins = [];
	      var palen = 0;
	      var nextidx = 0;
	      var nextidx2 = 0;
	      var previdx = 0;
	      var previdx2 = 0;
	      var pacnt;
	      var pcnt;

	      for (pacnt = 0; pacnt < paths.length; pacnt += 1) {
	        ins[pacnt] = {};
	        ins[pacnt].points = [];
	        ins[pacnt].boundingbox = paths[pacnt].boundingbox;
	        ins[pacnt].holechildren = paths[pacnt].holechildren;
	        ins[pacnt].isholepath = paths[pacnt].isholepath;
	        palen = paths[pacnt].points.length;

	        for (pcnt = 0; pcnt < palen; pcnt += 1) {
	          nextidx = (pcnt + 1) % palen;
	          nextidx2 = (pcnt + 2) % palen;
	          previdx = (pcnt - 1 + palen) % palen;
	          previdx2 = (pcnt - 2 + palen) % palen;

	          if (options.rightangleenhance && this.testrightangle(paths[pacnt], previdx2, previdx, pcnt, nextidx, nextidx2)) {
	            if (ins[pacnt].points.length > 0) {
	              ins[pacnt].points[ins[pacnt].points.length - 1].linesegment = this.getdirection(ins[pacnt].points[ins[pacnt].points.length - 1].x, ins[pacnt].points[ins[pacnt].points.length - 1].y, paths[pacnt].points[pcnt].x, paths[pacnt].points[pcnt].y);
	            }

	            ins[pacnt].points.push({
	              x: paths[pacnt].points[pcnt].x,
	              y: paths[pacnt].points[pcnt].y,
	              linesegment: this.getdirection(paths[pacnt].points[pcnt].x, paths[pacnt].points[pcnt].y, (paths[pacnt].points[pcnt].x + paths[pacnt].points[nextidx].x) / 2, (paths[pacnt].points[pcnt].y + paths[pacnt].points[nextidx].y) / 2)
	            });
	          }

	          ins[pacnt].points.push({
	            x: (paths[pacnt].points[pcnt].x + paths[pacnt].points[nextidx].x) / 2,
	            y: (paths[pacnt].points[pcnt].y + paths[pacnt].points[nextidx].y) / 2,
	            linesegment: this.getdirection((paths[pacnt].points[pcnt].x + paths[pacnt].points[nextidx].x) / 2, (paths[pacnt].points[pcnt].y + paths[pacnt].points[nextidx].y) / 2, (paths[pacnt].points[nextidx].x + paths[pacnt].points[nextidx2].x) / 2, (paths[pacnt].points[nextidx].y + paths[pacnt].points[nextidx2].y) / 2)
	          });
	        }
	      }

	      return ins;
	    }
	  }, {
	    key: "testrightangle",
	    value: function testrightangle(path, idx1, idx2, idx3, idx4, idx5) {
	      return path.points[idx3].x === path.points[idx1].x && path.points[idx3].x === path.points[idx2].x && path.points[idx3].y === path.points[idx4].y && path.points[idx3].y === path.points[idx5].y || path.points[idx3].y === path.points[idx1].y && path.points[idx3].y === path.points[idx2].y && path.points[idx3].x === path.points[idx4].x && path.points[idx3].x === path.points[idx5].x;
	    }
	  }, {
	    key: "getdirection",
	    value: function getdirection(x1, y1, x2, y2) {
	      var val = 8;

	      if (x1 < x2) {
	        if (y1 < y2) {
	          val = 1;
	        } else if (y1 > y2) {
	          val = 7;
	        } else {
	          val = 0;
	        }
	      } else if (x1 > x2) {
	        if (y1 < y2) {
	          val = 3;
	        } else if (y1 > y2) {
	          val = 5;
	        } else {
	          val = 4;
	        }
	      } else if (y1 < y2) {
	        val = 2;
	      } else if (y1 > y2) {
	        val = 6;
	      } else {
	        val = 8;
	      }

	      return val;
	    }
	  }, {
	    key: "batchinternodes",
	    value: function batchinternodes(bpaths, options) {
	      var binternodes = [];

	      for (var k in bpaths) {
	        if (!bpaths.hasOwnProperty(k)) {
	          continue;
	        }

	        binternodes[k] = this.internodes(bpaths[k], options);
	      }

	      return binternodes;
	    }
	  }, {
	    key: "tracepath",
	    value: function tracepath(path, ltres, qtres) {
	      var pcnt = 0;
	      var segtype1;
	      var segtype2;
	      var seqend;
	      var smp = {};
	      smp.segments = [];
	      smp.boundingbox = path.boundingbox;
	      smp.holechildren = path.holechildren;
	      smp.isholepath = path.isholepath;

	      while (pcnt < path.points.length) {
	        segtype1 = path.points[pcnt].linesegment;
	        segtype2 = -1;
	        seqend = pcnt + 1;

	        while ((path.points[seqend].linesegment === segtype1 || path.points[seqend].linesegment === segtype2 || segtype2 === -1) && seqend < path.points.length - 1) {
	          if (path.points[seqend].linesegment !== segtype1 && segtype2 === -1) {
	            segtype2 = path.points[seqend].linesegment;
	          }

	          seqend += 1;
	        }

	        if (seqend === path.points.length - 1) {
	          seqend = 0;
	        }

	        smp.segments = smp.segments.concat(this.fitseq(path, ltres, qtres, pcnt, seqend));

	        if (seqend > 0) {
	          pcnt = seqend;
	        } else {
	          pcnt = path.points.length;
	        }
	      }

	      return smp;
	    }
	  }, {
	    key: "fitseq",
	    value: function fitseq(path, ltres, qtres, seqstart, seqend) {
	      if (seqend > path.points.length || seqend < 0) {
	        return [];
	      }

	      var errorpoint = seqstart,
	          errorval = 0,
	          curvepass = true,
	          px,
	          py,
	          dist2;
	      var tl = seqend - seqstart;

	      if (tl < 0) {
	        tl += path.points.length;
	      }

	      var vx = (path.points[seqend].x - path.points[seqstart].x) / tl,
	          vy = (path.points[seqend].y - path.points[seqstart].y) / tl;
	      var pcnt = (seqstart + 1) % path.points.length,
	          pl;

	      while (pcnt != seqend) {
	        pl = pcnt - seqstart;

	        if (pl < 0) {
	          pl += path.points.length;
	        }

	        px = path.points[seqstart].x + vx * pl;
	        py = path.points[seqstart].y + vy * pl;
	        dist2 = (path.points[pcnt].x - px) * (path.points[pcnt].x - px) + (path.points[pcnt].y - py) * (path.points[pcnt].y - py);

	        if (dist2 > ltres) {
	          curvepass = false;
	        }

	        if (dist2 > errorval) {
	          errorpoint = pcnt;
	          errorval = dist2;
	        }

	        pcnt = (pcnt + 1) % path.points.length;
	      }

	      if (curvepass) {
	        return [{
	          type: 'L',
	          x1: path.points[seqstart].x,
	          y1: path.points[seqstart].y,
	          x2: path.points[seqend].x,
	          y2: path.points[seqend].y
	        }];
	      }

	      var fitpoint = errorpoint;
	      curvepass = true;
	      errorval = 0;
	      var t = (fitpoint - seqstart) / tl,
	          t1 = (1 - t) * (1 - t),
	          t2 = 2 * (1 - t) * t,
	          t3 = t * t;
	      var cpx = (t1 * path.points[seqstart].x + t3 * path.points[seqend].x - path.points[fitpoint].x) / -t2,
	          cpy = (t1 * path.points[seqstart].y + t3 * path.points[seqend].y - path.points[fitpoint].y) / -t2;
	      pcnt = seqstart + 1;

	      while (pcnt != seqend) {
	        t = (pcnt - seqstart) / tl;
	        t1 = (1 - t) * (1 - t);
	        t2 = 2 * (1 - t) * t;
	        t3 = t * t;
	        px = t1 * path.points[seqstart].x + t2 * cpx + t3 * path.points[seqend].x;
	        py = t1 * path.points[seqstart].y + t2 * cpy + t3 * path.points[seqend].y;
	        dist2 = (path.points[pcnt].x - px) * (path.points[pcnt].x - px) + (path.points[pcnt].y - py) * (path.points[pcnt].y - py);

	        if (dist2 > qtres) {
	          curvepass = false;
	        }

	        if (dist2 > errorval) {
	          errorpoint = pcnt;
	          errorval = dist2;
	        }

	        pcnt = (pcnt + 1) % path.points.length;
	      }

	      if (curvepass) {
	        return [{
	          type: 'Q',
	          x1: path.points[seqstart].x,
	          y1: path.points[seqstart].y,
	          x2: cpx,
	          y2: cpy,
	          x3: path.points[seqend].x,
	          y3: path.points[seqend].y
	        }];
	      }

	      var splitpoint = fitpoint;
	      return this.fitseq(path, ltres, qtres, seqstart, splitpoint).concat(this.fitseq(path, ltres, qtres, splitpoint, seqend));
	    }
	  }, {
	    key: "batchtracepaths",
	    value: function batchtracepaths(internodepaths, ltres, qtres) {
	      var btracedpaths = [];

	      for (var k in internodepaths) {
	        if (!internodepaths.hasOwnProperty(k)) {
	          continue;
	        }

	        btracedpaths.push(this.tracepath(internodepaths[k], ltres, qtres));
	      }

	      return btracedpaths;
	    }
	  }, {
	    key: "batchtracelayers",
	    value: function batchtracelayers(binternodes, ltres, qtres) {
	      var btbis = [];

	      for (var k in binternodes) {
	        if (!binternodes.hasOwnProperty(k)) {
	          continue;
	        }

	        btbis[k] = this.batchtracepaths(binternodes[k], ltres, qtres);
	      }

	      return btbis;
	    }
	  }, {
	    key: "roundtodec",
	    value: function roundtodec(val, places) {
	      return Number(val.toFixed(places));
	    }
	  }, {
	    key: "svgpathstring",
	    value: function svgpathstring(tracedata, lnum, pathnum, options) {
	      var layer = tracedata.layers[lnum],
	          smp = layer[pathnum],
	          str = '',
	          pcnt;

	      if (options.linefilter && smp.segments.length < 3) {
	        return str;
	      }

	      str = "<path ".concat(options.desc ? "desc=\"l ".concat(lnum, " p ").concat(pathnum, "\" ") : '').concat(this.tosvgcolorstr(tracedata.palette[lnum], options), "d=\"");

	      if (options.roundcoords === -1) {
	        str += "M ".concat(smp.segments[0].x1 * options.scale, " ").concat(smp.segments[0].y1 * options.scale, " ");

	        for (pcnt = 0; pcnt < smp.segments.length; pcnt++) {
	          str += "".concat(smp.segments[pcnt].type, " ").concat(smp.segments[pcnt].x2 * options.scale, " ").concat(smp.segments[pcnt].y2 * options.scale, " ");

	          if (smp.segments[pcnt].hasOwnProperty('x3')) {
	            str += "".concat(smp.segments[pcnt].x3 * options.scale, " ").concat(smp.segments[pcnt].y3 * options.scale, " ");
	          }
	        }

	        str += 'Z ';
	      } else {
	        str += "M ".concat(this.roundtodec(smp.segments[0].x1 * options.scale, options.roundcoords), " ").concat(this.roundtodec(smp.segments[0].y1 * options.scale, options.roundcoords), " ");

	        for (pcnt = 0; pcnt < smp.segments.length; pcnt++) {
	          str += "".concat(smp.segments[pcnt].type, " ").concat(this.roundtodec(smp.segments[pcnt].x2 * options.scale, options.roundcoords), " ").concat(this.roundtodec(smp.segments[pcnt].y2 * options.scale, options.roundcoords), " ");

	          if (smp.segments[pcnt].hasOwnProperty('x3')) {
	            str += "".concat(this.roundtodec(smp.segments[pcnt].x3 * options.scale, options.roundcoords), " ").concat(this.roundtodec(smp.segments[pcnt].y3 * options.scale, options.roundcoords), " ");
	          }
	        }

	        str += 'Z ';
	      }

	      for (var hcnt = 0; hcnt < smp.holechildren.length; hcnt++) {
	        var hsmp = layer[smp.holechildren[hcnt]];

	        if (options.roundcoords === -1) {
	          if (hsmp.segments[hsmp.segments.length - 1].hasOwnProperty('x3')) {
	            str += "M ".concat(hsmp.segments[hsmp.segments.length - 1].x3 * options.scale, " ").concat(hsmp.segments[hsmp.segments.length - 1].y3 * options.scale, " ");
	          } else {
	            str += "M ".concat(hsmp.segments[hsmp.segments.length - 1].x2 * options.scale, " ").concat(hsmp.segments[hsmp.segments.length - 1].y2 * options.scale, " ");
	          }

	          for (pcnt = hsmp.segments.length - 1; pcnt >= 0; pcnt--) {
	            str += "".concat(hsmp.segments[pcnt].type, " ");

	            if (hsmp.segments[pcnt].hasOwnProperty('x3')) {
	              str += "".concat(hsmp.segments[pcnt].x2 * options.scale, " ").concat(hsmp.segments[pcnt].y2 * options.scale, " ");
	            }

	            str += "".concat(hsmp.segments[pcnt].x1 * options.scale, " ").concat(hsmp.segments[pcnt].y1 * options.scale, " ");
	          }
	        } else {
	          if (hsmp.segments[hsmp.segments.length - 1].hasOwnProperty('x3')) {
	            str += "M ".concat(this.roundtodec(hsmp.segments[hsmp.segments.length - 1].x3 * options.scale), " ").concat(this.roundtodec(hsmp.segments[hsmp.segments.length - 1].y3 * options.scale), " ");
	          } else {
	            str += "M ".concat(this.roundtodec(hsmp.segments[hsmp.segments.length - 1].x2 * options.scale), " ").concat(this.roundtodec(hsmp.segments[hsmp.segments.length - 1].y2 * options.scale), " ");
	          }

	          for (pcnt = hsmp.segments.length - 1; pcnt >= 0; pcnt--) {
	            str += "".concat(hsmp.segments[pcnt].type, " ");

	            if (hsmp.segments[pcnt].hasOwnProperty('x3')) {
	              str += "".concat(this.roundtodec(hsmp.segments[pcnt].x2 * options.scale), " ").concat(this.roundtodec(hsmp.segments[pcnt].y2 * options.scale), " ");
	            }

	            str += "".concat(this.roundtodec(hsmp.segments[pcnt].x1 * options.scale), " ").concat(this.roundtodec(hsmp.segments[pcnt].y1 * options.scale), " ");
	          }
	        }

	        str += 'Z ';
	      }

	      str += '" />';

	      if (options.lcpr || options.qcpr) {
	        for (pcnt = 0; pcnt < smp.segments.length; pcnt++) {
	          if (smp.segments[pcnt].hasOwnProperty('x3') && options.qcpr) {
	            str += "<circle cx=\"".concat(smp.segments[pcnt].x2 * options.scale, "\" cy=\"").concat(smp.segments[pcnt].y2 * options.scale, "\" r=\"").concat(options.qcpr, "\" fill=\"cyan\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"black\" />");
	            str += "<circle cx=\"".concat(smp.segments[pcnt].x3 * options.scale, "\" cy=\"").concat(smp.segments[pcnt].y3 * options.scale, "\" r=\"").concat(options.qcpr, "\" fill=\"white\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"black\" />");
	            str += "<line x1=\"".concat(smp.segments[pcnt].x1 * options.scale, "\" y1=\"").concat(smp.segments[pcnt].y1 * options.scale, "\" x2=\"").concat(smp.segments[pcnt].x2 * options.scale, "\" y2=\"").concat(smp.segments[pcnt].y2 * options.scale, "\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"cyan\" />");
	            str += "<line x1=\"".concat(smp.segments[pcnt].x2 * options.scale, "\" y1=\"").concat(smp.segments[pcnt].y2 * options.scale, "\" x2=\"").concat(smp.segments[pcnt].x3 * options.scale, "\" y2=\"").concat(smp.segments[pcnt].y3 * options.scale, "\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"cyan\" />");
	          }

	          if (!smp.segments[pcnt].hasOwnProperty('x3') && options.lcpr) {
	            str += "<circle cx=\"".concat(smp.segments[pcnt].x2 * options.scale, "\" cy=\"").concat(smp.segments[pcnt].y2 * options.scale, "\" r=\"").concat(options.lcpr, "\" fill=\"white\" stroke-width=\"").concat(options.lcpr * 0.2, "\" stroke=\"black\" />");
	          }
	        }

	        for (var hcnt = 0; hcnt < smp.holechildren.length; hcnt++) {
	          var hsmp = layer[smp.holechildren[hcnt]];

	          for (pcnt = 0; pcnt < hsmp.segments.length; pcnt++) {
	            if (hsmp.segments[pcnt].hasOwnProperty('x3') && options.qcpr) {
	              str += "<circle cx=\"".concat(hsmp.segments[pcnt].x2 * options.scale, "\" cy=\"").concat(hsmp.segments[pcnt].y2 * options.scale, "\" r=\"").concat(options.qcpr, "\" fill=\"cyan\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"black\" />");
	              str += "<circle cx=\"".concat(hsmp.segments[pcnt].x3 * options.scale, "\" cy=\"").concat(hsmp.segments[pcnt].y3 * options.scale, "\" r=\"").concat(options.qcpr, "\" fill=\"white\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"black\" />");
	              str += "<line x1=\"".concat(hsmp.segments[pcnt].x1 * options.scale, "\" y1=\"").concat(hsmp.segments[pcnt].y1 * options.scale, "\" x2=\"").concat(hsmp.segments[pcnt].x2 * options.scale, "\" y2=\"").concat(hsmp.segments[pcnt].y2 * options.scale, "\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"cyan\" />");
	              str += "<line x1=\"".concat(hsmp.segments[pcnt].x2 * options.scale, "\" y1=\"").concat(hsmp.segments[pcnt].y2 * options.scale, "\" x2=\"").concat(hsmp.segments[pcnt].x3 * options.scale, "\" y2=\"").concat(hsmp.segments[pcnt].y3 * options.scale, "\" stroke-width=\"").concat(options.qcpr * 0.2, "\" stroke=\"cyan\" />");
	            }

	            if (!hsmp.segments[pcnt].hasOwnProperty('x3') && options.lcpr) {
	              str += "<circle cx=\"".concat(hsmp.segments[pcnt].x2 * options.scale, "\" cy=\"").concat(hsmp.segments[pcnt].y2 * options.scale, "\" r=\"").concat(options.lcpr, "\" fill=\"white\" stroke-width=\"").concat(options.lcpr * 0.2, "\" stroke=\"black\" />");
	            }
	          }
	        }
	      }

	      return str;
	    }
	  }, {
	    key: "getsvgstring",
	    value: function getsvgstring(tracedata, options) {
	      options = this.checkoptions(options);
	      var w = tracedata.width * options.scale;
	      var h = tracedata.height * options.scale;
	      var svgstr = "<svg ".concat(options.viewbox ? "viewBox=\"0 0 ".concat(w, " ").concat(h, "\" ") : "width=\"".concat(w, "\" height=\"").concat(h, "\" "), "version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" desc=\"Created with imagetracer.js version ").concat(this.versionnumber, "\" >");

	      for (var lcnt = 0; lcnt < tracedata.layers.length; lcnt += 1) {
	        for (var pcnt = 0; pcnt < tracedata.layers[lcnt].length; pcnt += 1) {
	          if (!tracedata.layers[lcnt][pcnt].isholepath) {
	            svgstr += this.svgpathstring(tracedata, lcnt, pcnt, options);
	          }
	        }
	      }

	      svgstr += '</svg>';
	      return svgstr;
	    }
	  }, {
	    key: "compareNumbers",
	    value: function compareNumbers(a, b) {
	      return a - b;
	    }
	  }, {
	    key: "torgbastr",
	    value: function torgbastr(c) {
	      return "rgba(".concat(c.r, ",").concat(c.g, ",").concat(c.b, ",").concat(c.a, ")");
	    }
	  }, {
	    key: "tosvgcolorstr",
	    value: function tosvgcolorstr(c, options) {
	      return "fill=\"rgb(".concat(c.r, ",").concat(c.g, ",").concat(c.b, ")\" stroke=\"rgb(").concat(c.r, ",").concat(c.g, ",").concat(c.b, ")\" stroke-width=\"").concat(options.strokewidth, "\" opacity=\"").concat(c.a / 255.0, "\" ");
	    }
	  }, {
	    key: "appendSVGString",
	    value: function appendSVGString(svgstr, parentid) {
	      var div;

	      if (parentid) {
	        div = document.getElementById(parentid);

	        if (!div) {
	          div = document.createElement('div');
	          div.id = parentid;
	          document.body.appendChild(div);
	        }
	      } else {
	        div = document.createElement('div');
	        document.body.appendChild(div);
	      }

	      div.innerHTML += svgstr;
	    }
	  }, {
	    key: "blur",
	    value: function blur(imgd, radius, delta) {
	      var i, j, k, d, idx, racc, gacc, bacc, aacc, wacc;
	      var imgd2 = {
	        width: imgd.width,
	        height: imgd.height,
	        data: []
	      };
	      radius = Math.floor(radius);

	      if (radius < 1) {
	        return imgd;
	      }

	      if (radius > 5) {
	        radius = 5;
	      }

	      delta = Math.abs(delta);

	      if (delta > 1024) {
	        delta = 1024;
	      }

	      var thisgk = this.gks[radius - 1];

	      for (j = 0; j < imgd.height; j++) {
	        for (i = 0; i < imgd.width; i++) {
	          racc = 0;
	          gacc = 0;
	          bacc = 0;
	          aacc = 0;
	          wacc = 0;

	          for (k = -radius; k < radius + 1; k++) {
	            if (i + k > 0 && i + k < imgd.width) {
	              idx = (j * imgd.width + i + k) * 4;
	              racc += imgd.data[idx] * thisgk[k + radius];
	              gacc += imgd.data[idx + 1] * thisgk[k + radius];
	              bacc += imgd.data[idx + 2] * thisgk[k + radius];
	              aacc += imgd.data[idx + 3] * thisgk[k + radius];
	              wacc += thisgk[k + radius];
	            }
	          }

	          idx = (j * imgd.width + i) * 4;
	          imgd2.data[idx] = Math.floor(racc / wacc);
	          imgd2.data[idx + 1] = Math.floor(gacc / wacc);
	          imgd2.data[idx + 2] = Math.floor(bacc / wacc);
	          imgd2.data[idx + 3] = Math.floor(aacc / wacc);
	        }
	      }

	      var himgd = new Uint8ClampedArray(imgd2.data);

	      for (j = 0; j < imgd.height; j++) {
	        for (i = 0; i < imgd.width; i++) {
	          racc = 0;
	          gacc = 0;
	          bacc = 0;
	          aacc = 0;
	          wacc = 0;

	          for (k = -radius; k < radius + 1; k++) {
	            if (j + k > 0 && j + k < imgd.height) {
	              idx = ((j + k) * imgd.width + i) * 4;
	              racc += himgd[idx] * thisgk[k + radius];
	              gacc += himgd[idx + 1] * thisgk[k + radius];
	              bacc += himgd[idx + 2] * thisgk[k + radius];
	              aacc += himgd[idx + 3] * thisgk[k + radius];
	              wacc += thisgk[k + radius];
	            }
	          }

	          idx = (j * imgd.width + i) * 4;
	          imgd2.data[idx] = Math.floor(racc / wacc);
	          imgd2.data[idx + 1] = Math.floor(gacc / wacc);
	          imgd2.data[idx + 2] = Math.floor(bacc / wacc);
	          imgd2.data[idx + 3] = Math.floor(aacc / wacc);
	        }
	      }

	      for (j = 0; j < imgd.height; j++) {
	        for (i = 0; i < imgd.width; i++) {
	          idx = (j * imgd.width + i) * 4;
	          d = Math.abs(imgd2.data[idx] - imgd.data[idx]) + Math.abs(imgd2.data[idx + 1] - imgd.data[idx + 1]) + Math.abs(imgd2.data[idx + 2] - imgd.data[idx + 2]) + Math.abs(imgd2.data[idx + 3] - imgd.data[idx + 3]);

	          if (d > delta) {
	            imgd2.data[idx] = imgd.data[idx];
	            imgd2.data[idx + 1] = imgd.data[idx + 1];
	            imgd2.data[idx + 2] = imgd.data[idx + 2];
	            imgd2.data[idx + 3] = imgd.data[idx + 3];
	          }
	        }
	      }

	      return imgd2;
	    }
	  }, {
	    key: "loadImage",
	    value: function loadImage(url, callback, options) {
	      var img = new Image();

	      if (options && options.corsenabled) {
	        img.crossOrigin = 'Anonymous';
	      }

	      img.src = url;

	      img.onload = function () {
	        var canvas = document.createElement('canvas');
	        canvas.width = img.width;
	        canvas.height = img.height;
	        var context = canvas.getContext('2d');
	        context.drawImage(img, 0, 0);
	        callback(canvas);
	      };
	    }
	  }, {
	    key: "getImgdata",
	    value: function getImgdata(canvas) {
	      var context = canvas.getContext('2d');
	      return context.getImageData(0, 0, canvas.width, canvas.height);
	    }
	  }, {
	    key: "drawLayers",
	    value: function drawLayers(layers, palette, scale, parentid) {
	      scale = scale || 1;
	      var w, h, i, j, k;
	      var div;

	      if (parentid) {
	        div = document.getElementById(parentid);

	        if (!div) {
	          div = document.createElement('div');
	          div.id = parentid;
	          document.body.appendChild(div);
	        }
	      } else {
	        div = document.createElement('div');
	        document.body.appendChild(div);
	      }

	      for (k in layers) {
	        if (!layers.hasOwnProperty(k)) {
	          continue;
	        }

	        w = layers[k][0].length;
	        h = layers[k].length;
	        var canvas = document.createElement('canvas');
	        canvas.width = w * scale;
	        canvas.height = h * scale;
	        var context = canvas.getContext('2d');

	        for (j = 0; j < h; j += 1) {
	          for (i = 0; i < w; i += 1) {
	            context.fillStyle = this.torgbastr(palette[layers[k][j][i] % palette.length]);
	            context.fillRect(i * scale, j * scale, scale, scale);
	          }
	        }

	        div.appendChild(canvas);
	      }
	    }
	  }]);

	  return ImageTracer;
	}();

	var action = {
	  /**
	   * Get ui actions
	   * @returns {Object} actions for ui
	   * @private
	   */
	  getActions: function getActions() {
	    return {
	      main: this._mainAction(),
	      shape: this._shapeAction(),
	      crop: this._cropAction(),
	      flip: this._flipAction(),
	      rotate: this._rotateAction(),
	      text: this._textAction(),
	      mask: this._maskAction(),
	      draw: this._drawAction(),
	      icon: this._iconAction(),
	      filter: this._filterAction()
	    };
	  },

	  /**
	   * Main Action
	   * @returns {Object} actions for ui main
	   * @private
	   */
	  _mainAction: function _mainAction() {
	    var _this = this;

	    var exitCropOnAction = function exitCropOnAction() {
	      if (_this.ui.submenu === 'crop') {
	        _this.stopDrawingMode();

	        _this.ui.changeMenu('crop');
	      }
	    };

	    var setAngleRangeBarOnAction = function setAngleRangeBarOnAction(angle) {
	      if (_this.ui.submenu === 'rotate') {
	        _this.ui.rotate.setRangeBarAngle('setAngle', angle);
	      }
	    };

	    var onEndUndoRedo = function onEndUndoRedo(result) {
	      setAngleRangeBarOnAction(result);
	      return result;
	    };

	    return Object.assign({
	      initLoadImage: function initLoadImage(imagePath, imageName) {
	        return _this.loadImageFromURL(imagePath, imageName).then(function (sizeValue) {
	          exitCropOnAction();
	          _this.ui.initializeImgUrl = imagePath;

	          _this.ui.resizeEditor({
	            imageSize: sizeValue
	          });

	          _this.clearUndoStack();
	        });
	      },
	      undo: function undo() {
	        if (!_this.isEmptyUndoStack()) {
	          exitCropOnAction();

	          _this.undo().then(onEndUndoRedo);
	        }
	      },
	      redo: function redo() {
	        if (!_this.isEmptyRedoStack()) {
	          exitCropOnAction();

	          _this.redo().then(onEndUndoRedo);
	        }
	      },
	      reset: function reset() {
	        exitCropOnAction();

	        _this.loadImageFromURL(_this.ui.initializeImgUrl, 'resetImage').then(function (sizeValue) {
	          exitCropOnAction();

	          _this.ui.resizeEditor({
	            imageSize: sizeValue
	          });

	          _this.clearUndoStack();
	        });
	      },
	      delete: function _delete() {
	        _this.ui.changeDeleteButtonEnabled(false);

	        exitCropOnAction();

	        _this.removeActiveObject();

	        _this.activeObjectId = null;
	      },
	      deleteAll: function deleteAll() {
	        exitCropOnAction();

	        _this.clearObjects();

	        _this.ui.changeDeleteButtonEnabled(false);

	        _this.ui.changeDeleteAllButtonEnabled(false);
	      },
	      load: function load(file) {
	        if (!isSupportFileApi()) {
	          alert('This browser does not support file-api');
	        }

	        _this.ui.initializeImgUrl = URL.createObjectURL(file);

	        _this.loadImageFromFile(file).then(function (sizeValue) {
	          exitCropOnAction();

	          _this.clearUndoStack();

	          _this.ui.activeMenuEvent();

	          _this.ui.resizeEditor({
	            imageSize: sizeValue
	          });
	        })['catch'](function (message) {
	          return Promise.reject(message);
	        });
	      },
	      download: function download() {
	        var dataURL = _this.toDataURL();

	        var imageName = _this.getImageName();

	        var blob, type, w;

	        if (isSupportFileApi() && window.saveAs) {
	          blob = base64ToBlob(dataURL);
	          type = blob.type.split('/')[1];

	          if (imageName.split('.').pop() !== type) {
	            imageName += ".".concat(type);
	          }

	          saveAs(blob, imageName); // eslint-disable-line
	        } else {
	          w = window.open();
	          w.document.body.innerHTML = "<img src='".concat(dataURL, "'>");
	        }
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Icon Action
	   * @returns {Object} actions for ui icon
	   * @private
	   */
	  _iconAction: function _iconAction() {
	    var _this2 = this;

	    var cacheIconType;
	    var cacheIconColor;
	    var startX;
	    var startY;
	    var iconWidth;
	    var iconHeight;
	    var objId;
	    this.on({
	      'iconCreateResize': function iconCreateResize(_ref) {
	        var moveOriginPointer = _ref.moveOriginPointer;
	        var scaleX = (moveOriginPointer.x - startX) / iconWidth;
	        var scaleY = (moveOriginPointer.y - startY) / iconHeight;

	        _this2.setObjectPropertiesQuietly(objId, {
	          scaleX: Math.abs(scaleX * 2),
	          scaleY: Math.abs(scaleY * 2)
	        });
	      },
	      'iconCreateEnd': function iconCreateEnd() {
	        _this2.ui.icon.clearIconType();

	        _this2.changeSelectableAll(true);
	      }
	    });

	    var mouseDown = function mouseDown(e, originPointer) {
	      startX = originPointer.x;
	      startY = originPointer.y;

	      _this2.addIcon(cacheIconType, {
	        left: originPointer.x,
	        top: originPointer.y,
	        fill: cacheIconColor
	      }).then(function (obj) {
	        objId = obj.id;
	        iconWidth = obj.width;
	        iconHeight = obj.height;
	      });
	    };

	    return Object.assign({
	      changeColor: function changeColor(color) {
	        if (_this2.activeObjectId) {
	          _this2.changeIconColor(_this2.activeObjectId, color);
	        }
	      },
	      addIcon: function addIcon(iconType, iconColor) {
	        cacheIconType = iconType;
	        cacheIconColor = iconColor; // this.readyAddIcon();

	        _this2.changeCursor('crosshair');

	        _this2.off('mousedown');

	        _this2.once('mousedown', mouseDown.bind(_this2));
	      },
	      cancelAddIcon: function cancelAddIcon() {
	        _this2.off('mousedown');

	        _this2.ui.icon.clearIconType();

	        _this2.changeSelectableAll(true);

	        _this2.changeCursor('default');
	      },
	      registDefalutIcons: function registDefalutIcons(type, path) {
	        var iconObj = {};
	        iconObj[type] = path;

	        _this2.registerIcons(iconObj);
	      },
	      registCustomIcon: function registCustomIcon(imgUrl, file) {
	        var imageTracer = new ImageTracer();
	        imageTracer.imageToSVG(imgUrl, function (svgstr) {
	          var _svgstr$match = svgstr.match(/path[^>]*d="([^"]*)"/),
	              _svgstr$match2 = _slicedToArray(_svgstr$match, 2),
	              svgPath = _svgstr$match2[1];

	          var iconObj = {};
	          iconObj[file.name] = svgPath;

	          _this2.registerIcons(iconObj);

	          _this2.addIcon(file.name, {
	            left: 100,
	            top: 100
	          });
	        }, Imagetracer.tracerDefaultOption());
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Draw Action
	   * @returns {Object} actions for ui draw
	   * @private
	   */
	  _drawAction: function _drawAction() {
	    var _this3 = this;

	    return Object.assign({
	      setDrawMode: function setDrawMode(type, settings) {
	        _this3.stopDrawingMode();

	        if (type === 'free') {
	          _this3.startDrawingMode('FREE_DRAWING', settings);
	        } else {
	          _this3.startDrawingMode('LINE_DRAWING', settings);
	        }
	      },
	      setColor: function setColor(color) {
	        _this3.setBrush({
	          color: color
	        });
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Mask Action
	   * @returns {Object} actions for ui mask
	   * @private
	   */
	  _maskAction: function _maskAction() {
	    var _this4 = this;

	    return Object.assign({
	      loadImageFromURL: function loadImageFromURL(imgUrl, file) {
	        return _this4.loadImageFromURL(_this4.toDataURL(), 'FilterImage').then(function () {
	          _this4.addImageObject(imgUrl).then(function () {
	            URL.revokeObjectURL(file);
	          });
	        });
	      },
	      applyFilter: function applyFilter() {
	        _this4.applyFilter('mask', {
	          maskObjId: _this4.activeObjectId
	        });
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Text Action
	   * @returns {Object} actions for ui text
	   * @private
	   */
	  _textAction: function _textAction() {
	    var _this5 = this;

	    return Object.assign({
	      changeTextStyle: function changeTextStyle(styleObj) {
	        if (_this5.activeObjectId) {
	          _this5.changeTextStyle(_this5.activeObjectId, styleObj);
	        }
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Rotate Action
	   * @returns {Object} actions for ui rotate
	   * @private
	   */
	  _rotateAction: function _rotateAction() {
	    var _this6 = this;

	    return Object.assign({
	      rotate: function rotate(angle, isSilent) {
	        _this6.rotate(angle, isSilent);

	        _this6.ui.resizeEditor();

	        _this6.ui.rotate.setRangeBarAngle('rotate', angle);
	      },
	      setAngle: function setAngle(angle, isSilent) {
	        _this6.setAngle(angle, isSilent);

	        _this6.ui.resizeEditor();

	        _this6.ui.rotate.setRangeBarAngle('setAngle', angle);
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Shape Action
	   * @returns {Object} actions for ui shape
	   * @private
	   */
	  _shapeAction: function _shapeAction() {
	    var _this7 = this;

	    return Object.assign({
	      changeShape: function changeShape(changeShapeObject) {
	        if (_this7.activeObjectId) {
	          _this7.changeShape(_this7.activeObjectId, changeShapeObject);
	        }
	      },
	      setDrawingShape: function setDrawingShape(shapeType) {
	        _this7.setDrawingShape(shapeType);
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Crop Action
	   * @returns {Object} actions for ui crop
	   * @private
	   */
	  _cropAction: function _cropAction() {
	    var _this8 = this;

	    return Object.assign({
	      crop: function crop() {
	        var cropRect = _this8.getCropzoneRect();

	        if (cropRect) {
	          _this8.crop(cropRect).then(function () {
	            _this8.stopDrawingMode();

	            _this8.ui.resizeEditor();

	            _this8.ui.changeMenu('crop');
	          })['catch'](function (message) {
	            return Promise.reject(message);
	          });
	        }
	      },
	      cancel: function cancel() {
	        _this8.stopDrawingMode();

	        _this8.ui.changeMenu('crop');
	      },
	      preset: function preset(presetType) {
	        switch (presetType) {
	          case 'preset-square':
	            _this8.setCropzoneRect(1 / 1);

	            break;

	          case 'preset-3-2':
	            _this8.setCropzoneRect(3 / 2);

	            break;

	          case 'preset-4-3':
	            _this8.setCropzoneRect(4 / 3);

	            break;

	          case 'preset-5-4':
	            _this8.setCropzoneRect(5 / 4);

	            break;

	          case 'preset-7-5':
	            _this8.setCropzoneRect(7 / 5);

	            break;

	          case 'preset-16-9':
	            _this8.setCropzoneRect(16 / 9);

	            break;

	          default:
	            _this8.setCropzoneRect();

	            _this8.ui.crop.changeApplyButtonStatus(false);

	            break;
	        }
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Flip Action
	   * @returns {Object} actions for ui flip
	   * @private
	   */
	  _flipAction: function _flipAction() {
	    var _this9 = this;

	    return Object.assign({
	      flip: function flip(flipType) {
	        return _this9[flipType]();
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Filter Action
	   * @returns {Object} actions for ui filter
	   * @private
	   */
	  _filterAction: function _filterAction() {
	    var _this10 = this;

	    return Object.assign({
	      applyFilter: function applyFilter(applying, type, options) {
	        if (applying) {
	          _this10.applyFilter(type, options);
	        } else if (_this10.hasFilter(type)) {
	          _this10.removeFilter(type);
	        }
	      }
	    }, this._commonAction());
	  },

	  /**
	   * Image Editor Event Observer
	   */
	  setReAction: function setReAction() {
	    var _this11 = this;

	    this.on({
	      undoStackChanged: function undoStackChanged(length) {
	        if (length) {
	          _this11.ui.changeUndoButtonStatus(true);

	          _this11.ui.changeResetButtonStatus(true);
	        } else {
	          _this11.ui.changeUndoButtonStatus(false);

	          _this11.ui.changeResetButtonStatus(false);
	        }

	        _this11.ui.resizeEditor();
	      },
	      redoStackChanged: function redoStackChanged(length) {
	        if (length) {
	          _this11.ui.changeRedoButtonStatus(true);
	        } else {
	          _this11.ui.changeRedoButtonStatus(false);
	        }

	        _this11.ui.resizeEditor();
	      },

	      /* eslint-disable complexity */
	      objectActivated: function objectActivated(obj) {
	        _this11.activeObjectId = obj.id;

	        _this11.ui.changeDeleteButtonEnabled(true);

	        _this11.ui.changeDeleteAllButtonEnabled(true);

	        if (obj.type === 'cropzone') {
	          _this11.ui.crop.changeApplyButtonStatus(true);
	        } else if (['rect', 'circle', 'triangle'].indexOf(obj.type) > -1) {
	          _this11.stopDrawingMode();

	          if (_this11.ui.submenu !== 'shape') {
	            _this11.ui.changeMenu('shape', false, false);
	          }

	          _this11.ui.shape.setShapeStatus({
	            strokeColor: obj.stroke,
	            strokeWidth: obj.strokeWidth,
	            fillColor: obj.fill
	          });

	          _this11.ui.shape.setMaxStrokeValue(Math.min(obj.width, obj.height));
	        } else if (obj.type === 'path' || obj.type === 'line') {
	          if (_this11.ui.submenu !== 'draw') {
	            _this11.ui.changeMenu('draw', false, false);

	            _this11.ui.draw.changeStandbyMode();
	          }
	        } else if (['i-text', 'text'].indexOf(obj.type) > -1) {
	          if (_this11.ui.submenu !== 'text') {
	            _this11.ui.changeMenu('text', false, false);
	          }
	        } else if (obj.type === 'icon') {
	          _this11.stopDrawingMode();

	          if (_this11.ui.submenu !== 'icon') {
	            _this11.ui.changeMenu('icon', false, false);
	          }

	          _this11.ui.icon.setIconPickerColor(obj.fill);
	        }
	      },

	      /* eslint-enable complexity */
	      addText: function addText(pos) {
	        _this11.addText('Double Click', {
	          position: pos.originPosition,
	          styles: {
	            fill: _this11.ui.text.textColor,
	            fontSize: toInteger$1(_this11.ui.text.fontSize),
	            fontFamily: 'Noto Sans'
	          }
	        }).then(function () {
	          _this11.changeCursor('default');
	        });
	      },
	      addObjectAfter: function addObjectAfter(obj) {
	        if (['rect', 'circle', 'triangle'].indexOf(obj.type) > -1) {
	          _this11.ui.shape.setMaxStrokeValue(Math.min(obj.width, obj.height));

	          _this11.ui.shape.changeStandbyMode();
	        }
	      },
	      objectScaled: function objectScaled(obj) {
	        if (['i-text', 'text'].indexOf(obj.type) > -1) {
	          _this11.ui.text.fontSize = toInteger$1(obj.fontSize);
	        } else if (['rect', 'circle', 'triangle'].indexOf(obj.type) >= 0) {
	          var width = obj.width,
	              height = obj.height;

	          var strokeValue = _this11.ui.shape.getStrokeValue();

	          if (width < strokeValue) {
	            _this11.ui.shape.setStrokeValue(width);
	          }

	          if (height < strokeValue) {
	            _this11.ui.shape.setStrokeValue(height);
	          }
	        }
	      },
	      selectionCleared: function selectionCleared() {
	        _this11.activeObjectId = null;

	        if (_this11.ui.submenu === 'text') {
	          _this11.changeCursor('text');
	        } else if (_this11.ui.submenu !== 'draw' && _this11.ui.submenu !== 'crop') {
	          _this11.stopDrawingMode();
	        }
	      }
	    });
	  },

	  /**
	   * Common Action
	   * @returns {Object} common actions for ui
	   * @private
	   */
	  _commonAction: function _commonAction() {
	    var _this12 = this;

	    return {
	      modeChange: function modeChange(menu) {
	        switch (menu) {
	          case 'text':
	            _this12._changeActivateMode('TEXT');

	            break;

	          case 'crop':
	            _this12.startDrawingMode('CROPPER');

	            break;

	          case 'shape':
	            _this12._changeActivateMode('SHAPE');

	            _this12.setDrawingShape(_this12.ui.shape.type, _this12.ui.shape.options);

	            break;
	        }
	      },
	      deactivateAll: this.deactivateAll.bind(this),
	      changeSelectableAll: this.changeSelectableAll.bind(this),
	      discardSelection: this.discardSelection.bind(this),
	      stopDrawingMode: this.stopDrawingMode.bind(this)
	    };
	  },

	  /**
	   * Mixin
	   * @param {ImageEditor} ImageEditor instance
	   */
	  mixin: function mixin(ImageEditor) {
	    Object.assign(ImageEditor.prototype, this);
	  }
	};

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$1 = {}.toString;

	var isArray$2 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$2(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	Buffer.isBuffer = isBuffer;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!isArray$2(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _nodeResolve_empty
	});

	var require$$2 = getCjsExportFromNamespace(_nodeResolve_empty$1);

	var fabric_1 = createCommonjsModule(function (module, exports) {
	/* build: `node build.js modules=ALL exclude=gestures,accessors requirejs minifier=uglifyjs` */
	/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */

	var fabric = fabric || { version: '3.4.0' };
	{
	  exports.fabric = fabric;
	}
	/* _AMD_END_ */
	if (typeof document !== 'undefined' && typeof window !== 'undefined') {
	  if (document instanceof (typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document)) {
	    fabric.document = document;
	  }
	  else {
	    fabric.document = document.implementation.createHTMLDocument('');
	  }
	  fabric.window = window;
	}
	else {
	  // assume we're running under node.js when document/window are not present
	  var jsdom = require$$2;
	  var virtualWindow = new jsdom.JSDOM(
	    decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),
	    {
	      features: {
	        FetchExternalResources: ['img']
	      },
	      resources: 'usable'
	    }).window;
	  fabric.document = virtualWindow.document;
	  fabric.jsdomImplForWrapper = require$$2.implForWrapper;
	  fabric.nodeCanvas = require$$2.Canvas;
	  fabric.window = virtualWindow;
	  DOMParser = fabric.window.DOMParser;
	}

	/**
	 * True when in environment that supports touch events
	 * @type boolean
	 */
	fabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||
	  (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);

	/**
	 * True when in environment that's probably Node.js
	 * @type boolean
	 */
	fabric.isLikelyNode = typeof Buffer !== 'undefined' &&
	                      typeof window === 'undefined';

	/* _FROM_SVG_START_ */
	/**
	 * Attributes parsed from all SVG elements
	 * @type array
	 */
	fabric.SHARED_ATTRIBUTES = [
	  'display',
	  'transform',
	  'fill', 'fill-opacity', 'fill-rule',
	  'opacity',
	  'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset',
	  'stroke-linejoin', 'stroke-miterlimit',
	  'stroke-opacity', 'stroke-width',
	  'id', 'paint-order', 'vector-effect',
	  'instantiated_by_use', 'clip-path'
	];
	/* _FROM_SVG_END_ */

	/**
	 * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.
	 */
	fabric.DPI = 96;
	fabric.reNum = '(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)';
	fabric.fontPaths = { };
	fabric.iMatrix = [1, 0, 0, 1, 0, 0];

	/**
	 * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.
	 * @since 1.7.14
	 * @type Number
	 * @default
	 */
	fabric.perfLimitSizeTotal = 2097152;

	/**
	 * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000
	 * @since 1.7.14
	 * @type Number
	 * @default
	 */
	fabric.maxCacheSideLimit = 4096;

	/**
	 * Lowest pixel limit for cache canvases, set at 256PX
	 * @since 1.7.14
	 * @type Number
	 * @default
	 */
	fabric.minCacheSideLimit = 256;

	/**
	 * Cache Object for widths of chars in text rendering.
	 */
	fabric.charWidthsCache = { };

	/**
	 * if webgl is enabled and available, textureSize will determine the size
	 * of the canvas backend
	 * @since 2.0.0
	 * @type Number
	 * @default
	 */
	fabric.textureSize = 2048;

	/**
	 * When 'true', style information is not retained when copy/pasting text, making
	 * pasted text use destination style.
	 * Defaults to 'false'.
	 * @type Boolean
	 * @default
	 */
	fabric.disableStyleCopyPaste = false;

	/**
	 * Enable webgl for filtering picture is available
	 * A filtering backend will be initialized, this will both take memory and
	 * time since a default 2048x2048 canvas will be created for the gl context
	 * @since 2.0.0
	 * @type Boolean
	 * @default
	 */
	fabric.enableGLFiltering = true;

	/**
	 * Device Pixel Ratio
	 * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html
	 */
	fabric.devicePixelRatio = fabric.window.devicePixelRatio ||
	                          fabric.window.webkitDevicePixelRatio ||
	                          fabric.window.mozDevicePixelRatio ||
	                          1;
	/**
	 * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,
	 * which is unitless and not rendered equally across browsers.
	 *
	 * Values that work quite well (as of October 2017) are:
	 * - Chrome: 1.5
	 * - Edge: 1.75
	 * - Firefox: 0.9
	 * - Safari: 0.95
	 *
	 * @since 2.0.0
	 * @type Number
	 * @default 1
	 */
	fabric.browserShadowBlurConstant = 1;

	/**
	 * This object contains the result of arc to beizer conversion for faster retrieving if the same arc needs to be converted again.
	 * It was an internal variable, is accessible since version 2.3.4
	 */
	fabric.arcToSegmentsCache = { };

	/**
	 * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.
	 * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing
	 * you do not get any speed benefit and you get a big object in memory.
	 * The object was a private variable before, while now is appended to the lib so that you have access to it and you
	 * can eventually clear it.
	 * It was an internal variable, is accessible since version 2.3.4
	 */
	fabric.boundsOfCurveCache = { };

	/**
	 * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better
	 * @default true
	 */
	fabric.cachesBoundsOfCurve = true;

	/**
	 * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on
	 * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true
	 * this has to be set before instantiating the filtering backend ( before filtering the first image )
	 * @type Boolean
	 * @default false
	 */
	fabric.forceGLPutImageData = false;

	fabric.initFilterBackend = function() {
	  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {
	    console.log('max texture size: ' + fabric.maxTextureSize);
	    return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));
	  }
	  else if (fabric.Canvas2dFilterBackend) {
	    return (new fabric.Canvas2dFilterBackend());
	  }
	};


	if (typeof document !== 'undefined' && typeof window !== 'undefined') {
	  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)
	  window.fabric = fabric;
	}


	(function() {

	  /**
	   * @private
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  function _removeEventListener(eventName, handler) {
	    if (!this.__eventListeners[eventName]) {
	      return;
	    }
	    var eventListener = this.__eventListeners[eventName];
	    if (handler) {
	      eventListener[eventListener.indexOf(handler)] = false;
	    }
	    else {
	      fabric.util.array.fill(eventListener, false);
	    }
	  }

	  /**
	   * Observes specified event
	   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)
	   * @memberOf fabric.Observable
	   * @alias on
	   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
	   * @param {Function} handler Function that receives a notification when an event of the specified type occurs
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function observe(eventName, handler) {
	    if (!this.__eventListeners) {
	      this.__eventListeners = { };
	    }
	    // one object with key/value pairs was passed
	    if (arguments.length === 1) {
	      for (var prop in eventName) {
	        this.on(prop, eventName[prop]);
	      }
	    }
	    else {
	      if (!this.__eventListeners[eventName]) {
	        this.__eventListeners[eventName] = [];
	      }
	      this.__eventListeners[eventName].push(handler);
	    }
	    return this;
	  }

	  /**
	   * Stops event observing for a particular event handler. Calling this method
	   * without arguments removes all handlers for all events
	   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)
	   * @memberOf fabric.Observable
	   * @alias off
	   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
	   * @param {Function} handler Function to be deleted from EventListeners
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function stopObserving(eventName, handler) {
	    if (!this.__eventListeners) {
	      return this;
	    }

	    // remove all key/value pairs (event name -> event handler)
	    if (arguments.length === 0) {
	      for (eventName in this.__eventListeners) {
	        _removeEventListener.call(this, eventName);
	      }
	    }
	    // one object with key/value pairs was passed
	    else if (arguments.length === 1 && typeof arguments[0] === 'object') {
	      for (var prop in eventName) {
	        _removeEventListener.call(this, prop, eventName[prop]);
	      }
	    }
	    else {
	      _removeEventListener.call(this, eventName, handler);
	    }
	    return this;
	  }

	  /**
	   * Fires event with an optional options object
	   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)
	   * @memberOf fabric.Observable
	   * @alias trigger
	   * @param {String} eventName Event name to fire
	   * @param {Object} [options] Options object
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function fire(eventName, options) {
	    if (!this.__eventListeners) {
	      return this;
	    }

	    var listenersForEvent = this.__eventListeners[eventName];
	    if (!listenersForEvent) {
	      return this;
	    }

	    for (var i = 0, len = listenersForEvent.length; i < len; i++) {
	      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });
	    }
	    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {
	      return value !== false;
	    });
	    return this;
	  }

	  /**
	   * @namespace fabric.Observable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}
	   * @see {@link http://fabricjs.com/events|Events demo}
	   */
	  fabric.Observable = {
	    observe: observe,
	    stopObserving: stopObserving,
	    fire: fire,

	    on: observe,
	    off: stopObserving,
	    trigger: fire
	  };
	})();


	/**
	 * @namespace fabric.Collection
	 */
	fabric.Collection = {

	  _objects: [],

	  /**
	   * Adds objects to collection, Canvas or Group, then renders canvas
	   * (if `renderOnAddRemove` is not `false`).
	   * in case of Group no changes to bounding box are made.
	   * Objects should be instances of (or inherit from) fabric.Object
	   * Use of this function is highly discouraged for groups.
	   * you can add a bunch of objects with the add method but then you NEED
	   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
	   * @param {...fabric.Object} object Zero or more fabric instances
	   * @return {Self} thisArg
	   * @chainable
	   */
	  add: function () {
	    this._objects.push.apply(this._objects, arguments);
	    if (this._onObjectAdded) {
	      for (var i = 0, length = arguments.length; i < length; i++) {
	        this._onObjectAdded(arguments[i]);
	      }
	    }
	    this.renderOnAddRemove && this.requestRenderAll();
	    return this;
	  },

	  /**
	   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
	   * An object should be an instance of (or inherit from) fabric.Object
	   * Use of this function is highly discouraged for groups.
	   * you can add a bunch of objects with the insertAt method but then you NEED
	   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
	   * @param {Object} object Object to insert
	   * @param {Number} index Index to insert object at
	   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
	   * @return {Self} thisArg
	   * @chainable
	   */
	  insertAt: function (object, index, nonSplicing) {
	    var objects = this._objects;
	    if (nonSplicing) {
	      objects[index] = object;
	    }
	    else {
	      objects.splice(index, 0, object);
	    }
	    this._onObjectAdded && this._onObjectAdded(object);
	    this.renderOnAddRemove && this.requestRenderAll();
	    return this;
	  },

	  /**
	   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
	   * @param {...fabric.Object} object Zero or more fabric instances
	   * @return {Self} thisArg
	   * @chainable
	   */
	  remove: function() {
	    var objects = this._objects,
	        index, somethingRemoved = false;

	    for (var i = 0, length = arguments.length; i < length; i++) {
	      index = objects.indexOf(arguments[i]);

	      // only call onObjectRemoved if an object was actually removed
	      if (index !== -1) {
	        somethingRemoved = true;
	        objects.splice(index, 1);
	        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);
	      }
	    }

	    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();
	    return this;
	  },

	  /**
	   * Executes given function for each object in this group
	   * @param {Function} callback
	   *                   Callback invoked with current object as first argument,
	   *                   index - as second and an array of all objects - as third.
	   *                   Callback is invoked in a context of Global Object (e.g. `window`)
	   *                   when no `context` argument is given
	   *
	   * @param {Object} context Context (aka thisObject)
	   * @return {Self} thisArg
	   * @chainable
	   */
	  forEachObject: function(callback, context) {
	    var objects = this.getObjects();
	    for (var i = 0, len = objects.length; i < len; i++) {
	      callback.call(context, objects[i], i, objects);
	    }
	    return this;
	  },

	  /**
	   * Returns an array of children objects of this instance
	   * Type parameter introduced in 1.3.10
	   * since 2.3.5 this method return always a COPY of the array;
	   * @param {String} [type] When specified, only objects of this type are returned
	   * @return {Array}
	   */
	  getObjects: function(type) {
	    if (typeof type === 'undefined') {
	      return this._objects.concat();
	    }
	    return this._objects.filter(function(o) {
	      return o.type === type;
	    });
	  },

	  /**
	   * Returns object at specified index
	   * @param {Number} index
	   * @return {Self} thisArg
	   */
	  item: function (index) {
	    return this._objects[index];
	  },

	  /**
	   * Returns true if collection contains no objects
	   * @return {Boolean} true if collection is empty
	   */
	  isEmpty: function () {
	    return this._objects.length === 0;
	  },

	  /**
	   * Returns a size of a collection (i.e: length of an array containing its objects)
	   * @return {Number} Collection size
	   */
	  size: function() {
	    return this._objects.length;
	  },

	  /**
	   * Returns true if collection contains an object
	   * @param {Object} object Object to check against
	   * @return {Boolean} `true` if collection contains an object
	   */
	  contains: function(object) {
	    return this._objects.indexOf(object) > -1;
	  },

	  /**
	   * Returns number representation of a collection complexity
	   * @return {Number} complexity
	   */
	  complexity: function () {
	    return this._objects.reduce(function (memo, current) {
	      memo += current.complexity ? current.complexity() : 0;
	      return memo;
	    }, 0);
	  }
	};


	/**
	 * @namespace fabric.CommonMethods
	 */
	fabric.CommonMethods = {

	  /**
	   * Sets object's properties from options
	   * @param {Object} [options] Options object
	   */
	  _setOptions: function(options) {
	    for (var prop in options) {
	      this.set(prop, options[prop]);
	    }
	  },

	  /**
	   * @private
	   * @param {Object} [filler] Options object
	   * @param {String} [property] property to set the Gradient to
	   */
	  _initGradient: function(filler, property) {
	    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {
	      this.set(property, new fabric.Gradient(filler));
	    }
	  },

	  /**
	   * @private
	   * @param {Object} [filler] Options object
	   * @param {String} [property] property to set the Pattern to
	   * @param {Function} [callback] callback to invoke after pattern load
	   */
	  _initPattern: function(filler, property, callback) {
	    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {
	      this.set(property, new fabric.Pattern(filler, callback));
	    }
	    else {
	      callback && callback();
	    }
	  },

	  /**
	   * @private
	   * @param {Object} [options] Options object
	   */
	  _initClipping: function(options) {
	    if (!options.clipTo || typeof options.clipTo !== 'string') {
	      return;
	    }

	    var functionBody = fabric.util.getFunctionBody(options.clipTo);
	    if (typeof functionBody !== 'undefined') {
	      this.clipTo = new Function('ctx', functionBody);
	    }
	  },

	  /**
	   * @private
	   */
	  _setObject: function(obj) {
	    for (var prop in obj) {
	      this._set(prop, obj[prop]);
	    }
	  },

	  /**
	   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
	   * @param {String|Object} key Property name or object (if object, iterate over the object properties)
	   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  set: function(key, value) {
	    if (typeof key === 'object') {
	      this._setObject(key);
	    }
	    else {
	      if (typeof value === 'function' && key !== 'clipTo') {
	        this._set(key, value(this.get(key)));
	      }
	      else {
	        this._set(key, value);
	      }
	    }
	    return this;
	  },

	  _set: function(key, value) {
	    this[key] = value;
	  },

	  /**
	   * Toggles specified property from `true` to `false` or from `false` to `true`
	   * @param {String} property Property to toggle
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  toggle: function(property) {
	    var value = this.get(property);
	    if (typeof value === 'boolean') {
	      this.set(property, !value);
	    }
	    return this;
	  },

	  /**
	   * Basic getter
	   * @param {String} property Property name
	   * @return {*} value of a property
	   */
	  get: function(property) {
	    return this[property];
	  }
	};


	(function(global) {

	  var sqrt = Math.sqrt,
	      atan2 = Math.atan2,
	      pow = Math.pow,
	      PiBy180 = Math.PI / 180,
	      PiBy2 = Math.PI / 2;

	  /**
	   * @namespace fabric.util
	   */
	  fabric.util = {

	    /**
	     * Calculate the cos of an angle, avoiding returning floats for known results
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} angle the angle in radians or in degree
	     * @return {Number}
	     */
	    cos: function(angle) {
	      if (angle === 0) { return 1; }
	      if (angle < 0) {
	        // cos(a) = cos(-a)
	        angle = -angle;
	      }
	      var angleSlice = angle / PiBy2;
	      switch (angleSlice) {
	        case 1: case 3: return 0;
	        case 2: return -1;
	      }
	      return Math.cos(angle);
	    },

	    /**
	     * Calculate the sin of an angle, avoiding returning floats for known results
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} angle the angle in radians or in degree
	     * @return {Number}
	     */
	    sin: function(angle) {
	      if (angle === 0) { return 0; }
	      var angleSlice = angle / PiBy2, sign = 1;
	      if (angle < 0) {
	        // sin(-a) = -sin(a)
	        sign = -1;
	      }
	      switch (angleSlice) {
	        case 1: return sign;
	        case 2: return 0;
	        case 3: return -sign;
	      }
	      return Math.sin(angle);
	    },

	    /**
	     * Removes value from an array.
	     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} array
	     * @param {*} value
	     * @return {Array} original array
	     */
	    removeFromArray: function(array, value) {
	      var idx = array.indexOf(value);
	      if (idx !== -1) {
	        array.splice(idx, 1);
	      }
	      return array;
	    },

	    /**
	     * Returns random number between 2 specified ones.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} min lower limit
	     * @param {Number} max upper limit
	     * @return {Number} random value (between min and max)
	     */
	    getRandomInt: function(min, max) {
	      return Math.floor(Math.random() * (max - min + 1)) + min;
	    },

	    /**
	     * Transforms degrees to radians.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} degrees value in degrees
	     * @return {Number} value in radians
	     */
	    degreesToRadians: function(degrees) {
	      return degrees * PiBy180;
	    },

	    /**
	     * Transforms radians to degrees.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} radians value in radians
	     * @return {Number} value in degrees
	     */
	    radiansToDegrees: function(radians) {
	      return radians / PiBy180;
	    },

	    /**
	     * Rotates `point` around `origin` with `radians`
	     * @static
	     * @memberOf fabric.util
	     * @param {fabric.Point} point The point to rotate
	     * @param {fabric.Point} origin The origin of the rotation
	     * @param {Number} radians The radians of the angle for the rotation
	     * @return {fabric.Point} The new rotated point
	     */
	    rotatePoint: function(point, origin, radians) {
	      point.subtractEquals(origin);
	      var v = fabric.util.rotateVector(point, radians);
	      return new fabric.Point(v.x, v.y).addEquals(origin);
	    },

	    /**
	     * Rotates `vector` with `radians`
	     * @static
	     * @memberOf fabric.util
	     * @param {Object} vector The vector to rotate (x and y)
	     * @param {Number} radians The radians of the angle for the rotation
	     * @return {Object} The new rotated point
	     */
	    rotateVector: function(vector, radians) {
	      var sin = fabric.util.sin(radians),
	          cos = fabric.util.cos(radians),
	          rx = vector.x * cos - vector.y * sin,
	          ry = vector.x * sin + vector.y * cos;
	      return {
	        x: rx,
	        y: ry
	      };
	    },

	    /**
	     * Apply transform t to point p
	     * @static
	     * @memberOf fabric.util
	     * @param  {fabric.Point} p The point to transform
	     * @param  {Array} t The transform
	     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
	     * @return {fabric.Point} The transformed point
	     */
	    transformPoint: function(p, t, ignoreOffset) {
	      if (ignoreOffset) {
	        return new fabric.Point(
	          t[0] * p.x + t[2] * p.y,
	          t[1] * p.x + t[3] * p.y
	        );
	      }
	      return new fabric.Point(
	        t[0] * p.x + t[2] * p.y + t[4],
	        t[1] * p.x + t[3] * p.y + t[5]
	      );
	    },

	    /**
	     * Returns coordinates of points's bounding rectangle (left, top, width, height)
	     * @param {Array} points 4 points array
	     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix
	     * @return {Object} Object with left, top, width, height properties
	     */
	    makeBoundingBoxFromPoints: function(points, transform) {
	      if (transform) {
	        for (var i = 0; i < points.length; i++) {
	          points[i] = fabric.util.transformPoint(points[i], transform);
	        }
	      }
	      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],
	          minX = fabric.util.array.min(xPoints),
	          maxX = fabric.util.array.max(xPoints),
	          width = maxX - minX,
	          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],
	          minY = fabric.util.array.min(yPoints),
	          maxY = fabric.util.array.max(yPoints),
	          height = maxY - minY;

	      return {
	        left: minX,
	        top: minY,
	        width: width,
	        height: height
	      };
	    },

	    /**
	     * Invert transformation t
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} t The transform
	     * @return {Array} The inverted transform
	     */
	    invertTransform: function(t) {
	      var a = 1 / (t[0] * t[3] - t[1] * t[2]),
	          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],
	          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);
	      r[4] = -o.x;
	      r[5] = -o.y;
	      return r;
	    },

	    /**
	     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number|String} number number to operate on
	     * @param {Number} fractionDigits number of fraction digits to "leave"
	     * @return {Number}
	     */
	    toFixed: function(number, fractionDigits) {
	      return parseFloat(Number(number).toFixed(fractionDigits));
	    },

	    /**
	     * Converts from attribute value to pixel value if applicable.
	     * Returns converted pixels or original value not converted.
	     * @param {Number|String} value number to operate on
	     * @param {Number} fontSize
	     * @return {Number|String}
	     */
	    parseUnit: function(value, fontSize) {
	      var unit = /\D{0,2}$/.exec(value),
	          number = parseFloat(value);
	      if (!fontSize) {
	        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
	      }
	      switch (unit[0]) {
	        case 'mm':
	          return number * fabric.DPI / 25.4;

	        case 'cm':
	          return number * fabric.DPI / 2.54;

	        case 'in':
	          return number * fabric.DPI;

	        case 'pt':
	          return number * fabric.DPI / 72; // or * 4 / 3

	        case 'pc':
	          return number * fabric.DPI / 72 * 12; // or * 16

	        case 'em':
	          return number * fontSize;

	        default:
	          return number;
	      }
	    },

	    /**
	     * Function which always returns `false`.
	     * @static
	     * @memberOf fabric.util
	     * @return {Boolean}
	     */
	    falseFunction: function() {
	      return false;
	    },

	    /**
	     * Returns klass "Class" object of given namespace
	     * @memberOf fabric.util
	     * @param {String} type Type of object (eg. 'circle')
	     * @param {String} namespace Namespace to get klass "Class" object from
	     * @return {Object} klass "Class"
	     */
	    getKlass: function(type, namespace) {
	      // capitalize first letter only
	      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
	      return fabric.util.resolveNamespace(namespace)[type];
	    },

	    /**
	     * Returns array of attributes for given svg that fabric parses
	     * @memberOf fabric.util
	     * @param {String} type Type of svg element (eg. 'circle')
	     * @return {Array} string names of supported attributes
	     */
	    getSvgAttributes: function(type) {
	      var attributes = [
	        'instantiated_by_use',
	        'style',
	        'id',
	        'class'
	      ];
	      switch (type) {
	        case 'linearGradient':
	          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);
	          break;
	        case 'radialGradient':
	          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);
	          break;
	        case 'stop':
	          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);
	          break;
	      }
	      return attributes;
	    },

	    /**
	     * Returns object of given namespace
	     * @memberOf fabric.util
	     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
	     * @return {Object} Object for given namespace (default fabric)
	     */
	    resolveNamespace: function(namespace) {
	      if (!namespace) {
	        return fabric;
	      }

	      var parts = namespace.split('.'),
	          len = parts.length, i,
	          obj = global || fabric.window;

	      for (i = 0; i < len; ++i) {
	        obj = obj[parts[i]];
	      }

	      return obj;
	    },

	    /**
	     * Loads image element from given url and passes it to a callback
	     * @memberOf fabric.util
	     * @param {String} url URL representing an image
	     * @param {Function} callback Callback; invoked with loaded image
	     * @param {*} [context] Context to invoke callback in
	     * @param {Object} [crossOrigin] crossOrigin value to set image element to
	     */
	    loadImage: function(url, callback, context, crossOrigin) {
	      if (!url) {
	        callback && callback.call(context, url);
	        return;
	      }

	      var img = fabric.util.createImage();

	      /** @ignore */
	      var onLoadCallback = function () {
	        callback && callback.call(context, img);
	        img = img.onload = img.onerror = null;
	      };

	      img.onload = onLoadCallback;
	      /** @ignore */
	      img.onerror = function() {
	        fabric.log('Error loading ' + img.src);
	        callback && callback.call(context, null, true);
	        img = img.onload = img.onerror = null;
	      };

	      // data-urls appear to be buggy with crossOrigin
	      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767
	      // see https://code.google.com/p/chromium/issues/detail?id=315152
	      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069
	      if (url.indexOf('data') !== 0 && crossOrigin) {
	        img.crossOrigin = crossOrigin;
	      }

	      // IE10 / IE11-Fix: SVG contents from data: URI
	      // will only be available if the IMG is present
	      // in the DOM (and visible)
	      if (url.substring(0,14) === 'data:image/svg') {
	        img.onload = null;
	        fabric.util.loadImageInDom(img, onLoadCallback);
	      }

	      img.src = url;
	    },

	    /**
	     * Attaches SVG image with data: URL to the dom
	     * @memberOf fabric.util
	     * @param {Object} img Image object with data:image/svg src
	     * @param {Function} callback Callback; invoked with loaded image
	     * @return {Object} DOM element (div containing the SVG image)
	     */
	    loadImageInDom: function(img, onLoadCallback) {
	      var div = fabric.document.createElement('div');
	      div.style.width = div.style.height = '1px';
	      div.style.left = div.style.top = '-100%';
	      div.style.position = 'absolute';
	      div.appendChild(img);
	      fabric.document.querySelector('body').appendChild(div);
	      /**
	       * Wrap in function to:
	       *   1. Call existing callback
	       *   2. Cleanup DOM
	       */
	      img.onload = function () {
	        onLoadCallback();
	        div.parentNode.removeChild(div);
	        div = null;
	      };
	    },

	    /**
	     * Creates corresponding fabric instances from their object representations
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} objects Objects to enliven
	     * @param {Function} callback Callback to invoke when all objects are created
	     * @param {String} namespace Namespace to get klass "Class" object from
	     * @param {Function} reviver Method for further parsing of object elements,
	     * called after each fabric object created.
	     */
	    enlivenObjects: function(objects, callback, namespace, reviver) {
	      objects = objects || [];

	      var enlivenedObjects = [],
	          numLoadedObjects = 0,
	          numTotalObjects = objects.length;

	      function onLoaded() {
	        if (++numLoadedObjects === numTotalObjects) {
	          callback && callback(enlivenedObjects.filter(function(obj) {
	            // filter out undefined objects (objects that gave error)
	            return obj;
	          }));
	        }
	      }

	      if (!numTotalObjects) {
	        callback && callback(enlivenedObjects);
	        return;
	      }

	      objects.forEach(function (o, index) {
	        // if sparse array
	        if (!o || !o.type) {
	          onLoaded();
	          return;
	        }
	        var klass = fabric.util.getKlass(o.type, namespace);
	        klass.fromObject(o, function (obj, error) {
	          error || (enlivenedObjects[index] = obj);
	          reviver && reviver(o, obj, error);
	          onLoaded();
	        });
	      });
	    },

	    /**
	     * Create and wait for loading of patterns
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} patterns Objects to enliven
	     * @param {Function} callback Callback to invoke when all objects are created
	     * called after each fabric object created.
	     */
	    enlivenPatterns: function(patterns, callback) {
	      patterns = patterns || [];

	      function onLoaded() {
	        if (++numLoadedPatterns === numPatterns) {
	          callback && callback(enlivenedPatterns);
	        }
	      }

	      var enlivenedPatterns = [],
	          numLoadedPatterns = 0,
	          numPatterns = patterns.length;

	      if (!numPatterns) {
	        callback && callback(enlivenedPatterns);
	        return;
	      }

	      patterns.forEach(function (p, index) {
	        if (p && p.source) {
	          new fabric.Pattern(p, function(pattern) {
	            enlivenedPatterns[index] = pattern;
	            onLoaded();
	          });
	        }
	        else {
	          enlivenedPatterns[index] = p;
	          onLoaded();
	        }
	      });
	    },

	    /**
	     * Groups SVG elements (usually those retrieved from SVG document)
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} elements SVG elements to group
	     * @param {Object} [options] Options object
	     * @param {String} path Value to set sourcePath to
	     * @return {fabric.Object|fabric.Group}
	     */
	    groupSVGElements: function(elements, options, path) {
	      var object;
	      if (elements && elements.length === 1) {
	        return elements[0];
	      }
	      if (options) {
	        if (options.width && options.height) {
	          options.centerPoint = {
	            x: options.width / 2,
	            y: options.height / 2
	          };
	        }
	        else {
	          delete options.width;
	          delete options.height;
	        }
	      }
	      object = new fabric.Group(elements, options);
	      if (typeof path !== 'undefined') {
	        object.sourcePath = path;
	      }
	      return object;
	    },

	    /**
	     * Populates an object with properties of another object
	     * @static
	     * @memberOf fabric.util
	     * @param {Object} source Source object
	     * @param {Object} destination Destination object
	     * @return {Array} properties Properties names to include
	     */
	    populateWithProperties: function(source, destination, properties) {
	      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {
	        for (var i = 0, len = properties.length; i < len; i++) {
	          if (properties[i] in source) {
	            destination[properties[i]] = source[properties[i]];
	          }
	        }
	      }
	    },

	    /**
	     * Draws a dashed line between two points
	     *
	     * This method is used to draw dashed line around selection area.
	     * See <a href="http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas">dotted stroke in canvas</a>
	     *
	     * @param {CanvasRenderingContext2D} ctx context
	     * @param {Number} x  start x coordinate
	     * @param {Number} y start y coordinate
	     * @param {Number} x2 end x coordinate
	     * @param {Number} y2 end y coordinate
	     * @param {Array} da dash array pattern
	     */
	    drawDashedLine: function(ctx, x, y, x2, y2, da) {
	      var dx = x2 - x,
	          dy = y2 - y,
	          len = sqrt(dx * dx + dy * dy),
	          rot = atan2(dy, dx),
	          dc = da.length,
	          di = 0,
	          draw = true;

	      ctx.save();
	      ctx.translate(x, y);
	      ctx.moveTo(0, 0);
	      ctx.rotate(rot);

	      x = 0;
	      while (len > x) {
	        x += da[di++ % dc];
	        if (x > len) {
	          x = len;
	        }
	        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);
	        draw = !draw;
	      }

	      ctx.restore();
	    },

	    /**
	     * Creates canvas element
	     * @static
	     * @memberOf fabric.util
	     * @return {CanvasElement} initialized canvas element
	     */
	    createCanvasElement: function() {
	      return fabric.document.createElement('canvas');
	    },

	    /**
	     * Creates a canvas element that is a copy of another and is also painted
	     * @param {CanvasElement} canvas to copy size and content of
	     * @static
	     * @memberOf fabric.util
	     * @return {CanvasElement} initialized canvas element
	     */
	    copyCanvasElement: function(canvas) {
	      var newCanvas = fabric.util.createCanvasElement();
	      newCanvas.width = canvas.width;
	      newCanvas.height = canvas.height;
	      newCanvas.getContext('2d').drawImage(canvas, 0, 0);
	      return newCanvas;
	    },

	    /**
	     * since 2.6.0 moved from canvas instance to utility.
	     * @param {CanvasElement} canvasEl to copy size and content of
	     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too
	     * @param {Number} quality <= 1 and > 0
	     * @static
	     * @memberOf fabric.util
	     * @return {String} data url
	     */
	    toDataURL: function(canvasEl, format, quality) {
	      return canvasEl.toDataURL('image/' + format, quality);
	    },

	    /**
	     * Creates image element (works on client and node)
	     * @static
	     * @memberOf fabric.util
	     * @return {HTMLImageElement} HTML image element
	     */
	    createImage: function() {
	      return fabric.document.createElement('img');
	    },

	    /**
	     * @static
	     * @memberOf fabric.util
	     * @deprecated since 2.0.0
	     * @param {fabric.Object} receiver Object implementing `clipTo` method
	     * @param {CanvasRenderingContext2D} ctx Context to clip
	     */
	    clipContext: function(receiver, ctx) {
	      ctx.save();
	      ctx.beginPath();
	      receiver.clipTo(ctx);
	      ctx.clip();
	    },

	    /**
	     * Multiply matrix A by matrix B to nest transformations
	     * @static
	     * @memberOf fabric.util
	     * @param  {Array} a First transformMatrix
	     * @param  {Array} b Second transformMatrix
	     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
	     * @return {Array} The product of the two transform matrices
	     */
	    multiplyTransformMatrices: function(a, b, is2x2) {
	      // Matrix multiply a * b
	      return [
	        a[0] * b[0] + a[2] * b[1],
	        a[1] * b[0] + a[3] * b[1],
	        a[0] * b[2] + a[2] * b[3],
	        a[1] * b[2] + a[3] * b[3],
	        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],
	        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]
	      ];
	    },

	    /**
	     * Decomposes standard 2x3 matrix into transform components
	     * @static
	     * @memberOf fabric.util
	     * @param  {Array} a transformMatrix
	     * @return {Object} Components of transform
	     */
	    qrDecompose: function(a) {
	      var angle = atan2(a[1], a[0]),
	          denom = pow(a[0], 2) + pow(a[1], 2),
	          scaleX = sqrt(denom),
	          scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,
	          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);
	      return {
	        angle: angle  / PiBy180,
	        scaleX: scaleX,
	        scaleY: scaleY,
	        skewX: skewX / PiBy180,
	        skewY: 0,
	        translateX: a[4],
	        translateY: a[5]
	      };
	    },

	    /**
	     * Returns a transform matrix starting from an object of the same kind of
	     * the one returned from qrDecompose, useful also if you want to calculate some
	     * transformations from an object that is not enlived yet
	     * @static
	     * @memberOf fabric.util
	     * @param  {Object} options
	     * @param  {Number} [options.angle] angle in degrees
	     * @return {Array[Number]} transform matrix
	     */
	    calcRotateMatrix: function(options) {
	      if (!options.angle) {
	        return fabric.iMatrix.concat();
	      }
	      var theta = fabric.util.degreesToRadians(options.angle),
	          cos = fabric.util.cos(theta),
	          sin = fabric.util.sin(theta);
	      return [cos, sin, -sin, cos, 0, 0];
	    },

	    /**
	     * Returns a transform matrix starting from an object of the same kind of
	     * the one returned from qrDecompose, useful also if you want to calculate some
	     * transformations from an object that is not enlived yet.
	     * is called DimensionsTransformMatrix because those properties are the one that influence
	     * the size of the resulting box of the object.
	     * @static
	     * @memberOf fabric.util
	     * @param  {Object} options
	     * @param  {Number} [options.scaleX]
	     * @param  {Number} [options.scaleY]
	     * @param  {Boolean} [options.flipX]
	     * @param  {Boolean} [options.flipY]
	     * @param  {Number} [options.skewX]
	     * @param  {Number} [options.skewX]
	     * @return {Array[Number]} transform matrix
	     */
	    calcDimensionsMatrix: function(options) {
	      var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,
	          scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,
	          scaleMatrix = [
	            options.flipX ? -scaleX : scaleX,
	            0,
	            0,
	            options.flipY ? -scaleY : scaleY,
	            0,
	            0],
	          multiply = fabric.util.multiplyTransformMatrices,
	          degreesToRadians = fabric.util.degreesToRadians;
	      if (options.skewX) {
	        scaleMatrix = multiply(
	          scaleMatrix,
	          [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],
	          true);
	      }
	      if (options.skewY) {
	        scaleMatrix = multiply(
	          scaleMatrix,
	          [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],
	          true);
	      }
	      return scaleMatrix;
	    },

	    /**
	     * Returns a transform matrix starting from an object of the same kind of
	     * the one returned from qrDecompose, useful also if you want to calculate some
	     * transformations from an object that is not enlived yet
	     * @static
	     * @memberOf fabric.util
	     * @param  {Object} options
	     * @param  {Number} [options.angle]
	     * @param  {Number} [options.scaleX]
	     * @param  {Number} [options.scaleY]
	     * @param  {Boolean} [options.flipX]
	     * @param  {Boolean} [options.flipY]
	     * @param  {Number} [options.skewX]
	     * @param  {Number} [options.skewX]
	     * @param  {Number} [options.translateX]
	     * @param  {Number} [options.translateY]
	     * @return {Array[Number]} transform matrix
	     */
	    composeMatrix: function(options) {
	      var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],
	          multiply = fabric.util.multiplyTransformMatrices;
	      if (options.angle) {
	        matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));
	      }
	      if (options.scaleX || options.scaleY || options.skewX || options.skewY || options.flipX || options.flipY) {
	        matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));
	      }
	      return matrix;
	    },

	    /**
	     * Returns a transform matrix that has the same effect of scaleX, scaleY and skewX.
	     * Is deprecated for composeMatrix. Please do not use it.
	     * @static
	     * @deprecated since 3.4.0
	     * @memberOf fabric.util
	     * @param  {Number} scaleX
	     * @param  {Number} scaleY
	     * @param  {Number} skewX
	     * @return {Array[Number]} transform matrix
	     */
	    customTransformMatrix: function(scaleX, scaleY, skewX) {
	      return fabric.util.composeMatrix({ scaleX: scaleX, scaleY: scaleY, skewX: skewX });
	    },

	    /**
	     * reset an object transform state to neutral. Top and left are not accounted for
	     * @static
	     * @memberOf fabric.util
	     * @param  {fabric.Object} target object to transform
	     */
	    resetObjectTransform: function (target) {
	      target.scaleX = 1;
	      target.scaleY = 1;
	      target.skewX = 0;
	      target.skewY = 0;
	      target.flipX = false;
	      target.flipY = false;
	      target.rotate(0);
	    },

	    /**
	     * Extract Object transform values
	     * @static
	     * @memberOf fabric.util
	     * @param  {fabric.Object} target object to read from
	     * @return {Object} Components of transform
	     */
	    saveObjectTransform: function (target) {
	      return {
	        scaleX: target.scaleX,
	        scaleY: target.scaleY,
	        skewX: target.skewX,
	        skewY: target.skewY,
	        angle: target.angle,
	        left: target.left,
	        flipX: target.flipX,
	        flipY: target.flipY,
	        top: target.top
	      };
	    },

	    /**
	     * Returns string representation of function body
	     * @param {Function} fn Function to get body of
	     * @return {String} Function body
	     */
	    getFunctionBody: function(fn) {
	      return (String(fn).match(/function[^{]*\{([\s\S]*)\}/) || {})[1];
	    },

	    /**
	     * Returns true if context has transparent pixel
	     * at specified location (taking tolerance into account)
	     * @param {CanvasRenderingContext2D} ctx context
	     * @param {Number} x x coordinate
	     * @param {Number} y y coordinate
	     * @param {Number} tolerance Tolerance
	     */
	    isTransparent: function(ctx, x, y, tolerance) {

	      // If tolerance is > 0 adjust start coords to take into account.
	      // If moves off Canvas fix to 0
	      if (tolerance > 0) {
	        if (x > tolerance) {
	          x -= tolerance;
	        }
	        else {
	          x = 0;
	        }
	        if (y > tolerance) {
	          y -= tolerance;
	        }
	        else {
	          y = 0;
	        }
	      }

	      var _isTransparent = true, i, temp,
	          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),
	          l = imageData.data.length;

	      // Split image data - for tolerance > 1, pixelDataSize = 4;
	      for (i = 3; i < l; i += 4) {
	        temp = imageData.data[i];
	        _isTransparent = temp <= 0;
	        if (_isTransparent === false) {
	          break; // Stop if colour found
	        }
	      }

	      imageData = null;

	      return _isTransparent;
	    },

	    /**
	     * Parse preserveAspectRatio attribute from element
	     * @param {string} attribute to be parsed
	     * @return {Object} an object containing align and meetOrSlice attribute
	     */
	    parsePreserveAspectRatioAttribute: function(attribute) {
	      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',
	          aspectRatioAttrs = attribute.split(' '), align;

	      if (aspectRatioAttrs && aspectRatioAttrs.length) {
	        meetOrSlice = aspectRatioAttrs.pop();
	        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {
	          align = meetOrSlice;
	          meetOrSlice = 'meet';
	        }
	        else if (aspectRatioAttrs.length) {
	          align = aspectRatioAttrs.pop();
	        }
	      }
	      //divide align in alignX and alignY
	      alignX = align !== 'none' ? align.slice(1, 4) : 'none';
	      alignY = align !== 'none' ? align.slice(5, 8) : 'none';
	      return {
	        meetOrSlice: meetOrSlice,
	        alignX: alignX,
	        alignY: alignY
	      };
	    },

	    /**
	     * Clear char widths cache for the given font family or all the cache if no
	     * fontFamily is specified.
	     * Use it if you know you are loading fonts in a lazy way and you are not waiting
	     * for custom fonts to load properly when adding text objects to the canvas.
	     * If a text object is added when its own font is not loaded yet, you will get wrong
	     * measurement and so wrong bounding boxes.
	     * After the font cache is cleared, either change the textObject text content or call
	     * initDimensions() to trigger a recalculation
	     * @memberOf fabric.util
	     * @param {String} [fontFamily] font family to clear
	     */
	    clearFabricFontCache: function(fontFamily) {
	      fontFamily = (fontFamily || '').toLowerCase();
	      if (!fontFamily) {
	        fabric.charWidthsCache = { };
	      }
	      else if (fabric.charWidthsCache[fontFamily]) {
	        delete fabric.charWidthsCache[fontFamily];
	      }
	    },

	    /**
	     * Given current aspect ratio, determines the max width and height that can
	     * respect the total allowed area for the cache.
	     * @memberOf fabric.util
	     * @param {Number} ar aspect ratio
	     * @param {Number} maximumArea Maximum area you want to achieve
	     * @return {Object.x} Limited dimensions by X
	     * @return {Object.y} Limited dimensions by Y
	     */
	    limitDimsByArea: function(ar, maximumArea) {
	      var roughWidth = Math.sqrt(maximumArea * ar),
	          perfLimitSizeY = Math.floor(maximumArea / roughWidth);
	      return { x: Math.floor(roughWidth), y: perfLimitSizeY };
	    },

	    capValue: function(min, value, max) {
	      return Math.max(min, Math.min(value, max));
	    },

	    findScaleToFit: function(source, destination) {
	      return Math.min(destination.width / source.width, destination.height / source.height);
	    },

	    findScaleToCover: function(source, destination) {
	      return Math.max(destination.width / source.width, destination.height / source.height);
	    },

	    /**
	     * given an array of 6 number returns something like `"matrix(...numbers)"`
	     * @memberOf fabric.util
	     * @param {Array} trasnform an array with 6 numbers
	     * @return {String} transform matrix for svg
	     * @return {Object.y} Limited dimensions by Y
	     */
	    matrixToSVG: function(transform) {
	      return 'matrix(' + transform.map(function(value) {
	        return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);
	      }).join(' ') + ')';
	    }
	  };
	})( exports );


	(function() {

	  var _join = Array.prototype.join;

	  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
	   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
	   * http://mozilla.org/MPL/2.0/
	   */
	  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
	    var argsString = _join.call(arguments);
	    if (fabric.arcToSegmentsCache[argsString]) {
	      return fabric.arcToSegmentsCache[argsString];
	    }

	    var PI = Math.PI, th = rotateX * PI / 180,
	        sinTh = fabric.util.sin(th),
	        cosTh = fabric.util.cos(th),
	        fromX = 0, fromY = 0;

	    rx = Math.abs(rx);
	    ry = Math.abs(ry);

	    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,
	        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,
	        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,
	        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,
	        root = 0;

	    if (pl < 0) {
	      var s = Math.sqrt(1 - pl / (rx2 * ry2));
	      rx *= s;
	      ry *= s;
	    }
	    else {
	      root = (large === sweep ? -1.0 : 1.0) *
	              Math.sqrt( pl / (rx2 * py2 + ry2 * px2));
	    }

	    var cx = root * rx * py / ry,
	        cy = -root * ry * px / rx,
	        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,
	        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,
	        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),
	        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);

	    if (sweep === 0 && dtheta > 0) {
	      dtheta -= 2 * PI;
	    }
	    else if (sweep === 1 && dtheta < 0) {
	      dtheta += 2 * PI;
	    }

	    // Convert into cubic bezier segments <= 90deg
	    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),
	        result = [], mDelta = dtheta / segments,
	        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),
	        th3 = mTheta + mDelta;

	    for (var i = 0; i < segments; i++) {
	      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
	      fromX = result[i][4];
	      fromY = result[i][5];
	      mTheta = th3;
	      th3 += mDelta;
	    }
	    fabric.arcToSegmentsCache[argsString] = result;
	    return result;
	  }

	  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
	    var costh2 = fabric.util.cos(th2),
	        sinth2 = fabric.util.sin(th2),
	        costh3 = fabric.util.cos(th3),
	        sinth3 = fabric.util.sin(th3),
	        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,
	        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,
	        cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),
	        cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),
	        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),
	        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);

	    return [
	      cp1X, cp1Y,
	      cp2X, cp2Y,
	      toX, toY
	    ];
	  }

	  /*
	   * Private
	   */
	  function calcVectorAngle(ux, uy, vx, vy) {
	    var ta = Math.atan2(uy, ux),
	        tb = Math.atan2(vy, vx);
	    if (tb >= ta) {
	      return tb - ta;
	    }
	    else {
	      return 2 * Math.PI - (ta - tb);
	    }
	  }

	  /**
	   * Draws arc
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {Number} fx
	   * @param {Number} fy
	   * @param {Array} coords
	   */
	  fabric.util.drawArc = function(ctx, fx, fy, coords) {
	    var rx = coords[0],
	        ry = coords[1],
	        rot = coords[2],
	        large = coords[3],
	        sweep = coords[4],
	        tx = coords[5],
	        ty = coords[6],
	        segs = [[], [], [], []],
	        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

	    for (var i = 0, len = segsNorm.length; i < len; i++) {
	      segs[i][0] = segsNorm[i][0] + fx;
	      segs[i][1] = segsNorm[i][1] + fy;
	      segs[i][2] = segsNorm[i][2] + fx;
	      segs[i][3] = segsNorm[i][3] + fy;
	      segs[i][4] = segsNorm[i][4] + fx;
	      segs[i][5] = segsNorm[i][5] + fy;
	      ctx.bezierCurveTo.apply(ctx, segs[i]);
	    }
	  };

	  /**
	   * Calculate bounding box of a elliptic-arc
	   * @param {Number} fx start point of arc
	   * @param {Number} fy
	   * @param {Number} rx horizontal radius
	   * @param {Number} ry vertical radius
	   * @param {Number} rot angle of horizontal axe
	   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
	   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
	   * @param {Number} tx end point of arc
	   * @param {Number} ty
	   */
	  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {

	    var fromX = 0, fromY = 0, bound, bounds = [],
	        segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

	    for (var i = 0, len = segs.length; i < len; i++) {
	      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);
	      bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });
	      bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });
	      fromX = segs[i][4];
	      fromY = segs[i][5];
	    }
	    return bounds;
	  };

	  /**
	   * Calculate bounding box of a beziercurve
	   * @param {Number} x0 starting point
	   * @param {Number} y0
	   * @param {Number} x1 first control point
	   * @param {Number} y1
	   * @param {Number} x2 secondo control point
	   * @param {Number} y2
	   * @param {Number} x3 end of beizer
	   * @param {Number} y3
	   */
	  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
	  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
	    var argsString;
	    if (fabric.cachesBoundsOfCurve) {
	      argsString = _join.call(arguments);
	      if (fabric.boundsOfCurveCache[argsString]) {
	        return fabric.boundsOfCurveCache[argsString];
	      }
	    }

	    var sqrt = Math.sqrt,
	        min = Math.min, max = Math.max,
	        abs = Math.abs, tvalues = [],
	        bounds = [[], []],
	        a, b, c, t, t1, t2, b2ac, sqrtb2ac;

	    b = 6 * x0 - 12 * x1 + 6 * x2;
	    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
	    c = 3 * x1 - 3 * x0;

	    for (var i = 0; i < 2; ++i) {
	      if (i > 0) {
	        b = 6 * y0 - 12 * y1 + 6 * y2;
	        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
	        c = 3 * y1 - 3 * y0;
	      }

	      if (abs(a) < 1e-12) {
	        if (abs(b) < 1e-12) {
	          continue;
	        }
	        t = -c / b;
	        if (0 < t && t < 1) {
	          tvalues.push(t);
	        }
	        continue;
	      }
	      b2ac = b * b - 4 * c * a;
	      if (b2ac < 0) {
	        continue;
	      }
	      sqrtb2ac = sqrt(b2ac);
	      t1 = (-b + sqrtb2ac) / (2 * a);
	      if (0 < t1 && t1 < 1) {
	        tvalues.push(t1);
	      }
	      t2 = (-b - sqrtb2ac) / (2 * a);
	      if (0 < t2 && t2 < 1) {
	        tvalues.push(t2);
	      }
	    }

	    var x, y, j = tvalues.length, jlen = j, mt;
	    while (j--) {
	      t = tvalues[j];
	      mt = 1 - t;
	      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
	      bounds[0][j] = x;

	      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
	      bounds[1][j] = y;
	    }

	    bounds[0][jlen] = x0;
	    bounds[1][jlen] = y0;
	    bounds[0][jlen + 1] = x3;
	    bounds[1][jlen + 1] = y3;
	    var result = [
	      {
	        x: min.apply(null, bounds[0]),
	        y: min.apply(null, bounds[1])
	      },
	      {
	        x: max.apply(null, bounds[0]),
	        y: max.apply(null, bounds[1])
	      }
	    ];
	    if (fabric.cachesBoundsOfCurve) {
	      fabric.boundsOfCurveCache[argsString] = result;
	    }
	    return result;
	  }

	  fabric.util.getBoundsOfCurve = getBoundsOfCurve;

	})();


	(function() {

	  var slice = Array.prototype.slice;

	  /**
	   * Invokes method on all items in a given array
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} method Name of a method to invoke
	   * @return {Array}
	   */
	  function invoke(array, method) {
	    var args = slice.call(arguments, 2), result = [];
	    for (var i = 0, len = array.length; i < len; i++) {
	      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
	    }
	    return result;
	  }

	  /**
	   * Finds maximum value in array (not necessarily "first" one)
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} byProperty
	   * @return {*}
	   */
	  function max(array, byProperty) {
	    return find(array, byProperty, function(value1, value2) {
	      return value1 >= value2;
	    });
	  }

	  /**
	   * Finds minimum value in array (not necessarily "first" one)
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} byProperty
	   * @return {*}
	   */
	  function min(array, byProperty) {
	    return find(array, byProperty, function(value1, value2) {
	      return value1 < value2;
	    });
	  }

	  /**
	   * @private
	   */
	  function fill(array, value) {
	    var k = array.length;
	    while (k--) {
	      array[k] = value;
	    }
	    return array;
	  }

	  /**
	   * @private
	   */
	  function find(array, byProperty, condition) {
	    if (!array || array.length === 0) {
	      return;
	    }

	    var i = array.length - 1,
	        result = byProperty ? array[i][byProperty] : array[i];
	    if (byProperty) {
	      while (i--) {
	        if (condition(array[i][byProperty], result)) {
	          result = array[i][byProperty];
	        }
	      }
	    }
	    else {
	      while (i--) {
	        if (condition(array[i], result)) {
	          result = array[i];
	        }
	      }
	    }
	    return result;
	  }

	  /**
	   * @namespace fabric.util.array
	   */
	  fabric.util.array = {
	    fill: fill,
	    invoke: invoke,
	    min: min,
	    max: max
	  };

	})();


	(function() {
	  /**
	   * Copies all enumerable properties of one js object to another
	   * this does not and cannot compete with generic utils.
	   * Does not clone or extend fabric.Object subclasses.
	   * This is mostly for internal use and has extra handling for fabricJS objects
	   * it skips the canvas property in deep cloning.
	   * @memberOf fabric.util.object
	   * @param {Object} destination Where to copy to
	   * @param {Object} source Where to copy from
	   * @return {Object}
	   */

	  function extend(destination, source, deep) {
	    // JScript DontEnum bug is not taken care of
	    // the deep clone is for internal use, is not meant to avoid
	    // javascript traps or cloning html element or self referenced objects.
	    if (deep) {
	      if (!fabric.isLikelyNode && source instanceof Element) {
	        // avoid cloning deep images, canvases,
	        destination = source;
	      }
	      else if (source instanceof Array) {
	        destination = [];
	        for (var i = 0, len = source.length; i < len; i++) {
	          destination[i] = extend({ }, source[i], deep);
	        }
	      }
	      else if (source && typeof source === 'object') {
	        for (var property in source) {
	          if (property === 'canvas') {
	            destination[property] = extend({ }, source[property]);
	          }
	          else if (source.hasOwnProperty(property)) {
	            destination[property] = extend({ }, source[property], deep);
	          }
	        }
	      }
	      else {
	        // this sounds odd for an extend but is ok for recursive use
	        destination = source;
	      }
	    }
	    else {
	      for (var property in source) {
	        destination[property] = source[property];
	      }
	    }
	    return destination;
	  }

	  /**
	   * Creates an empty object and copies all enumerable properties of another object to it
	   * @memberOf fabric.util.object
	   * TODO: this function return an empty object if you try to clone null
	   * @param {Object} object Object to clone
	   * @return {Object}
	   */
	  function clone(object, deep) {
	    return extend({ }, object, deep);
	  }

	  /** @namespace fabric.util.object */
	  fabric.util.object = {
	    extend: extend,
	    clone: clone
	  };
	  fabric.util.object.extend(fabric.util, fabric.Observable);
	})();


	(function() {

	  /**
	   * Camelizes a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to camelize
	   * @return {String} Camelized version of a string
	   */
	  function camelize(string) {
	    return string.replace(/-+(.)?/g, function(match, character) {
	      return character ? character.toUpperCase() : '';
	    });
	  }

	  /**
	   * Capitalizes a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to capitalize
	   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized
	   * and other letters stay untouched, if false first letter is capitalized
	   * and other letters are converted to lowercase.
	   * @return {String} Capitalized version of a string
	   */
	  function capitalize(string, firstLetterOnly) {
	    return string.charAt(0).toUpperCase() +
	      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
	  }

	  /**
	   * Escapes XML in a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to escape
	   * @return {String} Escaped version of a string
	   */
	  function escapeXml(string) {
	    return string.replace(/&/g, '&amp;')
	      .replace(/"/g, '&quot;')
	      .replace(/'/g, '&apos;')
	      .replace(/</g, '&lt;')
	      .replace(/>/g, '&gt;');
	  }

	  /**
	   * Divide a string in the user perceived single units
	   * @memberOf fabric.util.string
	   * @param {String} textstring String to escape
	   * @return {Array} array containing the graphemes
	   */
	  function graphemeSplit(textstring) {
	    var i = 0, chr, graphemes = [];
	    for (i = 0, chr; i < textstring.length; i++) {
	      if ((chr = getWholeChar(textstring, i)) === false) {
	        continue;
	      }
	      graphemes.push(chr);
	    }
	    return graphemes;
	  }

	  // taken from mdn in the charAt doc page.
	  function getWholeChar(str, i) {
	    var code = str.charCodeAt(i);

	    if (isNaN(code)) {
	      return ''; // Position not found
	    }
	    if (code < 0xD800 || code > 0xDFFF) {
	      return str.charAt(i);
	    }

	    // High surrogate (could change last hex to 0xDB7F to treat high private
	    // surrogates as single characters)
	    if (0xD800 <= code && code <= 0xDBFF) {
	      if (str.length <= (i + 1)) {
	        throw 'High surrogate without following low surrogate';
	      }
	      var next = str.charCodeAt(i + 1);
	      if (0xDC00 > next || next > 0xDFFF) {
	        throw 'High surrogate without following low surrogate';
	      }
	      return str.charAt(i) + str.charAt(i + 1);
	    }
	    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)
	    if (i === 0) {
	      throw 'Low surrogate without preceding high surrogate';
	    }
	    var prev = str.charCodeAt(i - 1);

	    // (could change last hex to 0xDB7F to treat high private
	    // surrogates as single characters)
	    if (0xD800 > prev || prev > 0xDBFF) {
	      throw 'Low surrogate without preceding high surrogate';
	    }
	    // We can pass over low surrogates now as the second component
	    // in a pair which we have already processed
	    return false;
	  }


	  /**
	   * String utilities
	   * @namespace fabric.util.string
	   */
	  fabric.util.string = {
	    camelize: camelize,
	    capitalize: capitalize,
	    escapeXml: escapeXml,
	    graphemeSplit: graphemeSplit
	  };
	})();


	(function() {

	  var slice = Array.prototype.slice, emptyFunction = function() { },

	      IS_DONTENUM_BUGGY = (function() {
	        for (var p in { toString: 1 }) {
	          if (p === 'toString') {
	            return false;
	          }
	        }
	        return true;
	      })(),

	      /** @ignore */
	      addMethods = function(klass, source, parent) {
	        for (var property in source) {

	          if (property in klass.prototype &&
	              typeof klass.prototype[property] === 'function' &&
	              (source[property] + '').indexOf('callSuper') > -1) {

	            klass.prototype[property] = (function(property) {
	              return function() {

	                var superclass = this.constructor.superclass;
	                this.constructor.superclass = parent;
	                var returnValue = source[property].apply(this, arguments);
	                this.constructor.superclass = superclass;

	                if (property !== 'initialize') {
	                  return returnValue;
	                }
	              };
	            })(property);
	          }
	          else {
	            klass.prototype[property] = source[property];
	          }

	          if (IS_DONTENUM_BUGGY) {
	            if (source.toString !== Object.prototype.toString) {
	              klass.prototype.toString = source.toString;
	            }
	            if (source.valueOf !== Object.prototype.valueOf) {
	              klass.prototype.valueOf = source.valueOf;
	            }
	          }
	        }
	      };

	  function Subclass() { }

	  function callSuper(methodName) {
	    var parentMethod = null,
	        _this = this;

	    // climb prototype chain to find method not equal to callee's method
	    while (_this.constructor.superclass) {
	      var superClassMethod = _this.constructor.superclass.prototype[methodName];
	      if (_this[methodName] !== superClassMethod) {
	        parentMethod = superClassMethod;
	        break;
	      }
	      // eslint-disable-next-line
	      _this = _this.constructor.superclass.prototype;
	    }

	    if (!parentMethod) {
	      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);
	    }

	    return (arguments.length > 1)
	      ? parentMethod.apply(this, slice.call(arguments, 1))
	      : parentMethod.call(this);
	  }

	  /**
	   * Helper for creation of "classes".
	   * @memberOf fabric.util
	   * @param {Function} [parent] optional "Class" to inherit from
	   * @param {Object} [properties] Properties shared by all instances of this class
	   *                  (be careful modifying objects defined here as this would affect all instances)
	   */
	  function createClass() {
	    var parent = null,
	        properties = slice.call(arguments, 0);

	    if (typeof properties[0] === 'function') {
	      parent = properties.shift();
	    }
	    function klass() {
	      this.initialize.apply(this, arguments);
	    }

	    klass.superclass = parent;
	    klass.subclasses = [];

	    if (parent) {
	      Subclass.prototype = parent.prototype;
	      klass.prototype = new Subclass();
	      parent.subclasses.push(klass);
	    }
	    for (var i = 0, length = properties.length; i < length; i++) {
	      addMethods(klass, properties[i], parent);
	    }
	    if (!klass.prototype.initialize) {
	      klass.prototype.initialize = emptyFunction;
	    }
	    klass.prototype.constructor = klass;
	    klass.prototype.callSuper = callSuper;
	    return klass;
	  }

	  fabric.util.createClass = createClass;
	})();


	(function () {
	  // since ie10 or ie9 can use addEventListener but they do not support options, i need to check
	  var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent;
	  /**
	   * Adds an event listener to an element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  fabric.util.addListener = function(element, eventName, handler, options) {
	    element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);
	  };

	  /**
	   * Removes an event listener from an element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  fabric.util.removeListener = function(element, eventName, handler, options) {
	    element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);
	  };

	  function getTouchInfo(event) {
	    var touchProp = event.changedTouches;
	    if (touchProp && touchProp[0]) {
	      return touchProp[0];
	    }
	    return event;
	  }

	  fabric.util.getPointer = function(event) {
	    var element = event.target,
	        scroll = fabric.util.getScrollLeftTop(element),
	        _evt = getTouchInfo(event);
	    return {
	      x: _evt.clientX + scroll.left,
	      y: _evt.clientY + scroll.top
	    };
	  };
	})();


	(function () {

	  /**
	   * Cross-browser wrapper for setting element's style
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {Object} styles
	   * @return {HTMLElement} Element that was passed as a first argument
	   */
	  function setStyle(element, styles) {
	    var elementStyle = element.style;
	    if (!elementStyle) {
	      return element;
	    }
	    if (typeof styles === 'string') {
	      element.style.cssText += ';' + styles;
	      return styles.indexOf('opacity') > -1
	        ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1])
	        : element;
	    }
	    for (var property in styles) {
	      if (property === 'opacity') {
	        setOpacity(element, styles[property]);
	      }
	      else {
	        var normalizedProperty = (property === 'float' || property === 'cssFloat')
	          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')
	          : property;
	        elementStyle[normalizedProperty] = styles[property];
	      }
	    }
	    return element;
	  }

	  var parseEl = fabric.document.createElement('div'),
	      supportsOpacity = typeof parseEl.style.opacity === 'string',
	      supportsFilters = typeof parseEl.style.filter === 'string',
	      reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,

	      /** @ignore */
	      setOpacity = function (element) { return element; };

	  if (supportsOpacity) {
	    /** @ignore */
	    setOpacity = function(element, value) {
	      element.style.opacity = value;
	      return element;
	    };
	  }
	  else if (supportsFilters) {
	    /** @ignore */
	    setOpacity = function(element, value) {
	      var es = element.style;
	      if (element.currentStyle && !element.currentStyle.hasLayout) {
	        es.zoom = 1;
	      }
	      if (reOpacity.test(es.filter)) {
	        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');
	        es.filter = es.filter.replace(reOpacity, value);
	      }
	      else {
	        es.filter += ' alpha(opacity=' + (value * 100) + ')';
	      }
	      return element;
	    };
	  }

	  fabric.util.setStyle = setStyle;

	})();


	(function() {

	  var _slice = Array.prototype.slice;

	  /**
	   * Takes id and returns an element with that id (if one exists in a document)
	   * @memberOf fabric.util
	   * @param {String|HTMLElement} id
	   * @return {HTMLElement|null}
	   */
	  function getById(id) {
	    return typeof id === 'string' ? fabric.document.getElementById(id) : id;
	  }

	  var sliceCanConvertNodelists,
	      /**
	       * Converts an array-like object (e.g. arguments or NodeList) to an array
	       * @memberOf fabric.util
	       * @param {Object} arrayLike
	       * @return {Array}
	       */
	      toArray = function(arrayLike) {
	        return _slice.call(arrayLike, 0);
	      };

	  try {
	    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;
	  }
	  catch (err) { }

	  if (!sliceCanConvertNodelists) {
	    toArray = function(arrayLike) {
	      var arr = new Array(arrayLike.length), i = arrayLike.length;
	      while (i--) {
	        arr[i] = arrayLike[i];
	      }
	      return arr;
	    };
	  }

	  /**
	   * Creates specified element with specified attributes
	   * @memberOf fabric.util
	   * @param {String} tagName Type of an element to create
	   * @param {Object} [attributes] Attributes to set on an element
	   * @return {HTMLElement} Newly created element
	   */
	  function makeElement(tagName, attributes) {
	    var el = fabric.document.createElement(tagName);
	    for (var prop in attributes) {
	      if (prop === 'class') {
	        el.className = attributes[prop];
	      }
	      else if (prop === 'for') {
	        el.htmlFor = attributes[prop];
	      }
	      else {
	        el.setAttribute(prop, attributes[prop]);
	      }
	    }
	    return el;
	  }

	  /**
	   * Adds class to an element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to add class to
	   * @param {String} className Class to add to an element
	   */
	  function addClass(element, className) {
	    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {
	      element.className += (element.className ? ' ' : '') + className;
	    }
	  }

	  /**
	   * Wraps element with another element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to wrap
	   * @param {HTMLElement|String} wrapper Element to wrap with
	   * @param {Object} [attributes] Attributes to set on a wrapper
	   * @return {HTMLElement} wrapper
	   */
	  function wrapElement(element, wrapper, attributes) {
	    if (typeof wrapper === 'string') {
	      wrapper = makeElement(wrapper, attributes);
	    }
	    if (element.parentNode) {
	      element.parentNode.replaceChild(wrapper, element);
	    }
	    wrapper.appendChild(element);
	    return wrapper;
	  }

	  /**
	   * Returns element scroll offsets
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to operate on
	   * @return {Object} Object with left/top values
	   */
	  function getScrollLeftTop(element) {

	    var left = 0,
	        top = 0,
	        docElement = fabric.document.documentElement,
	        body = fabric.document.body || {
	          scrollLeft: 0, scrollTop: 0
	        };

	    // While loop checks (and then sets element to) .parentNode OR .host
	    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,
	    //  but the .parentNode of a root ShadowDOM node will always be null, instead
	    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938
	    while (element && (element.parentNode || element.host)) {

	      // Set element to element parent, or 'host' in case of ShadowDOM
	      element = element.parentNode || element.host;

	      if (element === fabric.document) {
	        left = body.scrollLeft || docElement.scrollLeft || 0;
	        top = body.scrollTop ||  docElement.scrollTop || 0;
	      }
	      else {
	        left += element.scrollLeft || 0;
	        top += element.scrollTop || 0;
	      }

	      if (element.nodeType === 1 && element.style.position === 'fixed') {
	        break;
	      }
	    }

	    return { left: left, top: top };
	  }

	  /**
	   * Returns offset for a given element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to get offset for
	   * @return {Object} Object with "left" and "top" properties
	   */
	  function getElementOffset(element) {
	    var docElem,
	        doc = element && element.ownerDocument,
	        box = { left: 0, top: 0 },
	        offset = { left: 0, top: 0 },
	        scrollLeftTop,
	        offsetAttributes = {
	          borderLeftWidth: 'left',
	          borderTopWidth:  'top',
	          paddingLeft:     'left',
	          paddingTop:      'top'
	        };

	    if (!doc) {
	      return offset;
	    }

	    for (var attr in offsetAttributes) {
	      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
	    }

	    docElem = doc.documentElement;
	    if ( typeof element.getBoundingClientRect !== 'undefined' ) {
	      box = element.getBoundingClientRect();
	    }

	    scrollLeftTop = getScrollLeftTop(element);

	    return {
	      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
	      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top
	    };
	  }

	  /**
	   * Returns style attribute value of a given element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to get style attribute for
	   * @param {String} attr Style attribute to get for element
	   * @return {String} Style attribute value of the given element.
	   */
	  var getElementStyle;
	  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {
	    getElementStyle = function(element, attr) {
	      var style = fabric.document.defaultView.getComputedStyle(element, null);
	      return style ? style[attr] : undefined;
	    };
	  }
	  else {
	    getElementStyle = function(element, attr) {
	      var value = element.style[attr];
	      if (!value && element.currentStyle) {
	        value = element.currentStyle[attr];
	      }
	      return value;
	    };
	  }

	  (function () {
	    var style = fabric.document.documentElement.style,
	        selectProp = 'userSelect' in style
	          ? 'userSelect'
	          : 'MozUserSelect' in style
	            ? 'MozUserSelect'
	            : 'WebkitUserSelect' in style
	              ? 'WebkitUserSelect'
	              : 'KhtmlUserSelect' in style
	                ? 'KhtmlUserSelect'
	                : '';

	    /**
	     * Makes element unselectable
	     * @memberOf fabric.util
	     * @param {HTMLElement} element Element to make unselectable
	     * @return {HTMLElement} Element that was passed in
	     */
	    function makeElementUnselectable(element) {
	      if (typeof element.onselectstart !== 'undefined') {
	        element.onselectstart = fabric.util.falseFunction;
	      }
	      if (selectProp) {
	        element.style[selectProp] = 'none';
	      }
	      else if (typeof element.unselectable === 'string') {
	        element.unselectable = 'on';
	      }
	      return element;
	    }

	    /**
	     * Makes element selectable
	     * @memberOf fabric.util
	     * @param {HTMLElement} element Element to make selectable
	     * @return {HTMLElement} Element that was passed in
	     */
	    function makeElementSelectable(element) {
	      if (typeof element.onselectstart !== 'undefined') {
	        element.onselectstart = null;
	      }
	      if (selectProp) {
	        element.style[selectProp] = '';
	      }
	      else if (typeof element.unselectable === 'string') {
	        element.unselectable = '';
	      }
	      return element;
	    }

	    fabric.util.makeElementUnselectable = makeElementUnselectable;
	    fabric.util.makeElementSelectable = makeElementSelectable;
	  })();

	  (function() {

	    /**
	     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading
	     * @memberOf fabric.util
	     * @param {String} url URL of a script to load
	     * @param {Function} callback Callback to execute when script is finished loading
	     */
	    function getScript(url, callback) {
	      var headEl = fabric.document.getElementsByTagName('head')[0],
	          scriptEl = fabric.document.createElement('script'),
	          loading = true;

	      /** @ignore */
	      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {
	        if (loading) {
	          if (typeof this.readyState === 'string' &&
	              this.readyState !== 'loaded' &&
	              this.readyState !== 'complete') {
	            return;
	          }
	          loading = false;
	          callback(e || fabric.window.event);
	          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;
	        }
	      };
	      scriptEl.src = url;
	      headEl.appendChild(scriptEl);
	      // causes issue in Opera
	      // headEl.removeChild(scriptEl);
	    }

	    fabric.util.getScript = getScript;
	  })();

	  function getNodeCanvas(element) {
	    var impl = fabric.jsdomImplForWrapper(element);
	    return impl._canvas || impl._image;
	  }
	  function cleanUpJsdomNode(element) {
	    if (!fabric.isLikelyNode) {
	      return;
	    }
	    var impl = fabric.jsdomImplForWrapper(element);
	    if (impl) {
	      impl._image = null;
	      impl._canvas = null;
	      // unsure if necessary
	      impl._currentSrc = null;
	      impl._attributes = null;
	      impl._classList = null;
	    }
	  }

	  fabric.util.getById = getById;
	  fabric.util.toArray = toArray;
	  fabric.util.makeElement = makeElement;
	  fabric.util.addClass = addClass;
	  fabric.util.wrapElement = wrapElement;
	  fabric.util.getScrollLeftTop = getScrollLeftTop;
	  fabric.util.getElementOffset = getElementOffset;
	  fabric.util.getElementStyle = getElementStyle;
	  fabric.util.getNodeCanvas = getNodeCanvas;
	  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;

	})();


	(function() {

	  function addParamToUrl(url, param) {
	    return url + (/\?/.test(url) ? '&' : '?') + param;
	  }

	  function emptyFn() { }

	  /**
	   * Cross-browser abstraction for sending XMLHttpRequest
	   * @memberOf fabric.util
	   * @param {String} url URL to send XMLHttpRequest to
	   * @param {Object} [options] Options object
	   * @param {String} [options.method="GET"]
	   * @param {String} [options.parameters] parameters to append to url in GET or in body
	   * @param {String} [options.body] body to send with POST or PUT request
	   * @param {Function} options.onComplete Callback to invoke when request is completed
	   * @return {XMLHttpRequest} request
	   */
	  function request(url, options) {
	    options || (options = { });

	    var method = options.method ? options.method.toUpperCase() : 'GET',
	        onComplete = options.onComplete || function() { },
	        xhr = new fabric.window.XMLHttpRequest(),
	        body = options.body || options.parameters;

	    /** @ignore */
	    xhr.onreadystatechange = function() {
	      if (xhr.readyState === 4) {
	        onComplete(xhr);
	        xhr.onreadystatechange = emptyFn;
	      }
	    };

	    if (method === 'GET') {
	      body = null;
	      if (typeof options.parameters === 'string') {
	        url = addParamToUrl(url, options.parameters);
	      }
	    }

	    xhr.open(method, url, true);

	    if (method === 'POST' || method === 'PUT') {
	      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	    }

	    xhr.send(body);
	    return xhr;
	  }

	  fabric.util.request = request;
	})();


	/**
	 * Wrapper around `console.log` (when available)
	 * @param {*} [values] Values to log
	 */
	fabric.log = function() { };

	/**
	 * Wrapper around `console.warn` (when available)
	 * @param {*} [values] Values to log as a warning
	 */
	fabric.warn = function() { };

	/* eslint-disable */
	if (typeof console !== 'undefined') {

	  ['log', 'warn'].forEach(function(methodName) {

	    if (typeof console[methodName] !== 'undefined' &&
	        typeof console[methodName].apply === 'function') {

	      fabric[methodName] = function() {
	        return console[methodName].apply(console, arguments);
	      };
	    }
	  });
	}
	/* eslint-enable */


	(function() {

	  function noop() {
	    return false;
	  }

	  function defaultEasing(t, b, c, d) {
	    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	  }

	  /**
	   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
	   * @memberOf fabric.util
	   * @param {Object} [options] Animation options
	   * @param {Function} [options.onChange] Callback; invoked on every value change
	   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
	   * @param {Number} [options.startValue=0] Starting value
	   * @param {Number} [options.endValue=100] Ending value
	   * @param {Number} [options.byValue=100] Value to modify the property by
	   * @param {Function} [options.easing] Easing function
	   * @param {Number} [options.duration=500] Duration of change (in ms)
	   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.
	   */
	  function animate(options) {

	    requestAnimFrame(function(timestamp) {
	      options || (options = { });

	      var start = timestamp || +new Date(),
	          duration = options.duration || 500,
	          finish = start + duration, time,
	          onChange = options.onChange || noop,
	          abort = options.abort || noop,
	          onComplete = options.onComplete || noop,
	          easing = options.easing || defaultEasing,
	          startValue = 'startValue' in options ? options.startValue : 0,
	          endValue = 'endValue' in options ? options.endValue : 100,
	          byValue = options.byValue || endValue - startValue;

	      options.onStart && options.onStart();

	      (function tick(ticktime) {
	        // TODO: move abort call after calculation
	        // and pass (current,valuePerc, timePerc) as arguments
	        time = ticktime || +new Date();
	        var currentTime = time > finish ? duration : (time - start),
	            timePerc = currentTime / duration,
	            current = easing(currentTime, startValue, byValue, duration),
	            valuePerc = Math.abs((current - startValue) / byValue);
	        if (abort()) {
	          onComplete(endValue, 1, 1);
	          return;
	        }
	        if (time > finish) {
	          onChange(endValue, 1, 1);
	          onComplete(endValue, 1, 1);
	          return;
	        }
	        else {
	          onChange(current, valuePerc, timePerc);
	          requestAnimFrame(tick);
	        }
	      })(start);
	    });
	  }

	  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||
	                          fabric.window.webkitRequestAnimationFrame ||
	                          fabric.window.mozRequestAnimationFrame    ||
	                          fabric.window.oRequestAnimationFrame      ||
	                          fabric.window.msRequestAnimationFrame     ||
	                          function(callback) {
	                            return fabric.window.setTimeout(callback, 1000 / 60);
	                          };

	  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;

	  /**
	   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method
	   * @memberOf fabric.util
	   * @param {Function} callback Callback to invoke
	   * @param {DOMElement} element optional Element to associate with animation
	   */
	  function requestAnimFrame() {
	    return _requestAnimFrame.apply(fabric.window, arguments);
	  }

	  function cancelAnimFrame() {
	    return _cancelAnimFrame.apply(fabric.window, arguments);
	  }

	  fabric.util.animate = animate;
	  fabric.util.requestAnimFrame = requestAnimFrame;
	  fabric.util.cancelAnimFrame = cancelAnimFrame;
	})();


	(function() {
	  // Calculate an in-between color. Returns a "rgba()" string.
	  // Credit: Edwin Martin <edwin@bitstorm.org>
	  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js
	  function calculateColor(begin, end, pos) {
	    var color = 'rgba('
	        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','
	        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','
	        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);

	    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
	    color += ')';
	    return color;
	  }

	  /**
	   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.
	   * @memberOf fabric.util
	   * @param {String} fromColor The starting color in hex or rgb(a) format.
	   * @param {String} toColor The starting color in hex or rgb(a) format.
	   * @param {Number} [duration] Duration of change (in ms).
	   * @param {Object} [options] Animation options
	   * @param {Function} [options.onChange] Callback; invoked on every value change
	   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
	   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.
	   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.
	   */
	  function animateColor(fromColor, toColor, duration, options) {
	    var startColor = new fabric.Color(fromColor).getSource(),
	        endColor = new fabric.Color(toColor).getSource();

	    options = options || {};

	    fabric.util.animate(fabric.util.object.extend(options, {
	      duration: duration || 500,
	      startValue: startColor,
	      endValue: endColor,
	      byValue: endColor,
	      easing: function (currentTime, startValue, byValue, duration) {
	        var posValue = options.colorEasing
	          ? options.colorEasing(currentTime, duration)
	          : 1 - Math.cos(currentTime / duration * (Math.PI / 2));
	        return calculateColor(startValue, byValue, posValue);
	      }
	    }));
	  }

	  fabric.util.animateColor = animateColor;

	})();


	(function() {

	  function normalize(a, c, p, s) {
	    if (a < Math.abs(c)) {
	      a = c;
	      s = p / 4;
	    }
	    else {
	      //handle the 0/0 case:
	      if (c === 0 && a === 0) {
	        s = p / (2 * Math.PI) * Math.asin(1);
	      }
	      else {
	        s = p / (2 * Math.PI) * Math.asin(c / a);
	      }
	    }
	    return { a: a, c: c, p: p, s: s };
	  }

	  function elastic(opts, t, d) {
	    return opts.a *
	      Math.pow(2, 10 * (t -= 1)) *
	      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );
	  }

	  /**
	   * Cubic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutCubic(t, b, c, d) {
	    return c * ((t = t / d - 1) * t * t + 1) + b;
	  }

	  /**
	   * Cubic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutCubic(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * t * t * t + b;
	    }
	    return c / 2 * ((t -= 2) * t * t + 2) + b;
	  }

	  /**
	   * Quartic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInQuart(t, b, c, d) {
	    return c * (t /= d) * t * t * t + b;
	  }

	  /**
	   * Quartic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutQuart(t, b, c, d) {
	    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	  }

	  /**
	   * Quartic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutQuart(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * t * t * t * t + b;
	    }
	    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	  }

	  /**
	   * Quintic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInQuint(t, b, c, d) {
	    return c * (t /= d) * t * t * t * t + b;
	  }

	  /**
	   * Quintic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutQuint(t, b, c, d) {
	    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	  }

	  /**
	   * Quintic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutQuint(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * t * t * t * t * t + b;
	    }
	    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	  }

	  /**
	   * Sinusoidal easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInSine(t, b, c, d) {
	    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	  }

	  /**
	   * Sinusoidal easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutSine(t, b, c, d) {
	    return c * Math.sin(t / d * (Math.PI / 2)) + b;
	  }

	  /**
	   * Sinusoidal easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutSine(t, b, c, d) {
	    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	  }

	  /**
	   * Exponential easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInExpo(t, b, c, d) {
	    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
	  }

	  /**
	   * Exponential easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutExpo(t, b, c, d) {
	    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
	  }

	  /**
	   * Exponential easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutExpo(t, b, c, d) {
	    if (t === 0) {
	      return b;
	    }
	    if (t === d) {
	      return b + c;
	    }
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
	    }
	    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
	  }

	  /**
	   * Circular easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInCirc(t, b, c, d) {
	    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
	  }

	  /**
	   * Circular easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutCirc(t, b, c, d) {
	    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
	  }

	  /**
	   * Circular easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutCirc(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
	    }
	    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
	  }

	  /**
	   * Elastic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d;
	    if (t === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    var opts = normalize(a, c, p, s);
	    return -elastic(opts, t, d) + b;
	  }

	  /**
	   * Elastic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d;
	    if (t === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    var opts = normalize(a, c, p, s);
	    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;
	  }

	  /**
	   * Elastic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d / 2;
	    if (t === 2) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * (0.3 * 1.5);
	    }
	    var opts = normalize(a, c, p, s);
	    if (t < 1) {
	      return -0.5 * elastic(opts, t, d) + b;
	    }
	    return opts.a * Math.pow(2, -10 * (t -= 1)) *
	      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;
	  }

	  /**
	   * Backwards easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    return c * (t /= d) * t * ((s + 1) * t - s) + b;
	  }

	  /**
	   * Backwards easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
	  }

	  /**
	   * Backwards easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
	    }
	    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
	  }

	  /**
	   * Bouncing easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInBounce(t, b, c, d) {
	    return c - easeOutBounce (d - t, 0, c, d) + b;
	  }

	  /**
	   * Bouncing easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutBounce(t, b, c, d) {
	    if ((t /= d) < (1 / 2.75)) {
	      return c * (7.5625 * t * t) + b;
	    }
	    else if (t < (2 / 2.75)) {
	      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
	    }
	    else if (t < (2.5 / 2.75)) {
	      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
	    }
	    else {
	      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
	    }
	  }

	  /**
	   * Bouncing easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutBounce(t, b, c, d) {
	    if (t < d / 2) {
	      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;
	    }
	    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
	  }

	  /**
	   * Easing functions
	   * See <a href="http://gizma.com/easing/">Easing Equations by Robert Penner</a>
	   * @namespace fabric.util.ease
	   */
	  fabric.util.ease = {

	    /**
	     * Quadratic easing in
	     * @memberOf fabric.util.ease
	     */
	    easeInQuad: function(t, b, c, d) {
	      return c * (t /= d) * t + b;
	    },

	    /**
	     * Quadratic easing out
	     * @memberOf fabric.util.ease
	     */
	    easeOutQuad: function(t, b, c, d) {
	      return -c * (t /= d) * (t - 2) + b;
	    },

	    /**
	     * Quadratic easing in and out
	     * @memberOf fabric.util.ease
	     */
	    easeInOutQuad: function(t, b, c, d) {
	      t /= (d / 2);
	      if (t < 1) {
	        return c / 2 * t * t + b;
	      }
	      return -c / 2 * ((--t) * (t - 2) - 1) + b;
	    },

	    /**
	     * Cubic easing in
	     * @memberOf fabric.util.ease
	     */
	    easeInCubic: function(t, b, c, d) {
	      return c * (t /= d) * t * t + b;
	    },

	    easeOutCubic: easeOutCubic,
	    easeInOutCubic: easeInOutCubic,
	    easeInQuart: easeInQuart,
	    easeOutQuart: easeOutQuart,
	    easeInOutQuart: easeInOutQuart,
	    easeInQuint: easeInQuint,
	    easeOutQuint: easeOutQuint,
	    easeInOutQuint: easeInOutQuint,
	    easeInSine: easeInSine,
	    easeOutSine: easeOutSine,
	    easeInOutSine: easeInOutSine,
	    easeInExpo: easeInExpo,
	    easeOutExpo: easeOutExpo,
	    easeInOutExpo: easeInOutExpo,
	    easeInCirc: easeInCirc,
	    easeOutCirc: easeOutCirc,
	    easeInOutCirc: easeInOutCirc,
	    easeInElastic: easeInElastic,
	    easeOutElastic: easeOutElastic,
	    easeInOutElastic: easeInOutElastic,
	    easeInBack: easeInBack,
	    easeOutBack: easeOutBack,
	    easeInOutBack: easeInOutBack,
	    easeInBounce: easeInBounce,
	    easeOutBounce: easeOutBounce,
	    easeInOutBounce: easeInOutBounce
	  };

	})();


	(function(global) {

	  /**
	   * @name fabric
	   * @namespace
	   */

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      clone = fabric.util.object.clone,
	      toFixed = fabric.util.toFixed,
	      parseUnit = fabric.util.parseUnit,
	      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,

	      svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line',
	        'image', 'text'],
	      svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],
	      svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],
	      svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],

	      attributesMap = {
	        cx:                   'left',
	        x:                    'left',
	        r:                    'radius',
	        cy:                   'top',
	        y:                    'top',
	        display:              'visible',
	        visibility:           'visible',
	        transform:            'transformMatrix',
	        'fill-opacity':       'fillOpacity',
	        'fill-rule':          'fillRule',
	        'font-family':        'fontFamily',
	        'font-size':          'fontSize',
	        'font-style':         'fontStyle',
	        'font-weight':        'fontWeight',
	        'letter-spacing':     'charSpacing',
	        'paint-order':        'paintFirst',
	        'stroke-dasharray':   'strokeDashArray',
	        'stroke-dashoffset':  'strokeDashOffset',
	        'stroke-linecap':     'strokeLineCap',
	        'stroke-linejoin':    'strokeLineJoin',
	        'stroke-miterlimit':  'strokeMiterLimit',
	        'stroke-opacity':     'strokeOpacity',
	        'stroke-width':       'strokeWidth',
	        'text-decoration':    'textDecoration',
	        'text-anchor':        'textAnchor',
	        opacity:              'opacity',
	        'clip-path':          'clipPath',
	        'clip-rule':          'clipRule',
	        'vector-effect':      'strokeUniform'
	      },

	      colorAttributes = {
	        stroke: 'strokeOpacity',
	        fill:   'fillOpacity'
	      };

	  fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);
	  fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);
	  fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);
	  fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);

	  fabric.cssRules = { };
	  fabric.gradientDefs = { };
	  fabric.clipPaths = { };

	  function normalizeAttr(attr) {
	    // transform attribute names
	    if (attr in attributesMap) {
	      return attributesMap[attr];
	    }
	    return attr;
	  }

	  function normalizeValue(attr, value, parentAttributes, fontSize) {
	    var isArray = Object.prototype.toString.call(value) === '[object Array]',
	        parsed;

	    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {
	      value = '';
	    }
	    else if (attr === 'vector-effect') {
	      value = value === 'non-scaling-stroke';
	    }
	    else if (attr === 'strokeDashArray') {
	      if (value === 'none') {
	        value = null;
	      }
	      else {
	        value = value.replace(/,/g, ' ').split(/\s+/).map(parseFloat);
	      }
	    }
	    else if (attr === 'transformMatrix') {
	      if (parentAttributes && parentAttributes.transformMatrix) {
	        value = multiplyTransformMatrices(
	          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));
	      }
	      else {
	        value = fabric.parseTransformAttribute(value);
	      }
	    }
	    else if (attr === 'visible') {
	      value = value !== 'none' && value !== 'hidden';
	      // display=none on parent element always takes precedence over child element
	      if (parentAttributes && parentAttributes.visible === false) {
	        value = false;
	      }
	    }
	    else if (attr === 'opacity') {
	      value = parseFloat(value);
	      if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {
	        value *= parentAttributes.opacity;
	      }
	    }
	    else if (attr === 'textAnchor' /* text-anchor */) {
	      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';
	    }
	    else if (attr === 'charSpacing') {
	      // parseUnit returns px and we convert it to em
	      parsed = parseUnit(value, fontSize) / fontSize * 1000;
	    }
	    else if (attr === 'paintFirst') {
	      var fillIndex = value.indexOf('fill');
	      var strokeIndex = value.indexOf('stroke');
	      var value = 'fill';
	      if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {
	        value = 'stroke';
	      }
	      else if (fillIndex === -1 && strokeIndex > -1) {
	        value = 'stroke';
	      }
	    }
	    else if (attr === 'href' || attr === 'xlink:href') {
	      return value;
	    }
	    else {
	      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);
	    }

	    return (!isArray && isNaN(parsed) ? value : parsed);
	  }

	  /**
	    * @private
	    */
	  function getSvgRegex(arr) {
	    return new RegExp('^(' + arr.join('|') + ')\\b', 'i');
	  }

	  /**
	   * @private
	   * @param {Object} attributes Array of attributes to parse
	   */
	  function _setStrokeFillOpacity(attributes) {
	    for (var attr in colorAttributes) {

	      if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {
	        continue;
	      }

	      if (typeof attributes[attr] === 'undefined') {
	        if (!fabric.Object.prototype[attr]) {
	          continue;
	        }
	        attributes[attr] = fabric.Object.prototype[attr];
	      }

	      if (attributes[attr].indexOf('url(') === 0) {
	        continue;
	      }

	      var color = new fabric.Color(attributes[attr]);
	      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
	    }
	    return attributes;
	  }

	  /**
	   * @private
	   */
	  function _getMultipleNodes(doc, nodeNames) {
	    var nodeName, nodeArray = [], nodeList, i, len;
	    for (i = 0, len = nodeNames.length; i < len; i++) {
	      nodeName = nodeNames[i];
	      nodeList = doc.getElementsByTagName(nodeName);
	      nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));
	    }
	    return nodeArray;
	  }

	  /**
	   * Parses "transform" attribute, returning an array of values
	   * @static
	   * @function
	   * @memberOf fabric
	   * @param {String} attributeValue String containing attribute value
	   * @return {Array} Array of 6 elements representing transformation matrix
	   */
	  fabric.parseTransformAttribute = (function() {
	    function rotateMatrix(matrix, args) {
	      var cos = fabric.util.cos(args[0]), sin = fabric.util.sin(args[0]),
	          x = 0, y = 0;
	      if (args.length === 3) {
	        x = args[1];
	        y = args[2];
	      }

	      matrix[0] = cos;
	      matrix[1] = sin;
	      matrix[2] = -sin;
	      matrix[3] = cos;
	      matrix[4] = x - (cos * x - sin * y);
	      matrix[5] = y - (sin * x + cos * y);
	    }

	    function scaleMatrix(matrix, args) {
	      var multiplierX = args[0],
	          multiplierY = (args.length === 2) ? args[1] : args[0];

	      matrix[0] = multiplierX;
	      matrix[3] = multiplierY;
	    }

	    function skewMatrix(matrix, args, pos) {
	      matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));
	    }

	    function translateMatrix(matrix, args) {
	      matrix[4] = args[0];
	      if (args.length === 2) {
	        matrix[5] = args[1];
	      }
	    }

	    // identity matrix
	    var iMatrix = fabric.iMatrix,

	        // == begin transform regexp
	        number = fabric.reNum,

	        commaWsp = '(?:\\s+,?\\s*|,\\s*)',

	        skewX = '(?:(skewX)\\s*\\(\\s*(' + number + ')\\s*\\))',

	        skewY = '(?:(skewY)\\s*\\(\\s*(' + number + ')\\s*\\))',

	        rotate = '(?:(rotate)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + ')' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        scale = '(?:(scale)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        translate = '(?:(translate)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        matrix = '(?:(matrix)\\s*\\(\\s*' +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' +
	                  '\\s*\\))',

	        transform = '(?:' +
	                    matrix + '|' +
	                    translate + '|' +
	                    scale + '|' +
	                    rotate + '|' +
	                    skewX + '|' +
	                    skewY +
	                    ')',

	        transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',

	        transformList = '^\\s*(?:' + transforms + '?)\\s*$',

	        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute
	        reTransformList = new RegExp(transformList),
	        // == end transform regexp

	        reTransform = new RegExp(transform, 'g');

	    return function(attributeValue) {

	      // start with identity matrix
	      var matrix = iMatrix.concat(),
	          matrices = [];

	      // return if no argument was given or
	      // an argument does not match transform attribute regexp
	      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {
	        return matrix;
	      }

	      attributeValue.replace(reTransform, function(match) {

	        var m = new RegExp(transform).exec(match).filter(function (match) {
	              // match !== '' && match != null
	              return (!!match);
	            }),
	            operation = m[1],
	            args = m.slice(2).map(parseFloat);

	        switch (operation) {
	          case 'translate':
	            translateMatrix(matrix, args);
	            break;
	          case 'rotate':
	            args[0] = fabric.util.degreesToRadians(args[0]);
	            rotateMatrix(matrix, args);
	            break;
	          case 'scale':
	            scaleMatrix(matrix, args);
	            break;
	          case 'skewX':
	            skewMatrix(matrix, args, 2);
	            break;
	          case 'skewY':
	            skewMatrix(matrix, args, 1);
	            break;
	          case 'matrix':
	            matrix = args;
	            break;
	        }

	        // snapshot current matrix into matrices array
	        matrices.push(matrix.concat());
	        // reset
	        matrix = iMatrix.concat();
	      });

	      var combinedMatrix = matrices[0];
	      while (matrices.length > 1) {
	        matrices.shift();
	        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
	      }
	      return combinedMatrix;
	    };
	  })();

	  /**
	   * @private
	   */
	  function parseStyleString(style, oStyle) {
	    var attr, value;
	    style.replace(/;\s*$/, '').split(';').forEach(function (chunk) {
	      var pair = chunk.split(':');

	      attr = pair[0].trim().toLowerCase();
	      value =  pair[1].trim();

	      oStyle[attr] = value;
	    });
	  }

	  /**
	   * @private
	   */
	  function parseStyleObject(style, oStyle) {
	    var attr, value;
	    for (var prop in style) {
	      if (typeof style[prop] === 'undefined') {
	        continue;
	      }

	      attr = prop.toLowerCase();
	      value = style[prop];

	      oStyle[attr] = value;
	    }
	  }

	  /**
	   * @private
	   */
	  function getGlobalStylesForElement(element, svgUid) {
	    var styles = { };
	    for (var rule in fabric.cssRules[svgUid]) {
	      if (elementMatchesRule(element, rule.split(' '))) {
	        for (var property in fabric.cssRules[svgUid][rule]) {
	          styles[property] = fabric.cssRules[svgUid][rule][property];
	        }
	      }
	    }
	    return styles;
	  }

	  /**
	   * @private
	   */
	  function elementMatchesRule(element, selectors) {
	    var firstMatching, parentMatching = true;
	    //start from rightmost selector.
	    firstMatching = selectorMatches(element, selectors.pop());
	    if (firstMatching && selectors.length) {
	      parentMatching = doesSomeParentMatch(element, selectors);
	    }
	    return firstMatching && parentMatching && (selectors.length === 0);
	  }

	  function doesSomeParentMatch(element, selectors) {
	    var selector, parentMatching = true;
	    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
	      if (parentMatching) {
	        selector = selectors.pop();
	      }
	      element = element.parentNode;
	      parentMatching = selectorMatches(element, selector);
	    }
	    return selectors.length === 0;
	  }

	  /**
	   * @private
	   */
	  function selectorMatches(element, selector) {
	    var nodeName = element.nodeName,
	        classNames = element.getAttribute('class'),
	        id = element.getAttribute('id'), matcher, i;
	    // i check if a selector matches slicing away part from it.
	    // if i get empty string i should match
	    matcher = new RegExp('^' + nodeName, 'i');
	    selector = selector.replace(matcher, '');
	    if (id && selector.length) {
	      matcher = new RegExp('#' + id + '(?![a-zA-Z\\-]+)', 'i');
	      selector = selector.replace(matcher, '');
	    }
	    if (classNames && selector.length) {
	      classNames = classNames.split(' ');
	      for (i = classNames.length; i--;) {
	        matcher = new RegExp('\\.' + classNames[i] + '(?![a-zA-Z\\-]+)', 'i');
	        selector = selector.replace(matcher, '');
	      }
	    }
	    return selector.length === 0;
	  }

	  /**
	   * @private
	   * to support IE8 missing getElementById on SVGdocument and on node xmlDOM
	   */
	  function elementById(doc, id) {
	    var el;
	    doc.getElementById && (el = doc.getElementById(id));
	    if (el) {
	      return el;
	    }
	    var node, i, len, nodelist = doc.getElementsByTagName('*');
	    for (i = 0, len = nodelist.length; i < len; i++) {
	      node = nodelist[i];
	      if (id === node.getAttribute('id')) {
	        return node;
	      }
	    }
	  }

	  /**
	   * @private
	   */
	  function parseUseDirectives(doc) {
	    var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']), i = 0;
	    while (nodelist.length && i < nodelist.length) {
	      var el = nodelist[i],
	          xlink = (el.getAttribute('xlink:href') || el.getAttribute('href')).substr(1),
	          x = el.getAttribute('x') || 0,
	          y = el.getAttribute('y') || 0,
	          el2 = elementById(doc, xlink).cloneNode(true),
	          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',
	          parentNode, oldLength = nodelist.length, attr, j, attrs, len;

	      applyViewboxTransform(el2);
	      if (/^svg$/i.test(el2.nodeName)) {
	        var el3 = el2.ownerDocument.createElement('g');
	        for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {
	          attr = attrs.item(j);
	          el3.setAttribute(attr.nodeName, attr.nodeValue);
	        }
	        // el2.firstChild != null
	        while (el2.firstChild) {
	          el3.appendChild(el2.firstChild);
	        }
	        el2 = el3;
	      }

	      for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {
	        attr = attrs.item(j);
	        if (attr.nodeName === 'x' || attr.nodeName === 'y' ||
	          attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {
	          continue;
	        }

	        if (attr.nodeName === 'transform') {
	          currentTrans = attr.nodeValue + ' ' + currentTrans;
	        }
	        else {
	          el2.setAttribute(attr.nodeName, attr.nodeValue);
	        }
	      }

	      el2.setAttribute('transform', currentTrans);
	      el2.setAttribute('instantiated_by_use', '1');
	      el2.removeAttribute('id');
	      parentNode = el.parentNode;
	      parentNode.replaceChild(el2, el);
	      // some browsers do not shorten nodelist after replaceChild (IE8)
	      if (nodelist.length === oldLength) {
	        i++;
	      }
	    }
	  }

	  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
	  // matches, e.g.: +14.56e-12, etc.
	  var reViewBoxAttrValue = new RegExp(
	    '^' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*' +
	    '$'
	  );

	  /**
	   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements
	   */
	  function applyViewboxTransform(element) {

	    var viewBoxAttr = element.getAttribute('viewBox'),
	        scaleX = 1,
	        scaleY = 1,
	        minX = 0,
	        minY = 0,
	        viewBoxWidth, viewBoxHeight, matrix, el,
	        widthAttr = element.getAttribute('width'),
	        heightAttr = element.getAttribute('height'),
	        x = element.getAttribute('x') || 0,
	        y = element.getAttribute('y') || 0,
	        preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',
	        missingViewBox = (!viewBoxAttr || !fabric.svgViewBoxElementsRegEx.test(element.nodeName)
	                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),
	        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),
	        toBeParsed = missingViewBox && missingDimAttr,
	        parsedDim = { }, translateMatrix = '', widthDiff = 0, heightDiff = 0;

	    parsedDim.width = 0;
	    parsedDim.height = 0;
	    parsedDim.toBeParsed = toBeParsed;

	    if (toBeParsed) {
	      return parsedDim;
	    }

	    if (missingViewBox) {
	      parsedDim.width = parseUnit(widthAttr);
	      parsedDim.height = parseUnit(heightAttr);
	      return parsedDim;
	    }
	    minX = -parseFloat(viewBoxAttr[1]);
	    minY = -parseFloat(viewBoxAttr[2]);
	    viewBoxWidth = parseFloat(viewBoxAttr[3]);
	    viewBoxHeight = parseFloat(viewBoxAttr[4]);
	    parsedDim.minX = minX;
	    parsedDim.minY = minY;
	    parsedDim.viewBoxWidth = viewBoxWidth;
	    parsedDim.viewBoxHeight = viewBoxHeight;
	    if (!missingDimAttr) {
	      parsedDim.width = parseUnit(widthAttr);
	      parsedDim.height = parseUnit(heightAttr);
	      scaleX = parsedDim.width / viewBoxWidth;
	      scaleY = parsedDim.height / viewBoxHeight;
	    }
	    else {
	      parsedDim.width = viewBoxWidth;
	      parsedDim.height = viewBoxHeight;
	    }

	    // default is to preserve aspect ratio
	    preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
	    if (preserveAspectRatio.alignX !== 'none') {
	      //translate all container for the effect of Mid, Min, Max
	      if (preserveAspectRatio.meetOrSlice === 'meet') {
	        scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);
	        // calculate additional translation to move the viewbox
	      }
	      if (preserveAspectRatio.meetOrSlice === 'slice') {
	        scaleY = scaleX = (scaleX > scaleY ? scaleX : scaleY);
	        // calculate additional translation to move the viewbox
	      }
	      widthDiff = parsedDim.width - viewBoxWidth * scaleX;
	      heightDiff = parsedDim.height - viewBoxHeight * scaleX;
	      if (preserveAspectRatio.alignX === 'Mid') {
	        widthDiff /= 2;
	      }
	      if (preserveAspectRatio.alignY === 'Mid') {
	        heightDiff /= 2;
	      }
	      if (preserveAspectRatio.alignX === 'Min') {
	        widthDiff = 0;
	      }
	      if (preserveAspectRatio.alignY === 'Min') {
	        heightDiff = 0;
	      }
	    }

	    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {
	      return parsedDim;
	    }

	    if (x || y) {
	      translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';
	    }

	    matrix = translateMatrix + ' matrix(' + scaleX +
	                  ' 0' +
	                  ' 0 ' +
	                  scaleY + ' ' +
	                  (minX * scaleX + widthDiff) + ' ' +
	                  (minY * scaleY + heightDiff) + ') ';
	    parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);
	    if (element.nodeName === 'svg') {
	      el = element.ownerDocument.createElement('g');
	      // element.firstChild != null
	      while (element.firstChild) {
	        el.appendChild(element.firstChild);
	      }
	      element.appendChild(el);
	    }
	    else {
	      el = element;
	      matrix = el.getAttribute('transform') + matrix;
	    }
	    el.setAttribute('transform', matrix);
	    return parsedDim;
	  }

	  function hasAncestorWithNodeName(element, nodeName) {
	    while (element && (element = element.parentNode)) {
	      if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', ''))
	        && !element.getAttribute('instantiated_by_use')) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
	   * @static
	   * @function
	   * @memberOf fabric
	   * @param {SVGDocument} doc SVG document to parse
	   * @param {Function} callback Callback to call when parsing is finished;
	   * It's being passed an array of elements (parsed from a document).
	   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	   * @param {Object} [parsingOptions] options for parsing document
	   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings
	   */
	  fabric.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {
	    if (!doc) {
	      return;
	    }

	    parseUseDirectives(doc);

	    var svgUid =  fabric.Object.__uid++, i, len,
	        options = applyViewboxTransform(doc),
	        descendants = fabric.util.toArray(doc.getElementsByTagName('*'));
	    options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;
	    options.svgUid = svgUid;

	    if (descendants.length === 0 && fabric.isLikelyNode) {
	      // we're likely in node, where "o3-xml" library fails to gEBTN("*")
	      // https://github.com/ajaxorg/node-o3-xml/issues/21
	      descendants = doc.selectNodes('//*[name(.)!="svg"]');
	      var arr = [];
	      for (i = 0, len = descendants.length; i < len; i++) {
	        arr[i] = descendants[i];
	      }
	      descendants = arr;
	    }

	    var elements = descendants.filter(function(el) {
	      applyViewboxTransform(el);
	      return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) &&
	            !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement
	    });

	    if (!elements || (elements && !elements.length)) {
	      callback && callback([], {});
	      return;
	    }
	    var clipPaths = { };
	    descendants.filter(function(el) {
	      return el.nodeName.replace('svg:', '') === 'clipPath';
	    }).forEach(function(el) {
	      var id = el.getAttribute('id');
	      clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function(el) {
	        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));
	      });
	    });
	    fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);
	    fabric.cssRules[svgUid] = fabric.getCSSRules(doc);
	    fabric.clipPaths[svgUid] = clipPaths;
	    // Precedence of rules:   style > class > attribute
	    fabric.parseElements(elements, function(instances, elements) {
	      if (callback) {
	        callback(instances, options, elements, descendants);
	        delete fabric.gradientDefs[svgUid];
	        delete fabric.cssRules[svgUid];
	        delete fabric.clipPaths[svgUid];
	      }
	    }, clone(options), reviver, parsingOptions);
	  };

	  function recursivelyParseGradientsXlink(doc, gradient) {
	    var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],
	        xlinkAttr = 'xlink:href',
	        xLink = gradient.getAttribute(xlinkAttr).substr(1),
	        referencedGradient = elementById(doc, xLink);
	    if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {
	      recursivelyParseGradientsXlink(doc, referencedGradient);
	    }
	    gradientsAttrs.forEach(function(attr) {
	      if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {
	        gradient.setAttribute(attr, referencedGradient.getAttribute(attr));
	      }
	    });
	    if (!gradient.children.length) {
	      var referenceClone = referencedGradient.cloneNode(true);
	      while (referenceClone.firstChild) {
	        gradient.appendChild(referenceClone.firstChild);
	      }
	    }
	    gradient.removeAttribute(xlinkAttr);
	  }

	  var reFontDeclaration = new RegExp(
	    '(normal|italic)?\\s*(normal|small-caps)?\\s*' +
	    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(' +
	      fabric.reNum +
	    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|' + fabric.reNum + '))?\\s+(.*)');

	  extend(fabric, {
	    /**
	     * Parses a short font declaration, building adding its properties to a style object
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {String} value font declaration
	     * @param {Object} oStyle definition
	     */
	    parseFontDeclaration: function(value, oStyle) {
	      var match = value.match(reFontDeclaration);

	      if (!match) {
	        return;
	      }
	      var fontStyle = match[1],
	          // font variant is not used
	          // fontVariant = match[2],
	          fontWeight = match[3],
	          fontSize = match[4],
	          lineHeight = match[5],
	          fontFamily = match[6];

	      if (fontStyle) {
	        oStyle.fontStyle = fontStyle;
	      }
	      if (fontWeight) {
	        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);
	      }
	      if (fontSize) {
	        oStyle.fontSize = parseUnit(fontSize);
	      }
	      if (fontFamily) {
	        oStyle.fontFamily = fontFamily;
	      }
	      if (lineHeight) {
	        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;
	      }
	    },

	    /**
	     * Parses an SVG document, returning all of the gradient declarations found in it
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {SVGDocument} doc SVG document to parse
	     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
	     */
	    getGradientDefs: function(doc) {
	      var tagArray = [
	            'linearGradient',
	            'radialGradient',
	            'svg:linearGradient',
	            'svg:radialGradient'],
	          elList = _getMultipleNodes(doc, tagArray),
	          el, j = 0, gradientDefs = { };
	      j = elList.length;
	      while (j--) {
	        el = elList[j];
	        if (el.getAttribute('xlink:href')) {
	          recursivelyParseGradientsXlink(doc, el);
	        }
	        gradientDefs[el.getAttribute('id')] = el;
	      }
	      return gradientDefs;
	    },

	    /**
	     * Returns an object of attributes' name/value, given element and an array of attribute names;
	     * Parses parent "g" nodes recursively upwards.
	     * @static
	     * @memberOf fabric
	     * @param {DOMElement} element Element to parse
	     * @param {Array} attributes Array of attributes to parse
	     * @return {Object} object containing parsed attributes' names/values
	     */
	    parseAttributes: function(element, attributes, svgUid) {

	      if (!element) {
	        return;
	      }

	      var value,
	          parentAttributes = { },
	          fontSize, parentFontSize;

	      if (typeof svgUid === 'undefined') {
	        svgUid = element.getAttribute('svgUid');
	      }
	      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards
	      if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {
	        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);
	      }

	      var ownAttributes = attributes.reduce(function(memo, attr) {
	        value = element.getAttribute(attr);
	        if (value) { // eslint-disable-line
	          memo[attr] = value;
	        }
	        return memo;
	      }, { });
	      // add values parsed from style, which take precedence over attributes
	      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)
	      ownAttributes = extend(ownAttributes,
	        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));

	      fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;
	      if (ownAttributes['font-size']) {
	        // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.
	        ownAttributes['font-size'] = fontSize = parseUnit(ownAttributes['font-size'], parentFontSize);
	      }

	      var normalizedAttr, normalizedValue, normalizedStyle = {};
	      for (var attr in ownAttributes) {
	        normalizedAttr = normalizeAttr(attr);
	        normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);
	        normalizedStyle[normalizedAttr] = normalizedValue;
	      }
	      if (normalizedStyle && normalizedStyle.font) {
	        fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);
	      }
	      var mergedAttrs = extend(parentAttributes, normalizedStyle);
	      return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);
	    },

	    /**
	     * Transforms an array of svg elements to corresponding fabric.* instances
	     * @static
	     * @memberOf fabric
	     * @param {Array} elements Array of elements to parse
	     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
	     * @param {Object} [options] Options object
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     */
	    parseElements: function(elements, callback, options, reviver, parsingOptions) {
	      new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();
	    },

	    /**
	     * Parses "style" attribute, retuning an object with values
	     * @static
	     * @memberOf fabric
	     * @param {SVGElement} element Element to parse
	     * @return {Object} Objects with values parsed from style attribute of an element
	     */
	    parseStyleAttribute: function(element) {
	      var oStyle = { },
	          style = element.getAttribute('style');

	      if (!style) {
	        return oStyle;
	      }

	      if (typeof style === 'string') {
	        parseStyleString(style, oStyle);
	      }
	      else {
	        parseStyleObject(style, oStyle);
	      }

	      return oStyle;
	    },

	    /**
	     * Parses "points" attribute, returning an array of values
	     * @static
	     * @memberOf fabric
	     * @param {String} points points attribute string
	     * @return {Array} array of points
	     */
	    parsePointsAttribute: function(points) {

	      // points attribute is required and must not be empty
	      if (!points) {
	        return null;
	      }

	      // replace commas with whitespace and remove bookending whitespace
	      points = points.replace(/,/g, ' ').trim();

	      points = points.split(/\s+/);
	      var parsedPoints = [], i, len;

	      for (i = 0, len = points.length; i < len; i += 2) {
	        parsedPoints.push({
	          x: parseFloat(points[i]),
	          y: parseFloat(points[i + 1])
	        });
	      }

	      // odd number of points is an error
	      // if (parsedPoints.length % 2 !== 0) {
	      //   return null;
	      // }

	      return parsedPoints;
	    },

	    /**
	     * Returns CSS rules for a given SVG document
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {SVGDocument} doc SVG document to parse
	     * @return {Object} CSS rules of this document
	     */
	    getCSSRules: function(doc) {
	      var styles = doc.getElementsByTagName('style'), i, len,
	          allRules = { }, rules;

	      // very crude parsing of style contents
	      for (i = 0, len = styles.length; i < len; i++) {
	        // IE9 doesn't support textContent, but provides text instead.
	        var styleContents = styles[i].textContent || styles[i].text;

	        // remove comments
	        styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, '');
	        if (styleContents.trim() === '') {
	          continue;
	        }
	        rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
	        rules = rules.map(function(rule) { return rule.trim(); });
	        // eslint-disable-next-line no-loop-func
	        rules.forEach(function(rule) {

	          var match = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/),
	              ruleObj = { }, declaration = match[2].trim(),
	              propertyValuePairs = declaration.replace(/;$/, '').split(/\s*;\s*/);

	          for (i = 0, len = propertyValuePairs.length; i < len; i++) {
	            var pair = propertyValuePairs[i].split(/\s*:\s*/),
	                property = pair[0],
	                value = pair[1];
	            ruleObj[property] = value;
	          }
	          rule = match[1];
	          rule.split(',').forEach(function(_rule) {
	            _rule = _rule.replace(/^svg/i, '').trim();
	            if (_rule === '') {
	              return;
	            }
	            if (allRules[_rule]) {
	              fabric.util.object.extend(allRules[_rule], ruleObj);
	            }
	            else {
	              allRules[_rule] = fabric.util.object.clone(ruleObj);
	            }
	          });
	        });
	      }
	      return allRules;
	    },

	    /**
	     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
	     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
	     * @memberOf fabric
	     * @param {String} url
	     * @param {Function} callback
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     * @param {Object} [options] Object containing options for parsing
	     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
	     */
	    loadSVGFromURL: function(url, callback, reviver, options) {

	      url = url.replace(/^\n\s*/, '').trim();
	      new fabric.util.request(url, {
	        method: 'get',
	        onComplete: onComplete
	      });

	      function onComplete(r) {

	        var xml = r.responseXML;
	        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {
	          xml = new ActiveXObject('Microsoft.XMLDOM');
	          xml.async = 'false';
	          //IE chokes on DOCTYPE
	          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i, ''));
	        }
	        if (!xml || !xml.documentElement) {
	          callback && callback(null);
	          return false;
	        }

	        fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {
	          callback && callback(results, _options, elements, allElements);
	        }, reviver, options);
	      }
	    },

	    /**
	     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
	     * @memberOf fabric
	     * @param {String} string
	     * @param {Function} callback
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     * @param {Object} [options] Object containing options for parsing
	     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
	     */
	    loadSVGFromString: function(string, callback, reviver, options) {
	      string = string.trim();
	      var doc;
	      if (typeof fabric.window.DOMParser !== 'undefined') {
	        var parser = new fabric.window.DOMParser();
	        if (parser && parser.parseFromString) {
	          doc = parser.parseFromString(string, 'text/xml');
	        }
	      }
	      else if (fabric.window.ActiveXObject) {
	        doc = new ActiveXObject('Microsoft.XMLDOM');
	        doc.async = 'false';
	        // IE chokes on DOCTYPE
	        doc.loadXML(string.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i, ''));
	      }

	      fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {
	        callback(results, _options, elements, allElements);
	      }, reviver, options);
	    }
	  });

	})( exports );


	fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions) {
	  this.elements = elements;
	  this.callback = callback;
	  this.options = options;
	  this.reviver = reviver;
	  this.svgUid = (options && options.svgUid) || 0;
	  this.parsingOptions = parsingOptions;
	  this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g;
	};

	(function(proto) {
	  proto.parse = function() {
	    this.instances = new Array(this.elements.length);
	    this.numElements = this.elements.length;
	    this.createObjects();
	  };

	  proto.createObjects = function() {
	    var _this = this;
	    this.elements.forEach(function(element, i) {
	      element.setAttribute('svgUid', _this.svgUid);
	      _this.createObject(element, i);
	    });
	  };

	  proto.findTag = function(el) {
	    return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];
	  };

	  proto.createObject = function(el, index) {
	    var klass = this.findTag(el);
	    if (klass && klass.fromElement) {
	      try {
	        klass.fromElement(el, this.createCallback(index, el), this.options);
	      }
	      catch (err) {
	        fabric.log(err);
	      }
	    }
	    else {
	      this.checkIfDone();
	    }
	  };

	  proto.createCallback = function(index, el) {
	    var _this = this;
	    return function(obj) {
	      var _options;
	      _this.resolveGradient(obj, el, 'fill');
	      _this.resolveGradient(obj, el, 'stroke');
	      if (obj instanceof fabric.Image && obj._originalElement) {
	        _options = obj.parsePreserveAspectRatioAttribute(el);
	      }
	      obj._removeTransformMatrix(_options);
	      _this.resolveClipPath(obj);
	      _this.reviver && _this.reviver(el, obj);
	      _this.instances[index] = obj;
	      _this.checkIfDone();
	    };
	  };

	  proto.extractPropertyDefinition = function(obj, property, storage) {
	    var value = obj[property];
	    if (!(/^url\(/).test(value)) {
	      return;
	    }
	    var id = this.regexUrl.exec(value)[1];
	    this.regexUrl.lastIndex = 0;
	    return fabric[storage][this.svgUid][id];
	  };

	  proto.resolveGradient = function(obj, el, property) {
	    var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');
	    if (gradientDef) {
	      var opacityAttr = el.getAttribute(property + '-opacity');
	      var gradient = fabric.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);
	      obj.set(property, gradient);
	    }
	  };

	  proto.createClipPathCallback = function(obj, container) {
	    return function(_newObj) {
	      _newObj._removeTransformMatrix();
	      _newObj.fillRule = _newObj.clipRule;
	      container.push(_newObj);
	    };
	  };

	  proto.resolveClipPath = function(obj) {
	    var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),
	        element, klass, objTransformInv, container, gTransform, options;
	    if (clipPath) {
	      container = [];
	      objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());
	      for (var i = 0; i < clipPath.length; i++) {
	        element = clipPath[i];
	        klass = this.findTag(element);
	        klass.fromElement(
	          element,
	          this.createClipPathCallback(obj, container),
	          this.options
	        );
	      }
	      if (container.length === 1) {
	        clipPath = container[0];
	      }
	      else {
	        clipPath = new fabric.Group(container);
	      }
	      gTransform = fabric.util.multiplyTransformMatrices(
	        objTransformInv,
	        clipPath.calcTransformMatrix()
	      );
	      var options = fabric.util.qrDecompose(gTransform);
	      clipPath.flipX = false;
	      clipPath.flipY = false;
	      clipPath.set('scaleX', options.scaleX);
	      clipPath.set('scaleY', options.scaleY);
	      clipPath.angle = options.angle;
	      clipPath.skewX = options.skewX;
	      clipPath.skewY = 0;
	      clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, 'center', 'center');
	      obj.clipPath = clipPath;
	    }
	  };

	  proto.checkIfDone = function() {
	    if (--this.numElements === 0) {
	      this.instances = this.instances.filter(function(el) {
	        // eslint-disable-next-line no-eq-null, eqeqeq
	        return el != null;
	      });
	      this.callback(this.instances, this.elements);
	    }
	  };
	})(fabric.ElementsParser.prototype);


	(function(global) {

	  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Point) {
	    fabric.warn('fabric.Point is already defined');
	    return;
	  }

	  fabric.Point = Point;

	  /**
	   * Point class
	   * @class fabric.Point
	   * @memberOf fabric
	   * @constructor
	   * @param {Number} x
	   * @param {Number} y
	   * @return {fabric.Point} thisArg
	   */
	  function Point(x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  Point.prototype = /** @lends fabric.Point.prototype */ {

	    type: 'point',

	    constructor: Point,

	    /**
	     * Adds another point to this one and returns another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} new Point instance with added values
	     */
	    add: function (that) {
	      return new Point(this.x + that.x, this.y + that.y);
	    },

	    /**
	     * Adds another point to this one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    addEquals: function (that) {
	      this.x += that.x;
	      this.y += that.y;
	      return this;
	    },

	    /**
	     * Adds value to this point and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point} new Point with added value
	     */
	    scalarAdd: function (scalar) {
	      return new Point(this.x + scalar, this.y + scalar);
	    },

	    /**
	     * Adds value to this point
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    scalarAddEquals: function (scalar) {
	      this.x += scalar;
	      this.y += scalar;
	      return this;
	    },

	    /**
	     * Subtracts another point from this point and returns a new one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} new Point object with subtracted values
	     */
	    subtract: function (that) {
	      return new Point(this.x - that.x, this.y - that.y);
	    },

	    /**
	     * Subtracts another point from this point
	     * @param {fabric.Point} that
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    subtractEquals: function (that) {
	      this.x -= that.x;
	      this.y -= that.y;
	      return this;
	    },

	    /**
	     * Subtracts value from this point and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    scalarSubtract: function (scalar) {
	      return new Point(this.x - scalar, this.y - scalar);
	    },

	    /**
	     * Subtracts value from this point
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    scalarSubtractEquals: function (scalar) {
	      this.x -= scalar;
	      this.y -= scalar;
	      return this;
	    },

	    /**
	     * Multiplies this point by a value and returns a new one
	     * TODO: rename in scalarMultiply in 2.0
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    multiply: function (scalar) {
	      return new Point(this.x * scalar, this.y * scalar);
	    },

	    /**
	     * Multiplies this point by a value
	     * TODO: rename in scalarMultiplyEquals in 2.0
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    multiplyEquals: function (scalar) {
	      this.x *= scalar;
	      this.y *= scalar;
	      return this;
	    },

	    /**
	     * Divides this point by a value and returns a new one
	     * TODO: rename in scalarDivide in 2.0
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    divide: function (scalar) {
	      return new Point(this.x / scalar, this.y / scalar);
	    },

	    /**
	     * Divides this point by a value
	     * TODO: rename in scalarDivideEquals in 2.0
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     * @chainable
	     */
	    divideEquals: function (scalar) {
	      this.x /= scalar;
	      this.y /= scalar;
	      return this;
	    },

	    /**
	     * Returns true if this point is equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    eq: function (that) {
	      return (this.x === that.x && this.y === that.y);
	    },

	    /**
	     * Returns true if this point is less than another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    lt: function (that) {
	      return (this.x < that.x && this.y < that.y);
	    },

	    /**
	     * Returns true if this point is less than or equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    lte: function (that) {
	      return (this.x <= that.x && this.y <= that.y);
	    },

	    /**

	     * Returns true if this point is greater another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    gt: function (that) {
	      return (this.x > that.x && this.y > that.y);
	    },

	    /**
	     * Returns true if this point is greater than or equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    gte: function (that) {
	      return (this.x >= that.x && this.y >= that.y);
	    },

	    /**
	     * Returns new point which is the result of linear interpolation with this one and another one
	     * @param {fabric.Point} that
	     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
	     * @return {fabric.Point}
	     */
	    lerp: function (that, t) {
	      if (typeof t === 'undefined') {
	        t = 0.5;
	      }
	      t = Math.max(Math.min(1, t), 0);
	      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
	    },

	    /**
	     * Returns distance from this point and another one
	     * @param {fabric.Point} that
	     * @return {Number}
	     */
	    distanceFrom: function (that) {
	      var dx = this.x - that.x,
	          dy = this.y - that.y;
	      return Math.sqrt(dx * dx + dy * dy);
	    },

	    /**
	     * Returns the point between this point and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    midPointFrom: function (that) {
	      return this.lerp(that);
	    },

	    /**
	     * Returns a new point which is the min of this and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    min: function (that) {
	      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
	    },

	    /**
	     * Returns a new point which is the max of this and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    max: function (that) {
	      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
	    },

	    /**
	     * Returns string representation of this point
	     * @return {String}
	     */
	    toString: function () {
	      return this.x + ',' + this.y;
	    },

	    /**
	     * Sets x/y of this point
	     * @param {Number} x
	     * @param {Number} y
	     * @chainable
	     */
	    setXY: function (x, y) {
	      this.x = x;
	      this.y = y;
	      return this;
	    },

	    /**
	     * Sets x of this point
	     * @param {Number} x
	     * @chainable
	     */
	    setX: function (x) {
	      this.x = x;
	      return this;
	    },

	    /**
	     * Sets y of this point
	     * @param {Number} y
	     * @chainable
	     */
	    setY: function (y) {
	      this.y = y;
	      return this;
	    },

	    /**
	     * Sets x/y of this point from another point
	     * @param {fabric.Point} that
	     * @chainable
	     */
	    setFromPoint: function (that) {
	      this.x = that.x;
	      this.y = that.y;
	      return this;
	    },

	    /**
	     * Swaps x/y of this point and another point
	     * @param {fabric.Point} that
	     */
	    swap: function (that) {
	      var x = this.x,
	          y = this.y;
	      this.x = that.x;
	      this.y = that.y;
	      that.x = x;
	      that.y = y;
	    },

	    /**
	     * return a cloned instance of the point
	     * @return {fabric.Point}
	     */
	    clone: function () {
	      return new Point(this.x, this.y);
	    }
	  };

	})( exports );


	(function(global) {

	  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */
	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Intersection) {
	    fabric.warn('fabric.Intersection is already defined');
	    return;
	  }

	  /**
	   * Intersection class
	   * @class fabric.Intersection
	   * @memberOf fabric
	   * @constructor
	   */
	  function Intersection(status) {
	    this.status = status;
	    this.points = [];
	  }

	  fabric.Intersection = Intersection;

	  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {

	    constructor: Intersection,

	    /**
	     * Appends a point to intersection
	     * @param {fabric.Point} point
	     * @return {fabric.Intersection} thisArg
	     * @chainable
	     */
	    appendPoint: function (point) {
	      this.points.push(point);
	      return this;
	    },

	    /**
	     * Appends points to intersection
	     * @param {Array} points
	     * @return {fabric.Intersection} thisArg
	     * @chainable
	     */
	    appendPoints: function (points) {
	      this.points = this.points.concat(points);
	      return this;
	    }
	  };

	  /**
	   * Checks if one line intersects another
	   * TODO: rename in intersectSegmentSegment
	   * @static
	   * @param {fabric.Point} a1
	   * @param {fabric.Point} a2
	   * @param {fabric.Point} b1
	   * @param {fabric.Point} b2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {
	    var result,
	        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
	        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
	        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
	    if (uB !== 0) {
	      var ua = uaT / uB,
	          ub = ubT / uB;
	      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
	        result = new Intersection('Intersection');
	        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
	      }
	      else {
	        result = new Intersection();
	      }
	    }
	    else {
	      if (uaT === 0 || ubT === 0) {
	        result = new Intersection('Coincident');
	      }
	      else {
	        result = new Intersection('Parallel');
	      }
	    }
	    return result;
	  };

	  /**
	   * Checks if line intersects polygon
	   * TODO: rename in intersectSegmentPolygon
	   * fix detection of coincident
	   * @static
	   * @param {fabric.Point} a1
	   * @param {fabric.Point} a2
	   * @param {Array} points
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {
	    var result = new Intersection(),
	        length = points.length,
	        b1, b2, inter, i;

	    for (i = 0; i < length; i++) {
	      b1 = points[i];
	      b2 = points[(i + 1) % length];
	      inter = Intersection.intersectLineLine(a1, a2, b1, b2);

	      result.appendPoints(inter.points);
	    }
	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	  /**
	   * Checks if polygon intersects another polygon
	   * @static
	   * @param {Array} points1
	   * @param {Array} points2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {
	    var result = new Intersection(),
	        length = points1.length, i;

	    for (i = 0; i < length; i++) {
	      var a1 = points1[i],
	          a2 = points1[(i + 1) % length],
	          inter = Intersection.intersectLinePolygon(a1, a2, points2);

	      result.appendPoints(inter.points);
	    }
	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	  /**
	   * Checks if polygon intersects rectangle
	   * @static
	   * @param {Array} points
	   * @param {fabric.Point} r1
	   * @param {fabric.Point} r2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {
	    var min = r1.min(r2),
	        max = r1.max(r2),
	        topRight = new fabric.Point(max.x, min.y),
	        bottomLeft = new fabric.Point(min.x, max.y),
	        inter1 = Intersection.intersectLinePolygon(min, topRight, points),
	        inter2 = Intersection.intersectLinePolygon(topRight, max, points),
	        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),
	        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),
	        result = new Intersection();

	    result.appendPoints(inter1.points);
	    result.appendPoints(inter2.points);
	    result.appendPoints(inter3.points);
	    result.appendPoints(inter4.points);

	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Color) {
	    fabric.warn('fabric.Color is already defined.');
	    return;
	  }

	  /**
	   * Color class
	   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
	   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
	   *
	   * @class fabric.Color
	   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list
	   * @return {fabric.Color} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}
	   */
	  function Color(color) {
	    if (!color) {
	      this.setSource([0, 0, 0, 1]);
	    }
	    else {
	      this._tryParsingColor(color);
	    }
	  }

	  fabric.Color = Color;

	  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {

	    /**
	     * @private
	     * @param {String|Array} color Color value to parse
	     */
	    _tryParsingColor: function(color) {
	      var source;

	      if (color in Color.colorNameMap) {
	        color = Color.colorNameMap[color];
	      }

	      if (color === 'transparent') {
	        source = [255, 255, 255, 0];
	      }

	      if (!source) {
	        source = Color.sourceFromHex(color);
	      }
	      if (!source) {
	        source = Color.sourceFromRgb(color);
	      }
	      if (!source) {
	        source = Color.sourceFromHsl(color);
	      }
	      if (!source) {
	        //if color is not recognize let's make black as canvas does
	        source = [0, 0, 0, 1];
	      }
	      if (source) {
	        this.setSource(source);
	      }
	    },

	    /**
	     * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
	     * @private
	     * @param {Number} r Red color value
	     * @param {Number} g Green color value
	     * @param {Number} b Blue color value
	     * @return {Array} Hsl color
	     */
	    _rgbToHsl: function(r, g, b) {
	      r /= 255; g /= 255; b /= 255;

	      var h, s, l,
	          max = fabric.util.array.max([r, g, b]),
	          min = fabric.util.array.min([r, g, b]);

	      l = (max + min) / 2;

	      if (max === min) {
	        h = s = 0; // achromatic
	      }
	      else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	        switch (max) {
	          case r:
	            h = (g - b) / d + (g < b ? 6 : 0);
	            break;
	          case g:
	            h = (b - r) / d + 2;
	            break;
	          case b:
	            h = (r - g) / d + 4;
	            break;
	        }
	        h /= 6;
	      }

	      return [
	        Math.round(h * 360),
	        Math.round(s * 100),
	        Math.round(l * 100)
	      ];
	    },

	    /**
	     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
	     * @return {Array}
	     */
	    getSource: function() {
	      return this._source;
	    },

	    /**
	     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
	     * @param {Array} source
	     */
	    setSource: function(source) {
	      this._source = source;
	    },

	    /**
	     * Returns color representation in RGB format
	     * @return {String} ex: rgb(0-255,0-255,0-255)
	     */
	    toRgb: function() {
	      var source = this.getSource();
	      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';
	    },

	    /**
	     * Returns color representation in RGBA format
	     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
	     */
	    toRgba: function() {
	      var source = this.getSource();
	      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';
	    },

	    /**
	     * Returns color representation in HSL format
	     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
	     */
	    toHsl: function() {
	      var source = this.getSource(),
	          hsl = this._rgbToHsl(source[0], source[1], source[2]);

	      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';
	    },

	    /**
	     * Returns color representation in HSLA format
	     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
	     */
	    toHsla: function() {
	      var source = this.getSource(),
	          hsl = this._rgbToHsl(source[0], source[1], source[2]);

	      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';
	    },

	    /**
	     * Returns color representation in HEX format
	     * @return {String} ex: FF5555
	     */
	    toHex: function() {
	      var source = this.getSource(), r, g, b;

	      r = source[0].toString(16);
	      r = (r.length === 1) ? ('0' + r) : r;

	      g = source[1].toString(16);
	      g = (g.length === 1) ? ('0' + g) : g;

	      b = source[2].toString(16);
	      b = (b.length === 1) ? ('0' + b) : b;

	      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
	    },

	    /**
	     * Returns color representation in HEXA format
	     * @return {String} ex: FF5555CC
	     */
	    toHexa: function() {
	      var source = this.getSource(), a;

	      a = Math.round(source[3] * 255);
	      a = a.toString(16);
	      a = (a.length === 1) ? ('0' + a) : a;

	      return this.toHex() + a.toUpperCase();
	    },

	    /**
	     * Gets value of alpha channel for this color
	     * @return {Number} 0-1
	     */
	    getAlpha: function() {
	      return this.getSource()[3];
	    },

	    /**
	     * Sets value of alpha channel for this color
	     * @param {Number} alpha Alpha value 0-1
	     * @return {fabric.Color} thisArg
	     */
	    setAlpha: function(alpha) {
	      var source = this.getSource();
	      source[3] = alpha;
	      this.setSource(source);
	      return this;
	    },

	    /**
	     * Transforms color to its grayscale representation
	     * @return {fabric.Color} thisArg
	     */
	    toGrayscale: function() {
	      var source = this.getSource(),
	          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),
	          currentAlpha = source[3];
	      this.setSource([average, average, average, currentAlpha]);
	      return this;
	    },

	    /**
	     * Transforms color to its black and white representation
	     * @param {Number} threshold
	     * @return {fabric.Color} thisArg
	     */
	    toBlackWhite: function(threshold) {
	      var source = this.getSource(),
	          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),
	          currentAlpha = source[3];

	      threshold = threshold || 127;

	      average = (Number(average) < Number(threshold)) ? 0 : 255;
	      this.setSource([average, average, average, currentAlpha]);
	      return this;
	    },

	    /**
	     * Overlays color with another color
	     * @param {String|fabric.Color} otherColor
	     * @return {fabric.Color} thisArg
	     */
	    overlayWith: function(otherColor) {
	      if (!(otherColor instanceof Color)) {
	        otherColor = new Color(otherColor);
	      }

	      var result = [],
	          alpha = this.getAlpha(),
	          otherAlpha = 0.5,
	          source = this.getSource(),
	          otherSource = otherColor.getSource(), i;

	      for (i = 0; i < 3; i++) {
	        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));
	      }

	      result[3] = alpha;
	      this.setSource(result);
	      return this;
	    }
	  };

	  /**
	   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  // eslint-disable-next-line max-len
	  fabric.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i;

	  /**
	   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  fabric.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i;

	  /**
	   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;

	  /**
	   * Map of the 148 color names with HEX code
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   * @see: https://www.w3.org/TR/css3-color/#svg-color
	   */
	  fabric.Color.colorNameMap = {
	    aliceblue:            '#F0F8FF',
	    antiquewhite:         '#FAEBD7',
	    aqua:                 '#00FFFF',
	    aquamarine:           '#7FFFD4',
	    azure:                '#F0FFFF',
	    beige:                '#F5F5DC',
	    bisque:               '#FFE4C4',
	    black:                '#000000',
	    blanchedalmond:       '#FFEBCD',
	    blue:                 '#0000FF',
	    blueviolet:           '#8A2BE2',
	    brown:                '#A52A2A',
	    burlywood:            '#DEB887',
	    cadetblue:            '#5F9EA0',
	    chartreuse:           '#7FFF00',
	    chocolate:            '#D2691E',
	    coral:                '#FF7F50',
	    cornflowerblue:       '#6495ED',
	    cornsilk:             '#FFF8DC',
	    crimson:              '#DC143C',
	    cyan:                 '#00FFFF',
	    darkblue:             '#00008B',
	    darkcyan:             '#008B8B',
	    darkgoldenrod:        '#B8860B',
	    darkgray:             '#A9A9A9',
	    darkgrey:             '#A9A9A9',
	    darkgreen:            '#006400',
	    darkkhaki:            '#BDB76B',
	    darkmagenta:          '#8B008B',
	    darkolivegreen:       '#556B2F',
	    darkorange:           '#FF8C00',
	    darkorchid:           '#9932CC',
	    darkred:              '#8B0000',
	    darksalmon:           '#E9967A',
	    darkseagreen:         '#8FBC8F',
	    darkslateblue:        '#483D8B',
	    darkslategray:        '#2F4F4F',
	    darkslategrey:        '#2F4F4F',
	    darkturquoise:        '#00CED1',
	    darkviolet:           '#9400D3',
	    deeppink:             '#FF1493',
	    deepskyblue:          '#00BFFF',
	    dimgray:              '#696969',
	    dimgrey:              '#696969',
	    dodgerblue:           '#1E90FF',
	    firebrick:            '#B22222',
	    floralwhite:          '#FFFAF0',
	    forestgreen:          '#228B22',
	    fuchsia:              '#FF00FF',
	    gainsboro:            '#DCDCDC',
	    ghostwhite:           '#F8F8FF',
	    gold:                 '#FFD700',
	    goldenrod:            '#DAA520',
	    gray:                 '#808080',
	    grey:                 '#808080',
	    green:                '#008000',
	    greenyellow:          '#ADFF2F',
	    honeydew:             '#F0FFF0',
	    hotpink:              '#FF69B4',
	    indianred:            '#CD5C5C',
	    indigo:               '#4B0082',
	    ivory:                '#FFFFF0',
	    khaki:                '#F0E68C',
	    lavender:             '#E6E6FA',
	    lavenderblush:        '#FFF0F5',
	    lawngreen:            '#7CFC00',
	    lemonchiffon:         '#FFFACD',
	    lightblue:            '#ADD8E6',
	    lightcoral:           '#F08080',
	    lightcyan:            '#E0FFFF',
	    lightgoldenrodyellow: '#FAFAD2',
	    lightgray:            '#D3D3D3',
	    lightgrey:            '#D3D3D3',
	    lightgreen:           '#90EE90',
	    lightpink:            '#FFB6C1',
	    lightsalmon:          '#FFA07A',
	    lightseagreen:        '#20B2AA',
	    lightskyblue:         '#87CEFA',
	    lightslategray:       '#778899',
	    lightslategrey:       '#778899',
	    lightsteelblue:       '#B0C4DE',
	    lightyellow:          '#FFFFE0',
	    lime:                 '#00FF00',
	    limegreen:            '#32CD32',
	    linen:                '#FAF0E6',
	    magenta:              '#FF00FF',
	    maroon:               '#800000',
	    mediumaquamarine:     '#66CDAA',
	    mediumblue:           '#0000CD',
	    mediumorchid:         '#BA55D3',
	    mediumpurple:         '#9370DB',
	    mediumseagreen:       '#3CB371',
	    mediumslateblue:      '#7B68EE',
	    mediumspringgreen:    '#00FA9A',
	    mediumturquoise:      '#48D1CC',
	    mediumvioletred:      '#C71585',
	    midnightblue:         '#191970',
	    mintcream:            '#F5FFFA',
	    mistyrose:            '#FFE4E1',
	    moccasin:             '#FFE4B5',
	    navajowhite:          '#FFDEAD',
	    navy:                 '#000080',
	    oldlace:              '#FDF5E6',
	    olive:                '#808000',
	    olivedrab:            '#6B8E23',
	    orange:               '#FFA500',
	    orangered:            '#FF4500',
	    orchid:               '#DA70D6',
	    palegoldenrod:        '#EEE8AA',
	    palegreen:            '#98FB98',
	    paleturquoise:        '#AFEEEE',
	    palevioletred:        '#DB7093',
	    papayawhip:           '#FFEFD5',
	    peachpuff:            '#FFDAB9',
	    peru:                 '#CD853F',
	    pink:                 '#FFC0CB',
	    plum:                 '#DDA0DD',
	    powderblue:           '#B0E0E6',
	    purple:               '#800080',
	    rebeccapurple:        '#663399',
	    red:                  '#FF0000',
	    rosybrown:            '#BC8F8F',
	    royalblue:            '#4169E1',
	    saddlebrown:          '#8B4513',
	    salmon:               '#FA8072',
	    sandybrown:           '#F4A460',
	    seagreen:             '#2E8B57',
	    seashell:             '#FFF5EE',
	    sienna:               '#A0522D',
	    silver:               '#C0C0C0',
	    skyblue:              '#87CEEB',
	    slateblue:            '#6A5ACD',
	    slategray:            '#708090',
	    slategrey:            '#708090',
	    snow:                 '#FFFAFA',
	    springgreen:          '#00FF7F',
	    steelblue:            '#4682B4',
	    tan:                  '#D2B48C',
	    teal:                 '#008080',
	    thistle:              '#D8BFD8',
	    tomato:               '#FF6347',
	    turquoise:            '#40E0D0',
	    violet:               '#EE82EE',
	    wheat:                '#F5DEB3',
	    white:                '#FFFFFF',
	    whitesmoke:           '#F5F5F5',
	    yellow:               '#FFFF00',
	    yellowgreen:          '#9ACD32'
	  };

	  /**
	   * @private
	   * @param {Number} p
	   * @param {Number} q
	   * @param {Number} t
	   * @return {Number}
	   */
	  function hue2rgb(p, q, t) {
	    if (t < 0) {
	      t += 1;
	    }
	    if (t > 1) {
	      t -= 1;
	    }
	    if (t < 1 / 6) {
	      return p + (q - p) * 6 * t;
	    }
	    if (t < 1 / 2) {
	      return q;
	    }
	    if (t < 2 / 3) {
	      return p + (q - p) * (2 / 3 - t) * 6;
	    }
	    return p;
	  }

	  /**
	   * Returns new color object, when given a color in RGB format
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromRgb = function(color) {
	    return Color.fromSource(Color.sourceFromRgb(color));
	  };

	  /**
	   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)
	   * @return {Array} source
	   */
	  fabric.Color.sourceFromRgb = function(color) {
	    var match = color.match(Color.reRGBa);
	    if (match) {
	      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),
	          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),
	          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);

	      return [
	        parseInt(r, 10),
	        parseInt(g, 10),
	        parseInt(b, 10),
	        match[4] ? parseFloat(match[4]) : 1
	      ];
	    }
	  };

	  /**
	   * Returns new color object, when given a color in RGBA format
	   * @static
	   * @function
	   * @memberOf fabric.Color
	   * @param {String} color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromRgba = Color.fromRgb;

	  /**
	   * Returns new color object, when given a color in HSL format
	   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)
	   * @memberOf fabric.Color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHsl = function(color) {
	    return Color.fromSource(Color.sourceFromHsl(color));
	  };

	  /**
	   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.
	   * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)
	   * @return {Array} source
	   * @see http://http://www.w3.org/TR/css3-color/#hsl-color
	   */
	  fabric.Color.sourceFromHsl = function(color) {
	    var match = color.match(Color.reHSLa);
	    if (!match) {
	      return;
	    }

	    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,
	        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),
	        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),
	        r, g, b;

	    if (s === 0) {
	      r = g = b = l;
	    }
	    else {
	      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,
	          p = l * 2 - q;

	      r = hue2rgb(p, q, h + 1 / 3);
	      g = hue2rgb(p, q, h);
	      b = hue2rgb(p, q, h - 1 / 3);
	    }

	    return [
	      Math.round(r * 255),
	      Math.round(g * 255),
	      Math.round(b * 255),
	      match[4] ? parseFloat(match[4]) : 1
	    ];
	  };

	  /**
	   * Returns new color object, when given a color in HSLA format
	   * @static
	   * @function
	   * @memberOf fabric.Color
	   * @param {String} color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHsla = Color.fromHsl;

	  /**
	   * Returns new color object, when given a color in HEX format
	   * @static
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: FF5555
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHex = function(color) {
	    return Color.fromSource(Color.sourceFromHex(color));
	  };

	  /**
	   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format
	   * @static
	   * @memberOf fabric.Color
	   * @param {String} color ex: FF5555 or FF5544CC (RGBa)
	   * @return {Array} source
	   */
	  fabric.Color.sourceFromHex = function(color) {
	    if (color.match(Color.reHex)) {
	      var value = color.slice(color.indexOf('#') + 1),
	          isShortNotation = (value.length === 3 || value.length === 4),
	          isRGBa = (value.length === 8 || value.length === 4),
	          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),
	          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),
	          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),
	          a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';

	      return [
	        parseInt(r, 16),
	        parseInt(g, 16),
	        parseInt(b, 16),
	        parseFloat((parseInt(a, 16) / 255).toFixed(2))
	      ];
	    }
	  };

	  /**
	   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
	   * @static
	   * @memberOf fabric.Color
	   * @param {Array} source
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromSource = function(source) {
	    var oColor = new Color();
	    oColor.setSource(source);
	    return oColor;
	  };

	})( exports );


	(function() {

	  /* _FROM_SVG_START_ */
	  function getColorStop(el, multiplier) {
	    var style = el.getAttribute('style'),
	        offset = el.getAttribute('offset') || 0,
	        color, colorAlpha, opacity, i;

	    // convert percents to absolute values
	    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
	    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
	    if (style) {
	      var keyValuePairs = style.split(/\s*;\s*/);

	      if (keyValuePairs[keyValuePairs.length - 1] === '') {
	        keyValuePairs.pop();
	      }

	      for (i = keyValuePairs.length; i--; ) {

	        var split = keyValuePairs[i].split(/\s*:\s*/),
	            key = split[0].trim(),
	            value = split[1].trim();

	        if (key === 'stop-color') {
	          color = value;
	        }
	        else if (key === 'stop-opacity') {
	          opacity = value;
	        }
	      }
	    }

	    if (!color) {
	      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';
	    }
	    if (!opacity) {
	      opacity = el.getAttribute('stop-opacity');
	    }

	    color = new fabric.Color(color);
	    colorAlpha = color.getAlpha();
	    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
	    opacity *= colorAlpha * multiplier;

	    return {
	      offset: offset,
	      color: color.toRgb(),
	      opacity: opacity
	    };
	  }

	  function getLinearCoords(el) {
	    return {
	      x1: el.getAttribute('x1') || 0,
	      y1: el.getAttribute('y1') || 0,
	      x2: el.getAttribute('x2') || '100%',
	      y2: el.getAttribute('y2') || 0
	    };
	  }

	  function getRadialCoords(el) {
	    return {
	      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',
	      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',
	      r1: 0,
	      x2: el.getAttribute('cx') || '50%',
	      y2: el.getAttribute('cy') || '50%',
	      r2: el.getAttribute('r') || '50%'
	    };
	  }
	  /* _FROM_SVG_END_ */

	  var clone = fabric.util.object.clone;

	  /**
	   * Gradient class
	   * @class fabric.Gradient
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}
	   * @see {@link fabric.Gradient#initialize} for constructor definition
	   */
	  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {

	    /**
	     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
	     * @type Number
	     * @default 0
	     */
	    offsetX: 0,

	    /**
	     * Vertical offset for aligning gradients coming from SVG when outside pathgroups
	     * @type Number
	     * @default 0
	     */
	    offsetY: 0,

	    /**
	     * A transform matrix to apply to the gradient before painting.
	     * Imported from svg gradients, is not applied with the current transform in the center.
	     * Before this transform is applied, the origin point is at the top left corner of the object
	     * plus the addition of offsetY and offsetX.
	     * @type Array[Number]
	     * @default null
	     */
	    gradientTransform: null,

	    /**
	     * coordinates units for coords.
	     * If `pixels`, the number of coords are in the same unit of width / height.
	     * If set as `percentage` the coords are still a number, but 1 means 100% of width
	     * for the X and 100% of the height for the y. It can be bigger than 1 and negative.
	     * @type String pixels || percentage
	     * @default 'pixels'
	     */
	    gradientUnits: 'pixels',

	    /**
	     * Gradient type
	     * @type String linear || radial
	     * @default 'pixels'
	     */
	    type: 'linear',

	    /**
	     * Constructor
	     * @param {Object} options Options object with type, coords, gradientUnits and colorStops
	     * @param {Object} [options.type] gradient type linear or radial
	     * @param {Object} [options.gradientUnits] gradient units
	     * @param {Object} [options.offsetX] SVG import compatibility
	     * @param {Object} [options.offsetY] SVG import compatibility
	     * @param {Array[Object]} options.colorStops contains the colorstops.
	     * @param {Object} options.coords contains the coords of the gradient
	     * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial
	     * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial
	     * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial
	     * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial
	     * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle
	     * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle
	     * @return {fabric.Gradient} thisArg
	     */
	    initialize: function(options) {
	      options || (options = { });
	      options.coords || (options.coords = { });

	      var coords, _this = this;

	      // sets everything, then coords and colorstops get sets again
	      Object.keys(options).forEach(function(option) {
	        _this[option] = options[option];
	      });

	      if (this.id) {
	        this.id += '_' + fabric.Object.__uid++;
	      }
	      else {
	        this.id = fabric.Object.__uid++;
	      }

	      coords = {
	        x1: options.coords.x1 || 0,
	        y1: options.coords.y1 || 0,
	        x2: options.coords.x2 || 0,
	        y2: options.coords.y2 || 0
	      };

	      if (this.type === 'radial') {
	        coords.r1 = options.coords.r1 || 0;
	        coords.r2 = options.coords.r2 || 0;
	      }

	      this.coords = coords;
	      this.colorStops = options.colorStops.slice();
	    },

	    /**
	     * Adds another colorStop
	     * @param {Object} colorStop Object with offset and color
	     * @return {fabric.Gradient} thisArg
	     */
	    addColorStop: function(colorStops) {
	      for (var position in colorStops) {
	        var color = new fabric.Color(colorStops[position]);
	        this.colorStops.push({
	          offset: parseFloat(position),
	          color: color.toRgb(),
	          opacity: color.getAlpha()
	        });
	      }
	      return this;
	    },

	    /**
	     * Returns object representation of a gradient
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object}
	     */
	    toObject: function(propertiesToInclude) {
	      var object = {
	        type: this.type,
	        coords: this.coords,
	        colorStops: this.colorStops,
	        offsetX: this.offsetX,
	        offsetY: this.offsetY,
	        gradientUnits: this.gradientUnits,
	        gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
	      };
	      fabric.util.populateWithProperties(this, object, propertiesToInclude);

	      return object;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an gradient
	     * @param {Object} object Object to create a gradient for
	     * @return {String} SVG representation of an gradient (linear/radial)
	     */
	    toSVG: function(object, options) {
	      var coords = clone(this.coords, true), i, len, options = options || {},
	          markup, commonAttributes, colorStops = clone(this.colorStops, true),
	          needsSwap = coords.r1 > coords.r2,
	          transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),
	          offsetX = -this.offsetX, offsetY = -this.offsetY,
	          withViewport = !!options.additionalTransform,
	          gradientUnits = this.gradientUnits === 'pixels' ? 'userSpaceOnUse' : 'objectBoundingBox';
	      // colorStops must be sorted ascending
	      colorStops.sort(function(a, b) {
	        return a.offset - b.offset;
	      });

	      if (gradientUnits === 'objectBoundingBox') {
	        offsetX /= object.width;
	        offsetY /= object.height;
	      }
	      else {
	        offsetX += object.width / 2;
	        offsetY += object.height / 2;
	      }
	      if (object.type === 'path') {
	        offsetX -= object.pathOffset.x;
	        offsetY -= object.pathOffset.y;
	      }


	      transform[4] -= offsetX;
	      transform[5] -= offsetY;

	      commonAttributes = 'id="SVGID_' + this.id +
	                     '" gradientUnits="' + gradientUnits + '"';
	      commonAttributes += ' gradientTransform="' + (withViewport ?
	        options.additionalTransform + ' ' : '') + fabric.util.matrixToSVG(transform) + '" ';

	      if (this.type === 'linear') {
	        markup = [
	          '<linearGradient ',
	          commonAttributes,
	          ' x1="', coords.x1,
	          '" y1="', coords.y1,
	          '" x2="', coords.x2,
	          '" y2="', coords.y2,
	          '">\n'
	        ];
	      }
	      else if (this.type === 'radial') {
	        // svg radial gradient has just 1 radius. the biggest.
	        markup = [
	          '<radialGradient ',
	          commonAttributes,
	          ' cx="', needsSwap ? coords.x1 : coords.x2,
	          '" cy="', needsSwap ? coords.y1 : coords.y2,
	          '" r="', needsSwap ? coords.r1 : coords.r2,
	          '" fx="', needsSwap ? coords.x2 : coords.x1,
	          '" fy="', needsSwap ? coords.y2 : coords.y1,
	          '">\n'
	        ];
	      }

	      if (this.type === 'radial') {
	        if (needsSwap) {
	          // svg goes from internal to external radius. if radius are inverted, swap color stops.
	          colorStops = colorStops.concat();
	          colorStops.reverse();
	          for (i = 0, len = colorStops.length; i < len; i++) {
	            colorStops[i].offset = 1 - colorStops[i].offset;
	          }
	        }
	        var minRadius = Math.min(coords.r1, coords.r2);
	        if (minRadius > 0) {
	          // i have to shift all colorStops and add new one in 0.
	          var maxRadius = Math.max(coords.r1, coords.r2),
	              percentageShift = minRadius / maxRadius;
	          for (i = 0, len = colorStops.length; i < len; i++) {
	            colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);
	          }
	        }
	      }

	      for (i = 0, len = colorStops.length; i < len; i++) {
	        var colorStop = colorStops[i];
	        markup.push(
	          '<stop ',
	          'offset="', (colorStop.offset * 100) + '%',
	          '" style="stop-color:', colorStop.color,
	          (typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';'),
	          '"/>\n'
	        );
	      }

	      markup.push((this.type === 'linear' ? '</linearGradient>\n' : '</radialGradient>\n'));

	      return markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns an instance of CanvasGradient
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @return {CanvasGradient}
	     */
	    toLive: function(ctx) {
	      var gradient, coords = fabric.util.object.clone(this.coords), i, len;

	      if (!this.type) {
	        return;
	      }

	      if (this.type === 'linear') {
	        gradient = ctx.createLinearGradient(
	          coords.x1, coords.y1, coords.x2, coords.y2);
	      }
	      else if (this.type === 'radial') {
	        gradient = ctx.createRadialGradient(
	          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);
	      }

	      for (i = 0, len = this.colorStops.length; i < len; i++) {
	        var color = this.colorStops[i].color,
	            opacity = this.colorStops[i].opacity,
	            offset = this.colorStops[i].offset;

	        if (typeof opacity !== 'undefined') {
	          color = new fabric.Color(color).setAlpha(opacity).toRgba();
	        }
	        gradient.addColorStop(offset, color);
	      }

	      return gradient;
	    }
	  });

	  fabric.util.object.extend(fabric.Gradient, {

	    /* _FROM_SVG_START_ */
	    /**
	     * Returns {@link fabric.Gradient} instance from an SVG element
	     * @static
	     * @memberOf fabric.Gradient
	     * @param {SVGGradientElement} el SVG gradient element
	     * @param {fabric.Object} instance
	     * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.
	     * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly graidents
	     * that uses gradientUnits as 'userSpaceOnUse' and percentages.
	     * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg
	     * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg
	     * @param {Object.number} width width part of the svg tag if viewBox is not specified
	     * @param {Object.number} height height part of the svg tag if viewBox is not specified
	     * @return {fabric.Gradient} Gradient instance
	     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
	     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
	     */
	    fromElement: function(el, instance, opacityAttr, svgOptions) {
	      /**
	       *  @example:
	       *
	       *  <linearGradient id="linearGrad1">
	       *    <stop offset="0%" stop-color="white"/>
	       *    <stop offset="100%" stop-color="black"/>
	       *  </linearGradient>
	       *
	       *  OR
	       *
	       *  <linearGradient id="linearGrad2">
	       *    <stop offset="0" style="stop-color:rgb(255,255,255)"/>
	       *    <stop offset="1" style="stop-color:rgb(0,0,0)"/>
	       *  </linearGradient>
	       *
	       *  OR
	       *
	       *  <radialGradient id="radialGrad1">
	       *    <stop offset="0%" stop-color="white" stop-opacity="1" />
	       *    <stop offset="50%" stop-color="black" stop-opacity="0.5" />
	       *    <stop offset="100%" stop-color="white" stop-opacity="1" />
	       *  </radialGradient>
	       *
	       *  OR
	       *
	       *  <radialGradient id="radialGrad2">
	       *    <stop offset="0" stop-color="rgb(255,255,255)" />
	       *    <stop offset="0.5" stop-color="rgb(0,0,0)" />
	       *    <stop offset="1" stop-color="rgb(255,255,255)" />
	       *  </radialGradient>
	       *
	       */

	      var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);
	      multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;
	      if (isNaN(multiplier)) {
	        multiplier = 1;
	      }

	      var colorStopEls = el.getElementsByTagName('stop'),
	          type,
	          gradientUnits = el.getAttribute('gradientUnits') === 'userSpaceOnUse' ?
	            'pixels' : 'percentage',
	          gradientTransform = el.getAttribute('gradientTransform') || '',
	          colorStops = [],
	          coords, i, offsetX = 0, offsetY = 0,
	          transformMatrix;
	      if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {
	        type = 'linear';
	        coords = getLinearCoords(el);
	      }
	      else {
	        type = 'radial';
	        coords = getRadialCoords(el);
	      }

	      for (i = colorStopEls.length; i--; ) {
	        colorStops.push(getColorStop(colorStopEls[i], multiplier));
	      }

	      transformMatrix = fabric.parseTransformAttribute(gradientTransform);

	      __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);

	      if (gradientUnits === 'pixels') {
	        offsetX = -instance.left;
	        offsetY = -instance.top;
	      }

	      var gradient = new fabric.Gradient({
	        id: el.getAttribute('id'),
	        type: type,
	        coords: coords,
	        colorStops: colorStops,
	        gradientUnits: gradientUnits,
	        gradientTransform: transformMatrix,
	        offsetX: offsetX,
	        offsetY: offsetY,
	      });

	      return gradient;
	    },
	    /* _FROM_SVG_END_ */

	    /**
	     * Returns {@link fabric.Gradient} instance from its object representation
	     * this function is uniquely used by Object.setGradient and is deprecated with it.
	     * @static
	     * @deprecated since 3.4.0
	     * @memberOf fabric.Gradient
	     * @param {Object} obj
	     * @param {Object} [options] Options object
	     */
	    forObject: function(obj, options) {
	      options || (options = { });
	      __convertPercentUnitsToValues(obj, options.coords, options.gradientUnits, {
	        // those values are to avoid errors. this function is uniquely used by
	        viewBoxWidth: 100,
	        viewBoxHeight: 100,
	      });
	      return new fabric.Gradient(options);
	    }
	  });

	  /**
	   * @private
	   */
	  function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {
	    var propValue, finalValue;
	    Object.keys(options).forEach(function(prop) {
	      propValue = options[prop];
	      if (propValue === 'Infinity') {
	        finalValue = 1;
	      }
	      else if (propValue === '-Infinity') {
	        finalValue = 0;
	      }
	      else {
	        finalValue = parseFloat(options[prop], 10);
	        if (typeof propValue === 'string' && /^(\d+\.\d+)%|(\d+)%$/.test(propValue)) {
	          finalValue *= 0.01;
	          if (gradientUnits === 'pixels') {
	            // then we need to fix those percentages here in svg parsing
	            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {
	              finalValue *= svgOptions.viewBoxWidth || svgOptions.width;
	            }
	            if (prop === 'y1' || prop === 'y2') {
	              finalValue *= svgOptions.viewBoxHeight || svgOptions.height;
	            }
	          }
	        }
	      }
	      options[prop] = finalValue;
	    });
	  }
	})();


	(function() {

	  var toFixed = fabric.util.toFixed;

	  /**
	   * Pattern class
	   * @class fabric.Pattern
	   * @see {@link http://fabricjs.com/patterns|Pattern demo}
	   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}
	   * @see {@link fabric.Pattern#initialize} for constructor definition
	   */


	  fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {

	    /**
	     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
	     * @type String
	     * @default
	     */
	    repeat: 'repeat',

	    /**
	     * Pattern horizontal offset from object's left/top corner
	     * @type Number
	     * @default
	     */
	    offsetX: 0,

	    /**
	     * Pattern vertical offset from object's left/top corner
	     * @type Number
	     * @default
	     */
	    offsetY: 0,

	    /**
	     * crossOrigin value (one of "", "anonymous", "use-credentials")
	     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
	     * @type String
	     * @default
	     */
	    crossOrigin: '',

	    /**
	     * transform matrix to change the pattern, imported from svgs.
	     * @type Array
	     * @default
	     */
	    patternTransform: null,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @param {Function} [callback] function to invoke after callback init.
	     * @return {fabric.Pattern} thisArg
	     */
	    initialize: function(options, callback) {
	      options || (options = { });

	      this.id = fabric.Object.__uid++;
	      this.setOptions(options);
	      if (!options.source || (options.source && typeof options.source !== 'string')) {
	        callback && callback(this);
	        return;
	      }
	      // function string
	      if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {
	        this.source = new Function(fabric.util.getFunctionBody(options.source));
	        callback && callback(this);
	      }
	      else {
	        // img src string
	        var _this = this;
	        this.source = fabric.util.createImage();
	        fabric.util.loadImage(options.source, function(img) {
	          _this.source = img;
	          callback && callback(_this);
	        }, null, this.crossOrigin);
	      }
	    },

	    /**
	     * Returns object representation of a pattern
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of a pattern instance
	     */
	    toObject: function(propertiesToInclude) {
	      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
	          source, object;

	      // callback
	      if (typeof this.source === 'function') {
	        source = String(this.source);
	      }
	      // <img> element
	      else if (typeof this.source.src === 'string') {
	        source = this.source.src;
	      }
	      // <canvas> element
	      else if (typeof this.source === 'object' && this.source.toDataURL) {
	        source = this.source.toDataURL();
	      }

	      object = {
	        type: 'pattern',
	        source: source,
	        repeat: this.repeat,
	        crossOrigin: this.crossOrigin,
	        offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),
	        offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),
	        patternTransform: this.patternTransform ? this.patternTransform.concat() : null
	      };
	      fabric.util.populateWithProperties(this, object, propertiesToInclude);

	      return object;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of a pattern
	     * @param {fabric.Object} object
	     * @return {String} SVG representation of a pattern
	     */
	    toSVG: function(object) {
	      var patternSource = typeof this.source === 'function' ? this.source() : this.source,
	          patternWidth = patternSource.width / object.width,
	          patternHeight = patternSource.height / object.height,
	          patternOffsetX = this.offsetX / object.width,
	          patternOffsetY = this.offsetY / object.height,
	          patternImgSrc = '';
	      if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {
	        patternHeight = 1;
	        if (patternOffsetY) {
	          patternHeight += Math.abs(patternOffsetY);
	        }
	      }
	      if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {
	        patternWidth = 1;
	        if (patternOffsetX) {
	          patternWidth += Math.abs(patternOffsetX);
	        }

	      }
	      if (patternSource.src) {
	        patternImgSrc = patternSource.src;
	      }
	      else if (patternSource.toDataURL) {
	        patternImgSrc = patternSource.toDataURL();
	      }

	      return '<pattern id="SVGID_' + this.id +
	                    '" x="' + patternOffsetX +
	                    '" y="' + patternOffsetY +
	                    '" width="' + patternWidth +
	                    '" height="' + patternHeight + '">\n' +
	               '<image x="0" y="0"' +
	                      ' width="' + patternSource.width +
	                      '" height="' + patternSource.height +
	                      '" xlink:href="' + patternImgSrc +
	               '"></image>\n' +
	             '</pattern>\n';
	    },
	    /* _TO_SVG_END_ */

	    setOptions: function(options) {
	      for (var prop in options) {
	        this[prop] = options[prop];
	      }
	    },

	    /**
	     * Returns an instance of CanvasPattern
	     * @param {CanvasRenderingContext2D} ctx Context to create pattern
	     * @return {CanvasPattern}
	     */
	    toLive: function(ctx) {
	      var source = typeof this.source === 'function' ? this.source() : this.source;

	      // if the image failed to load, return, and allow rest to continue loading
	      if (!source) {
	        return '';
	      }

	      // if an image
	      if (typeof source.src !== 'undefined') {
	        if (!source.complete) {
	          return '';
	        }
	        if (source.naturalWidth === 0 || source.naturalHeight === 0) {
	          return '';
	        }
	      }
	      return ctx.createPattern(source, this.repeat);
	    }
	  });
	})();


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      toFixed = fabric.util.toFixed;

	  if (fabric.Shadow) {
	    fabric.warn('fabric.Shadow is already defined.');
	    return;
	  }

	  /**
	   * Shadow class
	   * @class fabric.Shadow
	   * @see {@link http://fabricjs.com/shadows|Shadow demo}
	   * @see {@link fabric.Shadow#initialize} for constructor definition
	   */
	  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {

	    /**
	     * Shadow color
	     * @type String
	     * @default
	     */
	    color: 'rgb(0,0,0)',

	    /**
	     * Shadow blur
	     * @type Number
	     */
	    blur: 0,

	    /**
	     * Shadow horizontal offset
	     * @type Number
	     * @default
	     */
	    offsetX: 0,

	    /**
	     * Shadow vertical offset
	     * @type Number
	     * @default
	     */
	    offsetY: 0,

	    /**
	     * Whether the shadow should affect stroke operations
	     * @type Boolean
	     * @default
	     */
	    affectStroke: false,

	    /**
	     * Indicates whether toObject should include default values
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues: true,

	    /**
	     * When `false`, the shadow will scale with the object.
	     * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.
	     * default to false
	     * @type Boolean
	     * @default
	     */
	    nonScaling: false,

	    /**
	     * Constructor
	     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px")
	     * @return {fabric.Shadow} thisArg
	     */
	    initialize: function(options) {

	      if (typeof options === 'string') {
	        options = this._parseShadow(options);
	      }

	      for (var prop in options) {
	        this[prop] = options[prop];
	      }

	      this.id = fabric.Object.__uid++;
	    },

	    /**
	     * @private
	     * @param {String} shadow Shadow value to parse
	     * @return {Object} Shadow object with color, offsetX, offsetY and blur
	     */
	    _parseShadow: function(shadow) {
	      var shadowStr = shadow.trim(),
	          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],
	          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';

	      return {
	        color: color.trim(),
	        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,
	        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,
	        blur: parseInt(offsetsAndBlur[3], 10) || 0
	      };
	    },

	    /**
	     * Returns a string representation of an instance
	     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
	     * @return {String} Returns CSS3 text-shadow declaration
	     */
	    toString: function() {
	      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of a shadow
	     * @param {fabric.Object} object
	     * @return {String} SVG representation of a shadow
	     */
	    toSVG: function(object) {
	      var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
	          offset = fabric.util.rotateVector(
	            { x: this.offsetX, y: this.offsetY },
	            fabric.util.degreesToRadians(-object.angle)),
	          BLUR_BOX = 20, color = new fabric.Color(this.color);

	      if (object.width && object.height) {
	        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion
	        // we add some extra space to filter box to contain the blur ( 20 )
	        fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
	        fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
	      }
	      if (object.flipX) {
	        offset.x *= -1;
	      }
	      if (object.flipY) {
	        offset.y *= -1;
	      }

	      return (
	        '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" ' +
	          'x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" ' + '>\n' +
	          '\t<feGaussianBlur in="SourceAlpha" stdDeviation="' +
	            toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n' +
	          '\t<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) +
	          '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n' +
	          '\t<feFlood flood-color="' + color.toRgb() + '" flood-opacity="' + color.getAlpha() + '"/>\n' +
	          '\t<feComposite in2="oBlur" operator="in" />\n' +
	          '\t<feMerge>\n' +
	            '\t\t<feMergeNode></feMergeNode>\n' +
	            '\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n' +
	          '\t</feMerge>\n' +
	        '</filter>\n');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns object representation of a shadow
	     * @return {Object} Object representation of a shadow instance
	     */
	    toObject: function() {
	      if (this.includeDefaultValues) {
	        return {
	          color: this.color,
	          blur: this.blur,
	          offsetX: this.offsetX,
	          offsetY: this.offsetY,
	          affectStroke: this.affectStroke,
	          nonScaling: this.nonScaling
	        };
	      }
	      var obj = { }, proto = fabric.Shadow.prototype;

	      ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke', 'nonScaling'].forEach(function(prop) {
	        if (this[prop] !== proto[prop]) {
	          obj[prop] = this[prop];
	        }
	      }, this);

	      return obj;
	    }
	  });

	  /**
	   * Regex matching shadow offsetX, offsetY and blur (ex: "2px 2px 10px rgba(0,0,0,0.2)", "rgb(0,255,0) 2px 2px")
	   * @static
	   * @field
	   * @memberOf fabric.Shadow
	   */
	  // eslint-disable-next-line max-len
	  fabric.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/;

	})( exports );


	(function () {

	  if (fabric.StaticCanvas) {
	    fabric.warn('fabric.StaticCanvas is already defined.');
	    return;
	  }

	  // aliases for faster resolution
	  var extend = fabric.util.object.extend,
	      getElementOffset = fabric.util.getElementOffset,
	      removeFromArray = fabric.util.removeFromArray,
	      toFixed = fabric.util.toFixed,
	      transformPoint = fabric.util.transformPoint,
	      invertTransform = fabric.util.invertTransform,
	      getNodeCanvas = fabric.util.getNodeCanvas,
	      createCanvasElement = fabric.util.createCanvasElement,

	      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');

	  /**
	   * Static canvas class
	   * @class fabric.StaticCanvas
	   * @mixes fabric.Collection
	   * @mixes fabric.Observable
	   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}
	   * @see {@link fabric.StaticCanvas#initialize} for constructor definition
	   * @fires before:render
	   * @fires after:render
	   * @fires canvas:cleared
	   * @fires object:added
	   * @fires object:removed
	   */
	  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {

	    /**
	     * Constructor
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(el, options) {
	      options || (options = { });
	      this.renderAndResetBound = this.renderAndReset.bind(this);
	      this.requestRenderAllBound = this.requestRenderAll.bind(this);
	      this._initStatic(el, options);
	    },

	    /**
	     * Background color of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
	     * @type {(String|fabric.Pattern)}
	     * @default
	     */
	    backgroundColor: '',

	    /**
	     * Background image of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.
	     * <b>Backwards incompatibility note:</b> The "backgroundImageOpacity"
	     * and "backgroundImageStretch" properties are deprecated since 1.3.9.
	     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.
	     * since 2.4.0 image caching is active, please when putting an image as background, add to the
	     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
	     * vale. As an alternative you can disable image objectCaching
	     * @type fabric.Image
	     * @default
	     */
	    backgroundImage: null,

	    /**
	     * Overlay color of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
	     * @since 1.3.9
	     * @type {(String|fabric.Pattern)}
	     * @default
	     */
	    overlayColor: '',

	    /**
	     * Overlay image of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.
	     * <b>Backwards incompatibility note:</b> The "overlayImageLeft"
	     * and "overlayImageTop" properties are deprecated since 1.3.9.
	     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.
	     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the
	     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
	     * vale. As an alternative you can disable image objectCaching
	     * @type fabric.Image
	     * @default
	     */
	    overlayImage: null,

	    /**
	     * Indicates whether toObject/toDatalessObject should include default values
	     * if set to false, takes precedence over the object value.
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues: true,

	    /**
	     * Indicates whether objects' state should be saved
	     * @type Boolean
	     * @default
	     */
	    stateful: false,

	    /**
	     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},
	     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.
	     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once
	     * since the renders are quequed and executed one per frame.
	     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )
	     * Left default to true to do not break documentation and old app, fiddles.
	     * @type Boolean
	     * @default
	     */
	    renderOnAddRemove: true,

	    /**
	     * Function that determines clipping of entire canvas area
	     * Being passed context as first argument.
	     * If you are using code minification, ctx argument can be minified/manglied you should use
	     * as a workaround `var ctx = arguments[0];` in the function;
	     * See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}
	     * @deprecated since 2.0.0
	     * @type Function
	     * @default
	     */
	    clipTo: null,

	    /**
	     * Indicates whether object controls (borders/controls) are rendered above overlay image
	     * @type Boolean
	     * @default
	     */
	    controlsAboveOverlay: false,

	    /**
	     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
	     * @type Boolean
	     * @default
	     */
	    allowTouchScrolling: false,

	    /**
	     * Indicates whether this canvas will use image smoothing, this is on by default in browsers
	     * @type Boolean
	     * @default
	     */
	    imageSmoothingEnabled: true,

	    /**
	     * The transformation (in the format of Canvas transform) which focuses the viewport
	     * @type Array
	     * @default
	     */
	    viewportTransform: fabric.iMatrix.concat(),

	    /**
	     * if set to false background image is not affected by viewport transform
	     * @since 1.6.3
	     * @type Boolean
	     * @default
	     */
	    backgroundVpt: true,

	    /**
	     * if set to false overlya image is not affected by viewport transform
	     * @since 1.6.3
	     * @type Boolean
	     * @default
	     */
	    overlayVpt: true,

	    /**
	     * Callback; invoked right before object is about to be scaled/rotated
	     * @deprecated since 2.3.0
	     * Use before:transform event
	     */
	    onBeforeScaleRotate: function () {
	      /* NOOP */
	    },

	    /**
	     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
	     * @type Boolean
	     * @default
	     */
	    enableRetinaScaling: true,

	    /**
	     * Describe canvas element extension over design
	     * properties are tl,tr,bl,br.
	     * if canvas is not zoomed/panned those points are the four corner of canvas
	     * if canvas is viewportTransformed you those points indicate the extension
	     * of canvas element in plain untrasformed coordinates
	     * The coordinates get updated with @method calcViewportBoundaries.
	     * @memberOf fabric.StaticCanvas.prototype
	     */
	    vptCoords: { },

	    /**
	     * Based on vptCoords and object.aCoords, skip rendering of objects that
	     * are not included in current viewport.
	     * May greatly help in applications with crowded canvas and use of zoom/pan
	     * If One of the corner of the bounding box of the object is on the canvas
	     * the objects get rendered.
	     * @memberOf fabric.StaticCanvas.prototype
	     * @type Boolean
	     * @default
	     */
	    skipOffscreen: true,

	    /**
	     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
	     * the clipPath object gets used when the canvas has rendered, and the context is placed in the
	     * top left corner of the canvas.
	     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true
	     * @type fabric.Object
	     */
	    clipPath: undefined,

	    /**
	     * @private
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     */
	    _initStatic: function(el, options) {
	      var cb = this.requestRenderAllBound;
	      this._objects = [];
	      this._createLowerCanvas(el);
	      this._initOptions(options);
	      this._setImageSmoothing();
	      // only initialize retina scaling once
	      if (!this.interactive) {
	        this._initRetinaScaling();
	      }

	      if (options.overlayImage) {
	        this.setOverlayImage(options.overlayImage, cb);
	      }
	      if (options.backgroundImage) {
	        this.setBackgroundImage(options.backgroundImage, cb);
	      }
	      if (options.backgroundColor) {
	        this.setBackgroundColor(options.backgroundColor, cb);
	      }
	      if (options.overlayColor) {
	        this.setOverlayColor(options.overlayColor, cb);
	      }
	      this.calcOffset();
	    },

	    /**
	     * @private
	     */
	    _isRetinaScaling: function() {
	      return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);
	    },

	    /**
	     * @private
	     * @return {Number} retinaScaling if applied, otherwise 1;
	     */
	    getRetinaScaling: function() {
	      return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;
	    },

	    /**
	     * @private
	     */
	    _initRetinaScaling: function() {
	      if (!this._isRetinaScaling()) {
	        return;
	      }
	      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);
	      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);

	      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);
	    },

	    /**
	     * Calculates canvas element offset relative to the document
	     * This method is also attached as "resize" event handler of window
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    calcOffset: function () {
	      this._offset = getElementOffset(this.lowerCanvasEl);
	      return this;
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
	     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
	     * @param {Function} callback callback to invoke when image is loaded and set as an overlay
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
	     * @example <caption>Normal overlayImage with left/top = 0</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   // Needed to position overlayImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>overlayImage with different properties</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
	     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {
	     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
	     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
	     * });
	     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   width: canvas.width,
	     *   height: canvas.height,
	     *   // Needed to position overlayImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>overlayImage loaded from cross-origin</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top',
	     *   crossOrigin: 'anonymous'
	     * });
	     */
	    setOverlayImage: function (image, callback, options) {
	      return this.__setBgOverlayImage('overlayImage', image, callback, options);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
	     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
	     * @param {Function} callback Callback to invoke when image is loaded and set as background
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}
	     * @example <caption>Normal backgroundImage with left/top = 0</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   // Needed to position backgroundImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>backgroundImage with different properties</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
	     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {
	     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
	     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
	     * });
	     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   width: canvas.width,
	     *   height: canvas.height,
	     *   // Needed to position backgroundImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>backgroundImage loaded from cross-origin</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top',
	     *   crossOrigin: 'anonymous'
	     * });
	     */
	    // TODO: fix stretched examples
	    setBackgroundImage: function (image, callback, options) {
	      return this.__setBgOverlayImage('backgroundImage', image, callback, options);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas
	     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to
	     * @param {Function} callback Callback to invoke when foreground color is set
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
	     * @example <caption>Normal overlayColor - color value</caption>
	     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as overlayColor</caption>
	     * canvas.setOverlayColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
	     * }, canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
	     * canvas.setOverlayColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
	     *   repeat: 'repeat',
	     *   offsetX: 200,
	     *   offsetY: 100
	     * }, canvas.renderAll.bind(canvas));
	     */
	    setOverlayColor: function(overlayColor, callback) {
	      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
	     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
	     * @param {Function} callback Callback to invoke when background color is set
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
	     * @example <caption>Normal backgroundColor - color value</caption>
	     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as backgroundColor</caption>
	     * canvas.setBackgroundColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
	     * }, canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
	     * canvas.setBackgroundColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
	     *   repeat: 'repeat',
	     *   offsetX: 200,
	     *   offsetY: 100
	     * }, canvas.renderAll.bind(canvas));
	     */
	    setBackgroundColor: function(backgroundColor, callback) {
	      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);
	    },

	    /**
	     * @private
	     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}
	     */
	    _setImageSmoothing: function() {
	      var ctx = this.getContext();

	      ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled
	        || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
	      ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;
	    },

	    /**
	     * @private
	     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
	     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
	     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
	     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
	     */
	    __setBgOverlayImage: function(property, image, callback, options) {
	      if (typeof image === 'string') {
	        fabric.util.loadImage(image, function(img) {
	          if (img) {
	            var instance = new fabric.Image(img, options);
	            this[property] = instance;
	            instance.canvas = this;
	          }
	          callback && callback(img);
	        }, this, options && options.crossOrigin);
	      }
	      else {
	        options && image.setOptions(options);
	        this[property] = image;
	        image && (image.canvas = this);
	        callback && callback(image);
	      }

	      return this;
	    },

	    /**
	     * @private
	     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
	     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
	     * @param {(Object|String|null)} color Object with pattern information, color value or null
	     * @param {Function} [callback] Callback is invoked when color is set
	     */
	    __setBgOverlayColor: function(property, color, callback) {
	      this[property] = color;
	      this._initGradient(color, property);
	      this._initPattern(color, property, callback);
	      return this;
	    },

	    /**
	     * @private
	     */
	    _createCanvasElement: function() {
	      var element = createCanvasElement();
	      if (!element) {
	        throw CANVAS_INIT_ERROR;
	      }
	      if (!element.style) {
	        element.style = { };
	      }
	      if (typeof element.getContext === 'undefined') {
	        throw CANVAS_INIT_ERROR;
	      }
	      return element;
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initOptions: function (options) {
	      var lowerCanvasEl = this.lowerCanvasEl;
	      this._setOptions(options);

	      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;
	      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;

	      if (!this.lowerCanvasEl.style) {
	        return;
	      }

	      lowerCanvasEl.width = this.width;
	      lowerCanvasEl.height = this.height;

	      lowerCanvasEl.style.width = this.width + 'px';
	      lowerCanvasEl.style.height = this.height + 'px';

	      this.viewportTransform = this.viewportTransform.slice();
	    },

	    /**
	     * Creates a bottom canvas
	     * @private
	     * @param {HTMLElement} [canvasEl]
	     */
	    _createLowerCanvas: function (canvasEl) {
	      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node
	      if (canvasEl && canvasEl.getContext) {
	        this.lowerCanvasEl = canvasEl;
	      }
	      else {
	        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
	      }

	      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');

	      if (this.interactive) {
	        this._applyCanvasStyle(this.lowerCanvasEl);
	      }

	      this.contextContainer = this.lowerCanvasEl.getContext('2d');
	    },

	    /**
	     * Returns canvas width (in px)
	     * @return {Number}
	     */
	    getWidth: function () {
	      return this.width;
	    },

	    /**
	     * Returns canvas height (in px)
	     * @return {Number}
	     */
	    getHeight: function () {
	      return this.height;
	    },

	    /**
	     * Sets width of this canvas instance
	     * @param {Number|String} value                         Value to set width to
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setWidth: function (value, options) {
	      return this.setDimensions({ width: value }, options);
	    },

	    /**
	     * Sets height of this canvas instance
	     * @param {Number|String} value                         Value to set height to
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setHeight: function (value, options) {
	      return this.setDimensions({ height: value }, options);
	    },

	    /**
	     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
	     * @param {Object}        dimensions                    Object with width/height properties
	     * @param {Number|String} [dimensions.width]            Width of canvas element
	     * @param {Number|String} [dimensions.height]           Height of canvas element
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    setDimensions: function (dimensions, options) {
	      var cssValue;

	      options = options || {};

	      for (var prop in dimensions) {
	        cssValue = dimensions[prop];

	        if (!options.cssOnly) {
	          this._setBackstoreDimension(prop, dimensions[prop]);
	          cssValue += 'px';
	          this.hasLostContext = true;
	        }

	        if (!options.backstoreOnly) {
	          this._setCssDimension(prop, cssValue);
	        }
	      }
	      if (this._isCurrentlyDrawing) {
	        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();
	      }
	      this._initRetinaScaling();
	      this._setImageSmoothing();
	      this.calcOffset();

	      if (!options.cssOnly) {
	        this.requestRenderAll();
	      }

	      return this;
	    },

	    /**
	     * Helper for setting width/height
	     * @private
	     * @param {String} prop property (width|height)
	     * @param {Number} value value to set property to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    _setBackstoreDimension: function (prop, value) {
	      this.lowerCanvasEl[prop] = value;

	      if (this.upperCanvasEl) {
	        this.upperCanvasEl[prop] = value;
	      }

	      if (this.cacheCanvasEl) {
	        this.cacheCanvasEl[prop] = value;
	      }

	      this[prop] = value;

	      return this;
	    },

	    /**
	     * Helper for setting css width/height
	     * @private
	     * @param {String} prop property (width|height)
	     * @param {String} value value to set property to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    _setCssDimension: function (prop, value) {
	      this.lowerCanvasEl.style[prop] = value;

	      if (this.upperCanvasEl) {
	        this.upperCanvasEl.style[prop] = value;
	      }

	      if (this.wrapperEl) {
	        this.wrapperEl.style[prop] = value;
	      }

	      return this;
	    },

	    /**
	     * Returns canvas zoom level
	     * @return {Number}
	     */
	    getZoom: function () {
	      return this.viewportTransform[0];
	    },

	    /**
	     * Sets viewport transform of this canvas instance
	     * @param {Array} vpt the transform in the form of context.transform
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setViewportTransform: function (vpt) {
	      var activeObject = this._activeObject, object, ignoreVpt = false, skipAbsolute = true, i, len;
	      this.viewportTransform = vpt;
	      for (i = 0, len = this._objects.length; i < len; i++) {
	        object = this._objects[i];
	        object.group || object.setCoords(ignoreVpt, skipAbsolute);
	      }
	      if (activeObject && activeObject.type === 'activeSelection') {
	        activeObject.setCoords(ignoreVpt, skipAbsolute);
	      }
	      this.calcViewportBoundaries();
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * Sets zoom level of this canvas instance, zoom centered around point
	     * @param {fabric.Point} point to zoom with respect to
	     * @param {Number} value to set zoom to, less than 1 zooms out
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    zoomToPoint: function (point, value) {
	      // TODO: just change the scale, preserve other transformations
	      var before = point, vpt = this.viewportTransform.slice(0);
	      point = transformPoint(point, invertTransform(this.viewportTransform));
	      vpt[0] = value;
	      vpt[3] = value;
	      var after = transformPoint(point, vpt);
	      vpt[4] += before.x - after.x;
	      vpt[5] += before.y - after.y;
	      return this.setViewportTransform(vpt);
	    },

	    /**
	     * Sets zoom level of this canvas instance
	     * @param {Number} value to set zoom to, less than 1 zooms out
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setZoom: function (value) {
	      this.zoomToPoint(new fabric.Point(0, 0), value);
	      return this;
	    },

	    /**
	     * Pan viewport so as to place point at top left corner of canvas
	     * @param {fabric.Point} point to move to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    absolutePan: function (point) {
	      var vpt = this.viewportTransform.slice(0);
	      vpt[4] = -point.x;
	      vpt[5] = -point.y;
	      return this.setViewportTransform(vpt);
	    },

	    /**
	     * Pans viewpoint relatively
	     * @param {fabric.Point} point (position vector) to move by
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    relativePan: function (point) {
	      return this.absolutePan(new fabric.Point(
	        -point.x - this.viewportTransform[4],
	        -point.y - this.viewportTransform[5]
	      ));
	    },

	    /**
	     * Returns &lt;canvas> element corresponding to this instance
	     * @return {HTMLCanvasElement}
	     */
	    getElement: function () {
	      return this.lowerCanvasEl;
	    },

	    /**
	     * @private
	     * @param {fabric.Object} obj Object that was added
	     */
	    _onObjectAdded: function(obj) {
	      this.stateful && obj.setupState();
	      obj._set('canvas', this);
	      obj.setCoords();
	      this.fire('object:added', { target: obj });
	      obj.fire('added');
	    },

	    /**
	     * @private
	     * @param {fabric.Object} obj Object that was removed
	     */
	    _onObjectRemoved: function(obj) {
	      this.fire('object:removed', { target: obj });
	      obj.fire('removed');
	      delete obj.canvas;
	    },

	    /**
	     * Clears specified context of canvas element
	     * @param {CanvasRenderingContext2D} ctx Context to clear
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    clearContext: function(ctx) {
	      ctx.clearRect(0, 0, this.width, this.height);
	      return this;
	    },

	    /**
	     * Returns context of canvas where objects are drawn
	     * @return {CanvasRenderingContext2D}
	     */
	    getContext: function () {
	      return this.contextContainer;
	    },

	    /**
	     * Clears all contexts (background, main, top) of an instance
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    clear: function () {
	      this._objects.length = 0;
	      this.backgroundImage = null;
	      this.overlayImage = null;
	      this.backgroundColor = '';
	      this.overlayColor = '';
	      if (this._hasITextHandlers) {
	        this.off('mouse:up', this._mouseUpITextHandler);
	        this._iTextInstances = null;
	        this._hasITextHandlers = false;
	      }
	      this.clearContext(this.contextContainer);
	      this.fire('canvas:cleared');
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * Renders the canvas
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    renderAll: function () {
	      var canvasToDrawOn = this.contextContainer;
	      this.renderCanvas(canvasToDrawOn, this._objects);
	      return this;
	    },

	    /**
	     * Function created to be instance bound at initialization
	     * used in requestAnimationFrame rendering
	     * Let the fabricJS call it. If you call it manually you could have more
	     * animationFrame stacking on to of each other
	     * for an imperative rendering, use canvas.renderAll
	     * @private
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    renderAndReset: function() {
	      this.isRendering = 0;
	      this.renderAll();
	    },

	    /**
	     * Append a renderAll request to next animation frame.
	     * unless one is already in progress, in that case nothing is done
	     * a boolean flag will avoid appending more.
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    requestRenderAll: function () {
	      if (!this.isRendering) {
	        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);
	      }
	      return this;
	    },

	    /**
	     * Calculate the position of the 4 corner of canvas with current viewportTransform.
	     * helps to determinate when an object is in the current rendering viewport using
	     * object absolute coordinates ( aCoords )
	     * @return {Object} points.tl
	     * @chainable
	     */
	    calcViewportBoundaries: function() {
	      var points = { }, width = this.width, height = this.height,
	          iVpt = invertTransform(this.viewportTransform);
	      points.tl = transformPoint({ x: 0, y: 0 }, iVpt);
	      points.br = transformPoint({ x: width, y: height }, iVpt);
	      points.tr = new fabric.Point(points.br.x, points.tl.y);
	      points.bl = new fabric.Point(points.tl.x, points.br.y);
	      this.vptCoords = points;
	      return points;
	    },

	    cancelRequestedRender: function() {
	      if (this.isRendering) {
	        fabric.util.cancelAnimFrame(this.isRendering);
	        this.isRendering = 0;
	      }
	    },

	    /**
	     * Renders background, objects, overlay and controls.
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Array} objects to render
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    renderCanvas: function(ctx, objects) {
	      var v = this.viewportTransform, path = this.clipPath;
	      this.cancelRequestedRender();
	      this.calcViewportBoundaries();
	      this.clearContext(ctx);
	      this.fire('before:render', { ctx: ctx, });
	      if (this.clipTo) {
	        fabric.util.clipContext(this, ctx);
	      }
	      this._renderBackground(ctx);

	      ctx.save();
	      //apply viewport transform once for all rendering process
	      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	      this._renderObjects(ctx, objects);
	      ctx.restore();
	      if (!this.controlsAboveOverlay && this.interactive) {
	        this.drawControls(ctx);
	      }
	      if (this.clipTo) {
	        ctx.restore();
	      }
	      if (path) {
	        path.canvas = this;
	        // needed to setup a couple of variables
	        path.shouldCache();
	        path._transformDone = true;
	        path.renderCache({ forClipping: true });
	        this.drawClipPathOnCanvas(ctx);
	      }
	      this._renderOverlay(ctx);
	      if (this.controlsAboveOverlay && this.interactive) {
	        this.drawControls(ctx);
	      }
	      this.fire('after:render', { ctx: ctx, });
	    },

	    /**
	     * Paint the cached clipPath on the lowerCanvasEl
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    drawClipPathOnCanvas: function(ctx) {
	      var v = this.viewportTransform, path = this.clipPath;
	      ctx.save();
	      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	      // DEBUG: uncomment this line, comment the following
	      // ctx.globalAlpha = 0.4;
	      ctx.globalCompositeOperation = 'destination-in';
	      path.transform(ctx);
	      ctx.scale(1 / path.zoomX, 1 / path.zoomY);
	      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Array} objects to render
	     */
	    _renderObjects: function(ctx, objects) {
	      var i, len;
	      for (i = 0, len = objects.length; i < len; ++i) {
	        objects[i] && objects[i].render(ctx);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {string} property 'background' or 'overlay'
	     */
	    _renderBackgroundOrOverlay: function(ctx, property) {
	      var fill = this[property + 'Color'], object = this[property + 'Image'],
	          v = this.viewportTransform, needsVpt = this[property + 'Vpt'];
	      if (!fill && !object) {
	        return;
	      }
	      if (fill) {
	        ctx.save();
	        ctx.beginPath();
	        ctx.moveTo(0, 0);
	        ctx.lineTo(this.width, 0);
	        ctx.lineTo(this.width, this.height);
	        ctx.lineTo(0, this.height);
	        ctx.closePath();
	        ctx.fillStyle = fill.toLive
	          ? fill.toLive(ctx, this)
	          : fill;
	        if (needsVpt) {
	          ctx.transform(
	            v[0], v[1], v[2], v[3],
	            v[4] + (fill.offsetX || 0),
	            v[5] + (fill.offsetY || 0)
	          );
	        }
	        var m = fill.gradientTransform || fill.patternTransform;
	        m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        ctx.fill();
	        ctx.restore();
	      }
	      if (object) {
	        ctx.save();
	        if (needsVpt) {
	          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	        }
	        object.render(ctx);
	        ctx.restore();
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderBackground: function(ctx) {
	      this._renderBackgroundOrOverlay(ctx, 'background');
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderOverlay: function(ctx) {
	      this._renderBackgroundOrOverlay(ctx, 'overlay');
	    },

	    /**
	     * Returns coordinates of a center of canvas.
	     * Returned value is an object with top and left properties
	     * @return {Object} object with "top" and "left" number values
	     */
	    getCenter: function () {
	      return {
	        top: this.height / 2,
	        left: this.width / 2
	      };
	    },

	    /**
	     * Centers object horizontally in the canvas
	     * @param {fabric.Object} object Object to center horizontally
	     * @return {fabric.Canvas} thisArg
	     */
	    centerObjectH: function (object) {
	      return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));
	    },

	    /**
	     * Centers object vertically in the canvas
	     * @param {fabric.Object} object Object to center vertically
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    centerObjectV: function (object) {
	      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));
	    },

	    /**
	     * Centers object vertically and horizontally in the canvas
	     * @param {fabric.Object} object Object to center vertically and horizontally
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    centerObject: function(object) {
	      var center = this.getCenter();

	      return this._centerObject(object, new fabric.Point(center.left, center.top));
	    },

	    /**
	     * Centers object vertically and horizontally in the viewport
	     * @param {fabric.Object} object Object to center vertically and horizontally
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    viewportCenterObject: function(object) {
	      var vpCenter = this.getVpCenter();

	      return this._centerObject(object, vpCenter);
	    },

	    /**
	     * Centers object horizontally in the viewport, object.top is unchanged
	     * @param {fabric.Object} object Object to center vertically and horizontally
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    viewportCenterObjectH: function(object) {
	      var vpCenter = this.getVpCenter();
	      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));
	      return this;
	    },

	    /**
	     * Centers object Vertically in the viewport, object.top is unchanged
	     * @param {fabric.Object} object Object to center vertically and horizontally
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    viewportCenterObjectV: function(object) {
	      var vpCenter = this.getVpCenter();

	      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));
	    },

	    /**
	     * Calculate the point in canvas that correspond to the center of actual viewport.
	     * @return {fabric.Point} vpCenter, viewport center
	     * @chainable
	     */
	    getVpCenter: function() {
	      var center = this.getCenter(),
	          iVpt = invertTransform(this.viewportTransform);
	      return transformPoint({ x: center.left, y: center.top }, iVpt);
	    },

	    /**
	     * @private
	     * @param {fabric.Object} object Object to center
	     * @param {fabric.Point} center Center point
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    _centerObject: function(object, center) {
	      object.setPositionByOrigin(center, 'center', 'center');
	      object.setCoords();
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * Returs dataless JSON representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {String} json string
	     */
	    toDatalessJSON: function (propertiesToInclude) {
	      return this.toDatalessObject(propertiesToInclude);
	    },

	    /**
	     * Returns object representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function (propertiesToInclude) {
	      return this._toObjectMethod('toObject', propertiesToInclude);
	    },

	    /**
	     * Returns dataless object representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toDatalessObject: function (propertiesToInclude) {
	      return this._toObjectMethod('toDatalessObject', propertiesToInclude);
	    },

	    /**
	     * @private
	     */
	    _toObjectMethod: function (methodName, propertiesToInclude) {

	      var clipPath = this.clipPath, data = {
	        version: fabric.version,
	        objects: this._toObjects(methodName, propertiesToInclude),
	      };
	      if (clipPath) {
	        data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);
	      }
	      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));

	      fabric.util.populateWithProperties(this, data, propertiesToInclude);

	      return data;
	    },

	    /**
	     * @private
	     */
	    _toObjects: function(methodName, propertiesToInclude) {
	      return this._objects.filter(function(object) {
	        return !object.excludeFromExport;
	      }).map(function(instance) {
	        return this._toObject(instance, methodName, propertiesToInclude);
	      }, this);
	    },

	    /**
	     * @private
	     */
	    _toObject: function(instance, methodName, propertiesToInclude) {
	      var originalValue;

	      if (!this.includeDefaultValues) {
	        originalValue = instance.includeDefaultValues;
	        instance.includeDefaultValues = false;
	      }

	      var object = instance[methodName](propertiesToInclude);
	      if (!this.includeDefaultValues) {
	        instance.includeDefaultValues = originalValue;
	      }
	      return object;
	    },

	    /**
	     * @private
	     */
	    __serializeBgOverlay: function(methodName, propertiesToInclude) {
	      var data = { }, bgImage = this.backgroundImage, overlay = this.overlayImage;

	      if (this.backgroundColor) {
	        data.background = this.backgroundColor.toObject
	          ? this.backgroundColor.toObject(propertiesToInclude)
	          : this.backgroundColor;
	      }

	      if (this.overlayColor) {
	        data.overlay = this.overlayColor.toObject
	          ? this.overlayColor.toObject(propertiesToInclude)
	          : this.overlayColor;
	      }
	      if (bgImage && !bgImage.excludeFromExport) {
	        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);
	      }
	      if (overlay && !overlay.excludeFromExport) {
	        data.overlayImage = this._toObject(overlay, methodName, propertiesToInclude);
	      }

	      return data;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
	     * a zoomed canvas will then produce zoomed SVG output.
	     * @type Boolean
	     * @default
	     */
	    svgViewportTransformation: true,

	    /**
	     * Returns SVG representation of canvas
	     * @function
	     * @param {Object} [options] Options object for SVG output
	     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
	     * @param {Object} [options.viewBox] SVG viewbox object
	     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox
	     * @param {Number} [options.viewBox.y] y-coordinate of viewbox
	     * @param {Number} [options.viewBox.width] Width of viewbox
	     * @param {Number} [options.viewBox.height] Height of viewbox
	     * @param {String} [options.encoding=UTF-8] Encoding of SVG output
	     * @param {String} [options.width] desired width of svg with or without units
	     * @param {String} [options.height] desired height of svg with or without units
	     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
	     * @return {String} SVG string
	     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
	     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
	     * @example <caption>Normal SVG output</caption>
	     * var svg = canvas.toSVG();
	     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
	     * var svg = canvas.toSVG({suppressPreamble: true});
	     * @example <caption>SVG output with viewBox attribute</caption>
	     * var svg = canvas.toSVG({
	     *   viewBox: {
	     *     x: 100,
	     *     y: 100,
	     *     width: 200,
	     *     height: 300
	     *   }
	     * });
	     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
	     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
	     * @example <caption>Modify SVG output with reviver function</caption>
	     * var svg = canvas.toSVG(null, function(svg) {
	     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
	     * });
	     */
	    toSVG: function(options, reviver) {
	      options || (options = { });
	      options.reviver = reviver;
	      var markup = [];

	      this._setSVGPreamble(markup, options);
	      this._setSVGHeader(markup, options);
	      if (this.clipPath) {
	        markup.push('<g clip-path="url(#' + this.clipPath.clipPathId + ')" >\n');
	      }
	      this._setSVGBgOverlayColor(markup, 'background');
	      this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);
	      this._setSVGObjects(markup, reviver);
	      if (this.clipPath) {
	        markup.push('</g>\n');
	      }
	      this._setSVGBgOverlayColor(markup, 'overlay');
	      this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);

	      markup.push('</svg>');

	      return markup.join('');
	    },

	    /**
	     * @private
	     */
	    _setSVGPreamble: function(markup, options) {
	      if (options.suppressPreamble) {
	        return;
	      }
	      markup.push(
	        '<?xml version="1.0" encoding="', (options.encoding || 'UTF-8'), '" standalone="no" ?>\n',
	        '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ',
	        '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n'
	      );
	    },

	    /**
	     * @private
	     */
	    _setSVGHeader: function(markup, options) {
	      var width = options.width || this.width,
	          height = options.height || this.height,
	          vpt, viewBox = 'viewBox="0 0 ' + this.width + ' ' + this.height + '" ',
	          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

	      if (options.viewBox) {
	        viewBox = 'viewBox="' +
	                options.viewBox.x + ' ' +
	                options.viewBox.y + ' ' +
	                options.viewBox.width + ' ' +
	                options.viewBox.height + '" ';
	      }
	      else {
	        if (this.svgViewportTransformation) {
	          vpt = this.viewportTransform;
	          viewBox = 'viewBox="' +
	                  toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
	        }
	      }

	      markup.push(
	        '<svg ',
	        'xmlns="http://www.w3.org/2000/svg" ',
	        'xmlns:xlink="http://www.w3.org/1999/xlink" ',
	        'version="1.1" ',
	        'width="', width, '" ',
	        'height="', height, '" ',
	        viewBox,
	        'xml:space="preserve">\n',
	        '<desc>Created with Fabric.js ', fabric.version, '</desc>\n',
	        '<defs>\n',
	        this.createSVGFontFacesMarkup(),
	        this.createSVGRefElementsMarkup(),
	        this.createSVGClipPathMarkup(options),
	        '</defs>\n'
	      );
	    },

	    createSVGClipPathMarkup: function(options) {
	      var clipPath = this.clipPath;
	      if (clipPath) {
	        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;
	        return  '<clipPath id="' + clipPath.clipPathId + '" >\n' +
	          this.clipPath.toClipPathSVG(options.reviver) +
	          '</clipPath>\n';
	      }
	      return '';
	    },

	    /**
	     * Creates markup containing SVG referenced elements like patterns, gradients etc.
	     * @return {String}
	     */
	    createSVGRefElementsMarkup: function() {
	      var _this = this,
	          markup = ['background', 'overlay'].map(function(prop) {
	            var fill = _this[prop + 'Color'];
	            if (fill && fill.toLive) {
	              var shouldTransform = _this[prop + 'Vpt'], vpt = _this.viewportTransform,
	                  object = {
	                    width: _this.width / (shouldTransform ? vpt[0] : 1),
	                    height: _this.height / (shouldTransform ? vpt[3] : 1)
	                  };
	              return fill.toSVG(
	                object,
	                { additionalTransform: shouldTransform ? fabric.util.matrixToSVG(vpt) : '' }
	              );
	            }
	          });
	      return markup.join('');
	    },

	    /**
	     * Creates markup containing SVG font faces,
	     * font URLs for font faces must be collected by developers
	     * and are not extracted from the DOM by fabricjs
	     * @param {Array} objects Array of fabric objects
	     * @return {String}
	     */
	    createSVGFontFacesMarkup: function() {
	      var markup = '', fontList = { }, obj, fontFamily,
	          style, row, rowIndex, _char, charIndex, i, len,
	          fontPaths = fabric.fontPaths, objects = this._objects;

	      for (i = 0, len = objects.length; i < len; i++) {
	        obj = objects[i];
	        fontFamily = obj.fontFamily;
	        if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {
	          continue;
	        }
	        fontList[fontFamily] = true;
	        if (!obj.styles) {
	          continue;
	        }
	        style = obj.styles;
	        for (rowIndex in style) {
	          row = style[rowIndex];
	          for (charIndex in row) {
	            _char = row[charIndex];
	            fontFamily = _char.fontFamily;
	            if (!fontList[fontFamily] && fontPaths[fontFamily]) {
	              fontList[fontFamily] = true;
	            }
	          }
	        }
	      }

	      for (var j in fontList) {
	        markup += [
	          '\t\t@font-face {\n',
	          '\t\t\tfont-family: \'', j, '\';\n',
	          '\t\t\tsrc: url(\'', fontPaths[j], '\');\n',
	          '\t\t}\n'
	        ].join('');
	      }

	      if (markup) {
	        markup = [
	          '\t<style type="text/css">',
	          '<![CDATA[\n',
	          markup,
	          ']]>',
	          '</style>\n'
	        ].join('');
	      }

	      return markup;
	    },

	    /**
	     * @private
	     */
	    _setSVGObjects: function(markup, reviver) {
	      var instance, i, len, objects = this._objects;
	      for (i = 0, len = objects.length; i < len; i++) {
	        instance = objects[i];
	        if (instance.excludeFromExport) {
	          continue;
	        }
	        this._setSVGObject(markup, instance, reviver);
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGObject: function(markup, instance, reviver) {
	      markup.push(instance.toSVG(reviver));
	    },

	    /**
	     * @private
	     */
	    _setSVGBgOverlayImage: function(markup, property, reviver) {
	      if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {
	        markup.push(this[property].toSVG(reviver));
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGBgOverlayColor: function(markup, property) {
	      var filler = this[property + 'Color'], vpt = this.viewportTransform, finalWidth = this.width,
	          finalHeight = this.height;
	      if (!filler) {
	        return;
	      }
	      if (filler.toLive) {
	        var repeat = filler.repeat, iVpt = fabric.util.invertTransform(vpt), shouldInvert = this[property + 'Vpt'],
	            additionalTransform = shouldInvert ? fabric.util.matrixToSVG(iVpt) : '';
	        markup.push(
	          '<rect transform="' + additionalTransform + ' translate(', finalWidth / 2, ',', finalHeight / 2, ')"',
	          ' x="', filler.offsetX - finalWidth / 2,
	          '" y="', filler.offsetY - finalHeight / 2, '" ',
	          'width="',
	          (repeat === 'repeat-y' || repeat === 'no-repeat'
	            ? filler.source.width
	            : finalWidth ),
	          '" height="',
	          (repeat === 'repeat-x' || repeat === 'no-repeat'
	            ? filler.source.height
	            : finalHeight),
	          '" fill="url(#SVGID_' + filler.id + ')"',
	          '></rect>\n'
	        );
	      }
	      else {
	        markup.push(
	          '<rect x="0" y="0" width="100%" height="100%" ',
	          'fill="', filler, '"',
	          '></rect>\n'
	        );
	      }
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Moves an object or the objects of a multiple selection
	     * to the bottom of the stack of drawn objects
	     * @param {fabric.Object} object Object to send to back
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    sendToBack: function (object) {
	      if (!object) {
	        return this;
	      }
	      var activeSelection = this._activeObject,
	          i, obj, objs;
	      if (object === activeSelection && object.type === 'activeSelection') {
	        objs = activeSelection._objects;
	        for (i = objs.length; i--;) {
	          obj = objs[i];
	          removeFromArray(this._objects, obj);
	          this._objects.unshift(obj);
	        }
	      }
	      else {
	        removeFromArray(this._objects, object);
	        this._objects.unshift(object);
	      }
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * Moves an object or the objects of a multiple selection
	     * to the top of the stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    bringToFront: function (object) {
	      if (!object) {
	        return this;
	      }
	      var activeSelection = this._activeObject,
	          i, obj, objs;
	      if (object === activeSelection && object.type === 'activeSelection') {
	        objs = activeSelection._objects;
	        for (i = 0; i < objs.length; i++) {
	          obj = objs[i];
	          removeFromArray(this._objects, obj);
	          this._objects.push(obj);
	        }
	      }
	      else {
	        removeFromArray(this._objects, object);
	        this._objects.push(object);
	      }
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * Moves an object or a selection down in stack of drawn objects
	     * An optional paramter, intersecting allowes to move the object in behind
	     * the first intersecting object. Where intersection is calculated with
	     * bounding box. If no intersection is found, there will not be change in the
	     * stack.
	     * @param {fabric.Object} object Object to send
	     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    sendBackwards: function (object, intersecting) {
	      if (!object) {
	        return this;
	      }
	      var activeSelection = this._activeObject,
	          i, obj, idx, newIdx, objs, objsMoved = 0;

	      if (object === activeSelection && object.type === 'activeSelection') {
	        objs = activeSelection._objects;
	        for (i = 0; i < objs.length; i++) {
	          obj = objs[i];
	          idx = this._objects.indexOf(obj);
	          if (idx > 0 + objsMoved) {
	            newIdx = idx - 1;
	            removeFromArray(this._objects, obj);
	            this._objects.splice(newIdx, 0, obj);
	          }
	          objsMoved++;
	        }
	      }
	      else {
	        idx = this._objects.indexOf(object);
	        if (idx !== 0) {
	          // if object is not on the bottom of stack
	          newIdx = this._findNewLowerIndex(object, idx, intersecting);
	          removeFromArray(this._objects, object);
	          this._objects.splice(newIdx, 0, object);
	        }
	      }
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * @private
	     */
	    _findNewLowerIndex: function(object, idx, intersecting) {
	      var newIdx, i;

	      if (intersecting) {
	        newIdx = idx;

	        // traverse down the stack looking for the nearest intersecting object
	        for (i = idx - 1; i >= 0; --i) {

	          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||
	                               object.isContainedWithinObject(this._objects[i]) ||
	                               this._objects[i].isContainedWithinObject(object);

	          if (isIntersecting) {
	            newIdx = i;
	            break;
	          }
	        }
	      }
	      else {
	        newIdx = idx - 1;
	      }

	      return newIdx;
	    },

	    /**
	     * Moves an object or a selection up in stack of drawn objects
	     * An optional paramter, intersecting allowes to move the object in front
	     * of the first intersecting object. Where intersection is calculated with
	     * bounding box. If no intersection is found, there will not be change in the
	     * stack.
	     * @param {fabric.Object} object Object to send
	     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    bringForward: function (object, intersecting) {
	      if (!object) {
	        return this;
	      }
	      var activeSelection = this._activeObject,
	          i, obj, idx, newIdx, objs, objsMoved = 0;

	      if (object === activeSelection && object.type === 'activeSelection') {
	        objs = activeSelection._objects;
	        for (i = objs.length; i--;) {
	          obj = objs[i];
	          idx = this._objects.indexOf(obj);
	          if (idx < this._objects.length - 1 - objsMoved) {
	            newIdx = idx + 1;
	            removeFromArray(this._objects, obj);
	            this._objects.splice(newIdx, 0, obj);
	          }
	          objsMoved++;
	        }
	      }
	      else {
	        idx = this._objects.indexOf(object);
	        if (idx !== this._objects.length - 1) {
	          // if object is not on top of stack (last item in an array)
	          newIdx = this._findNewUpperIndex(object, idx, intersecting);
	          removeFromArray(this._objects, object);
	          this._objects.splice(newIdx, 0, object);
	        }
	      }
	      this.renderOnAddRemove && this.requestRenderAll();
	      return this;
	    },

	    /**
	     * @private
	     */
	    _findNewUpperIndex: function(object, idx, intersecting) {
	      var newIdx, i, len;

	      if (intersecting) {
	        newIdx = idx;

	        // traverse up the stack looking for the nearest intersecting object
	        for (i = idx + 1, len = this._objects.length; i < len; ++i) {

	          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||
	                               object.isContainedWithinObject(this._objects[i]) ||
	                               this._objects[i].isContainedWithinObject(object);

	          if (isIntersecting) {
	            newIdx = i;
	            break;
	          }
	        }
	      }
	      else {
	        newIdx = idx + 1;
	      }

	      return newIdx;
	    },

	    /**
	     * Moves an object to specified level in stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @param {Number} index Position to move to
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    moveTo: function (object, index) {
	      removeFromArray(this._objects, object);
	      this._objects.splice(index, 0, object);
	      return this.renderOnAddRemove && this.requestRenderAll();
	    },

	    /**
	     * Clears a canvas element and dispose objects
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    dispose: function () {
	      // cancel eventually ongoing renders
	      if (this.isRendering) {
	        fabric.util.cancelAnimFrame(this.isRendering);
	        this.isRendering = 0;
	      }
	      this.forEachObject(function(object) {
	        object.dispose && object.dispose();
	      });
	      this._objects = [];
	      if (this.backgroundImage && this.backgroundImage.dispose) {
	        this.backgroundImage.dispose();
	      }
	      this.backgroundImage = null;
	      if (this.overlayImage && this.overlayImage.dispose) {
	        this.overlayImage.dispose();
	      }
	      this.overlayImage = null;
	      this._iTextInstances = null;
	      this.contextContainer = null;
	      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);
	      this.lowerCanvasEl = undefined;
	      return this;
	    },

	    /**
	     * Returns a string representation of an instance
	     * @return {String} string representation of an instance
	     */
	    toString: function () {
	      return '#<fabric.Canvas (' + this.complexity() + '): ' +
	               '{ objects: ' + this._objects.length + ' }>';
	    }
	  });

	  extend(fabric.StaticCanvas.prototype, fabric.Observable);
	  extend(fabric.StaticCanvas.prototype, fabric.Collection);
	  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);

	  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {

	    /**
	     * @static
	     * @type String
	     * @default
	     */
	    EMPTY_JSON: '{"objects": [], "background": "white"}',

	    /**
	     * Provides a way to check support of some of the canvas methods
	     * (either those of HTMLCanvasElement itself, or rendering context)
	     *
	     * @param {String} methodName Method to check support for;
	     *                            Could be one of "setLineDash"
	     * @return {Boolean | null} `true` if method is supported (or at least exists),
	     *                          `null` if canvas element or context can not be initialized
	     */
	    supports: function (methodName) {
	      var el = createCanvasElement();

	      if (!el || !el.getContext) {
	        return null;
	      }

	      var ctx = el.getContext('2d');
	      if (!ctx) {
	        return null;
	      }

	      switch (methodName) {

	        case 'setLineDash':
	          return typeof ctx.setLineDash !== 'undefined';

	        default:
	          return null;
	      }
	    }
	  });

	  /**
	   * Returns JSON representation of canvas
	   * @function
	   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	   * @return {String} JSON string
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
	   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}
	   * @example <caption>JSON without additional properties</caption>
	   * var json = canvas.toJSON();
	   * @example <caption>JSON with additional properties included</caption>
	   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);
	   * @example <caption>JSON without default values</caption>
	   * canvas.includeDefaultValues = false;
	   * var json = canvas.toJSON();
	   */
	  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;

	  if (fabric.isLikelyNode) {
	    fabric.StaticCanvas.prototype.createPNGStream = function() {
	      var impl = getNodeCanvas(this.lowerCanvasEl);
	      return impl && impl.createPNGStream();
	    };
	    fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {
	      var impl = getNodeCanvas(this.lowerCanvasEl);
	      return impl && impl.createJPEGStream(opts);
	    };
	  }
	})();


	/**
	 * BaseBrush class
	 * @class fabric.BaseBrush
	 * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}
	 */
	fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {

	  /**
	   * Color of a brush
	   * @type String
	   * @default
	   */
	  color: 'rgb(0, 0, 0)',

	  /**
	   * Width of a brush, has to be a Number, no string literals
	   * @type Number
	   * @default
	   */
	  width: 1,

	  /**
	   * Shadow object representing shadow of this shape.
	   * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
	   * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
	   * @type fabric.Shadow
	   * @default
	   */
	  shadow: null,

	  /**
	   * Line endings style of a brush (one of "butt", "round", "square")
	   * @type String
	   * @default
	   */
	  strokeLineCap: 'round',

	  /**
	   * Corner style of a brush (one of "bevel", "round", "miter")
	   * @type String
	   * @default
	   */
	  strokeLineJoin: 'round',

	  /**
	   * Maximum miter length (used for strokeLineJoin = "miter") of a brush's
	   * @type Number
	   * @default
	   */
	  strokeMiterLimit:         10,

	  /**
	   * Stroke Dash Array.
	   * @type Array
	   * @default
	   */
	  strokeDashArray: null,

	  /**
	   * Sets shadow of an object
	   * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  setShadow: function(options) {
	    this.shadow = new fabric.Shadow(options);
	    return this;
	  },

	  /**
	   * Sets brush styles
	   * @private
	   */
	  _setBrushStyles: function() {
	    var ctx = this.canvas.contextTop;
	    ctx.strokeStyle = this.color;
	    ctx.lineWidth = this.width;
	    ctx.lineCap = this.strokeLineCap;
	    ctx.miterLimit = this.strokeMiterLimit;
	    ctx.lineJoin = this.strokeLineJoin;
	    if (fabric.StaticCanvas.supports('setLineDash')) {
	      ctx.setLineDash(this.strokeDashArray || []);
	    }
	  },

	  /**
	   * Sets the transformation on given context
	   * @param {RenderingContext2d} ctx context to render on
	   * @private
	   */
	  _saveAndTransform: function(ctx) {
	    var v = this.canvas.viewportTransform;
	    ctx.save();
	    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	  },

	  /**
	   * Sets brush shadow styles
	   * @private
	   */
	  _setShadow: function() {
	    if (!this.shadow) {
	      return;
	    }

	    var ctx = this.canvas.contextTop,
	        zoom = this.canvas.getZoom();

	    ctx.shadowColor = this.shadow.color;
	    ctx.shadowBlur = this.shadow.blur * zoom;
	    ctx.shadowOffsetX = this.shadow.offsetX * zoom;
	    ctx.shadowOffsetY = this.shadow.offsetY * zoom;
	  },

	  needsFullRender: function() {
	    var color = new fabric.Color(this.color);
	    return color.getAlpha() < 1 || !!this.shadow;
	  },

	  /**
	   * Removes brush shadow styles
	   * @private
	   */
	  _resetShadow: function() {
	    var ctx = this.canvas.contextTop;

	    ctx.shadowColor = '';
	    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
	  }
	});


	(function() {
	  /**
	   * PencilBrush class
	   * @class fabric.PencilBrush
	   * @extends fabric.BaseBrush
	   */
	  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {

	    /**
	     * Discard points that are less than `decimate` pixel distant from each other
	     * @type Number
	     * @default 0.4
	     */
	    decimate: 0.4,

	    /**
	     * Constructor
	     * @param {fabric.Canvas} canvas
	     * @return {fabric.PencilBrush} Instance of a pencil brush
	     */
	    initialize: function(canvas) {
	      this.canvas = canvas;
	      this._points = [];
	    },

	    /**
	     * Invoked inside on mouse down and mouse move
	     * @param {Object} pointer
	     */
	    _drawSegment: function (ctx, p1, p2) {
	      var midPoint = p1.midPointFrom(p2);
	      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
	      return midPoint;
	    },

	    /**
	     * Inovoked on mouse down
	     * @param {Object} pointer
	     */
	    onMouseDown: function(pointer, options) {
	      if (!this.canvas._isMainEvent(options.e)) {
	        return;
	      }
	      this._prepareForDrawing(pointer);
	      // capture coordinates immediately
	      // this allows to draw dots (when movement never occurs)
	      this._captureDrawingPath(pointer);
	      this._render();
	    },

	    /**
	     * Inovoked on mouse move
	     * @param {Object} pointer
	     */
	    onMouseMove: function(pointer, options) {
	      if (!this.canvas._isMainEvent(options.e)) {
	        return;
	      }
	      if (this._captureDrawingPath(pointer) && this._points.length > 1) {
	        if (this.needsFullRender()) {
	          // redraw curve
	          // clear top canvas
	          this.canvas.clearContext(this.canvas.contextTop);
	          this._render();
	        }
	        else {
	          var points = this._points, length = points.length, ctx = this.canvas.contextTop;
	          // draw the curve update
	          this._saveAndTransform(ctx);
	          if (this.oldEnd) {
	            ctx.beginPath();
	            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);
	          }
	          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);
	          ctx.stroke();
	          ctx.restore();
	        }
	      }
	    },

	    /**
	     * Invoked on mouse up
	     */
	    onMouseUp: function(options) {
	      if (!this.canvas._isMainEvent(options.e)) {
	        return true;
	      }
	      this.oldEnd = undefined;
	      this._finalizeAndAddPath();
	      return false;
	    },

	    /**
	     * @private
	     * @param {Object} pointer Actual mouse position related to the canvas.
	     */
	    _prepareForDrawing: function(pointer) {

	      var p = new fabric.Point(pointer.x, pointer.y);

	      this._reset();
	      this._addPoint(p);
	      this.canvas.contextTop.moveTo(p.x, p.y);
	    },

	    /**
	     * @private
	     * @param {fabric.Point} point Point to be added to points array
	     */
	    _addPoint: function(point) {
	      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {
	        return false;
	      }
	      this._points.push(point);
	      return true;
	    },

	    /**
	     * Clear points array and set contextTop canvas style.
	     * @private
	     */
	    _reset: function() {
	      this._points = [];
	      this._setBrushStyles();
	      this._setShadow();
	    },

	    /**
	     * @private
	     * @param {Object} pointer Actual mouse position related to the canvas.
	     */
	    _captureDrawingPath: function(pointer) {
	      var pointerPoint = new fabric.Point(pointer.x, pointer.y);
	      return this._addPoint(pointerPoint);
	    },

	    /**
	     * Draw a smooth path on the topCanvas using quadraticCurveTo
	     * @private
	     */
	    _render: function() {
	      var ctx  = this.canvas.contextTop, i, len,
	          p1 = this._points[0],
	          p2 = this._points[1];

	      this._saveAndTransform(ctx);
	      ctx.beginPath();
	      //if we only have 2 points in the path and they are the same
	      //it means that the user only clicked the canvas without moving the mouse
	      //then we should be drawing a dot. A path isn't drawn between two identical dots
	      //that's why we set them apart a bit
	      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
	        var width = this.width / 1000;
	        p1 = new fabric.Point(p1.x, p1.y);
	        p2 = new fabric.Point(p2.x, p2.y);
	        p1.x -= width;
	        p2.x += width;
	      }
	      ctx.moveTo(p1.x, p1.y);

	      for (i = 1, len = this._points.length; i < len; i++) {
	        // we pick the point between pi + 1 & pi + 2 as the
	        // end point and p1 as our control point.
	        this._drawSegment(ctx, p1, p2);
	        p1 = this._points[i];
	        p2 = this._points[i + 1];
	      }
	      // Draw last line as a straight line while
	      // we wait for the next point to be able to calculate
	      // the bezier control point
	      ctx.lineTo(p1.x, p1.y);
	      ctx.stroke();
	      ctx.restore();
	    },

	    /**
	     * Converts points to SVG path
	     * @param {Array} points Array of points
	     * @return {String} SVG path
	     */
	    convertPointsToSVGPath: function(points) {
	      var path = [], i, width = this.width / 1000,
	          p1 = new fabric.Point(points[0].x, points[0].y),
	          p2 = new fabric.Point(points[1].x, points[1].y),
	          len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;

	      if (manyPoints) {
	        multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;
	        multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;
	      }
	      path.push('M ', p1.x - multSignX * width, ' ', p1.y - multSignY * width, ' ');
	      for (i = 1; i < len; i++) {
	        if (!p1.eq(p2)) {
	          var midPoint = p1.midPointFrom(p2);
	          // p1 is our bezier control point
	          // midpoint is our endpoint
	          // start point is p(i-1) value.
	          path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');
	        }
	        p1 = points[i];
	        if ((i + 1) < points.length) {
	          p2 = points[i + 1];
	        }
	      }
	      if (manyPoints) {
	        multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;
	        multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;
	      }
	      path.push('L ', p1.x + multSignX * width, ' ', p1.y + multSignY * width);
	      return path;
	    },

	    /**
	     * Creates fabric.Path object to add on canvas
	     * @param {String} pathData Path data
	     * @return {fabric.Path} Path to add on canvas
	     */
	    createPath: function(pathData) {
	      var path = new fabric.Path(pathData, {
	        fill: null,
	        stroke: this.color,
	        strokeWidth: this.width,
	        strokeLineCap: this.strokeLineCap,
	        strokeMiterLimit: this.strokeMiterLimit,
	        strokeLineJoin: this.strokeLineJoin,
	        strokeDashArray: this.strokeDashArray,
	      });
	      if (this.shadow) {
	        this.shadow.affectStroke = true;
	        path.setShadow(this.shadow);
	      }

	      return path;
	    },

	    /**
	     * Decimate poins array with the decimate value
	     */
	    decimatePoints: function(points, distance) {
	      if (points.length <= 2) {
	        return points;
	      }
	      var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2),
	          i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint],
	          cDistance;
	      for (i = 1; i < l; i++) {
	        cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);
	        if (cDistance >= adjustedDistance) {
	          lastPoint = points[i];
	          newPoints.push(lastPoint);
	        }
	      }
	      if (newPoints.length === 1) {
	        newPoints.push(new fabric.Point(newPoints[0].x, newPoints[0].y));
	      }
	      return newPoints;
	    },

	    /**
	     * On mouseup after drawing the path on contextTop canvas
	     * we use the points captured to create an new fabric path object
	     * and add it to the fabric canvas.
	     */
	    _finalizeAndAddPath: function() {
	      var ctx = this.canvas.contextTop;
	      ctx.closePath();
	      if (this.decimate) {
	        this._points = this.decimatePoints(this._points, this.decimate);
	      }
	      var pathData = this.convertPointsToSVGPath(this._points).join('');
	      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {
	        // do not create 0 width/height paths, as they are
	        // rendered inconsistently across browsers
	        // Firefox 4, for example, renders a dot,
	        // whereas Chrome 10 renders nothing
	        this.canvas.requestRenderAll();
	        return;
	      }

	      var path = this.createPath(pathData);
	      this.canvas.clearContext(this.canvas.contextTop);
	      this.canvas.add(path);
	      this.canvas.renderAll();
	      path.setCoords();
	      this._resetShadow();


	      // fire event 'path' created
	      this.canvas.fire('path:created', { path: path });
	    }
	  });
	})();


	/**
	 * CircleBrush class
	 * @class fabric.CircleBrush
	 */
	fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {

	  /**
	   * Width of a brush
	   * @type Number
	   * @default
	   */
	  width: 10,

	  /**
	   * Constructor
	   * @param {fabric.Canvas} canvas
	   * @return {fabric.CircleBrush} Instance of a circle brush
	   */
	  initialize: function(canvas) {
	    this.canvas = canvas;
	    this.points = [];
	  },

	  /**
	   * Invoked inside on mouse down and mouse move
	   * @param {Object} pointer
	   */
	  drawDot: function(pointer) {
	    var point = this.addPoint(pointer),
	        ctx = this.canvas.contextTop;
	    this._saveAndTransform(ctx);
	    this.dot(ctx, point);
	    ctx.restore();
	  },

	  dot: function(ctx, point) {
	    ctx.fillStyle = point.fill;
	    ctx.beginPath();
	    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
	    ctx.closePath();
	    ctx.fill();
	  },

	  /**
	   * Invoked on mouse down
	   */
	  onMouseDown: function(pointer) {
	    this.points.length = 0;
	    this.canvas.clearContext(this.canvas.contextTop);
	    this._setShadow();
	    this.drawDot(pointer);
	  },

	  /**
	   * Render the full state of the brush
	   * @private
	   */
	  _render: function() {
	    var ctx  = this.canvas.contextTop, i, len,
	        points = this.points;
	    this._saveAndTransform(ctx);
	    for (i = 0, len = points.length; i < len; i++) {
	      this.dot(ctx, points[i]);
	    }
	    ctx.restore();
	  },

	  /**
	   * Invoked on mouse move
	   * @param {Object} pointer
	   */
	  onMouseMove: function(pointer) {
	    if (this.needsFullRender()) {
	      this.canvas.clearContext(this.canvas.contextTop);
	      this.addPoint(pointer);
	      this._render();
	    }
	    else {
	      this.drawDot(pointer);
	    }
	  },

	  /**
	   * Invoked on mouse up
	   */
	  onMouseUp: function() {
	    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;
	    this.canvas.renderOnAddRemove = false;

	    var circles = [];

	    for (i = 0, len = this.points.length; i < len; i++) {
	      var point = this.points[i],
	          circle = new fabric.Circle({
	            radius: point.radius,
	            left: point.x,
	            top: point.y,
	            originX: 'center',
	            originY: 'center',
	            fill: point.fill
	          });

	      this.shadow && circle.setShadow(this.shadow);

	      circles.push(circle);
	    }
	    var group = new fabric.Group(circles);
	    group.canvas = this.canvas;

	    this.canvas.add(group);
	    this.canvas.fire('path:created', { path: group });

	    this.canvas.clearContext(this.canvas.contextTop);
	    this._resetShadow();
	    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
	    this.canvas.requestRenderAll();
	  },

	  /**
	   * @param {Object} pointer
	   * @return {fabric.Point} Just added pointer point
	   */
	  addPoint: function(pointer) {
	    var pointerPoint = new fabric.Point(pointer.x, pointer.y),

	        circleRadius = fabric.util.getRandomInt(
	          Math.max(0, this.width - 20), this.width + 20) / 2,

	        circleColor = new fabric.Color(this.color)
	          .setAlpha(fabric.util.getRandomInt(0, 100) / 100)
	          .toRgba();

	    pointerPoint.radius = circleRadius;
	    pointerPoint.fill = circleColor;

	    this.points.push(pointerPoint);

	    return pointerPoint;
	  }
	});


	/**
	 * SprayBrush class
	 * @class fabric.SprayBrush
	 */
	fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {

	  /**
	   * Width of a spray
	   * @type Number
	   * @default
	   */
	  width:              10,

	  /**
	   * Density of a spray (number of dots per chunk)
	   * @type Number
	   * @default
	   */
	  density:            20,

	  /**
	   * Width of spray dots
	   * @type Number
	   * @default
	   */
	  dotWidth:           1,

	  /**
	   * Width variance of spray dots
	   * @type Number
	   * @default
	   */
	  dotWidthVariance:   1,

	  /**
	   * Whether opacity of a dot should be random
	   * @type Boolean
	   * @default
	   */
	  randomOpacity:        false,

	  /**
	   * Whether overlapping dots (rectangles) should be removed (for performance reasons)
	   * @type Boolean
	   * @default
	   */
	  optimizeOverlapping:  true,

	  /**
	   * Constructor
	   * @param {fabric.Canvas} canvas
	   * @return {fabric.SprayBrush} Instance of a spray brush
	   */
	  initialize: function(canvas) {
	    this.canvas = canvas;
	    this.sprayChunks = [];
	  },

	  /**
	   * Invoked on mouse down
	   * @param {Object} pointer
	   */
	  onMouseDown: function(pointer) {
	    this.sprayChunks.length = 0;
	    this.canvas.clearContext(this.canvas.contextTop);
	    this._setShadow();

	    this.addSprayChunk(pointer);
	    this.render(this.sprayChunkPoints);
	  },

	  /**
	   * Invoked on mouse move
	   * @param {Object} pointer
	   */
	  onMouseMove: function(pointer) {
	    this.addSprayChunk(pointer);
	    this.render(this.sprayChunkPoints);
	  },

	  /**
	   * Invoked on mouse up
	   */
	  onMouseUp: function() {
	    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
	    this.canvas.renderOnAddRemove = false;

	    var rects = [];

	    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
	      var sprayChunk = this.sprayChunks[i];

	      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {

	        var rect = new fabric.Rect({
	          width: sprayChunk[j].width,
	          height: sprayChunk[j].width,
	          left: sprayChunk[j].x + 1,
	          top: sprayChunk[j].y + 1,
	          originX: 'center',
	          originY: 'center',
	          fill: this.color
	        });
	        rects.push(rect);
	      }
	    }

	    if (this.optimizeOverlapping) {
	      rects = this._getOptimizedRects(rects);
	    }

	    var group = new fabric.Group(rects);
	    this.shadow && group.setShadow(this.shadow);
	    this.canvas.add(group);
	    this.canvas.fire('path:created', { path: group });

	    this.canvas.clearContext(this.canvas.contextTop);
	    this._resetShadow();
	    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
	    this.canvas.requestRenderAll();
	  },

	  /**
	   * @private
	   * @param {Array} rects
	   */
	  _getOptimizedRects: function(rects) {

	    // avoid creating duplicate rects at the same coordinates
	    var uniqueRects = { }, key, i, len;

	    for (i = 0, len = rects.length; i < len; i++) {
	      key = rects[i].left + '' + rects[i].top;
	      if (!uniqueRects[key]) {
	        uniqueRects[key] = rects[i];
	      }
	    }
	    var uniqueRectsArray = [];
	    for (key in uniqueRects) {
	      uniqueRectsArray.push(uniqueRects[key]);
	    }

	    return uniqueRectsArray;
	  },

	  /**
	   * Render new chunk of spray brush
	   */
	  render: function(sprayChunk) {
	    var ctx = this.canvas.contextTop, i, len;
	    ctx.fillStyle = this.color;

	    this._saveAndTransform(ctx);

	    for (i = 0, len = sprayChunk.length; i < len; i++) {
	      var point = sprayChunk[i];
	      if (typeof point.opacity !== 'undefined') {
	        ctx.globalAlpha = point.opacity;
	      }
	      ctx.fillRect(point.x, point.y, point.width, point.width);
	    }
	    ctx.restore();
	  },

	  /**
	   * Render all spray chunks
	   */
	  _render: function() {
	    var ctx = this.canvas.contextTop, i, ilen;
	    ctx.fillStyle = this.color;

	    this._saveAndTransform(ctx);

	    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
	      this.render(this.sprayChunks[i]);
	    }
	    ctx.restore();
	  },

	  /**
	   * @param {Object} pointer
	   */
	  addSprayChunk: function(pointer) {
	    this.sprayChunkPoints = [];

	    var x, y, width, radius = this.width / 2, i;

	    for (i = 0; i < this.density; i++) {

	      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);
	      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);

	      if (this.dotWidthVariance) {
	        width = fabric.util.getRandomInt(
	          // bottom clamp width to 1
	          Math.max(1, this.dotWidth - this.dotWidthVariance),
	          this.dotWidth + this.dotWidthVariance);
	      }
	      else {
	        width = this.dotWidth;
	      }

	      var point = new fabric.Point(x, y);
	      point.width = width;

	      if (this.randomOpacity) {
	        point.opacity = fabric.util.getRandomInt(0, 100) / 100;
	      }

	      this.sprayChunkPoints.push(point);
	    }

	    this.sprayChunks.push(this.sprayChunkPoints);
	  }
	});


	/**
	 * PatternBrush class
	 * @class fabric.PatternBrush
	 * @extends fabric.BaseBrush
	 */
	fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {

	  getPatternSrc: function() {

	    var dotWidth = 20,
	        dotDistance = 5,
	        patternCanvas = fabric.util.createCanvasElement(),
	        patternCtx = patternCanvas.getContext('2d');

	    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;

	    patternCtx.fillStyle = this.color;
	    patternCtx.beginPath();
	    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
	    patternCtx.closePath();
	    patternCtx.fill();

	    return patternCanvas;
	  },

	  getPatternSrcFunction: function() {
	    return String(this.getPatternSrc).replace('this.color', '"' + this.color + '"');
	  },

	  /**
	   * Creates "pattern" instance property
	   */
	  getPattern: function() {
	    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');
	  },

	  /**
	   * Sets brush styles
	   */
	  _setBrushStyles: function() {
	    this.callSuper('_setBrushStyles');
	    this.canvas.contextTop.strokeStyle = this.getPattern();
	  },

	  /**
	   * Creates path
	   */
	  createPath: function(pathData) {
	    var path = this.callSuper('createPath', pathData),
	        topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);

	    path.stroke = new fabric.Pattern({
	      source: this.source || this.getPatternSrcFunction(),
	      offsetX: -topLeft.x,
	      offsetY: -topLeft.y
	    });
	    return path;
	  }
	});


	(function() {

	  var getPointer = fabric.util.getPointer,
	      degreesToRadians = fabric.util.degreesToRadians,
	      radiansToDegrees = fabric.util.radiansToDegrees,
	      atan2 = Math.atan2,
	      abs = Math.abs,
	      supportLineDash = fabric.StaticCanvas.supports('setLineDash'),

	      STROKE_OFFSET = 0.5;

	  /**
	   * Canvas class
	   * @class fabric.Canvas
	   * @extends fabric.StaticCanvas
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}
	   * @see {@link fabric.Canvas#initialize} for constructor definition
	   *
	   * @fires object:modified
	   * @fires object:rotated
	   * @fires object:scaled
	   * @fires object:moved
	   * @fires object:skewed
	   * @fires object:rotating
	   * @fires object:scaling
	   * @fires object:moving
	   * @fires object:skewing
	   * @fires object:selected this event is deprecated. use selection:created
	   *
	   * @fires before:transform
	   * @fires before:selection:cleared
	   * @fires selection:cleared
	   * @fires selection:updated
	   * @fires selection:created
	   *
	   * @fires path:created
	   * @fires mouse:down
	   * @fires mouse:move
	   * @fires mouse:up
	   * @fires mouse:down:before
	   * @fires mouse:move:before
	   * @fires mouse:up:before
	   * @fires mouse:over
	   * @fires mouse:out
	   * @fires mouse:dblclick
	   *
	   * @fires dragover
	   * @fires dragenter
	   * @fires dragleave
	   * @fires drop
	   *
	   */
	  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * Constructor
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(el, options) {
	      options || (options = { });
	      this.renderAndResetBound = this.renderAndReset.bind(this);
	      this.requestRenderAllBound = this.requestRenderAll.bind(this);
	      this._initStatic(el, options);
	      this._initInteractive();
	      this._createCacheCanvas();
	    },

	    /**
	     * When true, objects can be transformed by one side (unproportionally)
	     * @type Boolean
	     * @default
	     */
	    uniScaleTransform:      false,

	    /**
	     * Indicates which key enable unproportional scaling
	     * values: 'altKey', 'shiftKey', 'ctrlKey'.
	     * If `null` or 'none' or any other string that is not a modifier key
	     * feature is disabled feature disabled.
	     * @since 1.6.2
	     * @type String
	     * @default
	     */
	    uniScaleKey:           'shiftKey',

	    /**
	     * When true, objects use center point as the origin of scale transformation.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredScaling:        false,

	    /**
	     * When true, objects use center point as the origin of rotate transformation.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredRotation:       false,

	    /**
	     * Indicates which key enable centered Transform
	     * values: 'altKey', 'shiftKey', 'ctrlKey'.
	     * If `null` or 'none' or any other string that is not a modifier key
	     * feature is disabled feature disabled.
	     * @since 1.6.2
	     * @type String
	     * @default
	     */
	    centeredKey:           'altKey',

	    /**
	     * Indicates which key enable alternate action on corner
	     * values: 'altKey', 'shiftKey', 'ctrlKey'.
	     * If `null` or 'none' or any other string that is not a modifier key
	     * feature is disabled feature disabled.
	     * @since 1.6.2
	     * @type String
	     * @default
	     */
	    altActionKey:           'shiftKey',

	    /**
	     * Indicates that canvas is interactive. This property should not be changed.
	     * @type Boolean
	     * @default
	     */
	    interactive:            true,

	    /**
	     * Indicates whether group selection should be enabled
	     * @type Boolean
	     * @default
	     */
	    selection:              true,

	    /**
	     * Indicates which key or keys enable multiple click selection
	     * Pass value as a string or array of strings
	     * values: 'altKey', 'shiftKey', 'ctrlKey'.
	     * If `null` or empty or containing any other string that is not a modifier key
	     * feature is disabled.
	     * @since 1.6.2
	     * @type String|Array
	     * @default
	     */
	    selectionKey:           'shiftKey',

	    /**
	     * Indicates which key enable alternative selection
	     * in case of target overlapping with active object
	     * values: 'altKey', 'shiftKey', 'ctrlKey'.
	     * For a series of reason that come from the general expectations on how
	     * things should work, this feature works only for preserveObjectStacking true.
	     * If `null` or 'none' or any other string that is not a modifier key
	     * feature is disabled.
	     * @since 1.6.5
	     * @type null|String
	     * @default
	     */
	    altSelectionKey:           null,

	    /**
	     * Color of selection
	     * @type String
	     * @default
	     */
	    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue

	    /**
	     * Default dash array pattern
	     * If not empty the selection border is dashed
	     * @type Array
	     */
	    selectionDashArray:     [],

	    /**
	     * Color of the border of selection (usually slightly darker than color of selection itself)
	     * @type String
	     * @default
	     */
	    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',

	    /**
	     * Width of a line used in object/group selection
	     * @type Number
	     * @default
	     */
	    selectionLineWidth:     1,

	    /**
	     * Select only shapes that are fully contained in the dragged selection rectangle.
	     * @type Boolean
	     * @default
	     */
	    selectionFullyContained: false,

	    /**
	     * Default cursor value used when hovering over an object on canvas
	     * @type String
	     * @default
	     */
	    hoverCursor:            'move',

	    /**
	     * Default cursor value used when moving an object on canvas
	     * @type String
	     * @default
	     */
	    moveCursor:             'move',

	    /**
	     * Default cursor value used for the entire canvas
	     * @type String
	     * @default
	     */
	    defaultCursor:          'default',

	    /**
	     * Cursor value used during free drawing
	     * @type String
	     * @default
	     */
	    freeDrawingCursor:      'crosshair',

	    /**
	     * Cursor value used for rotation point
	     * @type String
	     * @default
	     */
	    rotationCursor:         'crosshair',

	    /**
	     * Cursor value used for disabled elements ( corners with disabled action )
	     * @type String
	     * @since 2.0.0
	     * @default
	     */
	    notAllowedCursor:         'not-allowed',

	    /**
	     * Default element class that's given to wrapper (div) element of canvas
	     * @type String
	     * @default
	     */
	    containerClass:         'canvas-container',

	    /**
	     * When true, object detection happens on per-pixel basis rather than on per-bounding-box
	     * @type Boolean
	     * @default
	     */
	    perPixelTargetFind:     false,

	    /**
	     * Number of pixels around target pixel to tolerate (consider active) during object detection
	     * @type Number
	     * @default
	     */
	    targetFindTolerance:    0,

	    /**
	     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.
	     * @type Boolean
	     * @default
	     */
	    skipTargetFind:         false,

	    /**
	     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
	     * After mousedown, mousemove creates a shape,
	     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
	     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
	     * @type Boolean
	     * @default
	     */
	    isDrawingMode:          false,

	    /**
	     * Indicates whether objects should remain in current stack position when selected.
	     * When false objects are brought to top and rendered as part of the selection group
	     * @type Boolean
	     * @default
	     */
	    preserveObjectStacking: false,

	    /**
	     * Indicates the angle that an object will lock to while rotating.
	     * @type Number
	     * @since 1.6.7
	     * @default
	     */
	    snapAngle: 0,

	    /**
	     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
	     * When `null`, the snapThreshold will default to the snapAngle.
	     * @type null|Number
	     * @since 1.6.7
	     * @default
	     */
	    snapThreshold: null,

	    /**
	     * Indicates if the right click on canvas can output the context menu or not
	     * @type Boolean
	     * @since 1.6.5
	     * @default
	     */
	    stopContextMenu: false,

	    /**
	     * Indicates if the canvas can fire right click events
	     * @type Boolean
	     * @since 1.6.5
	     * @default
	     */
	    fireRightClick: false,

	    /**
	     * Indicates if the canvas can fire middle click events
	     * @type Boolean
	     * @since 1.7.8
	     * @default
	     */
	    fireMiddleClick: false,

	    /**
	     * @private
	     */
	    _initInteractive: function() {
	      this._currentTransform = null;
	      this._groupSelector = null;
	      this._initWrapperElement();
	      this._createUpperCanvas();
	      this._initEventListeners();

	      this._initRetinaScaling();

	      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);

	      this.calcOffset();
	    },

	    /**
	     * Divides objects in two groups, one to render immediately
	     * and one to render as activeGroup.
	     * @return {Array} objects to render immediately and pushes the other in the activeGroup.
	     */
	    _chooseObjectsToRender: function() {
	      var activeObjects = this.getActiveObjects(),
	          object, objsToRender, activeGroupObjects;

	      if (activeObjects.length > 0 && !this.preserveObjectStacking) {
	        objsToRender = [];
	        activeGroupObjects = [];
	        for (var i = 0, length = this._objects.length; i < length; i++) {
	          object = this._objects[i];
	          if (activeObjects.indexOf(object) === -1 ) {
	            objsToRender.push(object);
	          }
	          else {
	            activeGroupObjects.push(object);
	          }
	        }
	        if (activeObjects.length > 1) {
	          this._activeObject._objects = activeGroupObjects;
	        }
	        objsToRender.push.apply(objsToRender, activeGroupObjects);
	      }
	      else {
	        objsToRender = this._objects;
	      }
	      return objsToRender;
	    },

	    /**
	     * Renders both the top canvas and the secondary container canvas.
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    renderAll: function () {
	      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {
	        this.clearContext(this.contextTop);
	        this.contextTopDirty = false;
	      }
	      if (this.hasLostContext) {
	        this.renderTopLayer(this.contextTop);
	      }
	      var canvasToDrawOn = this.contextContainer;
	      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());
	      return this;
	    },

	    renderTopLayer: function(ctx) {
	      ctx.save();
	      if (this.isDrawingMode && this._isCurrentlyDrawing) {
	        this.freeDrawingBrush && this.freeDrawingBrush._render();
	        this.contextTopDirty = true;
	      }
	      // we render the top context - last object
	      if (this.selection && this._groupSelector) {
	        this._drawSelection(ctx);
	        this.contextTopDirty = true;
	      }
	      ctx.restore();
	    },

	    /**
	     * Method to render only the top canvas.
	     * Also used to render the group selection box.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    renderTop: function () {
	      var ctx = this.contextTop;
	      this.clearContext(ctx);
	      this.renderTopLayer(ctx);
	      this.fire('after:render');
	      return this;
	    },

	    /**
	     * Resets the current transform to its original values and chooses the type of resizing based on the event
	     * @private
	     */
	    _resetCurrentTransform: function() {
	      var t = this._currentTransform;

	      t.target.set({
	        scaleX: t.original.scaleX,
	        scaleY: t.original.scaleY,
	        skewX: t.original.skewX,
	        skewY: t.original.skewY,
	        left: t.original.left,
	        top: t.original.top
	      });

	      if (this._shouldCenterTransform(t.target)) {
	        if (t.originX !== 'center') {
	          if (t.originX === 'right') {
	            t.mouseXSign = -1;
	          }
	          else {
	            t.mouseXSign = 1;
	          }
	        }
	        if (t.originY !== 'center') {
	          if (t.originY === 'bottom') {
	            t.mouseYSign = -1;
	          }
	          else {
	            t.mouseYSign = 1;
	          }
	        }

	        t.originX = 'center';
	        t.originY = 'center';
	      }
	      else {
	        t.originX = t.original.originX;
	        t.originY = t.original.originY;
	      }
	    },

	    /**
	     * Checks if point is contained within an area of given object
	     * @param {Event} e Event object
	     * @param {fabric.Object} target Object to test against
	     * @param {Object} [point] x,y object of point coordinates we want to check.
	     * @return {Boolean} true if point is contained within an area of given object
	     */
	    containsPoint: function (e, target, point) {
	      var ignoreZoom = true,
	          pointer = point || this.getPointer(e, ignoreZoom),
	          xy;

	      if (target.group && target.group === this._activeObject && target.group.type === 'activeSelection') {
	        xy = this._normalizePointer(target.group, pointer);
	      }
	      else {
	        xy = { x: pointer.x, y: pointer.y };
	      }
	      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
	      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
	      return (target.containsPoint(xy) || target._findTargetCorner(pointer));
	    },

	    /**
	     * @private
	     */
	    _normalizePointer: function (object, pointer) {
	      var m = object.calcTransformMatrix(),
	          invertedM = fabric.util.invertTransform(m),
	          vptPointer = this.restorePointerVpt(pointer);
	      return fabric.util.transformPoint(vptPointer, invertedM);
	    },

	    /**
	     * Returns true if object is transparent at a certain location
	     * @param {fabric.Object} target Object to check
	     * @param {Number} x Left coordinate
	     * @param {Number} y Top coordinate
	     * @return {Boolean}
	     */
	    isTargetTransparent: function (target, x, y) {
	      // in case the target is the activeObject, we cannot execute this optimization
	      // because we need to draw controls too.
	      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {
	        var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),
	            targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),
	            targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);

	        var isTransparent = fabric.util.isTransparent(
	          target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);

	        return isTransparent;
	      }

	      var ctx = this.contextCache,
	          originalColor = target.selectionBackgroundColor, v = this.viewportTransform;

	      target.selectionBackgroundColor = '';

	      this.clearContext(ctx);

	      ctx.save();
	      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	      target.render(ctx);
	      ctx.restore();

	      target === this._activeObject && target._renderControls(ctx, {
	        hasBorders: false,
	        transparentCorners: false
	      }, {
	        hasBorders: false,
	      });

	      target.selectionBackgroundColor = originalColor;

	      var isTransparent = fabric.util.isTransparent(
	        ctx, x, y, this.targetFindTolerance);

	      return isTransparent;
	    },

	    /**
	     * takes an event and determins if selection key has been pressed
	     * @private
	     * @param {Event} e Event object
	     */
	    _isSelectionKeyPressed: function(e) {
	      var selectionKeyPressed = false;

	      if (Object.prototype.toString.call(this.selectionKey) === '[object Array]') {
	        selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });
	      }
	      else {
	        selectionKeyPressed = e[this.selectionKey];
	      }

	      return selectionKeyPressed;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _shouldClearSelection: function (e, target) {
	      var activeObjects = this.getActiveObjects(),
	          activeObject = this._activeObject;

	      return (
	        !target
	        ||
	        (target &&
	          activeObject &&
	          activeObjects.length > 1 &&
	          activeObjects.indexOf(target) === -1 &&
	          activeObject !== target &&
	          !this._isSelectionKeyPressed(e))
	        ||
	        (target && !target.evented)
	        ||
	        (target &&
	          !target.selectable &&
	          activeObject &&
	          activeObject !== target)
	      );
	    },

	    /**
	     * centeredScaling from object can't override centeredScaling from canvas.
	     * this should be fixed, since object setting should take precedence over canvas.
	     * @private
	     * @param {fabric.Object} target
	     */
	    _shouldCenterTransform: function (target) {
	      if (!target) {
	        return;
	      }

	      var t = this._currentTransform,
	          centerTransform;

	      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {
	        centerTransform = this.centeredScaling || target.centeredScaling;
	      }
	      else if (t.action === 'rotate') {
	        centerTransform = this.centeredRotation || target.centeredRotation;
	      }

	      return centerTransform ? !t.altKey : t.altKey;
	    },

	    /**
	     * @private
	     */
	    _getOriginFromCorner: function(target, corner) {
	      var origin = {
	        x: target.originX,
	        y: target.originY
	      };

	      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {
	        origin.x = 'right';
	      }
	      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {
	        origin.x = 'left';
	      }

	      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {
	        origin.y = 'bottom';
	      }
	      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {
	        origin.y = 'top';
	      }

	      return origin;
	    },

	    /**
	     * @private
	     * @param {Boolean} alreadySelected true if target is already selected
	     * @param {String} corner a string representing the corner ml, mr, tl ...
	     * @param {Event} e Event object
	     * @param {fabric.Object} [target] inserted back to help overriding. Unused
	     */
	    _getActionFromCorner: function(alreadySelected, corner, e /* target */) {
	      if (!corner || !alreadySelected) {
	        return 'drag';
	      }

	      switch (corner) {
	        case 'mtr':
	          return 'rotate';
	        case 'ml':
	        case 'mr':
	          return e[this.altActionKey] ? 'skewY' : 'scaleX';
	        case 'mt':
	        case 'mb':
	          return e[this.altActionKey] ? 'skewX' : 'scaleY';
	        default:
	          return 'scale';
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _setupCurrentTransform: function (e, target, alreadySelected) {
	      if (!target) {
	        return;
	      }

	      var pointer = this.getPointer(e),
	          corner = target._findTargetCorner(this.getPointer(e, true)),
	          action = this._getActionFromCorner(alreadySelected, corner, e, target),
	          origin = this._getOriginFromCorner(target, corner);

	      this._currentTransform = {
	        target: target,
	        action: action,
	        corner: corner,
	        scaleX: target.scaleX,
	        scaleY: target.scaleY,
	        skewX: target.skewX,
	        skewY: target.skewY,
	        // used by transation
	        offsetX: pointer.x - target.left,
	        offsetY: pointer.y - target.top,
	        originX: origin.x,
	        originY: origin.y,
	        ex: pointer.x,
	        ey: pointer.y,
	        lastX: pointer.x,
	        lastY: pointer.y,
	        // unsure they are usefull anymore.
	        // left: target.left,
	        // top: target.top,
	        theta: degreesToRadians(target.angle),
	        // end of unsure
	        width: target.width * target.scaleX,
	        mouseXSign: 1,
	        mouseYSign: 1,
	        shiftKey: e.shiftKey,
	        altKey: e[this.centeredKey],
	        original: fabric.util.saveObjectTransform(target),
	      };

	      this._currentTransform.original.originX = origin.x;
	      this._currentTransform.original.originY = origin.y;

	      this._resetCurrentTransform();
	      this._beforeTransform(e);
	    },

	    /**
	     * Translates object by "setting" its left/top
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @return {Boolean} true if the translation occurred
	     */
	    _translateObject: function (x, y) {
	      var transform = this._currentTransform,
	          target = transform.target,
	          newLeft = x - transform.offsetX,
	          newTop = y - transform.offsetY,
	          moveX = !target.get('lockMovementX') && target.left !== newLeft,
	          moveY = !target.get('lockMovementY') && target.top !== newTop;

	      moveX && target.set('left', newLeft);
	      moveY && target.set('top', newTop);
	      return moveX || moveY;
	    },

	    /**
	     * Check if we are increasing a positive skew or lower it,
	     * checking mouse direction and pressed corner.
	     * @private
	     */
	    _changeSkewTransformOrigin: function(mouseMove, t, by) {
	      var property = 'originX', origins = { 0: 'center' },
	          skew = t.target.skewX, originA = 'left', originB = 'right',
	          corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,
	          flipSign = 1;

	      mouseMove = mouseMove > 0 ? 1 : -1;
	      if (by === 'y') {
	        skew = t.target.skewY;
	        originA = 'top';
	        originB = 'bottom';
	        property = 'originY';
	      }
	      origins[-1] = originA;
	      origins[1] = originB;

	      t.target.flipX && (flipSign *= -1);
	      t.target.flipY && (flipSign *= -1);

	      if (skew === 0) {
	        t.skewSign = -corner * mouseMove * flipSign;
	        t[property] = origins[-mouseMove];
	      }
	      else {
	        skew = skew > 0 ? 1 : -1;
	        t.skewSign = skew;
	        t[property] = origins[skew * corner * flipSign];
	      }
	    },

	    /**
	     * Skew object by mouse events
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @param {String} by Either 'x' or 'y'
	     * @return {Boolean} true if the skewing occurred
	     */
	    _skewObject: function (x, y, by) {
	      var t = this._currentTransform,
	          target = t.target, skewed = false,
	          lockSkewingX = target.get('lockSkewingX'),
	          lockSkewingY = target.get('lockSkewingY');

	      if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {
	        return false;
	      }

	      // Get the constraint point
	      var center = target.getCenterPoint(),
	          actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],
	          lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],
	          actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();

	      this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);
	      actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by];
	      constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);
	      // Actually skew the object
	      skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);
	      t.lastX = x;
	      t.lastY = y;
	      // Make sure the constraints apply
	      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);
	      return skewed;
	    },

	    /**
	     * Set object skew
	     * @private
	     * @return {Boolean} true if the skewing occurred
	     */
	    _setObjectSkew: function(localMouse, transform, by, _dim) {
	      var target = transform.target, newValue, skewed = false,
	          skewSign = transform.skewSign, newDim, dimNoSkew,
	          otherBy, _otherBy, _by, newDimMouse, skewX, skewY;

	      if (by === 'x') {
	        otherBy = 'y';
	        _otherBy = 'Y';
	        _by = 'X';
	        skewX = 0;
	        skewY = target.skewY;
	      }
	      else {
	        otherBy = 'x';
	        _otherBy = 'X';
	        _by = 'Y';
	        skewX = target.skewX;
	        skewY = 0;
	      }

	      dimNoSkew = target._getTransformedDimensions(skewX, skewY);
	      newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];
	      if (newDimMouse <= 2) {
	        newValue = 0;
	      }
	      else {
	        newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /
	                                        (dimNoSkew[otherBy] / target['scale' + _otherBy]));
	        newValue = fabric.util.radiansToDegrees(newValue);
	      }
	      skewed = target['skew' + _by] !== newValue;
	      target.set('skew' + _by, newValue);
	      if (target['skew' + _otherBy] !== 0) {
	        newDim = target._getTransformedDimensions();
	        newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];
	        target.set('scale' + _otherBy, newValue);
	      }
	      return skewed;
	    },

	    /**
	     * Scales object by invoking its scaleX/scaleY methods
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.
	     *                    When not provided, an object is scaled by both dimensions equally
	     * @return {Boolean} true if the scaling occurred
	     */
	    _scaleObject: function (x, y, by) {
	      var t = this._currentTransform,
	          target = t.target,
	          lockScalingX = target.lockScalingX,
	          lockScalingY = target.lockScalingY,
	          lockScalingFlip = target.lockScalingFlip;

	      if (lockScalingX && lockScalingY) {
	        return false;
	      }

	      // Get the constraint point
	      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),
	          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),
	          dim = target._getTransformedDimensions(), scaled = false;

	      this._setLocalMouse(localMouse, t);

	      // Actually scale the object
	      scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);

	      // Make sure the constraints apply
	      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);
	      return scaled;
	    },

	    /**
	     * @private
	     * @return {Boolean} true if the scaling occurred
	     */
	    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {
	      var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,
	          scaleX = localMouse.x * target.scaleX / _dim.x,
	          scaleY = localMouse.y * target.scaleY / _dim.y,
	          changeX = target.scaleX !== scaleX,
	          changeY = target.scaleY !== scaleY;

	      transform.newScaleX = scaleX;
	      transform.newScaleY = scaleY;
	      if (by === 'x' && target instanceof fabric.Textbox) {
	        var w = target.width * (localMouse.x / _dim.x);
	        if (w >= target.getMinWidth()) {
	          scaled = w !== target.width;
	          target.set('width', w);
	          return scaled;
	        }
	        return false;
	      }

	      if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {
	        forbidScalingX = true;
	        localMouse.x = 0;
	      }

	      if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {
	        forbidScalingY = true;
	        localMouse.y = 0;
	      }

	      if (by === 'equally' && !lockScalingX && !lockScalingY) {
	        scaled = this._scaleObjectEqually(localMouse, target, transform, _dim);
	      }
	      else if (!by) {
	        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));
	        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));
	      }
	      else if (by === 'x' && !target.get('lockUniScaling')) {
	        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = changeX));
	      }
	      else if (by === 'y' && !target.get('lockUniScaling')) {
	        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = changeY));
	      }
	      forbidScalingX || forbidScalingY || this._flipObject(transform, by);
	      return scaled;
	    },

	    /**
	     * @private
	     * @return {Boolean} true if the scaling occurred
	     */
	    _scaleObjectEqually: function(localMouse, target, transform, _dim) {

	      var dist = localMouse.y + localMouse.x,
	          lastDist = _dim.y * transform.original.scaleY / target.scaleY +
	                     _dim.x * transform.original.scaleX / target.scaleX,
	          scaled, signX = localMouse.x < 0 ? -1 : 1,
	          signY = localMouse.y < 0 ? -1 : 1, newScaleX, newScaleY;

	      // We use transform.scaleX/Y instead of target.scaleX/Y
	      // because the object may have a min scale and we'll loose the proportions
	      newScaleX = signX * Math.abs(transform.original.scaleX * dist / lastDist);
	      newScaleY = signY * Math.abs(transform.original.scaleY * dist / lastDist);
	      scaled = newScaleX !== target.scaleX || newScaleY !== target.scaleY;
	      target.set('scaleX', newScaleX);
	      target.set('scaleY', newScaleY);
	      return scaled;
	    },

	    /**
	     * @private
	     */
	    _flipObject: function(transform, by) {
	      if (transform.newScaleX < 0 && by !== 'y') {
	        if (transform.originX === 'left') {
	          transform.originX = 'right';
	        }
	        else if (transform.originX === 'right') {
	          transform.originX = 'left';
	        }
	      }

	      if (transform.newScaleY < 0 && by !== 'x') {
	        if (transform.originY === 'top') {
	          transform.originY = 'bottom';
	        }
	        else if (transform.originY === 'bottom') {
	          transform.originY = 'top';
	        }
	      }
	    },

	    /**
	     * @private
	     */
	    _setLocalMouse: function(localMouse, t) {
	      var target = t.target, zoom = this.getZoom(),
	          padding = target.padding / zoom;

	      if (t.originX === 'right') {
	        localMouse.x *= -1;
	      }
	      else if (t.originX === 'center') {
	        localMouse.x *= t.mouseXSign * 2;
	        if (localMouse.x < 0) {
	          t.mouseXSign = -t.mouseXSign;
	        }
	      }

	      if (t.originY === 'bottom') {
	        localMouse.y *= -1;
	      }
	      else if (t.originY === 'center') {
	        localMouse.y *= t.mouseYSign * 2;
	        if (localMouse.y < 0) {
	          t.mouseYSign = -t.mouseYSign;
	        }
	      }

	      // adjust the mouse coordinates when dealing with padding
	      if (abs(localMouse.x) > padding) {
	        if (localMouse.x < 0) {
	          localMouse.x += padding;
	        }
	        else {
	          localMouse.x -= padding;
	        }
	      }
	      else { // mouse is within the padding, set to 0
	        localMouse.x = 0;
	      }

	      if (abs(localMouse.y) > padding) {
	        if (localMouse.y < 0) {
	          localMouse.y += padding;
	        }
	        else {
	          localMouse.y -= padding;
	        }
	      }
	      else {
	        localMouse.y = 0;
	      }
	    },

	    /**
	     * Rotates object by invoking its rotate method
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @return {Boolean} true if the rotation occurred
	     */
	    _rotateObject: function (x, y) {

	      var t = this._currentTransform,
	          target = t.target, constraintPosition,
	          constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);

	      if (target.lockRotation) {
	        return false;
	      }

	      var lastAngle = atan2(t.ey - constraintPosition.y, t.ex - constraintPosition.x),
	          curAngle = atan2(y - constraintPosition.y, x - constraintPosition.x),
	          angle = radiansToDegrees(curAngle - lastAngle + t.theta),
	          hasRotated = true;

	      if (target.snapAngle > 0) {
	        var snapAngle  = target.snapAngle,
	            snapThreshold  = target.snapThreshold || snapAngle,
	            rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,
	            leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;

	        if (Math.abs(angle - leftAngleLocked) < snapThreshold) {
	          angle = leftAngleLocked;
	        }
	        else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {
	          angle = rightAngleLocked;
	        }
	      }

	      // normalize angle to positive value
	      if (angle < 0) {
	        angle = 360 + angle;
	      }
	      angle %= 360;

	      if (target.angle === angle) {
	        hasRotated = false;
	      }
	      else {
	        // rotation only happen here
	        target.angle = angle;
	        // Make sure the constraints apply
	        target.setPositionByOrigin(constraintPosition, t.originX, t.originY);
	      }

	      return hasRotated;
	    },

	    /**
	     * Set the cursor type of the canvas element
	     * @param {String} value Cursor type of the canvas element.
	     * @see http://www.w3.org/TR/css3-ui/#cursor
	     */
	    setCursor: function (value) {
	      this.upperCanvasEl.style.cursor = value;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx to draw the selection on
	     */
	    _drawSelection: function (ctx) {
	      var groupSelector = this._groupSelector,
	          left = groupSelector.left,
	          top = groupSelector.top,
	          aleft = abs(left),
	          atop = abs(top);

	      if (this.selectionColor) {
	        ctx.fillStyle = this.selectionColor;

	        ctx.fillRect(
	          groupSelector.ex - ((left > 0) ? 0 : -left),
	          groupSelector.ey - ((top > 0) ? 0 : -top),
	          aleft,
	          atop
	        );
	      }

	      if (!this.selectionLineWidth || !this.selectionBorderColor) {
	        return;
	      }
	      ctx.lineWidth = this.selectionLineWidth;
	      ctx.strokeStyle = this.selectionBorderColor;

	      // selection border
	      if (this.selectionDashArray.length > 1 && !supportLineDash) {

	        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),
	            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop);

	        ctx.beginPath();

	        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);

	        ctx.closePath();
	        ctx.stroke();
	      }
	      else {
	        fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);
	        ctx.strokeRect(
	          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),
	          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),
	          aleft,
	          atop
	        );
	      }
	    },

	    /**
	     * Method that determines what object we are clicking on
	     * the skipGroup parameter is for internal use, is needed for shift+click action
	     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target
	     * or the outside part of the corner.
	     * @param {Event} e mouse event
	     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
	     * @return {fabric.Object} the target found
	     */
	    findTarget: function (e, skipGroup) {
	      if (this.skipTargetFind) {
	        return;
	      }

	      var ignoreZoom = true,
	          pointer = this.getPointer(e, ignoreZoom),
	          activeObject = this._activeObject,
	          aObjects = this.getActiveObjects(),
	          activeTarget, activeTargetSubs;

	      // first check current group (if one exists)
	      // active group does not check sub targets like normal groups.
	      // if active group just exits.
	      this.targets = [];

	      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
	        return activeObject;
	      }
	      // if we hit the corner of an activeObject, let's return that.
	      if (aObjects.length === 1 && activeObject._findTargetCorner(pointer)) {
	        return activeObject;
	      }
	      if (aObjects.length === 1 &&
	        activeObject === this._searchPossibleTargets([activeObject], pointer)) {
	        if (!this.preserveObjectStacking) {
	          return activeObject;
	        }
	        else {
	          activeTarget = activeObject;
	          activeTargetSubs = this.targets;
	          this.targets = [];
	        }
	      }
	      var target = this._searchPossibleTargets(this._objects, pointer);
	      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {
	        target = activeTarget;
	        this.targets = activeTargetSubs;
	      }
	      return target;
	    },

	    /**
	     * Checks point is inside the object.
	     * @param {Object} [pointer] x,y object of point coordinates we want to check.
	     * @param {fabric.Object} obj Object to test against
	     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.
	     * @return {Boolean} true if point is contained within an area of given object
	     * @private
	     */
	    _checkTarget: function(pointer, obj, globalPointer) {
	      if (obj &&
	          obj.visible &&
	          obj.evented &&
	          this.containsPoint(null, obj, pointer)){
	        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
	          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);
	          if (!isTransparent) {
	            return true;
	          }
	        }
	        else {
	          return true;
	        }
	      }
	    },

	    /**
	     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted
	     * @param {Array} [objects] objects array to look into
	     * @param {Object} [pointer] x,y object of point coordinates we want to check.
	     * @return {fabric.Object} object that contains pointer
	     * @private
	     */
	    _searchPossibleTargets: function(objects, pointer) {
	      // Cache all targets where their bounding box contains point.
	      var target, i = objects.length, subTarget;
	      // Do not check for currently grouped objects, since we check the parent group itself.
	      // until we call this function specifically to search inside the activeGroup
	      while (i--) {
	        var objToCheck = objects[i];
	        var pointerToUse = objToCheck.group && objToCheck.group.type !== 'activeSelection' ?
	          this._normalizePointer(objToCheck.group, pointer) : pointer;
	        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {
	          target = objects[i];
	          if (target.subTargetCheck && target instanceof fabric.Group) {
	            subTarget = this._searchPossibleTargets(target._objects, pointer);
	            subTarget && this.targets.push(subTarget);
	          }
	          break;
	        }
	      }
	      return target;
	    },

	    /**
	     * Returns pointer coordinates without the effect of the viewport
	     * @param {Object} pointer with "x" and "y" number values
	     * @return {Object} object with "x" and "y" number values
	     */
	    restorePointerVpt: function(pointer) {
	      return fabric.util.transformPoint(
	        pointer,
	        fabric.util.invertTransform(this.viewportTransform)
	      );
	    },

	    /**
	     * Returns pointer coordinates relative to canvas.
	     * Can return coordinates with or without viewportTransform.
	     * ignoreZoom false gives back coordinates that represent
	     * the point clicked on canvas element.
	     * ignoreZoom true gives back coordinates after being processed
	     * by the viewportTransform ( sort of coordinates of what is displayed
	     * on the canvas where you are clicking.
	     * ignoreZoom true = HTMLElement coordinates relative to top,left
	     * ignoreZoom false, default = fabric space coordinates, the same used for shape position
	     * To interact with your shapes top and left you want to use ignoreZoom true
	     * most of the time, while ignoreZoom false will give you coordinates
	     * compatible with the object.oCoords system.
	     * of the time.
	     * @param {Event} e
	     * @param {Boolean} ignoreZoom
	     * @return {Object} object with "x" and "y" number values
	     */
	    getPointer: function (e, ignoreZoom) {
	      // return cached values if we are in the event processing chain
	      if (this._absolutePointer && !ignoreZoom) {
	        return this._absolutePointer;
	      }
	      if (this._pointer && ignoreZoom) {
	        return this._pointer;
	      }

	      var pointer = getPointer(e),
	          upperCanvasEl = this.upperCanvasEl,
	          bounds = upperCanvasEl.getBoundingClientRect(),
	          boundsWidth = bounds.width || 0,
	          boundsHeight = bounds.height || 0,
	          cssScale;

	      if (!boundsWidth || !boundsHeight ) {
	        if ('top' in bounds && 'bottom' in bounds) {
	          boundsHeight = Math.abs( bounds.top - bounds.bottom );
	        }
	        if ('right' in bounds && 'left' in bounds) {
	          boundsWidth = Math.abs( bounds.right - bounds.left );
	        }
	      }

	      this.calcOffset();
	      pointer.x = pointer.x - this._offset.left;
	      pointer.y = pointer.y - this._offset.top;
	      if (!ignoreZoom) {
	        pointer = this.restorePointerVpt(pointer);
	      }

	      if (boundsWidth === 0 || boundsHeight === 0) {
	        // If bounds are not available (i.e. not visible), do not apply scale.
	        cssScale = { width: 1, height: 1 };
	      }
	      else {
	        cssScale = {
	          width: upperCanvasEl.width / boundsWidth,
	          height: upperCanvasEl.height / boundsHeight
	        };
	      }

	      return {
	        x: pointer.x * cssScale.width,
	        y: pointer.y * cssScale.height
	      };
	    },

	    /**
	     * @private
	     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
	     */
	    _createUpperCanvas: function () {
	      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, '');

	      // there is no need to create a new upperCanvas element if we have already one.
	      if (this.upperCanvasEl) {
	        this.upperCanvasEl.className = '';
	      }
	      else {
	        this.upperCanvasEl = this._createCanvasElement();
	      }
	      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);

	      this.wrapperEl.appendChild(this.upperCanvasEl);

	      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);
	      this._applyCanvasStyle(this.upperCanvasEl);
	      this.contextTop = this.upperCanvasEl.getContext('2d');
	    },

	    /**
	     * @private
	     */
	    _createCacheCanvas: function () {
	      this.cacheCanvasEl = this._createCanvasElement();
	      this.cacheCanvasEl.setAttribute('width', this.width);
	      this.cacheCanvasEl.setAttribute('height', this.height);
	      this.contextCache = this.cacheCanvasEl.getContext('2d');
	    },

	    /**
	     * @private
	     */
	    _initWrapperElement: function () {
	      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {
	        'class': this.containerClass
	      });
	      fabric.util.setStyle(this.wrapperEl, {
	        width: this.width + 'px',
	        height: this.height + 'px',
	        position: 'relative'
	      });
	      fabric.util.makeElementUnselectable(this.wrapperEl);
	    },

	    /**
	     * @private
	     * @param {HTMLElement} element canvas element to apply styles on
	     */
	    _applyCanvasStyle: function (element) {
	      var width = this.width || element.width,
	          height = this.height || element.height;

	      fabric.util.setStyle(element, {
	        position: 'absolute',
	        width: width + 'px',
	        height: height + 'px',
	        left: 0,
	        top: 0,
	        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',
	        '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'
	      });
	      element.width = width;
	      element.height = height;
	      fabric.util.makeElementUnselectable(element);
	    },

	    /**
	     * Copy the entire inline style from one element (fromEl) to another (toEl)
	     * @private
	     * @param {Element} fromEl Element style is copied from
	     * @param {Element} toEl Element copied style is applied to
	     */
	    _copyCanvasStyle: function (fromEl, toEl) {
	      toEl.style.cssText = fromEl.style.cssText;
	    },

	    /**
	     * Returns context of canvas where object selection is drawn
	     * @return {CanvasRenderingContext2D}
	     */
	    getSelectionContext: function() {
	      return this.contextTop;
	    },

	    /**
	     * Returns &lt;canvas> element on which object selection is drawn
	     * @return {HTMLCanvasElement}
	     */
	    getSelectionElement: function () {
	      return this.upperCanvasEl;
	    },

	    /**
	     * Returns currently active object
	     * @return {fabric.Object} active object
	     */
	    getActiveObject: function () {
	      return this._activeObject;
	    },

	    /**
	     * Returns an array with the current selected objects
	     * @return {fabric.Object} active object
	     */
	    getActiveObjects: function () {
	      var active = this._activeObject;
	      if (active) {
	        if (active.type === 'activeSelection' && active._objects) {
	          return active._objects.slice(0);
	        }
	        else {
	          return [active];
	        }
	      }
	      return [];
	    },

	    /**
	     * @private
	     * @param {fabric.Object} obj Object that was removed
	     */
	    _onObjectRemoved: function(obj) {
	      // removing active object should fire "selection:cleared" events
	      if (obj === this._activeObject) {
	        this.fire('before:selection:cleared', { target: obj });
	        this._discardActiveObject();
	        this.fire('selection:cleared', { target: obj });
	        obj.fire('deselected');
	      }
	      if (this._hoveredTarget === obj) {
	        this._hoveredTarget = null;
	      }
	      this.callSuper('_onObjectRemoved', obj);
	    },

	    /**
	     * @private
	     * Compares the old activeObject with the current one and fires correct events
	     * @param {fabric.Object} obj old activeObject
	     */
	    _fireSelectionEvents: function(oldObjects, e) {
	      var somethingChanged = false, objects = this.getActiveObjects(),
	          added = [], removed = [], opt = { e: e };
	      oldObjects.forEach(function(oldObject) {
	        if (objects.indexOf(oldObject) === -1) {
	          somethingChanged = true;
	          oldObject.fire('deselected', opt);
	          removed.push(oldObject);
	        }
	      });
	      objects.forEach(function(object) {
	        if (oldObjects.indexOf(object) === -1) {
	          somethingChanged = true;
	          object.fire('selected', opt);
	          added.push(object);
	        }
	      });
	      if (oldObjects.length > 0 && objects.length > 0) {
	        opt.selected = added;
	        opt.deselected = removed;
	        // added for backward compatibility
	        opt.updated = added[0] || removed[0];
	        opt.target = this._activeObject;
	        somethingChanged && this.fire('selection:updated', opt);
	      }
	      else if (objects.length > 0) {
	        // deprecated event
	        if (objects.length === 1) {
	          opt.target = added[0];
	          this.fire('object:selected', opt);
	        }
	        opt.selected = added;
	        // added for backward compatibility
	        opt.target = this._activeObject;
	        this.fire('selection:created', opt);
	      }
	      else if (oldObjects.length > 0) {
	        opt.deselected = removed;
	        this.fire('selection:cleared', opt);
	      }
	    },

	    /**
	     * Sets given object as the only active object on canvas
	     * @param {fabric.Object} object Object to set as an active one
	     * @param {Event} [e] Event (passed along when firing "object:selected")
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    setActiveObject: function (object, e) {
	      var currentActives = this.getActiveObjects();
	      this._setActiveObject(object, e);
	      this._fireSelectionEvents(currentActives, e);
	      return this;
	    },

	    /**
	     * @private
	     * @param {Object} object to set as active
	     * @param {Event} [e] Event (passed along when firing "object:selected")
	     * @return {Boolean} true if the selection happened
	     */
	    _setActiveObject: function(object, e) {
	      if (this._activeObject === object) {
	        return false;
	      }
	      if (!this._discardActiveObject(e, object)) {
	        return false;
	      }
	      if (object.onSelect({ e: e })) {
	        return false;
	      }
	      this._activeObject = object;
	      return true;
	    },

	    /**
	     * @private
	     */
	    _discardActiveObject: function(e, object) {
	      var obj = this._activeObject;
	      if (obj) {
	        // onDeselect return TRUE to cancel selection;
	        if (obj.onDeselect({ e: e, object: object })) {
	          return false;
	        }
	        this._activeObject = null;
	      }
	      return true;
	    },

	    /**
	     * Discards currently active object and fire events. If the function is called by fabric
	     * as a consequence of a mouse event, the event is passed as a parameter and
	     * sent to the fire function for the custom events. When used as a method the
	     * e param does not have any application.
	     * @param {event} e
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    discardActiveObject: function (e) {
	      var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();
	      if (currentActives.length) {
	        this.fire('before:selection:cleared', { target: activeObject, e: e });
	      }
	      this._discardActiveObject(e);
	      this._fireSelectionEvents(currentActives, e);
	      return this;
	    },

	    /**
	     * Clears a canvas element and removes all event listeners
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    dispose: function () {
	      var wrapper = this.wrapperEl;
	      this.removeListeners();
	      wrapper.removeChild(this.upperCanvasEl);
	      wrapper.removeChild(this.lowerCanvasEl);
	      this.contextCache = null;
	      this.contextTop = null;
	      ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {
	        fabric.util.cleanUpJsdomNode(this[element]);
	        this[element] = undefined;
	      }).bind(this));
	      if (wrapper.parentNode) {
	        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
	      }
	      delete this.wrapperEl;
	      fabric.StaticCanvas.prototype.dispose.call(this);
	      return this;
	    },

	    /**
	     * Clears all contexts (background, main, top) of an instance
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    clear: function () {
	      // this.discardActiveGroup();
	      this.discardActiveObject();
	      this.clearContext(this.contextTop);
	      return this.callSuper('clear');
	    },

	    /**
	     * Draws objects' controls (borders/controls)
	     * @param {CanvasRenderingContext2D} ctx Context to render controls on
	     */
	    drawControls: function(ctx) {
	      var activeObject = this._activeObject;

	      if (activeObject) {
	        activeObject._renderControls(ctx);
	      }
	    },

	    /**
	     * @private
	     */
	    _toObject: function(instance, methodName, propertiesToInclude) {
	      //If the object is part of the current selection group, it should
	      //be transformed appropriately
	      //i.e. it should be serialised as it would appear if the selection group
	      //were to be destroyed.
	      var originalProperties = this._realizeGroupTransformOnObject(instance),
	          object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);
	      //Undo the damage we did by changing all of its properties
	      this._unwindGroupTransformOnObject(instance, originalProperties);
	      return object;
	    },

	    /**
	     * Realises an object's group transformation on it
	     * @private
	     * @param {fabric.Object} [instance] the object to transform (gets mutated)
	     * @returns the original values of instance which were changed
	     */
	    _realizeGroupTransformOnObject: function(instance) {
	      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {
	        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];
	        //Copy all the positionally relevant properties across now
	        var originalValues = {};
	        layoutProps.forEach(function(prop) {
	          originalValues[prop] = instance[prop];
	        });
	        this._activeObject.realizeTransform(instance);
	        return originalValues;
	      }
	      else {
	        return null;
	      }
	    },

	    /**
	     * Restores the changed properties of instance
	     * @private
	     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
	     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
	     */
	    _unwindGroupTransformOnObject: function(instance, originalValues) {
	      if (originalValues) {
	        instance.set(originalValues);
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGObject: function(markup, instance, reviver) {
	      //If the object is in a selection group, simulate what would happen to that
	      //object when the group is deselected
	      var originalProperties = this._realizeGroupTransformOnObject(instance);
	      this.callSuper('_setSVGObject', markup, instance, reviver);
	      this._unwindGroupTransformOnObject(instance, originalProperties);
	    },

	    setViewportTransform: function (vpt) {
	      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {
	        this._activeObject.clearContextTop();
	      }
	      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);
	    }
	  });

	  // copying static properties manually to work around Opera's bug,
	  // where "prototype" property is enumerable and overrides existing prototype
	  for (var prop in fabric.StaticCanvas) {
	    if (prop !== 'prototype') {
	      fabric.Canvas[prop] = fabric.StaticCanvas[prop];
	    }
	  }
	})();


	(function() {

	  var cursorOffset = {
	        mt: 0, // n
	        tr: 1, // ne
	        mr: 2, // e
	        br: 3, // se
	        mb: 4, // s
	        bl: 5, // sw
	        ml: 6, // w
	        tl: 7 // nw
	      },
	      addListener = fabric.util.addListener,
	      removeListener = fabric.util.removeListener,
	      RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,
	      addEventOptions = { passive: false };

	  function checkClick(e, value) {
	    return e.button && (e.button === value - 1);
	  }

	  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * Map of cursor style values for each of the object controls
	     * @private
	     */
	    cursorMap: [
	      'n-resize',
	      'ne-resize',
	      'e-resize',
	      'se-resize',
	      's-resize',
	      'sw-resize',
	      'w-resize',
	      'nw-resize'
	    ],

	    /**
	     * Contains the id of the touch event that owns the fabric transform
	     * @type Number
	     * @private
	     */
	    mainTouchId: null,

	    /**
	     * Adds mouse listeners to canvas
	     * @private
	     */
	    _initEventListeners: function () {
	      // in case we initialized the class twice. This should not happen normally
	      // but in some kind of applications where the canvas element may be changed
	      // this is a workaround to having double listeners.
	      this.removeListeners();
	      this._bindEvents();
	      this.addOrRemove(addListener, 'add');
	    },

	    /**
	     * return an event prefix pointer or mouse.
	     * @private
	     */
	    _getEventPrefix: function () {
	      return this.enablePointerEvents ? 'pointer' : 'mouse';
	    },

	    addOrRemove: function(functor, eventjsFunctor) {
	      var canvasElement = this.upperCanvasEl,
	          eventTypePrefix = this._getEventPrefix();
	      functor(fabric.window, 'resize', this._onResize);
	      functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);
	      functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	      functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);
	      functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);
	      functor(canvasElement, 'wheel', this._onMouseWheel);
	      functor(canvasElement, 'contextmenu', this._onContextMenu);
	      functor(canvasElement, 'dblclick', this._onDoubleClick);
	      functor(canvasElement, 'dragover', this._onDragOver);
	      functor(canvasElement, 'dragenter', this._onDragEnter);
	      functor(canvasElement, 'dragleave', this._onDragLeave);
	      functor(canvasElement, 'drop', this._onDrop);
	      if (!this.enablePointerEvents) {
	        functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);
	      }
	      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {
	        eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);
	        eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);
	        eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);
	        eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);
	        eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);
	      }
	    },

	    /**
	     * Removes all event listeners
	     */
	    removeListeners: function() {
	      this.addOrRemove(removeListener, 'remove');
	      // if you dispose on a mouseDown, before mouse up, you need to clean document to...
	      var eventTypePrefix = this._getEventPrefix();
	      removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
	      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
	      removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
	    },

	    /**
	     * @private
	     */
	    _bindEvents: function() {
	      if (this.eventsBound) {
	        // for any reason we pass here twice we do not want to bind events twice.
	        return;
	      }
	      this._onMouseDown = this._onMouseDown.bind(this);
	      this._onTouchStart = this._onTouchStart.bind(this);
	      this._onMouseMove = this._onMouseMove.bind(this);
	      this._onMouseUp = this._onMouseUp.bind(this);
	      this._onTouchEnd = this._onTouchEnd.bind(this);
	      this._onResize = this._onResize.bind(this);
	      this._onGesture = this._onGesture.bind(this);
	      this._onDrag = this._onDrag.bind(this);
	      this._onShake = this._onShake.bind(this);
	      this._onLongPress = this._onLongPress.bind(this);
	      this._onOrientationChange = this._onOrientationChange.bind(this);
	      this._onMouseWheel = this._onMouseWheel.bind(this);
	      this._onMouseOut = this._onMouseOut.bind(this);
	      this._onMouseEnter = this._onMouseEnter.bind(this);
	      this._onContextMenu = this._onContextMenu.bind(this);
	      this._onDoubleClick = this._onDoubleClick.bind(this);
	      this._onDragOver = this._onDragOver.bind(this);
	      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');
	      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');
	      this._onDrop = this._simpleEventHandler.bind(this, 'drop');
	      this.eventsBound = true;
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js gesture
	     * @param {Event} [self] Inner Event object
	     */
	    _onGesture: function(e, self) {
	      this.__onTransformGesture && this.__onTransformGesture(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js drag
	     * @param {Event} [self] Inner Event object
	     */
	    _onDrag: function(e, self) {
	      this.__onDrag && this.__onDrag(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on wheel event
	     */
	    _onMouseWheel: function(e) {
	      this.__onMouseWheel(e);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseOut: function(e) {
	      var target = this._hoveredTarget;
	      this.fire('mouse:out', { target: target, e: e });
	      this._hoveredTarget = null;
	      target && target.fire('mouseout', { e: e });
	      if (this._iTextInstances) {
	        this._iTextInstances.forEach(function(obj) {
	          if (obj.isEditing) {
	            obj.hiddenTextarea.focus();
	          }
	        });
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mouseenter
	     */
	    _onMouseEnter: function(e) {
	      // This find target and consequent 'mouse:over' is used to
	      // clear old instances on hovered target.
	      // calling findTarget has the side effect of killing target.__corner.
	      // as a short term fix we are not firing this if we are currently transforming.
	      // as a long term fix we need to separate the action of finding a target with the
	      // side effects we added to it.
	      if (!this.currentTransform && !this.findTarget(e)) {
	        this.fire('mouse:over', { target: null, e: e });
	        this._hoveredTarget = null;
	      }
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js orientation change
	     * @param {Event} [self] Inner Event object
	     */
	    _onOrientationChange: function(e, self) {
	      this.__onOrientationChange && this.__onOrientationChange(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js shake
	     * @param {Event} [self] Inner Event object
	     */
	    _onShake: function(e, self) {
	      this.__onShake && this.__onShake(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js shake
	     * @param {Event} [self] Inner Event object
	     */
	    _onLongPress: function(e, self) {
	      this.__onLongPress && this.__onLongPress(e, self);
	    },

	    /**
	     * prevent default to allow drop event to be fired
	     * @private
	     * @param {Event} [e] Event object fired on Event.js shake
	     */
	    _onDragOver: function(e) {
	      e.preventDefault();
	      var target = this._simpleEventHandler('dragover', e);
	      this._fireEnterLeaveEvents(target, e);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onContextMenu: function (e) {
	      if (this.stopContextMenu) {
	        e.stopPropagation();
	        e.preventDefault();
	      }
	      return false;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onDoubleClick: function (e) {
	      this._cacheTransformEventData(e);
	      this._handleEvent(e, 'dblclick');
	      this._resetTransformEventData(e);
	    },

	    /**
	     * Return a the id of an event.
	     * returns either the pointerId or the identifier or 0 for the mouse event
	     * @private
	     * @param {Event} evt Event object
	     */
	    getPointerId: function(evt) {
	      var changedTouches = evt.changedTouches;

	      if (changedTouches) {
	        return changedTouches[0] && changedTouches[0].identifier;
	      }

	      if (this.enablePointerEvents) {
	        return evt.pointerId;
	      }

	      return -1;
	    },

	    /**
	     * Determines if an event has the id of the event that is considered main
	     * @private
	     * @param {evt} event Event object
	     */
	    _isMainEvent: function(evt) {
	      if (evt.isPrimary === true) {
	        return true;
	      }
	      if (evt.isPrimary === false) {
	        return false;
	      }
	      if (evt.type === 'touchend' && evt.touches.length === 0) {
	        return true;
	      }
	      if (evt.changedTouches) {
	        return evt.changedTouches[0].identifier === this.mainTouchId;
	      }
	      return true;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onTouchStart: function(e) {
	      e.preventDefault();
	      if (this.mainTouchId === null) {
	        this.mainTouchId = this.getPointerId(e);
	      }
	      this.__onMouseDown(e);
	      this._resetTransformEventData();
	      var canvasElement = this.upperCanvasEl,
	          eventTypePrefix = this._getEventPrefix();
	      addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
	      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
	      // Unbind mousedown to prevent double triggers from touch devices
	      removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseDown: function (e) {
	      this.__onMouseDown(e);
	      this._resetTransformEventData();
	      var canvasElement = this.upperCanvasEl,
	          eventTypePrefix = this._getEventPrefix();
	      removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	      addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
	      addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onTouchEnd: function(e) {
	      if (e.touches.length > 0) {
	        // if there are still touches stop here
	        return;
	      }
	      this.__onMouseUp(e);
	      this._resetTransformEventData();
	      this.mainTouchId = null;
	      var eventTypePrefix = this._getEventPrefix();
	      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
	      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
	      var _this = this;
	      if (this._willAddMouseDown) {
	        clearTimeout(this._willAddMouseDown);
	      }
	      this._willAddMouseDown = setTimeout(function() {
	        // Wait 400ms before rebinding mousedown to prevent double triggers
	        // from touch devices
	        addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);
	        _this._willAddMouseDown = 0;
	      }, 400);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    _onMouseUp: function (e) {
	      this.__onMouseUp(e);
	      this._resetTransformEventData();
	      var canvasElement = this.upperCanvasEl,
	          eventTypePrefix = this._getEventPrefix();
	      if (this._isMainEvent(e)) {
	        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
	        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	        addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    _onMouseMove: function (e) {
	      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();
	      this.__onMouseMove(e);
	    },

	    /**
	     * @private
	     */
	    _onResize: function () {
	      this.calcOffset();
	    },

	    /**
	     * Decides whether the canvas should be redrawn in mouseup and mousedown events.
	     * @private
	     * @param {Object} target
	     */
	    _shouldRender: function(target) {
	      var activeObject = this._activeObject;

	      if (
	        !!activeObject !== !!target ||
	        (activeObject && target && (activeObject !== target))
	      ) {
	        // this covers: switch of target, from target to no target, selection of target
	        // multiSelection with key and mouse
	        return true;
	      }
	      else if (activeObject && activeObject.isEditing) {
	        // if we mouse up/down over a editing textbox a cursor change,
	        // there is no need to re render
	        return false;
	      }
	      return false;
	    },

	    /**
	     * Method that defines the actions when mouse is released on canvas.
	     * The method resets the currentTransform parameters, store the image corner
	     * position in the image object and render the canvas on top.
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    __onMouseUp: function (e) {
	      var target, transform = this._currentTransform,
	          groupSelector = this._groupSelector, shouldRender = false,
	          isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));
	      this._cacheTransformEventData(e);
	      target = this._target;
	      this._handleEvent(e, 'up:before');
	      // if right/middle click just fire events and return
	      // target undefined will make the _handleEvent search the target
	      if (checkClick(e, RIGHT_CLICK)) {
	        if (this.fireRightClick) {
	          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);
	        }
	        return;
	      }

	      if (checkClick(e, MIDDLE_CLICK)) {
	        if (this.fireMiddleClick) {
	          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);
	        }
	        this._resetTransformEventData();
	        return;
	      }

	      if (this.isDrawingMode && this._isCurrentlyDrawing) {
	        this._onMouseUpInDrawingMode(e);
	        return;
	      }

	      if (!this._isMainEvent(e)) {
	        return;
	      }
	      if (transform) {
	        this._finalizeCurrentTransform(e);
	        shouldRender = transform.actionPerformed;
	      }

	      if (!isClick) {
	        this._maybeGroupObjects(e);
	        shouldRender || (shouldRender = this._shouldRender(target));
	      }
	      if (target) {
	        target.isMoving = false;
	      }
	      this._setCursorFromEvent(e, target);
	      this._handleEvent(e, 'up', LEFT_CLICK, isClick);
	      this._groupSelector = null;
	      this._currentTransform = null;
	      // reset the target information about which corner is selected
	      target && (target.__corner = 0);
	      if (shouldRender) {
	        this.requestRenderAll();
	      }
	      else if (!isClick) {
	        this.renderTop();
	      }
	    },

	    /**
	     * @private
	     * Handle event firing for target and subtargets
	     * @param {Event} e event from mouse
	     * @param {String} eventType event to fire (up, down or move)
	     * @return {Fabric.Object} target return the the target found, for internal reasons.
	     */
	    _simpleEventHandler: function(eventType, e) {
	      var target = this.findTarget(e),
	          targets = this.targets,
	          options = {
	            e: e,
	            target: target,
	            subTargets: targets,
	          };
	      this.fire(eventType, options);
	      target && target.fire(eventType, options);
	      if (!targets) {
	        return target;
	      }
	      for (var i = 0; i < targets.length; i++) {
	        targets[i].fire(eventType, options);
	      }
	      return target;
	    },

	    /**
	     * @private
	     * Handle event firing for target and subtargets
	     * @param {Event} e event from mouse
	     * @param {String} eventType event to fire (up, down or move)
	     * @param {fabric.Object} targetObj receiving event
	     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
	     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
	     */
	    _handleEvent: function(e, eventType, button, isClick) {
	      var target = this._target,
	          targets = this.targets || [],
	          options = {
	            e: e,
	            target: target,
	            subTargets: targets,
	            button: button || LEFT_CLICK,
	            isClick: isClick || false,
	            pointer: this._pointer,
	            absolutePointer: this._absolutePointer,
	            transform: this._currentTransform
	          };
	      this.fire('mouse:' + eventType, options);
	      target && target.fire('mouse' + eventType, options);
	      for (var i = 0; i < targets.length; i++) {
	        targets[i].fire('mouse' + eventType, options);
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
	     */
	    _finalizeCurrentTransform: function(e) {

	      var transform = this._currentTransform,
	          target = transform.target,
	          eventName,
	          options = {
	            e: e,
	            target: target,
	            transform: transform,
	          };

	      if (target._scaling) {
	        target._scaling = false;
	      }

	      target.setCoords();

	      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {
	        if (transform.actionPerformed) {
	          eventName = this._addEventOptions(options, transform);
	          this._fire(eventName, options);
	        }
	        this._fire('modified', options);
	      }
	    },

	    /**
	     * Mutate option object in order to add by property and give back the event name.
	     * @private
	     * @param {Object} options to mutate
	     * @param {Object} transform to inspect action from
	     */
	    _addEventOptions: function(options, transform) {
	      // we can probably add more details at low cost
	      // scale change, rotation changes, translation changes
	      var eventName, by;
	      switch (transform.action) {
	        case 'scaleX':
	          eventName = 'scaled';
	          by = 'x';
	          break;
	        case 'scaleY':
	          eventName = 'scaled';
	          by = 'y';
	          break;
	        case 'skewX':
	          eventName = 'skewed';
	          by = 'x';
	          break;
	        case 'skewY':
	          eventName = 'skewed';
	          by = 'y';
	          break;
	        case 'scale':
	          eventName = 'scaled';
	          by = 'equally';
	          break;
	        case 'rotate':
	          eventName = 'rotated';
	          break;
	        case 'drag':
	          eventName = 'moved';
	          break;
	      }
	      options.by = by;
	      return eventName;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseDownInDrawingMode: function(e) {
	      this._isCurrentlyDrawing = true;
	      if (this.getActiveObject()) {
	        this.discardActiveObject(e).requestRenderAll();
	      }
	      if (this.clipTo) {
	        fabric.util.clipContext(this, this.contextTop);
	      }
	      var pointer = this.getPointer(e);
	      this.freeDrawingBrush.onMouseDown(pointer, { e: e, pointer: pointer });
	      this._handleEvent(e, 'down');
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    _onMouseMoveInDrawingMode: function(e) {
	      if (this._isCurrentlyDrawing) {
	        var pointer = this.getPointer(e);
	        this.freeDrawingBrush.onMouseMove(pointer, { e: e, pointer: pointer });
	      }
	      this.setCursor(this.freeDrawingCursor);
	      this._handleEvent(e, 'move');
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    _onMouseUpInDrawingMode: function(e) {
	      if (this.clipTo) {
	        this.contextTop.restore();
	      }
	      var pointer = this.getPointer(e);
	      this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e, pointer: pointer });
	      this._handleEvent(e, 'up');
	    },

	    /**
	     * Method that defines the actions when mouse is clicked on canvas.
	     * The method inits the currentTransform parameters and renders all the
	     * canvas so the current image can be placed on the top canvas and the rest
	     * in on the container one.
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    __onMouseDown: function (e) {
	      this._cacheTransformEventData(e);
	      this._handleEvent(e, 'down:before');
	      var target = this._target;
	      // if right click just fire events
	      if (checkClick(e, RIGHT_CLICK)) {
	        if (this.fireRightClick) {
	          this._handleEvent(e, 'down', RIGHT_CLICK);
	        }
	        return;
	      }

	      if (checkClick(e, MIDDLE_CLICK)) {
	        if (this.fireMiddleClick) {
	          this._handleEvent(e, 'down', MIDDLE_CLICK);
	        }
	        return;
	      }

	      if (this.isDrawingMode) {
	        this._onMouseDownInDrawingMode(e);
	        return;
	      }

	      if (!this._isMainEvent(e)) {
	        return;
	      }

	      // ignore if some object is being transformed at this moment
	      if (this._currentTransform) {
	        return;
	      }

	      var pointer = this._pointer;
	      // save pointer for check in __onMouseUp event
	      this._previousPointer = pointer;
	      var shouldRender = this._shouldRender(target),
	          shouldGroup = this._shouldGroup(e, target);
	      if (this._shouldClearSelection(e, target)) {
	        this.discardActiveObject(e);
	      }
	      else if (shouldGroup) {
	        this._handleGrouping(e, target);
	        target = this._activeObject;
	      }

	      if (this.selection && (!target ||
	        (!target.selectable && !target.isEditing && target !== this._activeObject))) {
	        this._groupSelector = {
	          ex: pointer.x,
	          ey: pointer.y,
	          top: 0,
	          left: 0
	        };
	      }

	      if (target) {
	        var alreadySelected = target === this._activeObject;
	        if (target.selectable) {
	          this.setActiveObject(target, e);
	        }
	        if (target === this._activeObject && (target.__corner || !shouldGroup)) {
	          this._setupCurrentTransform(e, target, alreadySelected);
	        }
	      }
	      this._handleEvent(e, 'down');
	      // we must renderAll so that we update the visuals
	      (shouldRender || shouldGroup) && this.requestRenderAll();
	    },

	    /**
	     * reset cache form common information needed during event processing
	     * @private
	     */
	    _resetTransformEventData: function() {
	      this._target = null;
	      this._pointer = null;
	      this._absolutePointer = null;
	    },

	    /**
	     * Cache common information needed during event processing
	     * @private
	     * @param {Event} e Event object fired on event
	     */
	    _cacheTransformEventData: function(e) {
	      // reset in order to avoid stale caching
	      this._resetTransformEventData();
	      this._pointer = this.getPointer(e, true);
	      this._absolutePointer = this.restorePointerVpt(this._pointer);
	      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;
	    },

	    /**
	     * @private
	     */
	    _beforeTransform: function(e) {
	      var t = this._currentTransform;
	      this.stateful && t.target.saveState();
	      this.fire('before:transform', {
	        e: e,
	        transform: t,
	      });
	      // determine if it's a drag or rotate case
	      if (t.corner) {
	        this.onBeforeScaleRotate(t.target);
	      }
	    },

	    /**
	     * Method that defines the actions when mouse is hovering the canvas.
	     * The currentTransform parameter will define whether the user is rotating/scaling/translating
	     * an image or neither of them (only hovering). A group selection is also possible and would cancel
	     * all any other type of action.
	     * In case of an image transformation only the top canvas will be rendered.
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    __onMouseMove: function (e) {
	      this._handleEvent(e, 'move:before');
	      this._cacheTransformEventData(e);
	      var target, pointer;

	      if (this.isDrawingMode) {
	        this._onMouseMoveInDrawingMode(e);
	        return;
	      }

	      if (!this._isMainEvent(e)) {
	        return;
	      }

	      var groupSelector = this._groupSelector;

	      // We initially clicked in an empty area, so we draw a box for multiple selection
	      if (groupSelector) {
	        pointer = this._pointer;

	        groupSelector.left = pointer.x - groupSelector.ex;
	        groupSelector.top = pointer.y - groupSelector.ey;

	        this.renderTop();
	      }
	      else if (!this._currentTransform) {
	        target = this.findTarget(e) || null;
	        this._setCursorFromEvent(e, target);
	        this._fireOverOutEvents(target, e);
	      }
	      else {
	        this._transformObject(e);
	      }
	      this._handleEvent(e, 'move');
	      this._resetTransformEventData();
	    },

	    /**
	     * Manage the mouseout, mouseover events for the fabric object on the canvas
	     * @param {Fabric.Object} target the target where the target from the mousemove event
	     * @param {Event} e Event object fired on mousemove
	     * @private
	     */
	    _fireOverOutEvents: function(target, e) {
	      this.fireSyntheticInOutEvents(target, e, {
	        targetName: '_hoveredTarget',
	        canvasEvtOut: 'mouse:out',
	        evtOut: 'mouseout',
	        canvasEvtIn: 'mouse:over',
	        evtIn: 'mouseover',
	      });
	    },

	    /**
	     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas
	     * @param {Fabric.Object} target the target where the target from the onDrag event
	     * @param {Event} e Event object fired on ondrag
	     * @private
	     */
	    _fireEnterLeaveEvents: function(target, e) {
	      this.fireSyntheticInOutEvents(target, e, {
	        targetName: '_draggedoverTarget',
	        evtOut: 'dragleave',
	        evtIn: 'dragenter',
	      });
	    },

	    /**
	     * Manage the synthetic in/out events for the fabric objects on the canvas
	     * @param {Fabric.Object} target the target where the target from the supported events
	     * @param {Event} e Event object fired
	     * @param {Object} config configuration for the function to work
	     * @param {String} config.targetName property on the canvas where the old target is stored
	     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out
	     * @param {String} config.evtOut name of the event to fire for out
	     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in
	     * @param {String} config.evtIn name of the event to fire for in
	     * @private
	     */
	    fireSyntheticInOutEvents: function(target, e, config) {
	      var inOpt, outOpt, oldTarget = this[config.targetName], outFires, inFires,
	          targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;
	      if (targetChanged) {
	        inOpt = { e: e, target: target, previousTarget: oldTarget };
	        outOpt = { e: e, target: oldTarget, nextTarget: target };
	        this[config.targetName] = target;
	      }
	      inFires = target && targetChanged;
	      outFires = oldTarget && targetChanged;
	      if (outFires) {
	        canvasEvtOut && this.fire(canvasEvtOut, outOpt);
	        oldTarget.fire(config.evtOut, outOpt);
	      }
	      if (inFires) {
	        canvasEvtIn && this.fire(canvasEvtIn, inOpt);
	        target.fire(config.evtIn, inOpt);
	      }
	    },

	    /**
	     * Method that defines actions when an Event Mouse Wheel
	     * @param {Event} e Event object fired on mouseup
	     */
	    __onMouseWheel: function(e) {
	      this._cacheTransformEventData(e);
	      this._handleEvent(e, 'wheel');
	      this._resetTransformEventData();
	    },

	    /**
	     * @private
	     * @param {Event} e Event fired on mousemove
	     */
	    _transformObject: function(e) {
	      var pointer = this.getPointer(e),
	          transform = this._currentTransform;

	      transform.reset = false;
	      transform.target.isMoving = true;
	      transform.shiftKey = e.shiftKey;
	      transform.altKey = e[this.centeredKey];

	      this._beforeScaleTransform(e, transform);
	      this._performTransformAction(e, transform, pointer);

	      transform.actionPerformed && this.requestRenderAll();
	    },

	    /**
	     * @private
	     */
	    _performTransformAction: function(e, transform, pointer) {
	      var x = pointer.x,
	          y = pointer.y,
	          action = transform.action,
	          actionPerformed = false,
	          options = {
	            target: transform.target,
	            e: e,
	            transform: transform,
	            pointer: pointer
	          };

	      if (action === 'rotate') {
	        (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', options);
	      }
	      else if (action === 'scale') {
	        (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', options);
	      }
	      else if (action === 'scaleX') {
	        (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', options);
	      }
	      else if (action === 'scaleY') {
	        (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', options);
	      }
	      else if (action === 'skewX') {
	        (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', options);
	      }
	      else if (action === 'skewY') {
	        (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', options);
	      }
	      else {
	        actionPerformed = this._translateObject(x, y);
	        if (actionPerformed) {
	          this._fire('moving', options);
	          this.setCursor(options.target.moveCursor || this.moveCursor);
	        }
	      }
	      transform.actionPerformed = transform.actionPerformed || actionPerformed;
	    },

	    /**
	     * @private
	     */
	    _fire: function(eventName, options) {
	      this.fire('object:' + eventName, options);
	      options.target.fire(eventName, options);
	    },

	    /**
	     * @private
	     */
	    _beforeScaleTransform: function(e, transform) {
	      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {
	        var centerTransform = this._shouldCenterTransform(transform.target);

	        // Switch from a normal resize to center-based
	        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||
	           // Switch from center-based resize to normal one
	           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')
	        ) {
	          this._resetCurrentTransform();
	          transform.reset = true;
	        }
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {Object} transform current transform
	     * @param {Number} x mouse position x from origin
	     * @param {Number} y mouse position y from origin
	     * @return {Boolean} true if the scaling occurred
	     */
	    _onScale: function(e, transform, x, y) {
	      if (this._isUniscalePossible(e, transform.target)) {
	        transform.currentAction = 'scale';
	        return this._scaleObject(x, y);
	      }
	      else {
	        // Switch from a normal resize to proportional
	        if (!transform.reset && transform.currentAction === 'scale') {
	          this._resetCurrentTransform();
	        }

	        transform.currentAction = 'scaleEqually';
	        return this._scaleObject(x, y, 'equally');
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target current target
	     * @return {Boolean} true if unproportional scaling is possible
	     */
	    _isUniscalePossible: function(e, target) {
	      return (e[this.uniScaleKey] || this.uniScaleTransform) && !target.get('lockUniScaling');
	    },

	    /**
	     * Sets the cursor depending on where the canvas is being hovered.
	     * Note: very buggy in Opera
	     * @param {Event} e Event object
	     * @param {Object} target Object that the mouse is hovering, if so.
	     */
	    _setCursorFromEvent: function (e, target) {
	      if (!target) {
	        this.setCursor(this.defaultCursor);
	        return false;
	      }
	      var hoverCursor = target.hoverCursor || this.hoverCursor,
	          activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?
	            this._activeObject : null,
	          // only show proper corner when group selection is not active
	          corner = (!activeSelection || !activeSelection.contains(target))
	                    && target._findTargetCorner(this.getPointer(e, true));

	      if (!corner) {
	        this.setCursor(hoverCursor);
	      }
	      else {
	        this.setCursor(this.getCornerCursor(corner, target, e));
	      }
	    },

	    /**
	     * @private
	     */
	    getCornerCursor: function(corner, target, e) {
	      if (this.actionIsDisabled(corner, target, e)) {
	        return this.notAllowedCursor;
	      }
	      else if (corner in cursorOffset) {
	        return this._getRotatedCornerCursor(corner, target, e);
	      }
	      else if (corner === 'mtr' && target.hasRotatingPoint) {
	        return this.rotationCursor;
	      }
	      else {
	        return this.defaultCursor;
	      }
	    },

	    actionIsDisabled: function(corner, target, e) {
	      if (corner === 'mt' || corner === 'mb') {
	        return e[this.altActionKey] ? target.lockSkewingX : target.lockScalingY;
	      }
	      else if (corner === 'ml' || corner === 'mr') {
	        return e[this.altActionKey] ? target.lockSkewingY : target.lockScalingX;
	      }
	      else if (corner === 'mtr') {
	        return target.lockRotation;
	      }
	      else {
	        return this._isUniscalePossible(e, target) ?
	          target.lockScalingX && target.lockScalingY : target.lockScalingX || target.lockScalingY;
	      }
	    },

	    /**
	     * @private
	     */
	    _getRotatedCornerCursor: function(corner, target, e) {
	      var n = Math.round((target.angle % 360) / 45);

	      if (n < 0) {
	        n += 8; // full circle ahead
	      }
	      n += cursorOffset[corner];
	      if (e[this.altActionKey] && cursorOffset[corner] % 2 === 0) {
	        //if we are holding shift and we are on a mx corner...
	        n += 2;
	      }
	      // normalize n to be from 0 to 7
	      n %= 8;

	      return this.cursorMap[n];
	    }
	  });
	})();


	(function() {

	  var min = Math.min,
	      max = Math.max;

	  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     * @return {Boolean}
	     */
	    _shouldGroup: function(e, target) {
	      var activeObject = this._activeObject;
	      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&
	            (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _handleGrouping: function (e, target) {
	      var activeObject = this._activeObject;
	      // avoid multi select when shift click on a corner
	      if (activeObject.__corner) {
	        return;
	      }
	      if (target === activeObject) {
	        // if it's a group, find target again, using activeGroup objects
	        target = this.findTarget(e, true);
	        // if even object is not found or we are on activeObjectCorner, bail out
	        if (!target || !target.selectable) {
	          return;
	        }
	      }
	      if (activeObject && activeObject.type === 'activeSelection') {
	        this._updateActiveSelection(target, e);
	      }
	      else {
	        this._createActiveSelection(target, e);
	      }
	    },

	    /**
	     * @private
	     */
	    _updateActiveSelection: function(target, e) {
	      var activeSelection = this._activeObject,
	          currentActiveObjects = activeSelection._objects.slice(0);
	      if (activeSelection.contains(target)) {
	        activeSelection.removeWithUpdate(target);
	        this._hoveredTarget = target;
	        if (activeSelection.size() === 1) {
	          // activate last remaining object
	          this._setActiveObject(activeSelection.item(0), e);
	        }
	      }
	      else {
	        activeSelection.addWithUpdate(target);
	        this._hoveredTarget = activeSelection;
	      }
	      this._fireSelectionEvents(currentActiveObjects, e);
	    },

	    /**
	     * @private
	     */
	    _createActiveSelection: function(target, e) {
	      var currentActives = this.getActiveObjects(), group = this._createGroup(target);
	      this._hoveredTarget = group;
	      this._setActiveObject(group, e);
	      this._fireSelectionEvents(currentActives, e);
	    },

	    /**
	     * @private
	     * @param {Object} target
	     */
	    _createGroup: function(target) {
	      var objects = this._objects,
	          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),
	          groupObjects = isActiveLower
	            ? [this._activeObject, target]
	            : [target, this._activeObject];
	      this._activeObject.isEditing && this._activeObject.exitEditing();
	      return new fabric.ActiveSelection(groupObjects, {
	        canvas: this
	      });
	    },

	    /**
	     * @private
	     * @param {Event} e mouse event
	     */
	    _groupSelectedObjects: function (e) {

	      var group = this._collectObjects(e),
	          aGroup;

	      // do not create group for 1 element only
	      if (group.length === 1) {
	        this.setActiveObject(group[0], e);
	      }
	      else if (group.length > 1) {
	        aGroup = new fabric.ActiveSelection(group.reverse(), {
	          canvas: this
	        });
	        this.setActiveObject(aGroup, e);
	      }
	    },

	    /**
	     * @private
	     */
	    _collectObjects: function(e) {
	      var group = [],
	          currentObject,
	          x1 = this._groupSelector.ex,
	          y1 = this._groupSelector.ey,
	          x2 = x1 + this._groupSelector.left,
	          y2 = y1 + this._groupSelector.top,
	          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),
	          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),
	          allowIntersect = !this.selectionFullyContained,
	          isClick = x1 === x2 && y1 === y2;
	      // we iterate reverse order to collect top first in case of click.
	      for (var i = this._objects.length; i--; ) {
	        currentObject = this._objects[i];

	        if (!currentObject || !currentObject.selectable || !currentObject.visible) {
	          continue;
	        }

	        if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2)) ||
	            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||
	            (allowIntersect && currentObject.containsPoint(selectionX1Y1)) ||
	            (allowIntersect && currentObject.containsPoint(selectionX2Y2))
	        ) {
	          group.push(currentObject);
	          // only add one object if it's a click
	          if (isClick) {
	            break;
	          }
	        }
	      }

	      if (group.length > 1) {
	        group = group.filter(function(object) {
	          return !object.onSelect({ e: e });
	        });
	      }

	      return group;
	    },

	    /**
	     * @private
	     */
	    _maybeGroupObjects: function(e) {
	      if (this.selection && this._groupSelector) {
	        this._groupSelectedObjects(e);
	      }
	      this.setCursor(this.defaultCursor);
	      // clear selection and current transformation
	      this._groupSelector = null;
	    }
	  });

	})();


	(function () {
	  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	    /**
	     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
	     * @param {Object} [options] Options object
	     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent
	     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0
	     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
	     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
	     * @example <caption>Generate jpeg dataURL with lower quality</caption>
	     * var dataURL = canvas.toDataURL({
	     *   format: 'jpeg',
	     *   quality: 0.8
	     * });
	     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
	     * var dataURL = canvas.toDataURL({
	     *   format: 'png',
	     *   left: 100,
	     *   top: 100,
	     *   width: 200,
	     *   height: 200
	     * });
	     * @example <caption>Generate double scaled png dataURL</caption>
	     * var dataURL = canvas.toDataURL({
	     *   format: 'png',
	     *   multiplier: 2
	     * });
	     */
	    toDataURL: function (options) {
	      options || (options = { });

	      var format = options.format || 'png',
	          quality = options.quality || 1,
	          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),
	          canvasEl = this.toCanvasElement(multiplier, options);
	      return fabric.util.toDataURL(canvasEl, format, quality);
	    },

	    /**
	     * Create a new HTMLCanvas element painted with the current canvas content.
	     * No need to resize the actual one or repaint it.
	     * Will transfer object ownership to a new canvas, paint it, and set everything back.
	     * This is an intermediary step used to get to a dataUrl but also it is useful to
	     * create quick image copies of a canvas without passing for the dataUrl string
	     * @param {Number} [multiplier] a zoom factor.
	     * @param {Object} [cropping] Cropping informations
	     * @param {Number} [cropping.left] Cropping left offset.
	     * @param {Number} [cropping.top] Cropping top offset.
	     * @param {Number} [cropping.width] Cropping width.
	     * @param {Number} [cropping.height] Cropping height.
	     */
	    toCanvasElement: function(multiplier, cropping) {
	      multiplier = multiplier || 1;
	      cropping = cropping || { };
	      var scaledWidth = (cropping.width || this.width) * multiplier,
	          scaledHeight = (cropping.height || this.height) * multiplier,
	          zoom = this.getZoom(),
	          originalWidth = this.width,
	          originalHeight = this.height,
	          newZoom = zoom * multiplier,
	          vp = this.viewportTransform,
	          translateX = (vp[4] - (cropping.left || 0)) * multiplier,
	          translateY = (vp[5] - (cropping.top || 0)) * multiplier,
	          originalInteractive = this.interactive,
	          newVp = [newZoom, 0, 0, newZoom, translateX, translateY],
	          originalRetina = this.enableRetinaScaling,
	          canvasEl = fabric.util.createCanvasElement(),
	          originalContextTop = this.contextTop;
	      canvasEl.width = scaledWidth;
	      canvasEl.height = scaledHeight;
	      this.contextTop = null;
	      this.enableRetinaScaling = false;
	      this.interactive = false;
	      this.viewportTransform = newVp;
	      this.width = scaledWidth;
	      this.height = scaledHeight;
	      this.calcViewportBoundaries();
	      this.renderCanvas(canvasEl.getContext('2d'), this._objects);
	      this.viewportTransform = vp;
	      this.width = originalWidth;
	      this.height = originalHeight;
	      this.calcViewportBoundaries();
	      this.interactive = originalInteractive;
	      this.enableRetinaScaling = originalRetina;
	      this.contextTop = originalContextTop;
	      return canvasEl;
	    },
	  });

	})();


	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Populates canvas with data from the specified dataless JSON.
	   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}
	   * @deprecated since 1.2.2
	   * @param {String|Object} json JSON string or object
	   * @param {Function} callback Callback, invoked when json is parsed
	   *                            and corresponding objects (e.g: {@link fabric.Image})
	   *                            are initialized
	   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
	   * @return {fabric.Canvas} instance
	   * @chainable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
	   */
	  loadFromDatalessJSON: function (json, callback, reviver) {
	    return this.loadFromJSON(json, callback, reviver);
	  },

	  /**
	   * Populates canvas with data from the specified JSON.
	   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
	   * @param {String|Object} json JSON string or object
	   * @param {Function} callback Callback, invoked when json is parsed
	   *                            and corresponding objects (e.g: {@link fabric.Image})
	   *                            are initialized
	   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
	   * @return {fabric.Canvas} instance
	   * @chainable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
	   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
	   * @example <caption>loadFromJSON</caption>
	   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
	   * @example <caption>loadFromJSON with reviver</caption>
	   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
	   *   // `o` = json object
	   *   // `object` = fabric.Object instance
	   *   // ... do some stuff ...
	   * });
	   */
	  loadFromJSON: function (json, callback, reviver) {
	    if (!json) {
	      return;
	    }

	    // serialize if it wasn't already
	    var serialized = (typeof json === 'string')
	      ? JSON.parse(json)
	      : fabric.util.object.clone(json);

	    var _this = this,
	        clipPath = serialized.clipPath,
	        renderOnAddRemove = this.renderOnAddRemove;

	    this.renderOnAddRemove = false;

	    delete serialized.clipPath;

	    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {
	      _this.clear();
	      _this._setBgOverlay(serialized, function () {
	        if (clipPath) {
	          _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {
	            _this.clipPath = enlivenedCanvasClip[0];
	            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
	          });
	        }
	        else {
	          _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
	        }
	      });
	    }, reviver);
	    return this;
	  },

	  /**
	   * @private
	   * @param {Object} serialized Object with background and overlay information
	   * @param {Array} restored canvas objects
	   * @param {Function} cached renderOnAddRemove callback
	   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
	   */
	  __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {
	    var _this = this;
	    enlivenedObjects.forEach(function(obj, index) {
	      // we splice the array just in case some custom classes restored from JSON
	      // will add more object to canvas at canvas init.
	      _this.insertAt(obj, index);
	    });
	    this.renderOnAddRemove = renderOnAddRemove;
	    // remove parts i cannot set as options
	    delete serialized.objects;
	    delete serialized.backgroundImage;
	    delete serialized.overlayImage;
	    delete serialized.background;
	    delete serialized.overlay;
	    // this._initOptions does too many things to just
	    // call it. Normally loading an Object from JSON
	    // create the Object instance. Here the Canvas is
	    // already an instance and we are just loading things over it
	    this._setOptions(serialized);
	    this.renderAll();
	    callback && callback();
	  },

	  /**
	   * @private
	   * @param {Object} serialized Object with background and overlay information
	   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
	   */
	  _setBgOverlay: function(serialized, callback) {
	    var loaded = {
	      backgroundColor: false,
	      overlayColor: false,
	      backgroundImage: false,
	      overlayImage: false
	    };

	    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
	      callback && callback();
	      return;
	    }

	    var cbIfLoaded = function () {
	      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
	        callback && callback();
	      }
	    };

	    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);
	    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);
	    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);
	    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);
	  },

	  /**
	   * @private
	   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
	   * @param {(Object|String)} value Value to set
	   * @param {Object} loaded Set loaded property to true if property is set
	   * @param {Object} callback Callback function to invoke after property is set
	   */
	  __setBgOverlay: function(property, value, loaded, callback) {
	    var _this = this;

	    if (!value) {
	      loaded[property] = true;
	      callback && callback();
	      return;
	    }

	    if (property === 'backgroundImage' || property === 'overlayImage') {
	      fabric.util.enlivenObjects([value], function(enlivedObject){
	        _this[property] = enlivedObject[0];
	        loaded[property] = true;
	        callback && callback();
	      });
	    }
	    else {
	      this['set' + fabric.util.string.capitalize(property, true)](value, function() {
	        loaded[property] = true;
	        callback && callback();
	      });
	    }
	  },

	  /**
	   * @private
	   * @param {Array} objects
	   * @param {Function} callback
	   * @param {Function} [reviver]
	   */
	  _enlivenObjects: function (objects, callback, reviver) {
	    if (!objects || objects.length === 0) {
	      callback && callback([]);
	      return;
	    }

	    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {
	      callback && callback(enlivenedObjects);
	    }, null, reviver);
	  },

	  /**
	   * @private
	   * @param {String} format
	   * @param {Function} callback
	   */
	  _toDataURL: function (format, callback) {
	    this.clone(function (clone) {
	      callback(clone.toDataURL(format));
	    });
	  },

	  /**
	   * @private
	   * @param {String} format
	   * @param {Number} multiplier
	   * @param {Function} callback
	   */
	  _toDataURLWithMultiplier: function (format, multiplier, callback) {
	    this.clone(function (clone) {
	      callback(clone.toDataURLWithMultiplier(format, multiplier));
	    });
	  },

	  /**
	   * Clones canvas instance
	   * @param {Object} [callback] Receives cloned instance as a first argument
	   * @param {Array} [properties] Array of properties to include in the cloned canvas and children
	   */
	  clone: function (callback, properties) {
	    var data = JSON.stringify(this.toJSON(properties));
	    this.cloneWithoutData(function(clone) {
	      clone.loadFromJSON(data, function() {
	        callback && callback(clone);
	      });
	    });
	  },

	  /**
	   * Clones canvas instance without cloning existing data.
	   * This essentially copies canvas dimensions, clipping properties, etc.
	   * but leaves data empty (so that you can populate it with your own)
	   * @param {Object} [callback] Receives cloned instance as a first argument
	   */
	  cloneWithoutData: function(callback) {
	    var el = fabric.util.createCanvasElement();

	    el.width = this.width;
	    el.height = this.height;

	    var clone = new fabric.Canvas(el);
	    clone.clipTo = this.clipTo;
	    if (this.backgroundImage) {
	      clone.setBackgroundImage(this.backgroundImage.src, function() {
	        clone.renderAll();
	        callback && callback(clone);
	      });
	      clone.backgroundImageOpacity = this.backgroundImageOpacity;
	      clone.backgroundImageStretch = this.backgroundImageStretch;
	    }
	    else {
	      callback && callback(clone);
	    }
	  }
	});


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      clone = fabric.util.object.clone,
	      toFixed = fabric.util.toFixed,
	      capitalize = fabric.util.string.capitalize,
	      degreesToRadians = fabric.util.degreesToRadians,
	      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),
	      objectCaching = !fabric.isLikelyNode,
	      ALIASING_LIMIT = 2;

	  if (fabric.Object) {
	    return;
	  }

	  /**
	   * Root object class from which all 2d shape classes inherit from
	   * @class fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}
	   * @see {@link fabric.Object#initialize} for constructor definition
	   *
	   * @fires added
	   * @fires removed
	   *
	   * @fires selected
	   * @fires deselected
	   * @fires modified
	   * @fires modified
	   * @fires moved
	   * @fires scaled
	   * @fires rotated
	   * @fires skewed
	   *
	   * @fires rotating
	   * @fires scaling
	   * @fires moving
	   * @fires skewing
	   *
	   * @fires mousedown
	   * @fires mouseup
	   * @fires mouseover
	   * @fires mouseout
	   * @fires mousewheel
	   * @fires mousedblclick
	   *
	   * @fires dragover
	   * @fires dragenter
	   * @fires dragleave
	   * @fires drop
	   */
	  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {

	    /**
	     * Type of an object (rect, circle, path, etc.).
	     * Note that this property is meant to be read-only and not meant to be modified.
	     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
	     * @type String
	     * @default
	     */
	    type:                     'object',

	    /**
	     * Horizontal origin of transformation of an object (one of "left", "right", "center")
	     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
	     * @type String
	     * @default
	     */
	    originX:                  'left',

	    /**
	     * Vertical origin of transformation of an object (one of "top", "bottom", "center")
	     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
	     * @type String
	     * @default
	     */
	    originY:                  'top',

	    /**
	     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
	     * @type Number
	     * @default
	     */
	    top:                      0,

	    /**
	     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
	     * @type Number
	     * @default
	     */
	    left:                     0,

	    /**
	     * Object width
	     * @type Number
	     * @default
	     */
	    width:                    0,

	    /**
	     * Object height
	     * @type Number
	     * @default
	     */
	    height:                   0,

	    /**
	     * Object scale factor (horizontal)
	     * @type Number
	     * @default
	     */
	    scaleX:                   1,

	    /**
	     * Object scale factor (vertical)
	     * @type Number
	     * @default
	     */
	    scaleY:                   1,

	    /**
	     * When true, an object is rendered as flipped horizontally
	     * @type Boolean
	     * @default
	     */
	    flipX:                    false,

	    /**
	     * When true, an object is rendered as flipped vertically
	     * @type Boolean
	     * @default
	     */
	    flipY:                    false,

	    /**
	     * Opacity of an object
	     * @type Number
	     * @default
	     */
	    opacity:                  1,

	    /**
	     * Angle of rotation of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    angle:                    0,

	    /**
	     * Angle of skew on x axes of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    skewX:                    0,

	    /**
	     * Angle of skew on y axes of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    skewY:                    0,

	    /**
	     * Size of object's controlling corners (in pixels)
	     * @type Number
	     * @default
	     */
	    cornerSize:               13,

	    /**
	     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
	     * @type Boolean
	     * @default
	     */
	    transparentCorners:       true,

	    /**
	     * Default cursor value used when hovering over this object on canvas
	     * @type String
	     * @default
	     */
	    hoverCursor:              null,

	    /**
	     * Default cursor value used when moving this object on canvas
	     * @type String
	     * @default
	     */
	    moveCursor:               null,

	    /**
	     * Padding between object and its controlling borders (in pixels)
	     * @type Number
	     * @default
	     */
	    padding:                  0,

	    /**
	     * Color of controlling borders of an object (when it's active)
	     * @type String
	     * @default
	     */
	    borderColor:              'rgba(102,153,255,0.75)',

	    /**
	     * Array specifying dash pattern of an object's borders (hasBorder must be true)
	     * @since 1.6.2
	     * @type Array
	     */
	    borderDashArray:          null,

	    /**
	     * Color of controlling corners of an object (when it's active)
	     * @type String
	     * @default
	     */
	    cornerColor:              'rgba(102,153,255,0.5)',

	    /**
	     * Color of controlling corners of an object (when it's active and transparentCorners false)
	     * @since 1.6.2
	     * @type String
	     * @default
	     */
	    cornerStrokeColor:        null,

	    /**
	     * Specify style of control, 'rect' or 'circle'
	     * @since 1.6.2
	     * @type String
	     */
	    cornerStyle:          'rect',

	    /**
	     * Array specifying dash pattern of an object's control (hasBorder must be true)
	     * @since 1.6.2
	     * @type Array
	     */
	    cornerDashArray:          null,

	    /**
	     * When true, this object will use center point as the origin of transformation
	     * when being scaled via the controls.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredScaling:          false,

	    /**
	     * When true, this object will use center point as the origin of transformation
	     * when being rotated via the controls.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredRotation:         true,

	    /**
	     * Color of object's fill
	     * takes css colors https://www.w3.org/TR/css-color-3/
	     * @type String
	     * @default
	     */
	    fill:                     'rgb(0,0,0)',

	    /**
	     * Fill rule used to fill an object
	     * accepted values are nonzero, evenodd
	     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
	     * @type String
	     * @default
	     */
	    fillRule:                 'nonzero',

	    /**
	     * Composite rule used for canvas globalCompositeOperation
	     * @type String
	     * @default
	     */
	    globalCompositeOperation: 'source-over',

	    /**
	     * Background color of an object.
	     * takes css colors https://www.w3.org/TR/css-color-3/
	     * @type String
	     * @default
	     */
	    backgroundColor:          '',

	    /**
	     * Selection Background color of an object. colored layer behind the object when it is active.
	     * does not mix good with globalCompositeOperation methods.
	     * @type String
	     * @default
	     */
	    selectionBackgroundColor:          '',

	    /**
	     * When defined, an object is rendered via stroke and this property specifies its color
	     * takes css colors https://www.w3.org/TR/css-color-3/
	     * @type String
	     * @default
	     */
	    stroke:                   null,

	    /**
	     * Width of a stroke used to render this object
	     * @type Number
	     * @default
	     */
	    strokeWidth:              1,

	    /**
	     * Array specifying dash pattern of an object's stroke (stroke must be defined)
	     * @type Array
	     */
	    strokeDashArray:          null,

	    /**
	     * Line offset of an object's stroke
	     * @type Number
	     * @default
	     */
	    strokeDashOffset: 0,

	    /**
	     * Line endings style of an object's stroke (one of "butt", "round", "square")
	     * @type String
	     * @default
	     */
	    strokeLineCap:            'butt',

	    /**
	     * Corner style of an object's stroke (one of "bevil", "round", "miter")
	     * @type String
	     * @default
	     */
	    strokeLineJoin:           'miter',

	    /**
	     * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
	     * @type Number
	     * @default
	     */
	    strokeMiterLimit:         4,

	    /**
	     * Shadow object representing shadow of this shape
	     * @type fabric.Shadow
	     * @default
	     */
	    shadow:                   null,

	    /**
	     * Opacity of object's controlling borders when object is active and moving
	     * @type Number
	     * @default
	     */
	    borderOpacityWhenMoving:  0.4,

	    /**
	     * Scale factor of object's controlling borders
	     * @type Number
	     * @default
	     */
	    borderScaleFactor:        1,

	    /**
	     * Transform matrix (similar to SVG's transform matrix)
	     * This property has been depreacted. Since caching and and qrDecompose this
	     * property can be handled with the standard top,left,scaleX,scaleY,angle and skewX.
	     * A documentation example on how to parse and merge a transformMatrix will be provided before
	     * completely removing it in fabric 4.0
	     * If you are starting a project now, DO NOT use it.
	     * @deprecated since 3.2.0
	     * @type Array
	     */
	    transformMatrix:          null,

	    /**
	     * Minimum allowed scale value of an object
	     * @type Number
	     * @default
	     */
	    minScaleLimit:            0,

	    /**
	     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
	     * But events still fire on it.
	     * @type Boolean
	     * @default
	     */
	    selectable:               true,

	    /**
	     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
	     * @type Boolean
	     * @default
	     */
	    evented:                  true,

	    /**
	     * When set to `false`, an object is not rendered on canvas
	     * @type Boolean
	     * @default
	     */
	    visible:                  true,

	    /**
	     * When set to `false`, object's controls are not displayed and can not be used to manipulate object
	     * @type Boolean
	     * @default
	     */
	    hasControls:              true,

	    /**
	     * When set to `false`, object's controlling borders are not rendered
	     * @type Boolean
	     * @default
	     */
	    hasBorders:               true,

	    /**
	     * When set to `false`, object's controlling rotating point will not be visible or selectable
	     * @type Boolean
	     * @default
	     */
	    hasRotatingPoint:         true,

	    /**
	     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)
	     * @type Number
	     * @default
	     */
	    rotatingPointOffset:      40,

	    /**
	     * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
	     * @type Boolean
	     * @default
	     */
	    perPixelTargetFind:       false,

	    /**
	     * When `false`, default object's values are not included in its serialization
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues:     true,

	    /**
	     * Function that determines clipping of an object (context is passed as a first argument).
	     * If you are using code minification, ctx argument can be minified/manglied you should use
	     * as a workaround `var ctx = arguments[0];` in the function;
	     * Note that context origin is at the object's center point (not left/top corner)
	     * @deprecated since 2.0.0
	     * @type Function
	     */
	    clipTo:                   null,

	    /**
	     * When `true`, object horizontal movement is locked
	     * @type Boolean
	     * @default
	     */
	    lockMovementX:            false,

	    /**
	     * When `true`, object vertical movement is locked
	     * @type Boolean
	     * @default
	     */
	    lockMovementY:            false,

	    /**
	     * When `true`, object rotation is locked
	     * @type Boolean
	     * @default
	     */
	    lockRotation:             false,

	    /**
	     * When `true`, object horizontal scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockScalingX:             false,

	    /**
	     * When `true`, object vertical scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockScalingY:             false,

	    /**
	     * When `true`, object non-uniform scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockUniScaling:           false,

	    /**
	     * When `true`, object horizontal skewing is locked
	     * @type Boolean
	     * @default
	     */
	    lockSkewingX:             false,

	    /**
	     * When `true`, object vertical skewing is locked
	     * @type Boolean
	     * @default
	     */
	    lockSkewingY:             false,

	    /**
	     * When `true`, object cannot be flipped by scaling into negative values
	     * @type Boolean
	     * @default
	     */
	    lockScalingFlip:          false,

	    /**
	     * When `true`, object is not exported in OBJECT/JSON
	     * @since 1.6.3
	     * @type Boolean
	     * @default
	     */
	    excludeFromExport:        false,

	    /**
	     * When `true`, object is cached on an additional canvas.
	     * When `false`, object is not cached unless necessary ( clipPath )
	     * default to true
	     * @since 1.7.0
	     * @type Boolean
	     * @default true
	     */
	    objectCaching:            objectCaching,

	    /**
	     * When `true`, object properties are checked for cache invalidation. In some particular
	     * situation you may want this to be disabled ( spray brush, very big, groups)
	     * or if your application does not allow you to modify properties for groups child you want
	     * to disable it for groups.
	     * default to false
	     * since 1.7.0
	     * @type Boolean
	     * @default false
	     */
	    statefullCache:            false,

	    /**
	     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
	     * too much and will be redrawn with correct details at the end of scaling.
	     * this setting is performance and application dependant.
	     * default to true
	     * since 1.7.0
	     * @type Boolean
	     * @default true
	     */
	    noScaleCache:              true,

	    /**
	     * When `false`, the stoke width will scale with the object.
	     * When `true`, the stroke will always match the exact pixel size entered for stroke width.
	     * default to false
	     * @since 2.6.0
	     * @type Boolean
	     * @default false
	     * @type Boolean
	     * @default false
	     */
	    strokeUniform:              false,

	    /**
	     * When set to `true`, object's cache will be rerendered next render call.
	     * since 1.7.0
	     * @type Boolean
	     * @default true
	     */
	    dirty:                true,

	    /**
	     * keeps the value of the last hovered corner during mouse move.
	     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..
	     * It should be private, but there is no harm in using it as
	     * a read-only property.
	     * @type number|string|any
	     * @default 0
	     */
	    __corner: 0,

	    /**
	     * Determines if the fill or the stroke is drawn first (one of "fill" or "stroke")
	     * @type String
	     * @default
	     */
	    paintFirst:           'fill',

	    /**
	     * List of properties to consider when checking if state
	     * of an object is changed (fabric.Object#hasStateChanged)
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties: (
	      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +
	      'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +
	      'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor ' +
	      'skewX skewY fillRule paintFirst clipPath strokeUniform'
	    ).split(' '),

	    /**
	     * List of properties to consider when checking if cache needs refresh
	     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
	     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
	     * and refreshed at the next render
	     * @type Array
	     */
	    cacheProperties: (
	      'fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' +
	      ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'
	    ).split(' '),

	    /**
	     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
	     * the clipPath object gets used when the object has rendered, and the context is placed in the center
	     * of the object cacheCanvas.
	     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'
	     * @type fabric.Object
	     */
	    clipPath: undefined,

	    /**
	     * Meaningful ONLY when the object is used as clipPath.
	     * if true, the clipPath will make the object clip to the outside of the clipPath
	     * since 2.4.0
	     * @type boolean
	     * @default false
	     */
	    inverted: false,

	    /**
	     * Meaningful ONLY when the object is used as clipPath.
	     * if true, the clipPath will have its top and left relative to canvas, and will
	     * not be influenced by the object transform. This will make the clipPath relative
	     * to the canvas, but clipping just a particular object.
	     * WARNING this is beta, this feature may change or be renamed.
	     * since 2.4.0
	     * @type boolean
	     * @default false
	     */
	    absolutePositioned: false,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     */
	    initialize: function(options) {
	      if (options) {
	        this.setOptions(options);
	      }
	    },

	    /**
	     * Create a the canvas used to keep the cached copy of the object
	     * @private
	     */
	    _createCacheCanvas: function() {
	      this._cacheProperties = {};
	      this._cacheCanvas = fabric.util.createCanvasElement();
	      this._cacheContext = this._cacheCanvas.getContext('2d');
	      this._updateCacheCanvas();
	      // if canvas gets created, is empty, so dirty.
	      this.dirty = true;
	    },

	    /**
	     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
	     * and each side do not cross fabric.cacheSideLimit
	     * those numbers are configurable so that you can get as much detail as you want
	     * making bargain with performances.
	     * @param {Object} dims
	     * @param {Object} dims.width width of canvas
	     * @param {Object} dims.height height of canvas
	     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
	     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
	     * @return {Object}.width width of canvas
	     * @return {Object}.height height of canvas
	     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
	     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
	     */
	    _limitCacheSize: function(dims) {
	      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,
	          width = dims.width, height = dims.height,
	          max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;
	      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {
	        if (width < min) {
	          dims.width = min;
	        }
	        if (height < min) {
	          dims.height = min;
	        }
	        return dims;
	      }
	      var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),
	          capValue = fabric.util.capValue,
	          x = capValue(min, limitedDims.x, max),
	          y = capValue(min, limitedDims.y, max);
	      if (width > x) {
	        dims.zoomX /= width / x;
	        dims.width = x;
	        dims.capped = true;
	      }
	      if (height > y) {
	        dims.zoomY /= height / y;
	        dims.height = y;
	        dims.capped = true;
	      }
	      return dims;
	    },

	    /**
	     * Return the dimension and the zoom level needed to create a cache canvas
	     * big enough to host the object to be cached.
	     * @private
	     * @return {Object}.x width of object to be cached
	     * @return {Object}.y height of object to be cached
	     * @return {Object}.width width of canvas
	     * @return {Object}.height height of canvas
	     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
	     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
	     */
	    _getCacheCanvasDimensions: function() {
	      var objectScale = this.getTotalObjectScaling(),
	          // caculate dimensions without skewing
	          dim = this._getTransformedDimensions(0, 0),
	          neededX = dim.x * objectScale.scaleX / this.scaleX,
	          neededY = dim.y * objectScale.scaleY / this.scaleY;
	      return {
	        // for sure this ALIASING_LIMIT is slightly creating problem
	        // in situation in which the cache canvas gets an upper limit
	        // also objectScale contains already scaleX and scaleY
	        width: neededX + ALIASING_LIMIT,
	        height: neededY + ALIASING_LIMIT,
	        zoomX: objectScale.scaleX,
	        zoomY: objectScale.scaleY,
	        x: neededX,
	        y: neededY
	      };
	    },

	    /**
	     * Update width and height of the canvas for cache
	     * returns true or false if canvas needed resize.
	     * @private
	     * @return {Boolean} true if the canvas has been resized
	     */
	    _updateCacheCanvas: function() {
	      var targetCanvas = this.canvas;
	      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {
	        var target = targetCanvas._currentTransform.target,
	            action = targetCanvas._currentTransform.action;
	        if (this === target && action.slice && action.slice(0, 5) === 'scale') {
	          return false;
	        }
	      }
	      var canvas = this._cacheCanvas,
	          dims = this._limitCacheSize(this._getCacheCanvasDimensions()),
	          minCacheSize = fabric.minCacheSideLimit,
	          width = dims.width, height = dims.height, drawingWidth, drawingHeight,
	          zoomX = dims.zoomX, zoomY = dims.zoomY,
	          dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,
	          zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,
	          shouldRedraw = dimensionsChanged || zoomChanged,
	          additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;
	      if (dimensionsChanged) {
	        var canvasWidth = this._cacheCanvas.width,
	            canvasHeight = this._cacheCanvas.height,
	            sizeGrowing = width > canvasWidth || height > canvasHeight,
	            sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&
	              canvasWidth > minCacheSize && canvasHeight > minCacheSize;
	        shouldResizeCanvas = sizeGrowing || sizeShrinking;
	        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {
	          additionalWidth = width * 0.1;
	          additionalHeight = height * 0.1;
	        }
	      }
	      if (shouldRedraw) {
	        if (shouldResizeCanvas) {
	          canvas.width = Math.ceil(width + additionalWidth);
	          canvas.height = Math.ceil(height + additionalHeight);
	        }
	        else {
	          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);
	          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);
	        }
	        drawingWidth = dims.x / 2;
	        drawingHeight = dims.y / 2;
	        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;
	        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;
	        this.cacheWidth = width;
	        this.cacheHeight = height;
	        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);
	        this._cacheContext.scale(zoomX, zoomY);
	        this.zoomX = zoomX;
	        this.zoomY = zoomY;
	        return true;
	      }
	      return false;
	    },

	    /**
	     * Sets object's properties from options
	     * @param {Object} [options] Options object
	     */
	    setOptions: function(options) {
	      this._setOptions(options);
	      this._initGradient(options.fill, 'fill');
	      this._initGradient(options.stroke, 'stroke');
	      this._initClipping(options);
	      this._initPattern(options.fill, 'fill');
	      this._initPattern(options.stroke, 'stroke');
	    },

	    /**
	     * Transforms context when rendering an object
	     * @param {CanvasRenderingContext2D} ctx Context
	     */
	    transform: function(ctx) {
	      var m;
	      if (this.group && !this.group._transformDone) {
	        m = this.calcTransformMatrix();
	      }
	      else {
	        m = this.calcOwnMatrix();
	      }
	      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	    },

	    /**
	     * Returns an object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,

	          object = {
	            type:                     this.type,
	            version:                  fabric.version,
	            originX:                  this.originX,
	            originY:                  this.originY,
	            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),
	            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),
	            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),
	            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),
	            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,
	            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,
	            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
	            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
	            strokeLineCap:            this.strokeLineCap,
	            strokeDashOffset:         this.strokeDashOffset,
	            strokeLineJoin:           this.strokeLineJoin,
	            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
	            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),
	            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),
	            angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),
	            flipX:                    this.flipX,
	            flipY:                    this.flipY,
	            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),
	            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,
	            visible:                  this.visible,
	            clipTo:                   this.clipTo && String(this.clipTo),
	            backgroundColor:          this.backgroundColor,
	            fillRule:                 this.fillRule,
	            paintFirst:               this.paintFirst,
	            globalCompositeOperation: this.globalCompositeOperation,
	            transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : null,
	            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),
	            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),
	          };

	      if (this.clipPath) {
	        object.clipPath = this.clipPath.toObject(propertiesToInclude);
	        object.clipPath.inverted = this.clipPath.inverted;
	        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;
	      }

	      fabric.util.populateWithProperties(this, object, propertiesToInclude);
	      if (!this.includeDefaultValues) {
	        object = this._removeDefaultValues(object);
	      }

	      return object;
	    },

	    /**
	     * Returns (dataless) object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      // will be overwritten by subclasses
	      return this.toObject(propertiesToInclude);
	    },

	    /**
	     * @private
	     * @param {Object} object
	     */
	    _removeDefaultValues: function(object) {
	      var prototype = fabric.util.getKlass(object.type).prototype,
	          stateProperties = prototype.stateProperties;
	      stateProperties.forEach(function(prop) {
	        if (prop === 'left' || prop === 'top') {
	          return;
	        }
	        if (object[prop] === prototype[prop]) {
	          delete object[prop];
	        }
	        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&
	                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';

	        // basically a check for [] === []
	        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {
	          delete object[prop];
	        }
	      });

	      return object;
	    },

	    /**
	     * Returns a string representation of an instance
	     * @return {String}
	     */
	    toString: function() {
	      return '#<fabric.' + capitalize(this.type) + '>';
	    },

	    /**
	     * Return the object scale factor counting also the group scaling
	     * @return {Object} object with scaleX and scaleY properties
	     */
	    getObjectScaling: function() {
	      var scaleX = this.scaleX, scaleY = this.scaleY;
	      if (this.group) {
	        var scaling = this.group.getObjectScaling();
	        scaleX *= scaling.scaleX;
	        scaleY *= scaling.scaleY;
	      }
	      return { scaleX: scaleX, scaleY: scaleY };
	    },

	    /**
	     * Return the object scale factor counting also the group scaling, zoom and retina
	     * @return {Object} object with scaleX and scaleY properties
	     */
	    getTotalObjectScaling: function() {
	      var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;
	      if (this.canvas) {
	        var zoom = this.canvas.getZoom();
	        var retina = this.canvas.getRetinaScaling();
	        scaleX *= zoom * retina;
	        scaleY *= zoom * retina;
	      }
	      return { scaleX: scaleX, scaleY: scaleY };
	    },

	    /**
	     * Return the object opacity counting also the group property
	     * @return {Number}
	     */
	    getObjectOpacity: function() {
	      var opacity = this.opacity;
	      if (this.group) {
	        opacity *= this.group.getObjectOpacity();
	      }
	      return opacity;
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {*} value
	     * @return {fabric.Object} thisArg
	     */
	    _set: function(key, value) {
	      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),
	          isChanged = this[key] !== value, groupNeedsUpdate = false;

	      if (shouldConstrainValue) {
	        value = this._constrainScale(value);
	      }
	      if (key === 'scaleX' && value < 0) {
	        this.flipX = !this.flipX;
	        value *= -1;
	      }
	      else if (key === 'scaleY' && value < 0) {
	        this.flipY = !this.flipY;
	        value *= -1;
	      }
	      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {
	        value = new fabric.Shadow(value);
	      }
	      else if (key === 'dirty' && this.group) {
	        this.group.set('dirty', value);
	      }

	      this[key] = value;

	      if (isChanged) {
	        groupNeedsUpdate = this.group && this.group.isOnACache();
	        if (this.cacheProperties.indexOf(key) > -1) {
	          this.dirty = true;
	          groupNeedsUpdate && this.group.set('dirty', true);
	        }
	        else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {
	          this.group.set('dirty', true);
	        }
	      }

	      return this;
	    },

	    /**
	     * This callback function is called by the parent group of an object every
	     * time a non-delegated property changes on the group. It is passed the key
	     * and value as parameters. Not adding in this function's signature to avoid
	     * Travis build error about unused variables.
	     */
	    setOnGroup: function() {
	      // implemented by sub-classes, as needed.
	    },

	    /**
	     * Retrieves viewportTransform from Object's canvas if possible
	     * @method getViewportTransform
	     * @memberOf fabric.Object.prototype
	     * @return {Array}
	     */
	    getViewportTransform: function() {
	      if (this.canvas && this.canvas.viewportTransform) {
	        return this.canvas.viewportTransform;
	      }
	      return fabric.iMatrix.concat();
	    },

	    /*
	     * @private
	     * return if the object would be visible in rendering
	     * @memberOf fabric.Object.prototype
	     * @return {Boolean}
	     */
	    isNotVisible: function() {
	      return this.opacity === 0 ||
	        (this.width === 0 && this.height === 0 && this.strokeWidth === 0) ||
	        !this.visible;
	    },

	    /**
	     * Renders an object on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    render: function(ctx) {
	      // do not render if width/height are zeros or object is not visible
	      if (this.isNotVisible()) {
	        return;
	      }
	      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
	        return;
	      }
	      ctx.save();
	      this._setupCompositeOperation(ctx);
	      this.drawSelectionBackground(ctx);
	      this.transform(ctx);
	      this._setOpacity(ctx);
	      this._setShadow(ctx, this);
	      if (this.transformMatrix) {
	        ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      this.clipTo && fabric.util.clipContext(this, ctx);
	      if (this.shouldCache()) {
	        this.renderCache();
	        this.drawCacheOnCanvas(ctx);
	      }
	      else {
	        this._removeCacheCanvas();
	        this.dirty = false;
	        this.drawObject(ctx);
	        if (this.objectCaching && this.statefullCache) {
	          this.saveState({ propertySet: 'cacheProperties' });
	        }
	      }
	      this.clipTo && ctx.restore();
	      ctx.restore();
	    },

	    renderCache: function(options) {
	      options = options || {};
	      if (!this._cacheCanvas) {
	        this._createCacheCanvas();
	      }
	      if (this.isCacheDirty()) {
	        this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });
	        this.drawObject(this._cacheContext, options.forClipping);
	        this.dirty = false;
	      }
	    },

	    /**
	     * Remove cacheCanvas and its dimensions from the objects
	     */
	    _removeCacheCanvas: function() {
	      this._cacheCanvas = null;
	      this.cacheWidth = 0;
	      this.cacheHeight = 0;
	    },

	    /**
	     * return true if the object will draw a stroke
	     * Does not consider text styles. This is just a shortcut used at rendering time
	     * We want it to be an aproximation and be fast.
	     * wrote to avoid extra caching, it has to return true when stroke happens,
	     * can guess when it will not happen at 100% chance, does not matter if it misses
	     * some use case where the stroke is invisible.
	     * @since 3.0.0
	     * @returns Boolean
	     */
	    hasStroke: function() {
	      return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;
	    },

	    /**
	     * return true if the object will draw a fill
	     * Does not consider text styles. This is just a shortcut used at rendering time
	     * We want it to be an aproximation and be fast.
	     * wrote to avoid extra caching, it has to return true when fill happens,
	     * can guess when it will not happen at 100% chance, does not matter if it misses
	     * some use case where the fill is invisible.
	     * @since 3.0.0
	     * @returns Boolean
	     */
	    hasFill: function() {
	      return this.fill && this.fill !== 'transparent';
	    },

	    /**
	     * When set to `true`, force the object to have its own cache, even if it is inside a group
	     * it may be needed when your object behave in a particular way on the cache and always needs
	     * its own isolated canvas to render correctly.
	     * Created to be overridden
	     * since 1.7.12
	     * @returns Boolean
	     */
	    needsItsOwnCache: function() {
	      if (this.paintFirst === 'stroke' &&
	        this.hasFill() && this.hasStroke() && typeof this.shadow === 'object') {
	        return true;
	      }
	      if (this.clipPath) {
	        return true;
	      }
	      return false;
	    },

	    /**
	     * Decide if the object should cache or not. Create its own cache level
	     * objectCaching is a global flag, wins over everything
	     * needsItsOwnCache should be used when the object drawing method requires
	     * a cache step. None of the fabric classes requires it.
	     * Generally you do not cache objects in groups because the group outside is cached.
	     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.
	     * @return {Boolean}
	     */
	    shouldCache: function() {
	      this.ownCaching = this.needsItsOwnCache() || (
	        this.objectCaching &&
	        (!this.group || !this.group.isOnACache())
	      );
	      return this.ownCaching;
	    },

	    /**
	     * Check if this object or a child object will cast a shadow
	     * used by Group.shouldCache to know if child has a shadow recursively
	     * @return {Boolean}
	     */
	    willDrawShadow: function() {
	      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
	    },

	    /**
	     * Execute the drawing operation for an object clipPath
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    drawClipPathOnCache: function(ctx) {
	      var path = this.clipPath;
	      ctx.save();
	      // DEBUG: uncomment this line, comment the following
	      // ctx.globalAlpha = 0.4
	      if (path.inverted) {
	        ctx.globalCompositeOperation = 'destination-out';
	      }
	      else {
	        ctx.globalCompositeOperation = 'destination-in';
	      }
	      //ctx.scale(1 / 2, 1 / 2);
	      if (path.absolutePositioned) {
	        var m = fabric.util.invertTransform(this.calcTransformMatrix());
	        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	      }
	      path.transform(ctx);
	      ctx.scale(1 / path.zoomX, 1 / path.zoomY);
	      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
	      ctx.restore();
	    },

	    /**
	     * Execute the drawing operation for an object on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    drawObject: function(ctx, forClipping) {
	      var originalFill = this.fill, originalStroke = this.stroke;
	      if (forClipping) {
	        this.fill = 'black';
	        this.stroke = '';
	        this._setClippingProperties(ctx);
	      }
	      else {
	        this._renderBackground(ctx);
	        this._setStrokeStyles(ctx, this);
	        this._setFillStyles(ctx, this);
	      }
	      this._render(ctx);
	      this._drawClipPath(ctx);
	      this.fill = originalFill;
	      this.stroke = originalStroke;
	    },

	    _drawClipPath: function(ctx) {
	      var path = this.clipPath;
	      if (!path) { return; }
	      // needed to setup a couple of variables
	      // path canvas gets overridden with this one.
	      // TODO find a better solution?
	      path.canvas = this.canvas;
	      path.shouldCache();
	      path._transformDone = true;
	      path.renderCache({ forClipping: true });
	      this.drawClipPathOnCache(ctx);
	    },

	    /**
	     * Paint the cached copy of the object on the target context.
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    drawCacheOnCanvas: function(ctx) {
	      ctx.scale(1 / this.zoomX, 1 / this.zoomY);
	      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
	    },

	    /**
	     * Check if cache is dirty
	     * @param {Boolean} skipCanvas skip canvas checks because this object is painted
	     * on parent canvas.
	     */
	    isCacheDirty: function(skipCanvas) {
	      if (this.isNotVisible()) {
	        return false;
	      }
	      if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {
	        // in this case the context is already cleared.
	        return true;
	      }
	      else {
	        if (this.dirty ||
	          (this.clipPath && this.clipPath.absolutePositioned) ||
	          (this.statefullCache && this.hasStateChanged('cacheProperties'))
	        ) {
	          if (this._cacheCanvas && !skipCanvas) {
	            var width = this.cacheWidth / this.zoomX;
	            var height = this.cacheHeight / this.zoomY;
	            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);
	          }
	          return true;
	        }
	      }
	      return false;
	    },

	    /**
	     * Draws a background for the object big as its untransformed dimensions
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderBackground: function(ctx) {
	      if (!this.backgroundColor) {
	        return;
	      }
	      var dim = this._getNonTransformedDimensions();
	      ctx.fillStyle = this.backgroundColor;

	      ctx.fillRect(
	        -dim.x / 2,
	        -dim.y / 2,
	        dim.x,
	        dim.y
	      );
	      // if there is background color no other shadows
	      // should be casted
	      this._removeShadow(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _setOpacity: function(ctx) {
	      if (this.group && !this.group._transformDone) {
	        ctx.globalAlpha = this.getObjectOpacity();
	      }
	      else {
	        ctx.globalAlpha *= this.opacity;
	      }
	    },

	    _setStrokeStyles: function(ctx, decl) {
	      if (decl.stroke) {
	        ctx.lineWidth = decl.strokeWidth;
	        ctx.lineCap = decl.strokeLineCap;
	        ctx.lineDashOffset = decl.strokeDashOffset;
	        ctx.lineJoin = decl.strokeLineJoin;
	        ctx.miterLimit = decl.strokeMiterLimit;
	        ctx.strokeStyle = decl.stroke.toLive
	          ? decl.stroke.toLive(ctx, this)
	          : decl.stroke;
	      }
	    },

	    _setFillStyles: function(ctx, decl) {
	      if (decl.fill) {
	        ctx.fillStyle = decl.fill.toLive
	          ? decl.fill.toLive(ctx, this)
	          : decl.fill;
	      }
	    },

	    _setClippingProperties: function(ctx) {
	      ctx.globalAlpha = 1;
	      ctx.strokeStyle = 'transparent';
	      ctx.fillStyle = '#000000';
	    },

	    /**
	     * @private
	     * Sets line dash
	     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
	     * @param {Array} dashArray array representing dashes
	     * @param {Function} alternative function to call if browser does not support lineDash
	     */
	    _setLineDash: function(ctx, dashArray, alternative) {
	      if (!dashArray) {
	        return;
	      }
	      // Spec requires the concatenation of two copies the dash list when the number of elements is odd
	      if (1 & dashArray.length) {
	        dashArray.push.apply(dashArray, dashArray);
	      }
	      if (supportsLineDash) {
	        ctx.setLineDash(dashArray);
	      }
	      else {
	        alternative && alternative(ctx);
	      }
	      if (this.strokeUniform) {
	        ctx.setLineDash(ctx.getLineDash().map(function(value) { return value * ctx.lineWidth; }));
	      }
	    },

	    /**
	     * Renders controls and borders for the object
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Object} [styleOverride] properties to override the object style
	     */
	    _renderControls: function(ctx, styleOverride) {
	      var vpt = this.getViewportTransform(),
	          matrix = this.calcTransformMatrix(),
	          options, drawBorders, drawControls;
	      styleOverride = styleOverride || { };
	      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;
	      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;
	      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);
	      options = fabric.util.qrDecompose(matrix);
	      ctx.save();
	      ctx.translate(options.translateX, options.translateY);
	      ctx.lineWidth = 1 * this.borderScaleFactor;
	      if (!this.group) {
	        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
	      }
	      if (styleOverride.forActiveSelection) {
	        ctx.rotate(degreesToRadians(options.angle));
	        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);
	      }
	      else {
	        ctx.rotate(degreesToRadians(this.angle));
	        drawBorders && this.drawBorders(ctx, styleOverride);
	      }
	      drawControls && this.drawControls(ctx, styleOverride);
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _setShadow: function(ctx) {
	      if (!this.shadow) {
	        return;
	      }

	      var shadow = this.shadow, canvas = this.canvas, scaling,
	          multX = (canvas && canvas.viewportTransform[0]) || 1,
	          multY = (canvas && canvas.viewportTransform[3]) || 1;
	      if (shadow.nonScaling) {
	        scaling = { scaleX: 1, scaleY: 1 };
	      }
	      else {
	        scaling = this.getObjectScaling();
	      }
	      if (canvas && canvas._isRetinaScaling()) {
	        multX *= fabric.devicePixelRatio;
	        multY *= fabric.devicePixelRatio;
	      }
	      ctx.shadowColor = shadow.color;
	      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *
	        (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;
	      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;
	      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _removeShadow: function(ctx) {
	      if (!this.shadow) {
	        return;
	      }

	      ctx.shadowColor = '';
	      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Object} filler fabric.Pattern or fabric.Gradient
	     * @return {Object} offset.offsetX offset for text rendering
	     * @return {Object} offset.offsetY offset for text rendering
	     */
	    _applyPatternGradientTransform: function(ctx, filler) {
	      if (!filler || !filler.toLive) {
	        return { offsetX: 0, offsetY: 0 };
	      }
	      var t = filler.gradientTransform || filler.patternTransform;
	      var offsetX = -this.width / 2 + filler.offsetX || 0,
	          offsetY = -this.height / 2 + filler.offsetY || 0;

	      if (filler.gradientUnits === 'percentage') {
	        ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);
	      }
	      else {
	        ctx.transform(1, 0, 0, 1, offsetX, offsetY);
	      }
	      if (t) {
	        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);
	      }
	      return { offsetX: offsetX, offsetY: offsetY };
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderPaintInOrder: function(ctx) {
	      if (this.paintFirst === 'stroke') {
	        this._renderStroke(ctx);
	        this._renderFill(ctx);
	      }
	      else {
	        this._renderFill(ctx);
	        this._renderStroke(ctx);
	      }
	    },

	    /**
	     * @private
	     * function that actually render something on the context.
	     * empty here to allow Obects to work on tests to benchmark fabric functionalites
	     * not related to rendering
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(/* ctx */) {

	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderFill: function(ctx) {
	      if (!this.fill) {
	        return;
	      }

	      ctx.save();
	      this._applyPatternGradientTransform(ctx, this.fill);
	      if (this.fillRule === 'evenodd') {
	        ctx.fill('evenodd');
	      }
	      else {
	        ctx.fill();
	      }
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderStroke: function(ctx) {
	      if (!this.stroke || this.strokeWidth === 0) {
	        return;
	      }

	      if (this.shadow && !this.shadow.affectStroke) {
	        this._removeShadow(ctx);
	      }

	      ctx.save();
	      if (this.strokeUniform) {
	        ctx.scale(1 / this.scaleX, 1 / this.scaleY);
	      }
	      this._setLineDash(ctx, this.strokeDashArray, this._renderDashedStroke);
	      if (this.stroke.toLive && this.stroke.gradientUnits === 'percentage') {
	        // need to transform gradient in a pattern.
	        // this is a slow process. If you are hitting this codepath, and the object
	        // is not using caching, you should consider switching it on.
	        // we need a canvas as big as the current object caching canvas.
	        this._applyPatternForTransformedGradient(ctx, this.stroke);
	      }
	      else {
	        this._applyPatternGradientTransform(ctx, this.stroke);
	      }
	      ctx.stroke();
	      ctx.restore();
	    },

	    /**
	     * This function try to patch the missing gradientTransform on canvas gradients.
	     * transforming a context to transform the gradient, is going to transform the stroke too.
	     * we want to transform the gradient but not the stroke operation, so we create
	     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
	     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size
	     * is limited.
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {fabric.Gradient} filler a fabric gradient instance
	     */
	    _applyPatternForTransformedGradient: function(ctx, filler) {
	      var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),
	          pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(),
	          width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;
	      pCanvas.width = width;
	      pCanvas.height = height;
	      pCtx = pCanvas.getContext('2d');
	      pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);
	      pCtx.lineTo(0, height); pCtx.closePath();
	      pCtx.translate(width / 2, height / 2);
	      pCtx.scale(
	        dims.zoomX / this.scaleX / retinaScaling,
	        dims.zoomY / this.scaleY / retinaScaling
	      );
	      this._applyPatternGradientTransform(pCtx, filler);
	      pCtx.fillStyle = filler.toLive(ctx);
	      pCtx.fill();
	      ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);
	      ctx.scale(
	        retinaScaling * this.scaleX / dims.zoomX,
	        retinaScaling * this.scaleY / dims.zoomY
	      );
	      ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');
	    },

	    /**
	     * This function is an helper for svg import. it returns the center of the object in the svg
	     * untransformed coordinates
	     * @private
	     * @return {Object} center point from element coordinates
	     */
	    _findCenterFromElement: function() {
	      return { x: this.left + this.width / 2, y: this.top + this.height / 2 };
	    },

	    /**
	     * This function is an helper for svg import. it decompose the transformMatrix
	     * and assign properties to object.
	     * untransformed coordinates
	     * @private
	     * @chainable
	     */
	    _assignTransformMatrixProps: function() {
	      if (this.transformMatrix) {
	        var options = fabric.util.qrDecompose(this.transformMatrix);
	        this.flipX = false;
	        this.flipY = false;
	        this.set('scaleX', options.scaleX);
	        this.set('scaleY', options.scaleY);
	        this.angle = options.angle;
	        this.skewX = options.skewX;
	        this.skewY = 0;
	      }
	    },

	    /**
	     * This function is an helper for svg import. it removes the transform matrix
	     * and set to object properties that fabricjs can handle
	     * @private
	     * @param {Object} preserveAspectRatioOptions
	     * @return {thisArg}
	     */
	    _removeTransformMatrix: function(preserveAspectRatioOptions) {
	      var center = this._findCenterFromElement();
	      if (this.transformMatrix) {
	        this._assignTransformMatrixProps();
	        center = fabric.util.transformPoint(center, this.transformMatrix);
	      }
	      this.transformMatrix = null;
	      if (preserveAspectRatioOptions) {
	        this.scaleX *= preserveAspectRatioOptions.scaleX;
	        this.scaleY *= preserveAspectRatioOptions.scaleY;
	        this.cropX = preserveAspectRatioOptions.cropX;
	        this.cropY = preserveAspectRatioOptions.cropY;
	        center.x += preserveAspectRatioOptions.offsetLeft;
	        center.y += preserveAspectRatioOptions.offsetTop;
	        this.width = preserveAspectRatioOptions.width;
	        this.height = preserveAspectRatioOptions.height;
	      }
	      this.setPositionByOrigin(center, 'center', 'center');
	    },

	    /**
	     * Clones an instance, using a callback method will work for every object.
	     * @param {Function} callback Callback is invoked with a clone as a first argument
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     */
	    clone: function(callback, propertiesToInclude) {
	      var objectForm = this.toObject(propertiesToInclude);
	      if (this.constructor.fromObject) {
	        this.constructor.fromObject(objectForm, callback);
	      }
	      else {
	        fabric.Object._fromObject('Object', objectForm, callback);
	      }
	    },

	    /**
	     * Creates an instance of fabric.Image out of an object
	     * could make use of both toDataUrl or toCanvasElement.
	     * @param {Function} callback callback, invoked with an instance as a first argument
	     * @param {Object} [options] for clone as image, passed to toDataURL
	     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     * @param {Number} [options.multiplier=1] Multiplier to scale by
	     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
	     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
	     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
	     * @return {fabric.Object} thisArg
	     */
	    cloneAsImage: function(callback, options) {
	      var canvasEl = this.toCanvasElement(options);
	      if (callback) {
	        callback(new fabric.Image(canvasEl));
	      }
	      return this;
	    },

	    /**
	     * Converts an object into a HTMLCanvas element
	     * @param {Object} options Options object
	     * @param {Number} [options.multiplier=1] Multiplier to scale by
	     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
	     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
	     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
	     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
	     */
	    toCanvasElement: function(options) {
	      options || (options = { });

	      var utils = fabric.util, origParams = utils.saveObjectTransform(this),
	          originalShadow = this.shadow, abs = Math.abs,
	          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);

	      if (options.withoutTransform) {
	        utils.resetObjectTransform(this);
	      }
	      if (options.withoutShadow) {
	        this.shadow = null;
	      }

	      var el = fabric.util.createCanvasElement(),
	          // skip canvas zoom and calculate with setCoords now.
	          boundingRect = this.getBoundingRect(true, true),
	          shadow = this.shadow, scaling,
	          shadowOffset = { x: 0, y: 0 }, shadowBlur;

	      if (shadow) {
	        shadowBlur = shadow.blur;
	        if (shadow.nonScaling) {
	          scaling = { scaleX: 1, scaleY: 1 };
	        }
	        else {
	          scaling = this.getObjectScaling();
	        }
	        shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * (abs(scaling.scaleX));
	        shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * (abs(scaling.scaleY));
	      }
	      el.width = boundingRect.width + shadowOffset.x;
	      el.height = boundingRect.height + shadowOffset.y;
	      el.width += el.width % 2 ? 2 - el.width % 2 : 0;
	      el.height += el.height % 2 ? 2 - el.height % 2 : 0;
	      var canvas = new fabric.StaticCanvas(el, {
	        enableRetinaScaling: false,
	        renderOnAddRemove: false,
	        skipOffscreen: false,
	      });
	      if (options.format === 'jpeg') {
	        canvas.backgroundColor = '#fff';
	      }
	      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');

	      var originalCanvas = this.canvas;
	      canvas.add(this);
	      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);
	      this.shadow = originalShadow;
	      this.canvas = originalCanvas;
	      this.set(origParams).setCoords();
	      // canvas.dispose will call image.dispose that will nullify the elements
	      // since this canvas is a simple element for the process, we remove references
	      // to objects in this way in order to avoid object trashing.
	      canvas._objects = [];
	      canvas.dispose();
	      canvas = null;

	      return canvasEl;
	    },

	    /**
	     * Converts an object into a data-url-like string
	     * @param {Object} options Options object
	     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     * @param {Number} [options.multiplier=1] Multiplier to scale by
	     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
	     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
	     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
	     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
	     */
	    toDataURL: function(options) {
	      options || (options = { });
	      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);
	    },

	    /**
	     * Returns true if specified type is identical to the type of an instance
	     * @param {String} type Type to check against
	     * @return {Boolean}
	     */
	    isType: function(type) {
	      return this.type === type;
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance (is 1 unless subclassed)
	     */
	    complexity: function() {
	      return 1;
	    },

	    /**
	     * Returns a JSON representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} JSON
	     */
	    toJSON: function(propertiesToInclude) {
	      // delegate, not alias
	      return this.toObject(propertiesToInclude);
	    },

	    /**
	     * Sets gradient (fill or stroke) of an object
	     * percentages for x1,x2,y1,y2,r1,r2 together with gradientUnits 'pixels', are not supported.
	     * <b>Backwards incompatibility note:</b> This method was named "setGradientFill" until v1.1.0
	     * @param {String} property Property name 'stroke' or 'fill'
	     * @param {Object} [options] Options object
	     * @param {String} [options.type] Type of gradient 'radial' or 'linear'
	     * @param {Number} [options.x1=0] x-coordinate of start point
	     * @param {Number} [options.y1=0] y-coordinate of start point
	     * @param {Number} [options.x2=0] x-coordinate of end point
	     * @param {Number} [options.y2=0] y-coordinate of end point
	     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)
	     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)
	     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}
	     * @param {Object} [options.gradientTransform] transformMatrix for gradient
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @deprecated since 3.4.0
	     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}
	     * @example <caption>Set linear gradient</caption>
	     * object.setGradient('fill', {
	     *   type: 'linear',
	     *   x1: -object.width / 2,
	     *   y1: 0,
	     *   x2: object.width / 2,
	     *   y2: 0,
	     *   colorStops: {
	     *     0: 'red',
	     *     0.5: '#005555',
	     *     1: 'rgba(0,0,255,0.5)'
	     *   }
	     * });
	     * canvas.renderAll();
	     * @example <caption>Set radial gradient</caption>
	     * object.setGradient('fill', {
	     *   type: 'radial',
	     *   x1: 0,
	     *   y1: 0,
	     *   x2: 0,
	     *   y2: 0,
	     *   r1: object.width / 2,
	     *   r2: 10,
	     *   colorStops: {
	     *     0: 'red',
	     *     0.5: '#005555',
	     *     1: 'rgba(0,0,255,0.5)'
	     *   }
	     * });
	     * canvas.renderAll();
	     */
	    setGradient: function(property, options) {
	      options || (options = { });

	      var gradient = { colorStops: [] };

	      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');
	      gradient.coords = {
	        x1: options.x1,
	        y1: options.y1,
	        x2: options.x2,
	        y2: options.y2
	      };
	      gradient.gradientUnits = options.gradientUnits || 'pixels';
	      if (options.r1 || options.r2) {
	        gradient.coords.r1 = options.r1;
	        gradient.coords.r2 = options.r2;
	      }

	      gradient.gradientTransform = options.gradientTransform;
	      fabric.Gradient.prototype.addColorStop.call(gradient, options.colorStops);

	      return this.set(property, fabric.Gradient.forObject(this, gradient));
	    },

	    /**
	     * Sets pattern fill of an object
	     * @param {Object} options Options object
	     * @param {(String|HTMLImageElement)} options.source Pattern source
	     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
	     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner
	     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner
	     * @param {Function} [callback] Callback to invoke when image set as a pattern
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}
	     * @example <caption>Set pattern</caption>
	     * object.setPatternFill({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
	     *   repeat: 'repeat'
	     * },canvas.renderAll.bind(canvas));
	     */
	    setPatternFill: function(options, callback) {
	      return this.set('fill', new fabric.Pattern(options, callback));
	    },

	    /**
	     * Sets {@link fabric.Object#shadow|shadow} of an object
	     * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
	     * @param {String} [options.color=rgb(0,0,0)] Shadow color
	     * @param {Number} [options.blur=0] Shadow blur
	     * @param {Number} [options.offsetX=0] Shadow horizontal offset
	     * @param {Number} [options.offsetY=0] Shadow vertical offset
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}
	     * @example <caption>Set shadow with string notation</caption>
	     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');
	     * canvas.renderAll();
	     * @example <caption>Set shadow with object notation</caption>
	     * object.setShadow({
	     *   color: 'red',
	     *   blur: 10,
	     *   offsetX: 20,
	     *   offsetY: 20
	     * });
	     * canvas.renderAll();
	     */
	    setShadow: function(options) {
	      return this.set('shadow', options ? new fabric.Shadow(options) : null);
	    },

	    /**
	     * Sets "color" of an instance (alias of `set('fill', &hellip;)`)
	     * @param {String} color Color value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setColor: function(color) {
	      this.set('fill', color);
	      return this;
	    },

	    /**
	     * Sets "angle" of an instance with centered rotation
	     * @param {Number} angle Angle value (in degrees)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    rotate: function(angle) {
	      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;

	      if (shouldCenterOrigin) {
	        this._setOriginToCenter();
	      }

	      this.set('angle', angle);

	      if (shouldCenterOrigin) {
	        this._resetOrigin();
	      }

	      return this;
	    },

	    /**
	     * Centers object horizontally on canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    centerH: function () {
	      this.canvas && this.canvas.centerObjectH(this);
	      return this;
	    },

	    /**
	     * Centers object horizontally on current viewport of canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    viewportCenterH: function () {
	      this.canvas && this.canvas.viewportCenterObjectH(this);
	      return this;
	    },

	    /**
	     * Centers object vertically on canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    centerV: function () {
	      this.canvas && this.canvas.centerObjectV(this);
	      return this;
	    },

	    /**
	     * Centers object vertically on current viewport of canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    viewportCenterV: function () {
	      this.canvas && this.canvas.viewportCenterObjectV(this);
	      return this;
	    },

	    /**
	     * Centers object vertically and horizontally on canvas to which is was added last
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    center: function () {
	      this.canvas && this.canvas.centerObject(this);
	      return this;
	    },

	    /**
	     * Centers object on current viewport of canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    viewportCenter: function () {
	      this.canvas && this.canvas.viewportCenterObject(this);
	      return this;
	    },

	    /**
	     * Returns coordinates of a pointer relative to an object
	     * @param {Event} e Event to operate upon
	     * @param {Object} [pointer] Pointer to operate upon (instead of event)
	     * @return {Object} Coordinates of a pointer (x, y)
	     */
	    getLocalPointer: function(e, pointer) {
	      pointer = pointer || this.canvas.getPointer(e);
	      var pClicked = new fabric.Point(pointer.x, pointer.y),
	          objectLeftTop = this._getLeftTopCoords();
	      if (this.angle) {
	        pClicked = fabric.util.rotatePoint(
	          pClicked, objectLeftTop, degreesToRadians(-this.angle));
	      }
	      return {
	        x: pClicked.x - objectLeftTop.x,
	        y: pClicked.y - objectLeftTop.y
	      };
	    },

	    /**
	     * Sets canvas globalCompositeOperation for specific object
	     * custom composition operation for the particular object can be specified using globalCompositeOperation property
	     * @param {CanvasRenderingContext2D} ctx Rendering canvas context
	     */
	    _setupCompositeOperation: function (ctx) {
	      if (this.globalCompositeOperation) {
	        ctx.globalCompositeOperation = this.globalCompositeOperation;
	      }
	    }
	  });

	  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);

	  extend(fabric.Object.prototype, fabric.Observable);

	  /**
	   * Defines the number of fraction digits to use when serializing object values.
	   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.
	   * @static
	   * @memberOf fabric.Object
	   * @constant
	   * @type Number
	   */
	  fabric.Object.NUM_FRACTION_DIGITS = 2;

	  fabric.Object._fromObject = function(className, object, callback, extraParam) {
	    var klass = fabric[className];
	    object = clone(object, true);
	    fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {
	      if (typeof patterns[0] !== 'undefined') {
	        object.fill = patterns[0];
	      }
	      if (typeof patterns[1] !== 'undefined') {
	        object.stroke = patterns[1];
	      }
	      fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {
	        object.clipPath = enlivedProps[0];
	        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);
	        callback && callback(instance);
	      });
	    });
	  };

	  /**
	   * Unique id used internally when creating SVG elements
	   * @static
	   * @memberOf fabric.Object
	   * @type Number
	   */
	  fabric.Object.__uid = 0;

	})( exports );


	(function() {

	  var degreesToRadians = fabric.util.degreesToRadians,
	      originXOffset = {
	        left: -0.5,
	        center: 0,
	        right: 0.5
	      },
	      originYOffset = {
	        top: -0.5,
	        center: 0,
	        bottom: 0.5
	      };

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * Translates the coordinates from a set of origin to another (based on the object's dimensions)
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
	     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
	      var x = point.x,
	          y = point.y,
	          offsetX, offsetY, dim;

	      if (typeof fromOriginX === 'string') {
	        fromOriginX = originXOffset[fromOriginX];
	      }
	      else {
	        fromOriginX -= 0.5;
	      }

	      if (typeof toOriginX === 'string') {
	        toOriginX = originXOffset[toOriginX];
	      }
	      else {
	        toOriginX -= 0.5;
	      }

	      offsetX = toOriginX - fromOriginX;

	      if (typeof fromOriginY === 'string') {
	        fromOriginY = originYOffset[fromOriginY];
	      }
	      else {
	        fromOriginY -= 0.5;
	      }

	      if (typeof toOriginY === 'string') {
	        toOriginY = originYOffset[toOriginY];
	      }
	      else {
	        toOriginY -= 0.5;
	      }

	      offsetY = toOriginY - fromOriginY;

	      if (offsetX || offsetY) {
	        dim = this._getTransformedDimensions();
	        x = point.x + offsetX * dim.x;
	        y = point.y + offsetY * dim.y;
	      }

	      return new fabric.Point(x, y);
	    },

	    /**
	     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToCenterPoint: function(point, originX, originY) {
	      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');
	      if (this.angle) {
	        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));
	      }
	      return p;
	    },

	    /**
	     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
	     * @param {fabric.Point} center The point which corresponds to center of the object
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToOriginPoint: function(center, originX, originY) {
	      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
	      if (this.angle) {
	        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));
	      }
	      return p;
	    },

	    /**
	     * Returns the real center coordinates of the object
	     * @return {fabric.Point}
	     */
	    getCenterPoint: function() {
	      var leftTop = new fabric.Point(this.left, this.top);
	      return this.translateToCenterPoint(leftTop, this.originX, this.originY);
	    },

	    /**
	     * Returns the coordinates of the object based on center coordinates
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @return {fabric.Point}
	     */
	    // getOriginPoint: function(center) {
	    //   return this.translateToOriginPoint(center, this.originX, this.originY);
	    // },

	    /**
	     * Returns the coordinates of the object as if it has a different origin
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    getPointByOrigin: function(originX, originY) {
	      var center = this.getCenterPoint();
	      return this.translateToOriginPoint(center, originX, originY);
	    },

	    /**
	     * Returns the point in local coordinates
	     * @param {fabric.Point} point The point relative to the global coordinate system
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    toLocalPoint: function(point, originX, originY) {
	      var center = this.getCenterPoint(),
	          p, p2;

	      if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {
	        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
	      }
	      else {
	        p = new fabric.Point(this.left, this.top);
	      }

	      p2 = new fabric.Point(point.x, point.y);
	      if (this.angle) {
	        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));
	      }
	      return p2.subtractEquals(p);
	    },

	    /**
	     * Returns the point in global coordinates
	     * @param {fabric.Point} The point relative to the local coordinate system
	     * @return {fabric.Point}
	     */
	    // toGlobalPoint: function(point) {
	    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
	    // },

	    /**
	     * Sets the position of the object taking into consideration the object's origin
	     * @param {fabric.Point} pos The new position of the object
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {void}
	     */
	    setPositionByOrigin: function(pos, originX, originY) {
	      var center = this.translateToCenterPoint(pos, originX, originY),
	          position = this.translateToOriginPoint(center, this.originX, this.originY);
	      this.set('left', position.x);
	      this.set('top', position.y);
	    },

	    /**
	     * @param {String} to One of 'left', 'center', 'right'
	     */
	    adjustPosition: function(to) {
	      var angle = degreesToRadians(this.angle),
	          hypotFull = this.getScaledWidth(),
	          xFull = fabric.util.cos(angle) * hypotFull,
	          yFull = fabric.util.sin(angle) * hypotFull,
	          offsetFrom, offsetTo;

	      //TODO: this function does not consider mixed situation like top, center.
	      if (typeof this.originX === 'string') {
	        offsetFrom = originXOffset[this.originX];
	      }
	      else {
	        offsetFrom = this.originX - 0.5;
	      }
	      if (typeof to === 'string') {
	        offsetTo = originXOffset[to];
	      }
	      else {
	        offsetTo = to - 0.5;
	      }
	      this.left += xFull * (offsetTo - offsetFrom);
	      this.top += yFull * (offsetTo - offsetFrom);
	      this.setCoords();
	      this.originX = to;
	    },

	    /**
	     * Sets the origin/position of the object to it's center point
	     * @private
	     * @return {void}
	     */
	    _setOriginToCenter: function() {
	      this._originalOriginX = this.originX;
	      this._originalOriginY = this.originY;

	      var center = this.getCenterPoint();

	      this.originX = 'center';
	      this.originY = 'center';

	      this.left = center.x;
	      this.top = center.y;
	    },

	    /**
	     * Resets the origin/position of the object to it's original origin
	     * @private
	     * @return {void}
	     */
	    _resetOrigin: function() {
	      var originPoint = this.translateToOriginPoint(
	        this.getCenterPoint(),
	        this._originalOriginX,
	        this._originalOriginY);

	      this.originX = this._originalOriginX;
	      this.originY = this._originalOriginY;

	      this.left = originPoint.x;
	      this.top = originPoint.y;

	      this._originalOriginX = null;
	      this._originalOriginY = null;
	    },

	    /**
	     * @private
	     */
	    _getLeftTopCoords: function() {
	      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');
	    },
	  });

	})();


	(function() {

	  function getCoords(coords) {
	    return [
	      new fabric.Point(coords.tl.x, coords.tl.y),
	      new fabric.Point(coords.tr.x, coords.tr.y),
	      new fabric.Point(coords.br.x, coords.br.y),
	      new fabric.Point(coords.bl.x, coords.bl.y)
	    ];
	  }

	  var degreesToRadians = fabric.util.degreesToRadians,
	      multiplyMatrices = fabric.util.multiplyTransformMatrices,
	      transformPoint = fabric.util.transformPoint;

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * Describe object's corner position in canvas element coordinates.
	     * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.
	     * each property is an object with x, y and corner.
	     * The `corner` property contains in a similar manner the 4 points of the
	     * interactive area of the corner.
	     * The coordinates depends from this properties: width, height, scaleX, scaleY
	     * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.
	     * The coordinates get updated with @method setCoords.
	     * You can calculate them without updating with @method calcCoords;
	     * @memberOf fabric.Object.prototype
	     */
	    oCoords: null,

	    /**
	     * Describe object's corner position in canvas object absolute coordinates
	     * properties are tl,tr,bl,br and describe the four main corner.
	     * each property is an object with x, y, instance of Fabric.Point.
	     * The coordinates depends from this properties: width, height, scaleX, scaleY
	     * skewX, skewY, angle, strokeWidth, top, left.
	     * Those coordinates are useful to understand where an object is. They get updated
	     * with oCoords but they do not need to be updated when zoom or panning change.
	     * The coordinates get updated with @method setCoords.
	     * You can calculate them without updating with @method calcCoords(true);
	     * @memberOf fabric.Object.prototype
	     */
	    aCoords: null,

	    /**
	     * storage for object transform matrix
	     */
	    ownMatrixCache: null,

	    /**
	     * storage for object full transform matrix
	     */
	    matrixCache: null,

	    /**
	     * return correct set of coordinates for intersection
	     */
	    getCoords: function(absolute, calculate) {
	      if (!this.oCoords) {
	        this.setCoords();
	      }
	      var coords = absolute ? this.aCoords : this.oCoords;
	      return getCoords(calculate ? this.calcCoords(absolute) : coords);
	    },

	    /**
	     * Checks if object intersects with an area formed by 2 points
	     * @param {Object} pointTL top-left point of area
	     * @param {Object} pointBR bottom-right point of area
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if object intersects with an area formed by 2 points
	     */
	    intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {
	      var coords = this.getCoords(absolute, calculate),
	          intersection = fabric.Intersection.intersectPolygonRectangle(
	            coords,
	            pointTL,
	            pointBR
	          );
	      return intersection.status === 'Intersection';
	    },

	    /**
	     * Checks if object intersects with another object
	     * @param {Object} other Object to test
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if object intersects with another object
	     */
	    intersectsWithObject: function(other, absolute, calculate) {
	      var intersection = fabric.Intersection.intersectPolygonPolygon(
	        this.getCoords(absolute, calculate),
	        other.getCoords(absolute, calculate)
	      );

	      return intersection.status === 'Intersection'
	        || other.isContainedWithinObject(this, absolute, calculate)
	        || this.isContainedWithinObject(other, absolute, calculate);
	    },

	    /**
	     * Checks if object is fully contained within area of another object
	     * @param {Object} other Object to test
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if object is fully contained within area of another object
	     */
	    isContainedWithinObject: function(other, absolute, calculate) {
	      var points = this.getCoords(absolute, calculate),
	          i = 0, lines = other._getImageLines(
	            calculate ? other.calcCoords(absolute) : absolute ? other.aCoords : other.oCoords
	          );
	      for (; i < 4; i++) {
	        if (!other.containsPoint(points[i], lines)) {
	          return false;
	        }
	      }
	      return true;
	    },

	    /**
	     * Checks if object is fully contained within area formed by 2 points
	     * @param {Object} pointTL top-left point of area
	     * @param {Object} pointBR bottom-right point of area
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if object is fully contained within area formed by 2 points
	     */
	    isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {
	      var boundingRect = this.getBoundingRect(absolute, calculate);

	      return (
	        boundingRect.left >= pointTL.x &&
	        boundingRect.left + boundingRect.width <= pointBR.x &&
	        boundingRect.top >= pointTL.y &&
	        boundingRect.top + boundingRect.height <= pointBR.y
	      );
	    },

	    /**
	     * Checks if point is inside the object
	     * @param {fabric.Point} point Point to check against
	     * @param {Object} [lines] object returned from @method _getImageLines
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if point is inside the object
	     */
	    containsPoint: function(point, lines, absolute, calculate) {
	      var lines = lines || this._getImageLines(
	            calculate ? this.calcCoords(absolute) : absolute ? this.aCoords : this.oCoords
	          ),
	          xPoints = this._findCrossPoints(point, lines);

	      // if xPoints is odd then point is inside the object
	      return (xPoints !== 0 && xPoints % 2 === 1);
	    },

	    /**
	     * Checks if object is contained within the canvas with current viewportTransform
	     * the check is done stopping at first point that appears on screen
	     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords
	     * @return {Boolean} true if object is fully or partially contained within canvas
	     */
	    isOnScreen: function(calculate) {
	      if (!this.canvas) {
	        return false;
	      }
	      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
	      var points = this.getCoords(true, calculate), point;
	      for (var i = 0; i < 4; i++) {
	        point = points[i];
	        if (point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y) {
	          return true;
	        }
	      }
	      // no points on screen, check intersection with absolute coordinates
	      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
	        return true;
	      }
	      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
	    },

	    /**
	     * Checks if the object contains the midpoint between canvas extremities
	     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen
	     * @private
	     * @param {Fabric.Point} pointTL Top Left point
	     * @param {Fabric.Point} pointBR Top Right point
	     * @param {Boolean} calculate use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if the object contains the point
	     */
	    _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {
	      // worst case scenario the object is so big that contains the screen
	      var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };
	      if (this.containsPoint(centerPoint, null, true, calculate)) {
	        return true;
	      }
	      return false;
	    },

	    /**
	     * Checks if object is partially contained within the canvas with current viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
	     * @return {Boolean} true if object is partially contained within canvas
	     */
	    isPartiallyOnScreen: function(calculate) {
	      if (!this.canvas) {
	        return false;
	      }
	      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
	      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
	        return true;
	      }
	      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
	    },

	    /**
	     * Method that returns an object with the object edges in it, given the coordinates of the corners
	     * @private
	     * @param {Object} oCoords Coordinates of the object corners
	     */
	    _getImageLines: function(oCoords) {
	      return {
	        topline: {
	          o: oCoords.tl,
	          d: oCoords.tr
	        },
	        rightline: {
	          o: oCoords.tr,
	          d: oCoords.br
	        },
	        bottomline: {
	          o: oCoords.br,
	          d: oCoords.bl
	        },
	        leftline: {
	          o: oCoords.bl,
	          d: oCoords.tl
	        }
	      };
	    },

	    /**
	     * Helper method to determine how many cross points are between the 4 object edges
	     * and the horizontal line determined by a point on canvas
	     * @private
	     * @param {fabric.Point} point Point to check
	     * @param {Object} lines Coordinates of the object being evaluated
	     */
	    // remove yi, not used but left code here just in case.
	    _findCrossPoints: function(point, lines) {
	      var b1, b2, a1, a2, xi, // yi,
	          xcount = 0,
	          iLine;

	      for (var lineKey in lines) {
	        iLine = lines[lineKey];
	        // optimisation 1: line below point. no cross
	        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {
	          continue;
	        }
	        // optimisation 2: line above point. no cross
	        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {
	          continue;
	        }
	        // optimisation 3: vertical line case
	        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {
	          xi = iLine.o.x;
	          // yi = point.y;
	        }
	        // calculate the intersection point
	        else {
	          b1 = 0;
	          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
	          a1 = point.y - b1 * point.x;
	          a2 = iLine.o.y - b2 * iLine.o.x;

	          xi = -(a1 - a2) / (b1 - b2);
	          // yi = a1 + b1 * xi;
	        }
	        // dont count xi < point.x cases
	        if (xi >= point.x) {
	          xcount += 1;
	        }
	        // optimisation 4: specific for square images
	        if (xcount === 2) {
	          break;
	        }
	      }
	      return xcount;
	    },

	    /**
	     * Returns coordinates of object's bounding rectangle (left, top, width, height)
	     * the box is intended as aligned to axis of canvas.
	     * @param {Boolean} [absolute] use coordinates without viewportTransform
	     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords
	     * @return {Object} Object with left, top, width, height properties
	     */
	    getBoundingRect: function(absolute, calculate) {
	      var coords = this.getCoords(absolute, calculate);
	      return fabric.util.makeBoundingBoxFromPoints(coords);
	    },

	    /**
	     * Returns width of an object's bounding box counting transformations
	     * before 2.0 it was named getWidth();
	     * @return {Number} width value
	     */
	    getScaledWidth: function() {
	      return this._getTransformedDimensions().x;
	    },

	    /**
	     * Returns height of an object bounding box counting transformations
	     * before 2.0 it was named getHeight();
	     * @return {Number} height value
	     */
	    getScaledHeight: function() {
	      return this._getTransformedDimensions().y;
	    },

	    /**
	     * Makes sure the scale is valid and modifies it if necessary
	     * @private
	     * @param {Number} value
	     * @return {Number}
	     */
	    _constrainScale: function(value) {
	      if (Math.abs(value) < this.minScaleLimit) {
	        if (value < 0) {
	          return -this.minScaleLimit;
	        }
	        else {
	          return this.minScaleLimit;
	        }
	      }
	      else if (value === 0) {
	        return 0.0001;
	      }
	      return value;
	    },

	    /**
	     * Scales an object (equally by x and y)
	     * @param {Number} value Scale factor
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scale: function(value) {
	      this._set('scaleX', value);
	      this._set('scaleY', value);
	      return this.setCoords();
	    },

	    /**
	     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
	     * @param {Number} value New width value
	     * @param {Boolean} absolute ignore viewport
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scaleToWidth: function(value, absolute) {
	      // adjust to bounding rect factor so that rotated shapes would fit as well
	      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
	      return this.scale(value / this.width / boundingRectFactor);
	    },

	    /**
	     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
	     * @param {Number} value New height value
	     * @param {Boolean} absolute ignore viewport
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scaleToHeight: function(value, absolute) {
	      // adjust to bounding rect factor so that rotated shapes would fit as well
	      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();
	      return this.scale(value / this.height / boundingRectFactor);
	    },

	    /**
	     * Calculates and returns the .coords of an object.
	     * @return {Object} Object with tl, tr, br, bl ....
	     * @chainable
	     */
	    calcCoords: function(absolute) {
	      var rotateMatrix = this._calcRotateMatrix(),
	          translateMatrix = this._calcTranslateMatrix(),
	          startMatrix = multiplyMatrices(translateMatrix, rotateMatrix),
	          vpt = this.getViewportTransform(),
	          finalMatrix = absolute ? startMatrix : multiplyMatrices(vpt, startMatrix),
	          dim = this._getTransformedDimensions(),
	          w = dim.x / 2, h = dim.y / 2,
	          tl = transformPoint({ x: -w, y: -h }, finalMatrix),
	          tr = transformPoint({ x: w, y: -h }, finalMatrix),
	          bl = transformPoint({ x: -w, y: h }, finalMatrix),
	          br = transformPoint({ x: w, y: h }, finalMatrix);
	      if (!absolute) {
	        var padding = this.padding, angle = degreesToRadians(this.angle),
	            cos = fabric.util.cos(angle), sin = fabric.util.sin(angle),
	            cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,
	            cosPMinusSinP = cosP - sinP;
	        if (padding) {
	          tl.x -= cosPMinusSinP;
	          tl.y -= cosPSinP;
	          tr.x += cosPSinP;
	          tr.y -= cosPMinusSinP;
	          bl.x -= cosPSinP;
	          bl.y += cosPMinusSinP;
	          br.x += cosPMinusSinP;
	          br.y += cosPSinP;
	        }
	        var ml  = new fabric.Point((tl.x + bl.x) / 2, (tl.y + bl.y) / 2),
	            mt  = new fabric.Point((tr.x + tl.x) / 2, (tr.y + tl.y) / 2),
	            mr  = new fabric.Point((br.x + tr.x) / 2, (br.y + tr.y) / 2),
	            mb  = new fabric.Point((br.x + bl.x) / 2, (br.y + bl.y) / 2),
	            mtr = new fabric.Point(mt.x + sin * this.rotatingPointOffset, mt.y - cos * this.rotatingPointOffset);
	      }

	      // if (!absolute) {
	      //   var canvas = this.canvas;
	      //   setTimeout(function() {
	      //     canvas.contextTop.clearRect(0, 0, 700, 700);
	      //     canvas.contextTop.fillStyle = 'green';
	      //     canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);
	      //     canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);
	      //     canvas.contextTop.fillRect(br.x, br.y, 3, 3);
	      //     canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);
	      //     canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);
	      //     canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);
	      //     canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);
	      //     canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);
	      //     canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);
	      //   }, 50);
	      // }

	      var coords = {
	        // corners
	        tl: tl, tr: tr, br: br, bl: bl,
	      };
	      if (!absolute) {
	        // middle
	        coords.ml = ml;
	        coords.mt = mt;
	        coords.mr = mr;
	        coords.mb = mb;
	        // rotating point
	        coords.mtr = mtr;
	      }
	      return coords;
	    },

	    /**
	     * Sets corner position coordinates based on current angle, width and height.
	     * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}
	     * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.
	     * @param {Boolean} [skipAbsolute] skip calculation of aCoords, useful in setViewportTransform
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setCoords: function(ignoreZoom, skipAbsolute) {
	      this.oCoords = this.calcCoords(ignoreZoom);
	      if (!skipAbsolute) {
	        this.aCoords = this.calcCoords(true);
	      }

	      // set coordinates of the draggable boxes in the corners used to scale/rotate the image
	      ignoreZoom || (this._setCornerCoords && this._setCornerCoords());

	      return this;
	    },

	    /**
	     * calculate rotation matrix of an object
	     * @return {Array} rotation matrix for the object
	     */
	    _calcRotateMatrix: function() {
	      return fabric.util.calcRotateMatrix(this);
	    },

	    /**
	     * calculate the translation matrix for an object transform
	     * @return {Array} rotation matrix for the object
	     */
	    _calcTranslateMatrix: function() {
	      var center = this.getCenterPoint();
	      return [1, 0, 0, 1, center.x, center.y];
	    },

	    transformMatrixKey: function(skipGroup) {
	      var sep = '_', prefix = '';
	      if (!skipGroup && this.group) {
	        prefix = this.group.transformMatrixKey(skipGroup) + sep;
	      }      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +
	        sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +
	        sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;
	    },

	    /**
	     * calculate transform matrix that represents the current transformations from the
	     * object's properties.
	     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations
	     * @return {Array} transform matrix for the object
	     */
	    calcTransformMatrix: function(skipGroup) {
	      if (skipGroup) {
	        return this.calcOwnMatrix();
	      }
	      var key = this.transformMatrixKey(), cache = this.matrixCache || (this.matrixCache = {});
	      if (cache.key === key) {
	        return cache.value;
	      }
	      var matrix = this.calcOwnMatrix();
	      if (this.group) {
	        matrix = multiplyMatrices(this.group.calcTransformMatrix(), matrix);
	      }
	      cache.key = key;
	      cache.value = matrix;
	      return matrix;
	    },

	    /**
	     * calculate transform matrix that represents the current transformations from the
	     * object's properties, this matrix does not include the group transformation
	     * @return {Array} transform matrix for the object
	     */
	    calcOwnMatrix: function() {
	      var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});
	      if (cache.key === key) {
	        return cache.value;
	      }
	      var tMatrix = this._calcTranslateMatrix();
	      this.translateX = tMatrix[4];
	      this.translateY = tMatrix[5];
	      cache.key = key;
	      cache.value = fabric.util.composeMatrix(this);
	      return cache.value;
	    },

	    /*
	     * Calculate object dimensions from its properties
	     * @private
	     * @deprecated since 3.4.0, please use fabric.util._calcDimensionsTransformMatrix
	     * not including or including flipX, flipY to emulate the flipping boolean
	     * @return {Object} .x width dimension
	     * @return {Object} .y height dimension
	     */
	    _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {
	      return fabric.util.calcDimensionsMatrix({
	        skewX: skewX,
	        skewY: skewY,
	        scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),
	        scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)
	      });
	    },

	    /*
	     * Calculate object dimensions from its properties
	     * @private
	     * @return {Object} .x width dimension
	     * @return {Object} .y height dimension
	     */
	    _getNonTransformedDimensions: function() {
	      var strokeWidth = this.strokeWidth,
	          w = this.width + strokeWidth,
	          h = this.height + strokeWidth;
	      return { x: w, y: h };
	    },

	    /*
	     * Calculate object bounding box dimensions from its properties scale, skew.
	     * @param {Number} skewX, a value to override current skewX
	     * @param {Number} skewY, a value to override current skewY
	     * @private
	     * @return {Object} .x width dimension
	     * @return {Object} .y height dimension
	     */
	    _getTransformedDimensions: function(skewX, skewY) {
	      if (typeof skewX === 'undefined') {
	        skewX = this.skewX;
	      }
	      if (typeof skewY === 'undefined') {
	        skewY = this.skewY;
	      }
	      var dimensions = this._getNonTransformedDimensions(), dimX, dimY,
	          noSkew = skewX === 0 && skewY === 0;

	      if (this.strokeUniform) {
	        dimX = this.width;
	        dimY = this.height;
	      }
	      else {
	        dimX = dimensions.x;
	        dimY = dimensions.y;
	      }
	      if (noSkew) {
	        return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);
	      }
	      else {
	        dimX /= 2;
	        dimY /= 2;
	      }
	      var points = [
	            {
	              x: -dimX,
	              y: -dimY
	            },
	            {
	              x: dimX,
	              y: -dimY
	            },
	            {
	              x: -dimX,
	              y: dimY
	            },
	            {
	              x: dimX,
	              y: dimY
	            }],
	          transformMatrix = fabric.util.calcDimensionsMatrix({
	            scaleX: this.scaleX,
	            scaleY: this.scaleY,
	            skewX: this.skewX,
	            skewY: this.skewY,
	          }),
	          bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);
	      return this._finalizeDimensions(bbox.width, bbox.height);
	    },

	    /*
	     * Calculate object bounding box dimensions from its properties scale, skew.
	     * @param Number width width of the bbox
	     * @param Number height height of the bbox
	     * @private
	     * @return {Object} .x finalized width dimension
	     * @return {Object} .y finalized height dimension
	     */
	    _finalizeDimensions: function(width, height) {
	      return this.strokeUniform ?
	        { x: width + this.strokeWidth, y: height + this.strokeWidth }
	        :
	        { x: width, y: height };
	    },
	    /*
	     * Calculate object dimensions for controls, including padding and canvas zoom.
	     * private
	     */
	    _calculateCurrentDimensions: function()  {
	      var vpt = this.getViewportTransform(),
	          dim = this._getTransformedDimensions(),
	          p = fabric.util.transformPoint(dim, vpt, true);

	      return p.scalarAdd(2 * this.padding);
	    },
	  });
	})();


	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * Moves an object to the bottom of the stack of drawn objects
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  sendToBack: function() {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);
	    }
	    else {
	      this.canvas.sendToBack(this);
	    }
	    return this;
	  },

	  /**
	   * Moves an object to the top of the stack of drawn objects
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  bringToFront: function() {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);
	    }
	    else {
	      this.canvas.bringToFront(this);
	    }
	    return this;
	  },

	  /**
	   * Moves an object down in stack of drawn objects
	   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  sendBackwards: function(intersecting) {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
	    }
	    else {
	      this.canvas.sendBackwards(this, intersecting);
	    }
	    return this;
	  },

	  /**
	   * Moves an object up in stack of drawn objects
	   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  bringForward: function(intersecting) {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
	    }
	    else {
	      this.canvas.bringForward(this, intersecting);
	    }
	    return this;
	  },

	  /**
	   * Moves an object to specified level in stack of drawn objects
	   * @param {Number} index New position of object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  moveTo: function(index) {
	    if (this.group && this.group.type !== 'activeSelection') {
	      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);
	    }
	    else {
	      this.canvas.moveTo(this, index);
	    }
	    return this;
	  }
	});


	/* _TO_SVG_START_ */
	(function() {
	  function getSvgColorString(prop, value) {
	    if (!value) {
	      return prop + ': none; ';
	    }
	    else if (value.toLive) {
	      return prop + ': url(#SVGID_' + value.id + '); ';
	    }
	    else {
	      var color = new fabric.Color(value),
	          str = prop + ': ' + color.toRgb() + '; ',
	          opacity = color.getAlpha();
	      if (opacity !== 1) {
	        //change the color in rgb + opacity
	        str += prop + '-opacity: ' + opacity.toString() + '; ';
	      }
	      return str;
	    }
	  }

	  var toFixed = fabric.util.toFixed;

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {
	    /**
	     * Returns styles-string for svg-export
	     * @param {Boolean} skipShadow a boolean to skip shadow filter output
	     * @return {String}
	     */
	    getSvgStyles: function(skipShadow) {

	      var fillRule = this.fillRule ? this.fillRule : 'nonzero',
	          strokeWidth = this.strokeWidth ? this.strokeWidth : '0',
	          strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',
	          strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',
	          strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',
	          strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',
	          strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',
	          opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',
	          visibility = this.visible ? '' : ' visibility: hidden;',
	          filter = skipShadow ? '' : this.getSvgFilter(),
	          fill = getSvgColorString('fill', this.fill),
	          stroke = getSvgColorString('stroke', this.stroke);

	      return [
	        stroke,
	        'stroke-width: ', strokeWidth, '; ',
	        'stroke-dasharray: ', strokeDashArray, '; ',
	        'stroke-linecap: ', strokeLineCap, '; ',
	        'stroke-dashoffset: ', strokeDashOffset, '; ',
	        'stroke-linejoin: ', strokeLineJoin, '; ',
	        'stroke-miterlimit: ', strokeMiterLimit, '; ',
	        fill,
	        'fill-rule: ', fillRule, '; ',
	        'opacity: ', opacity, ';',
	        filter,
	        visibility
	      ].join('');
	    },

	    /**
	     * Returns styles-string for svg-export
	     * @param {Object} style the object from which to retrieve style properties
	     * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.
	     * @return {String}
	     */
	    getSvgSpanStyles: function(style, useWhiteSpace) {
	      var term = '; ';
	      var fontFamily = style.fontFamily ?
	        'font-family: ' + (((style.fontFamily.indexOf('\'') === -1 && style.fontFamily.indexOf('"') === -1) ?
	          '\'' + style.fontFamily  + '\'' : style.fontFamily)) + term : '';
	      var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',
	          fontFamily = fontFamily,
	          fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',
	          fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',
	          fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',
	          fill = style.fill ? getSvgColorString('fill', style.fill) : '',
	          stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',
	          textDecoration = this.getSvgTextDecoration(style),
	          deltaY = style.deltaY ? 'baseline-shift: ' + (-style.deltaY) + '; ' : '';
	      if (textDecoration) {
	        textDecoration = 'text-decoration: ' + textDecoration + term;
	      }

	      return [
	        stroke,
	        strokeWidth,
	        fontFamily,
	        fontSize,
	        fontStyle,
	        fontWeight,
	        textDecoration,
	        fill,
	        deltaY,
	        useWhiteSpace ? 'white-space: pre; ' : ''
	      ].join('');
	    },

	    /**
	     * Returns text-decoration property for svg-export
	     * @param {Object} style the object from which to retrieve style properties
	     * @return {String}
	     */
	    getSvgTextDecoration: function(style) {
	      if ('overline' in style || 'underline' in style || 'linethrough' in style) {
	        return (style.overline ? 'overline ' : '') +
	          (style.underline ? 'underline ' : '') + (style.linethrough ? 'line-through ' : '');
	      }
	      return '';
	    },

	    /**
	     * Returns filter for svg shadow
	     * @return {String}
	     */
	    getSvgFilter: function() {
	      return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';
	    },

	    /**
	     * Returns id attribute for svg output
	     * @return {String}
	     */
	    getSvgCommons: function() {
	      return [
	        this.id ? 'id="' + this.id + '" ' : '',
	        this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : '',
	      ].join('');
	    },

	    /**
	     * Returns transform-string for svg-export
	     * @param {Boolean} use the full transform or the single object one.
	     * @return {String}
	     */
	    getSvgTransform: function(full, additionalTransform) {
	      var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),
	          svgTransform = 'transform="' + fabric.util.matrixToSVG(transform);
	      return svgTransform +
	        (additionalTransform || '') + this.getSvgTransformMatrix() + '" ';
	    },

	    /**
	     * Returns transform-string for svg-export from the transform matrix of single elements
	     * @return {String}
	     */
	    getSvgTransformMatrix: function() {
	      return this.transformMatrix ? ' ' + fabric.util.matrixToSVG(this.transformMatrix) : '';
	    },

	    _setSVGBg: function(textBgRects) {
	      if (this.backgroundColor) {
	        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
	        textBgRects.push(
	          '\t\t<rect ',
	          this._getFillAttributes(this.backgroundColor),
	          ' x="',
	          toFixed(-this.width / 2, NUM_FRACTION_DIGITS),
	          '" y="',
	          toFixed(-this.height / 2, NUM_FRACTION_DIGITS),
	          '" width="',
	          toFixed(this.width, NUM_FRACTION_DIGITS),
	          '" height="',
	          toFixed(this.height, NUM_FRACTION_DIGITS),
	          '"></rect>\n');
	      }
	    },

	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      return this._createBaseSVGMarkup(this._toSVG(reviver), { reviver: reviver });
	    },

	    /**
	     * Returns svg clipPath representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toClipPathSVG: function(reviver) {
	      return '\t' + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), { reviver: reviver });
	    },

	    /**
	     * @private
	     */
	    _createBaseClipPathSVGMarkup: function(objectMarkup, options) {
	      options = options || {};
	      var reviver = options.reviver,
	          additionalTransform = options.additionalTransform || '',
	          commonPieces = [
	            this.getSvgTransform(true, additionalTransform),
	            this.getSvgCommons(),
	          ].join(''),
	          // insert commons in the markup, style and svgCommons
	          index = objectMarkup.indexOf('COMMON_PARTS');
	      objectMarkup[index] = commonPieces;
	      return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');
	    },

	    /**
	     * @private
	     */
	    _createBaseSVGMarkup: function(objectMarkup, options) {
	      options = options || {};
	      var noStyle = options.noStyle,
	          reviver = options.reviver,
	          styleInfo = noStyle ? '' : 'style="' + this.getSvgStyles() + '" ',
	          shadowInfo = options.withShadow ? 'style="' + this.getSvgFilter() + '" ' : '',
	          clipPath = this.clipPath,
	          vectorEffect = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : '',
	          absoluteClipPath = clipPath && clipPath.absolutePositioned,
	          stroke = this.stroke, fill = this.fill, shadow = this.shadow,
	          commonPieces, markup = [], clipPathMarkup,
	          // insert commons in the markup, style and svgCommons
	          index = objectMarkup.indexOf('COMMON_PARTS'),
	          additionalTransform = options.additionalTransform;
	      if (clipPath) {
	        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;
	        clipPathMarkup = '<clipPath id="' + clipPath.clipPathId + '" >\n' +
	          clipPath.toClipPathSVG(reviver) +
	          '</clipPath>\n';
	      }
	      if (absoluteClipPath) {
	        markup.push(
	          '<g ', shadowInfo, this.getSvgCommons(), ' >\n'
	        );
	      }
	      markup.push(
	        '<g ',
	        this.getSvgTransform(false),
	        !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',
	        ' >\n'
	      );
	      commonPieces = [
	        styleInfo,
	        vectorEffect,
	        noStyle ? '' : this.addPaintOrder(), ' ',
	        additionalTransform ? 'transform="' + additionalTransform + '" ' : '',
	      ].join('');
	      objectMarkup[index] = commonPieces;
	      if (fill && fill.toLive) {
	        markup.push(fill.toSVG(this));
	      }
	      if (stroke && stroke.toLive) {
	        markup.push(stroke.toSVG(this));
	      }
	      if (shadow) {
	        markup.push(shadow.toSVG(this));
	      }
	      if (clipPath) {
	        markup.push(clipPathMarkup);
	      }
	      markup.push(objectMarkup.join(''));
	      markup.push('</g>\n');
	      absoluteClipPath && markup.push('</g>\n');
	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },

	    addPaintOrder: function() {
	      return this.paintFirst !== 'fill' ? ' paint-order="' + this.paintFirst + '" ' : '';
	    }
	  });
	})();
	/* _TO_SVG_END_ */


	(function() {

	  var extend = fabric.util.object.extend,
	      originalSet = 'stateProperties';

	  /*
	    Depends on `stateProperties`
	  */
	  function saveProps(origin, destination, props) {
	    var tmpObj = { }, deep = true;
	    props.forEach(function(prop) {
	      tmpObj[prop] = origin[prop];
	    });
	    extend(origin[destination], tmpObj, deep);
	  }

	  function _isEqual(origValue, currentValue, firstPass) {
	    if (origValue === currentValue) {
	      // if the objects are identical, return
	      return true;
	    }
	    else if (Array.isArray(origValue)) {
	      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {
	        return false;
	      }
	      for (var i = 0, len = origValue.length; i < len; i++) {
	        if (!_isEqual(origValue[i], currentValue[i])) {
	          return false;
	        }
	      }
	      return true;
	    }
	    else if (origValue && typeof origValue === 'object') {
	      var keys = Object.keys(origValue), key;
	      if (!currentValue ||
	          typeof currentValue !== 'object' ||
	          (!firstPass && keys.length !== Object.keys(currentValue).length)
	      ) {
	        return false;
	      }
	      for (var i = 0, len = keys.length; i < len; i++) {
	        key = keys[i];
	        // since clipPath is in the statefull cache list and the clipPath objects
	        // would be iterated as an object, this would lead to possible infinite recursion
	        if (key === 'canvas') {
	          continue;
	        }
	        if (!_isEqual(origValue[key], currentValue[key])) {
	          return false;
	        }
	      }
	      return true;
	    }
	  }


	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * Returns true if object state (one of its state properties) was changed
	     * @param {String} [propertySet] optional name for the set of property we want to save
	     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
	     */
	    hasStateChanged: function(propertySet) {
	      propertySet = propertySet || originalSet;
	      var dashedPropertySet = '_' + propertySet;
	      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {
	        return true;
	      }
	      return !_isEqual(this[dashedPropertySet], this, true);
	    },

	    /**
	     * Saves state of an object
	     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
	     * @return {fabric.Object} thisArg
	     */
	    saveState: function(options) {
	      var propertySet = options && options.propertySet || originalSet,
	          destination = '_' + propertySet;
	      if (!this[destination]) {
	        return this.setupState(options);
	      }
	      saveProps(this, destination, this[propertySet]);
	      if (options && options.stateProperties) {
	        saveProps(this, destination, options.stateProperties);
	      }
	      return this;
	    },

	    /**
	     * Setups state of an object
	     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
	     * @return {fabric.Object} thisArg
	     */
	    setupState: function(options) {
	      options = options || { };
	      var propertySet = options.propertySet || originalSet;
	      options.propertySet = propertySet;
	      this['_' + propertySet] = { };
	      this.saveState(options);
	      return this;
	    }
	  });
	})();


	(function() {

	  var degreesToRadians = fabric.util.degreesToRadians;

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * The object interactivity controls.
	     * @private
	     */
	    _controlsVisibility: null,

	    /**
	     * Determines which corner has been clicked
	     * @private
	     * @param {Object} pointer The pointer indicating the mouse position
	     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
	     */
	    _findTargetCorner: function(pointer) {
	      // objects in group, anykind, are not self modificable,
	      // must not return an hovered corner.
	      if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {
	        return false;
	      }

	      var ex = pointer.x,
	          ey = pointer.y,
	          xPoints,
	          lines;
	      this.__corner = 0;
	      for (var i in this.oCoords) {

	        if (!this.isControlVisible(i)) {
	          continue;
	        }

	        if (i === 'mtr' && !this.hasRotatingPoint) {
	          continue;
	        }

	        if (this.get('lockUniScaling') &&
	           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {
	          continue;
	        }

	        lines = this._getImageLines(this.oCoords[i].corner);

	        // debugging

	        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);

	        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);
	        if (xPoints !== 0 && xPoints % 2 === 1) {
	          this.__corner = i;
	          return i;
	        }
	      }
	      return false;
	    },

	    /**
	     * Sets the coordinates of the draggable boxes in the corners of
	     * the image used to scale/rotate it.
	     * @private
	     */
	    _setCornerCoords: function() {
	      var coords = this.oCoords,
	          newTheta = degreesToRadians(45 - this.angle),
	          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */
	          /* 0.707106 stands for sqrt(2)/2 */
	          cornerHypotenuse = this.cornerSize * 0.707106,
	          cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta),
	          sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta),
	          x, y;

	      for (var point in coords) {
	        x = coords[point].x;
	        y = coords[point].y;
	        coords[point].corner = {
	          tl: {
	            x: x - sinHalfOffset,
	            y: y - cosHalfOffset
	          },
	          tr: {
	            x: x + cosHalfOffset,
	            y: y - sinHalfOffset
	          },
	          bl: {
	            x: x - cosHalfOffset,
	            y: y + sinHalfOffset
	          },
	          br: {
	            x: x + sinHalfOffset,
	            y: y + cosHalfOffset
	          }
	        };
	      }
	    },

	    /**
	     * Draws a colored layer behind the object, inside its selection borders.
	     * Requires public options: padding, selectionBackgroundColor
	     * this function is called when the context is transformed
	     * has checks to be skipped when the object is on a staticCanvas
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawSelectionBackground: function(ctx) {
	      if (!this.selectionBackgroundColor ||
	        (this.canvas && !this.canvas.interactive) ||
	        (this.canvas && this.canvas._activeObject !== this)
	      ) {
	        return this;
	      }
	      ctx.save();
	      var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),
	          vpt = this.canvas.viewportTransform;
	      ctx.translate(center.x, center.y);
	      ctx.scale(1 / vpt[0], 1 / vpt[3]);
	      ctx.rotate(degreesToRadians(this.angle));
	      ctx.fillStyle = this.selectionBackgroundColor;
	      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);
	      ctx.restore();
	      return this;
	    },

	    /**
	     * Draws borders of an object's bounding box.
	     * Requires public properties: width, height
	     * Requires public options: padding, borderColor
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @param {Object} styleOverride object to override the object style
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawBorders: function(ctx, styleOverride) {
	      styleOverride = styleOverride || {};
	      var wh = this._calculateCurrentDimensions(),
	          strokeWidth = 1 / this.borderScaleFactor,
	          width = wh.x + strokeWidth,
	          height = wh.y + strokeWidth,
	          drawRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?
	            styleOverride.hasRotatingPoint : this.hasRotatingPoint,
	          hasControls = typeof styleOverride.hasControls !== 'undefined' ?
	            styleOverride.hasControls : this.hasControls,
	          rotatingPointOffset = typeof styleOverride.rotatingPointOffset !== 'undefined' ?
	            styleOverride.rotatingPointOffset : this.rotatingPointOffset;

	      ctx.save();
	      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
	      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);

	      ctx.strokeRect(
	        -width / 2,
	        -height / 2,
	        width,
	        height
	      );

	      if (drawRotatingPoint && this.isControlVisible('mtr') && hasControls) {

	        var rotateHeight = -height / 2;

	        ctx.beginPath();
	        ctx.moveTo(0, rotateHeight);
	        ctx.lineTo(0, rotateHeight - rotatingPointOffset);
	        ctx.stroke();
	      }

	      ctx.restore();
	      return this;
	    },

	    /**
	     * Draws borders of an object's bounding box when it is inside a group.
	     * Requires public properties: width, height
	     * Requires public options: padding, borderColor
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @param {object} options object representing current object parameters
	     * @param {Object} styleOverride object to override the object style
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawBordersInGroup: function(ctx, options, styleOverride) {
	      styleOverride = styleOverride || {};
	      var p = this._getNonTransformedDimensions(),
	          matrix = fabric.util.composeMatrix({
	            scaleX: options.scaleX,
	            scaleY: options.scaleY,
	            skewX: options.skewX
	          }),
	          wh = fabric.util.transformPoint(p, matrix),
	          strokeWidth = 1 / this.borderScaleFactor,
	          width = wh.x + strokeWidth,
	          height = wh.y + strokeWidth;

	      ctx.save();
	      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray, null);
	      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;

	      ctx.strokeRect(
	        -width / 2,
	        -height / 2,
	        width,
	        height
	      );

	      ctx.restore();
	      return this;
	    },

	    /**
	     * Draws corners of an object's bounding box.
	     * Requires public properties: width, height
	     * Requires public options: cornerSize, padding
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @param {Object} styleOverride object to override the object style
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawControls: function(ctx, styleOverride) {
	      styleOverride = styleOverride || {};
	      var wh = this._calculateCurrentDimensions(),
	          width = wh.x,
	          height = wh.y,
	          scaleOffset = styleOverride.cornerSize || this.cornerSize,
	          left = -(width + scaleOffset) / 2,
	          top = -(height + scaleOffset) / 2,
	          transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?
	            styleOverride.transparentCorners : this.transparentCorners,
	          hasRotatingPoint = typeof styleOverride.hasRotatingPoint !== 'undefined' ?
	            styleOverride.hasRotatingPoint : this.hasRotatingPoint,
	          methodName = transparentCorners ? 'stroke' : 'fill';

	      ctx.save();
	      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;
	      if (!this.transparentCorners) {
	        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;
	      }
	      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray, null);

	      // top-left
	      this._drawControl('tl', ctx, methodName,
	        left,
	        top, styleOverride);

	      // top-right
	      this._drawControl('tr', ctx, methodName,
	        left + width,
	        top, styleOverride);

	      // bottom-left
	      this._drawControl('bl', ctx, methodName,
	        left,
	        top + height, styleOverride);

	      // bottom-right
	      this._drawControl('br', ctx, methodName,
	        left + width,
	        top + height, styleOverride);

	      if (!this.get('lockUniScaling')) {

	        // middle-top
	        this._drawControl('mt', ctx, methodName,
	          left + width / 2,
	          top, styleOverride);

	        // middle-bottom
	        this._drawControl('mb', ctx, methodName,
	          left + width / 2,
	          top + height, styleOverride);

	        // middle-right
	        this._drawControl('mr', ctx, methodName,
	          left + width,
	          top + height / 2, styleOverride);

	        // middle-left
	        this._drawControl('ml', ctx, methodName,
	          left,
	          top + height / 2, styleOverride);
	      }

	      // middle-top-rotate
	      if (hasRotatingPoint) {
	        this._drawControl('mtr', ctx, methodName,
	          left + width / 2,
	          top - this.rotatingPointOffset, styleOverride);
	      }

	      ctx.restore();

	      return this;
	    },

	    /**
	     * @private
	     */
	    _drawControl: function(control, ctx, methodName, left, top, styleOverride) {
	      styleOverride = styleOverride || {};
	      if (!this.isControlVisible(control)) {
	        return;
	      }
	      var size = this.cornerSize, stroke = !this.transparentCorners && this.cornerStrokeColor;
	      switch (styleOverride.cornerStyle || this.cornerStyle) {
	        case 'circle':
	          ctx.beginPath();
	          ctx.arc(left + size / 2, top + size / 2, size / 2, 0, 2 * Math.PI, false);
	          ctx[methodName]();
	          if (stroke) {
	            ctx.stroke();
	          }
	          break;
	        default:
	          this.transparentCorners || ctx.clearRect(left, top, size, size);
	          ctx[methodName + 'Rect'](left, top, size, size);
	          if (stroke) {
	            ctx.strokeRect(left, top, size, size);
	          }
	      }
	    },

	    /**
	     * Returns true if the specified control is visible, false otherwise.
	     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
	     * @returns {Boolean} true if the specified control is visible, false otherwise
	     */
	    isControlVisible: function(controlName) {
	      return this._getControlsVisibility()[controlName];
	    },

	    /**
	     * Sets the visibility of the specified control.
	     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
	     * @param {Boolean} visible true to set the specified control visible, false otherwise
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setControlVisible: function(controlName, visible) {
	      this._getControlsVisibility()[controlName] = visible;
	      return this;
	    },

	    /**
	     * Sets the visibility state of object controls.
	     * @param {Object} [options] Options object
	     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
	     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
	     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
	     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
	     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
	     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
	     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
	     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
	     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setControlsVisibility: function(options) {
	      options || (options = { });

	      for (var p in options) {
	        this.setControlVisible(p, options[p]);
	      }
	      return this;
	    },

	    /**
	     * Returns the instance of the control visibility set for this object.
	     * @private
	     * @returns {Object}
	     */
	    _getControlsVisibility: function() {
	      if (!this._controlsVisibility) {
	        this._controlsVisibility = {
	          tl: true,
	          tr: true,
	          br: true,
	          bl: true,
	          ml: true,
	          mt: true,
	          mr: true,
	          mb: true,
	          mtr: true
	        };
	      }
	      return this._controlsVisibility;
	    },

	    /**
	     * This callback function is called every time _discardActiveObject or _setActiveObject
	     * try to to deselect this object. If the function returns true, the process is cancelled
	     * @param {Object} [options] options sent from the upper functions
	     * @param {Event} [options.e] event if the process is generated by an event
	     */
	    onDeselect: function() {
	      // implemented by sub-classes, as needed.
	    },


	    /**
	     * This callback function is called every time _discardActiveObject or _setActiveObject
	     * try to to select this object. If the function returns true, the process is cancelled
	     * @param {Object} [options] options sent from the upper functions
	     * @param {Event} [options.e] event if the process is generated by an event
	     */
	    onSelect: function() {
	      // implemented by sub-classes, as needed.
	    }
	  });
	})();


	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Animation duration (in ms) for fx* methods
	   * @type Number
	   * @default
	   */
	  FX_DURATION: 500,

	  /**
	   * Centers object horizontally with animation.
	   * @param {fabric.Object} object Object to center
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxCenterObjectH: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.left,
	      endValue: this.getCenter().left,
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        object.set('left', value);
	        _this.requestRenderAll();
	        onChange();
	      },
	      onComplete: function() {
	        object.setCoords();
	        onComplete();
	      }
	    });

	    return this;
	  },

	  /**
	   * Centers object vertically with animation.
	   * @param {fabric.Object} object Object to center
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxCenterObjectV: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.top,
	      endValue: this.getCenter().top,
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        object.set('top', value);
	        _this.requestRenderAll();
	        onChange();
	      },
	      onComplete: function() {
	        object.setCoords();
	        onComplete();
	      }
	    });

	    return this;
	  },

	  /**
	   * Same as `fabric.Canvas#remove` but animated
	   * @param {fabric.Object} object Object to remove
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxRemove: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.opacity,
	      endValue: 0,
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        object.set('opacity', value);
	        _this.requestRenderAll();
	        onChange();
	      },
	      onComplete: function () {
	        _this.remove(object);
	        onComplete();
	      }
	    });

	    return this;
	  }
	});

	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {
	  /**
	   * Animates object's properties
	   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
	   * @param {Number|Object} value Value to animate property to (if string was given first) or options object
	   * @return {fabric.Object} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
	   * @chainable
	   *
	   * As object â multiple properties
	   *
	   * object.animate({ left: ..., top: ... });
	   * object.animate({ left: ..., top: ... }, { duration: ... });
	   *
	   * As string â one property
	   *
	   * object.animate('left', ...);
	   * object.animate('left', { duration: ... });
	   *
	   */
	  animate: function() {
	    if (arguments[0] && typeof arguments[0] === 'object') {
	      var propsToAnimate = [], prop, skipCallbacks;
	      for (prop in arguments[0]) {
	        propsToAnimate.push(prop);
	      }
	      for (var i = 0, len = propsToAnimate.length; i < len; i++) {
	        prop = propsToAnimate[i];
	        skipCallbacks = i !== len - 1;
	        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);
	      }
	    }
	    else {
	      this._animate.apply(this, arguments);
	    }
	    return this;
	  },

	  /**
	   * @private
	   * @param {String} property Property to animate
	   * @param {String} to Value to animate to
	   * @param {Object} [options] Options object
	   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
	   */
	  _animate: function(property, to, options, skipCallbacks) {
	    var _this = this, propPair;

	    to = to.toString();

	    if (!options) {
	      options = { };
	    }
	    else {
	      options = fabric.util.object.clone(options);
	    }

	    if (~property.indexOf('.')) {
	      propPair = property.split('.');
	    }

	    var currentValue = propPair
	      ? this.get(propPair[0])[propPair[1]]
	      : this.get(property);

	    if (!('from' in options)) {
	      options.from = currentValue;
	    }

	    if (~to.indexOf('=')) {
	      to = currentValue + parseFloat(to.replace('=', ''));
	    }
	    else {
	      to = parseFloat(to);
	    }

	    fabric.util.animate({
	      startValue: options.from,
	      endValue: to,
	      byValue: options.by,
	      easing: options.easing,
	      duration: options.duration,
	      abort: options.abort && function() {
	        return options.abort.call(_this);
	      },
	      onChange: function(value, valueProgress, timeProgress) {
	        if (propPair) {
	          _this[propPair[0]][propPair[1]] = value;
	        }
	        else {
	          _this.set(property, value);
	        }
	        if (skipCallbacks) {
	          return;
	        }
	        options.onChange && options.onChange(value, valueProgress, timeProgress);
	      },
	      onComplete: function(value, valueProgress, timeProgress) {
	        if (skipCallbacks) {
	          return;
	        }

	        _this.setCoords();
	        options.onComplete && options.onComplete(value, valueProgress, timeProgress);
	      }
	    });
	  }
	});


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      clone = fabric.util.object.clone,
	      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },
	      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');

	  if (fabric.Line) {
	    fabric.warn('fabric.Line is already defined');
	    return;
	  }

	  /**
	   * Line class
	   * @class fabric.Line
	   * @extends fabric.Object
	   * @see {@link fabric.Line#initialize} for constructor definition
	   */
	  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'line',

	    /**
	     * x value or first line edge
	     * @type Number
	     * @default
	     */
	    x1: 0,

	    /**
	     * y value or first line edge
	     * @type Number
	     * @default
	     */
	    y1: 0,

	    /**
	     * x value or second line edge
	     * @type Number
	     * @default
	     */
	    x2: 0,

	    /**
	     * y value or second line edge
	     * @type Number
	     * @default
	     */
	    y2: 0,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),

	    /**
	     * Constructor
	     * @param {Array} [points] Array of points
	     * @param {Object} [options] Options object
	     * @return {fabric.Line} thisArg
	     */
	    initialize: function(points, options) {
	      if (!points) {
	        points = [0, 0, 0, 0];
	      }

	      this.callSuper('initialize', options);

	      this.set('x1', points[0]);
	      this.set('y1', points[1]);
	      this.set('x2', points[2]);
	      this.set('y2', points[3]);

	      this._setWidthHeight(options);
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options
	     */
	    _setWidthHeight: function(options) {
	      options || (options = { });

	      this.width = Math.abs(this.x2 - this.x1);
	      this.height = Math.abs(this.y2 - this.y1);

	      this.left = 'left' in options
	        ? options.left
	        : this._getLeftToOriginX();

	      this.top = 'top' in options
	        ? options.top
	        : this._getTopToOriginY();
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {*} value
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);
	      if (typeof coordProps[key] !== 'undefined') {
	        this._setWidthHeight();
	      }
	      return this;
	    },

	    /**
	     * @private
	     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
	     */
	    _getLeftToOriginX: makeEdgeToOriginGetter(
	      { // property names
	        origin: 'originX',
	        axis1: 'x1',
	        axis2: 'x2',
	        dimension: 'width'
	      },
	      { // possible values of origin
	        nearest: 'left',
	        center: 'center',
	        farthest: 'right'
	      }
	    ),

	    /**
	     * @private
	     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
	     */
	    _getTopToOriginY: makeEdgeToOriginGetter(
	      { // property names
	        origin: 'originY',
	        axis1: 'y1',
	        axis2: 'y2',
	        dimension: 'height'
	      },
	      { // possible values of origin
	        nearest: 'top',
	        center: 'center',
	        farthest: 'bottom'
	      }
	    ),

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      ctx.beginPath();

	      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {
	        // move from center (of virtual box) to its left/top corner
	        // we can't assume x1, y1 is top left and x2, y2 is bottom right
	        var p = this.calcLinePoints();
	        ctx.moveTo(p.x1, p.y1);
	        ctx.lineTo(p.x2, p.y2);
	      }

	      ctx.lineWidth = this.strokeWidth;

	      // TODO: test this
	      // make sure setting "fill" changes color of a line
	      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)
	      var origStrokeStyle = ctx.strokeStyle;
	      ctx.strokeStyle = this.stroke || ctx.fillStyle;
	      this.stroke && this._renderStroke(ctx);
	      ctx.strokeStyle = origStrokeStyle;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var p = this.calcLinePoints();

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /**
	     * This function is an helper for svg import. it returns the center of the object in the svg
	     * untransformed coordinates
	     * @private
	     * @return {Object} center point from element coordinates
	     */
	    _findCenterFromElement: function() {
	      return {
	        x: (this.x1 + this.x2) / 2,
	        y: (this.y1 + this.y2) / 2,
	      };
	    },

	    /**
	     * Returns object representation of an instance
	     * @methd toObject
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());
	    },

	    /*
	     * Calculate object dimensions from its properties
	     * @private
	     */
	    _getNonTransformedDimensions: function() {
	      var dim = this.callSuper('_getNonTransformedDimensions');
	      if (this.strokeLineCap === 'butt') {
	        if (this.width === 0) {
	          dim.y -= this.strokeWidth;
	        }
	        if (this.height === 0) {
	          dim.x -= this.strokeWidth;
	        }
	      }
	      return dim;
	    },

	    /**
	     * Recalculates line points given width and height
	     * @private
	     */
	    calcLinePoints: function() {
	      var xMult = this.x1 <= this.x2 ? -1 : 1,
	          yMult = this.y1 <= this.y2 ? -1 : 1,
	          x1 = (xMult * this.width * 0.5),
	          y1 = (yMult * this.height * 0.5),
	          x2 = (xMult * this.width * -0.5),
	          y2 = (yMult * this.height * -0.5);

	      return {
	        x1: x1,
	        x2: x2,
	        y1: y1,
	        y2: y2
	      };
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var p = this.calcLinePoints();
	      return [
	        '<line ', 'COMMON_PARTS',
	        'x1="', p.x1,
	        '" y1="', p.y1,
	        '" x2="', p.x2,
	        '" y2="', p.y2,
	        '" />\n'
	      ];
	    },
	    /* _TO_SVG_END_ */
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})
	   * @static
	   * @memberOf fabric.Line
	   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
	   */
	  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));

	  /**
	   * Returns fabric.Line instance from an SVG element
	   * @static
	   * @memberOf fabric.Line
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @param {Function} [callback] callback function invoked after parsing
	   */
	  fabric.Line.fromElement = function(element, callback, options) {
	    options = options || { };
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),
	        points = [
	          parsedAttributes.x1 || 0,
	          parsedAttributes.y1 || 0,
	          parsedAttributes.x2 || 0,
	          parsedAttributes.y2 || 0
	        ];
	    callback(new fabric.Line(points, extend(parsedAttributes, options)));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Line instance from an object representation
	   * @static
	   * @memberOf fabric.Line
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] invoked with new instance as first argument
	   */
	  fabric.Line.fromObject = function(object, callback) {
	    function _callback(instance) {
	      delete instance.points;
	      callback && callback(instance);
	    }    var options = clone(object, true);
	    options.points = [object.x1, object.y1, object.x2, object.y2];
	    fabric.Object._fromObject('Line', options, _callback, 'points');
	  };

	  /**
	   * Produces a function that calculates distance from canvas edge to Line origin.
	   */
	  function makeEdgeToOriginGetter(propertyNames, originValues) {
	    var origin = propertyNames.origin,
	        axis1 = propertyNames.axis1,
	        axis2 = propertyNames.axis2,
	        dimension = propertyNames.dimension,
	        nearest = originValues.nearest,
	        center = originValues.center,
	        farthest = originValues.farthest;

	    return function() {
	      switch (this.get(origin)) {
	        case nearest:
	          return Math.min(this.get(axis1), this.get(axis2));
	        case center:
	          return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));
	        case farthest:
	          return Math.max(this.get(axis1), this.get(axis2));
	      }
	    };

	  }

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      pi = Math.PI;

	  if (fabric.Circle) {
	    fabric.warn('fabric.Circle is already defined.');
	    return;
	  }

	  /**
	   * Circle class
	   * @class fabric.Circle
	   * @extends fabric.Object
	   * @see {@link fabric.Circle#initialize} for constructor definition
	   */
	  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'circle',

	    /**
	     * Radius of this circle
	     * @type Number
	     * @default
	     */
	    radius: 0,

	    /**
	     * Start angle of the circle, moving clockwise
	     * deprectated type, this should be in degree, this was an oversight.
	     * probably will change to degrees in next major version
	     * @type Number
	     * @default 0
	     */
	    startAngle: 0,

	    /**
	     * End angle of the circle
	     * deprectated type, this should be in degree, this was an oversight.
	     * probably will change to degrees in next major version
	     * @type Number
	     * @default 2Pi
	     */
	    endAngle: pi * 2,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),

	    /**
	     * @private
	     * @param {String} key
	     * @param {*} value
	     * @return {fabric.Circle} thisArg
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);

	      if (key === 'radius') {
	        this.setRadius(value);
	      }

	      return this;
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));
	    },

	    /* _TO_SVG_START_ */

	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var svgString, x = 0, y = 0,
	          angle = (this.endAngle - this.startAngle) % ( 2 * pi);

	      if (angle === 0) {
	        svgString = [
	          '<circle ', 'COMMON_PARTS',
	          'cx="' + x + '" cy="' + y + '" ',
	          'r="', this.radius,
	          '" />\n'
	        ];
	      }
	      else {
	        var startX = fabric.util.cos(this.startAngle) * this.radius,
	            startY = fabric.util.sin(this.startAngle) * this.radius,
	            endX = fabric.util.cos(this.endAngle) * this.radius,
	            endY = fabric.util.sin(this.endAngle) * this.radius,
	            largeFlag = angle > pi ? '1' : '0';
	        svgString = [
	          '<path d="M ' + startX + ' ' + startY,
	          ' A ' + this.radius + ' ' + this.radius,
	          ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY,
	          '" ', 'COMMON_PARTS', ' />\n'
	        ];
	      }
	      return svgString;
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render on
	     */
	    _render: function(ctx) {
	      ctx.beginPath();
	      ctx.arc(
	        0,
	        0,
	        this.radius,
	        this.startAngle,
	        this.endAngle, false);
	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * Returns horizontal radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRadiusX: function() {
	      return this.get('radius') * this.get('scaleX');
	    },

	    /**
	     * Returns vertical radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRadiusY: function() {
	      return this.get('radius') * this.get('scaleY');
	    },

	    /**
	     * Sets radius of an object (and updates width accordingly)
	     * @return {fabric.Circle} thisArg
	     */
	    setRadius: function(value) {
	      this.radius = value;
	      return this.set('width', value * 2).set('height', value * 2);
	    },
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
	   * @static
	   * @memberOf fabric.Circle
	   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
	   */
	  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));

	  /**
	   * Returns {@link fabric.Circle} instance from an SVG element
	   * @static
	   * @memberOf fabric.Circle
	   * @param {SVGElement} element Element to parse
	   * @param {Function} [callback] Options callback invoked after parsing is finished
	   * @param {Object} [options] Options object
	   * @throws {Error} If value of `r` attribute is missing or invalid
	   */
	  fabric.Circle.fromElement = function(element, callback) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);

	    if (!isValidRadius(parsedAttributes)) {
	      throw new Error('value of `r` attribute is required and can not be negative');
	    }

	    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;
	    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;
	    callback(new fabric.Circle(parsedAttributes));
	  };

	  /**
	   * @private
	   */
	  function isValidRadius(attributes) {
	    return (('radius' in attributes) && (attributes.radius >= 0));
	  }
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Circle} instance from an object representation
	   * @static
	   * @memberOf fabric.Circle
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] invoked with new instance as first argument
	   * @return {Object} Instance of fabric.Circle
	   */
	  fabric.Circle.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Circle', object, callback);
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Triangle) {
	    fabric.warn('fabric.Triangle is already defined');
	    return;
	  }

	  /**
	   * Triangle class
	   * @class fabric.Triangle
	   * @extends fabric.Object
	   * @return {fabric.Triangle} thisArg
	   * @see {@link fabric.Triangle#initialize} for constructor definition
	   */
	  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'triangle',

	    /**
	     * Width is set to 100 to compensate the old initialize code that was setting it to 100
	     * @type Number
	     * @default
	     */
	    width: 100,

	    /**
	     * Height is set to 100 to compensate the old initialize code that was setting it to 100
	     * @type Number
	     * @default
	     */
	    height: 100,

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      var widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2;

	      ctx.beginPath();
	      ctx.moveTo(-widthBy2, heightBy2);
	      ctx.lineTo(0, -heightBy2);
	      ctx.lineTo(widthBy2, heightBy2);
	      ctx.closePath();

	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2;

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2,
	          points = [
	            -widthBy2 + ' ' + heightBy2,
	            '0 ' + -heightBy2,
	            widthBy2 + ' ' + heightBy2
	          ].join(',');
	      return [
	        '<polygon ', 'COMMON_PARTS',
	        'points="', points,
	        '" />'
	      ];
	    },
	    /* _TO_SVG_END_ */
	  });

	  /**
	   * Returns {@link fabric.Triangle} instance from an object representation
	   * @static
	   * @memberOf fabric.Triangle
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] invoked with new instance as first argument
	   */
	  fabric.Triangle.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Triangle', object, callback);
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      piBy2   = Math.PI * 2;

	  if (fabric.Ellipse) {
	    fabric.warn('fabric.Ellipse is already defined.');
	    return;
	  }

	  /**
	   * Ellipse class
	   * @class fabric.Ellipse
	   * @extends fabric.Object
	   * @return {fabric.Ellipse} thisArg
	   * @see {@link fabric.Ellipse#initialize} for constructor definition
	   */
	  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'ellipse',

	    /**
	     * Horizontal radius
	     * @type Number
	     * @default
	     */
	    rx:   0,

	    /**
	     * Vertical radius
	     * @type Number
	     * @default
	     */
	    ry:   0,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {fabric.Ellipse} thisArg
	     */
	    initialize: function(options) {
	      this.callSuper('initialize', options);
	      this.set('rx', options && options.rx || 0);
	      this.set('ry', options && options.ry || 0);
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {*} value
	     * @return {fabric.Ellipse} thisArg
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);
	      switch (key) {

	        case 'rx':
	          this.rx = value;
	          this.set('width', value * 2);
	          break;

	        case 'ry':
	          this.ry = value;
	          this.set('height', value * 2);
	          break;

	      }
	      return this;
	    },

	    /**
	     * Returns horizontal radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRx: function() {
	      return this.get('rx') * this.get('scaleX');
	    },

	    /**
	     * Returns Vertical radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRy: function() {
	      return this.get('ry') * this.get('scaleY');
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      return [
	        '<ellipse ', 'COMMON_PARTS',
	        'cx="0" cy="0" ',
	        'rx="', this.rx,
	        '" ry="', this.ry,
	        '" />\n'
	      ];
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render on
	     */
	    _render: function(ctx) {
	      ctx.beginPath();
	      ctx.save();
	      ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);
	      ctx.arc(
	        0,
	        0,
	        this.rx,
	        0,
	        piBy2,
	        false);
	      ctx.restore();
	      this._renderPaintInOrder(ctx);
	    },
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
	   * @static
	   * @memberOf fabric.Ellipse
	   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
	   */
	  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));

	  /**
	   * Returns {@link fabric.Ellipse} instance from an SVG element
	   * @static
	   * @memberOf fabric.Ellipse
	   * @param {SVGElement} element Element to parse
	   * @param {Function} [callback] Options callback invoked after parsing is finished
	   * @return {fabric.Ellipse}
	   */
	  fabric.Ellipse.fromElement = function(element, callback) {

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);

	    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;
	    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;
	    callback(new fabric.Ellipse(parsedAttributes));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Ellipse} instance from an object representation
	   * @static
	   * @memberOf fabric.Ellipse
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] invoked with new instance as first argument
	   * @return {fabric.Ellipse}
	   */
	  fabric.Ellipse.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Ellipse', object, callback);
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  if (fabric.Rect) {
	    fabric.warn('fabric.Rect is already defined');
	    return;
	  }

	  /**
	   * Rectangle class
	   * @class fabric.Rect
	   * @extends fabric.Object
	   * @return {fabric.Rect} thisArg
	   * @see {@link fabric.Rect#initialize} for constructor definition
	   */
	  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {

	    /**
	     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'rect',

	    /**
	     * Horizontal border radius
	     * @type Number
	     * @default
	     */
	    rx:   0,

	    /**
	     * Vertical border radius
	     * @type Number
	     * @default
	     */
	    ry:   0,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(options) {
	      this.callSuper('initialize', options);
	      this._initRxRy();
	    },

	    /**
	     * Initializes rx/ry attributes
	     * @private
	     */
	    _initRxRy: function() {
	      if (this.rx && !this.ry) {
	        this.ry = this.rx;
	      }
	      else if (this.ry && !this.rx) {
	        this.rx = this.ry;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {

	      // 1x1 case (used in spray brush) optimization was removed because
	      // with caching and higher zoom level this makes more damage than help

	      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,
	          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,
	          w = this.width,
	          h = this.height,
	          x = -this.width / 2,
	          y = -this.height / 2,
	          isRounded = rx !== 0 || ry !== 0,
	          /* "magic number" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */
	          k = 1 - 0.5522847498;
	      ctx.beginPath();

	      ctx.moveTo(x + rx, y);

	      ctx.lineTo(x + w - rx, y);
	      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);

	      ctx.lineTo(x + w, y + h - ry);
	      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);

	      ctx.lineTo(x + rx, y + h);
	      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);

	      ctx.lineTo(x, y + ry);
	      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);

	      ctx.closePath();

	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var x = -this.width / 2,
	          y = -this.height / 2,
	          w = this.width,
	          h = this.height;

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var x = -this.width / 2, y = -this.height / 2;
	      return [
	        '<rect ', 'COMMON_PARTS',
	        'x="', x, '" y="', y,
	        '" rx="', this.rx, '" ry="', this.ry,
	        '" width="', this.width, '" height="', this.height,
	        '" />\n'
	      ];
	    },
	    /* _TO_SVG_END_ */
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
	   * @static
	   * @memberOf fabric.Rect
	   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement
	   */
	  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));

	  /**
	   * Returns {@link fabric.Rect} instance from an SVG element
	   * @static
	   * @memberOf fabric.Rect
	   * @param {SVGElement} element Element to parse
	   * @param {Function} callback callback function invoked after parsing
	   * @param {Object} [options] Options object
	   */
	  fabric.Rect.fromElement = function(element, callback, options) {
	    if (!element) {
	      return callback(null);
	    }
	    options = options || { };

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);

	    parsedAttributes.left = parsedAttributes.left || 0;
	    parsedAttributes.top  = parsedAttributes.top  || 0;
	    parsedAttributes.height  = parsedAttributes.height || 0;
	    parsedAttributes.width  = parsedAttributes.width || 0;
	    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));
	    rect.visible = rect.visible && rect.width > 0 && rect.height > 0;
	    callback(rect);
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Rect} instance from an object representation
	   * @static
	   * @memberOf fabric.Rect
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created
	   */
	  fabric.Rect.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Rect', object, callback);
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      min = fabric.util.array.min,
	      max = fabric.util.array.max,
	      toFixed = fabric.util.toFixed;

	  if (fabric.Polyline) {
	    fabric.warn('fabric.Polyline is already defined');
	    return;
	  }

	  /**
	   * Polyline class
	   * @class fabric.Polyline
	   * @extends fabric.Object
	   * @see {@link fabric.Polyline#initialize} for constructor definition
	   */
	  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'polyline',

	    /**
	     * Points array
	     * @type Array
	     * @default
	     */
	    points: null,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),

	    /**
	     * Constructor
	     * @param {Array} points Array of points (where each point is an object with x and y)
	     * @param {Object} [options] Options object
	     * @return {fabric.Polyline} thisArg
	     * @example
	     * var poly = new fabric.Polyline([
	     *     { x: 10, y: 10 },
	     *     { x: 50, y: 30 },
	     *     { x: 40, y: 70 },
	     *     { x: 60, y: 50 },
	     *     { x: 100, y: 150 },
	     *     { x: 40, y: 100 }
	     *   ], {
	     *   stroke: 'red',
	     *   left: 100,
	     *   top: 100
	     * });
	     */
	    initialize: function(points, options) {
	      options = options || {};
	      this.points = points || [];
	      this.callSuper('initialize', options);
	      this._setPositionDimensions(options);
	    },

	    _setPositionDimensions: function(options) {
	      var calcDim = this._calcDimensions(options), correctLeftTop;
	      this.width = calcDim.width;
	      this.height = calcDim.height;
	      if (!options.fromSVG) {
	        correctLeftTop = this.translateToGivenOrigin(
	          { x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2 },
	          'left',
	          'top',
	          this.originX,
	          this.originY
	        );
	      }
	      if (typeof options.left === 'undefined') {
	        this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;
	      }
	      if (typeof options.top === 'undefined') {
	        this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;
	      }
	      this.pathOffset = {
	        x: calcDim.left + this.width / 2,
	        y: calcDim.top + this.height / 2
	      };
	    },

	    /**
	     * Calculate the polygon min and max point from points array,
	     * returning an object with left, top, widht, height to measure the
	     * polygon size
	     * @return {Object} object.left X coordinate of the polygon leftmost point
	     * @return {Object} object.top Y coordinate of the polygon topmost point
	     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point
	     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point
	     * @private
	     */
	    _calcDimensions: function() {

	      var points = this.points,
	          minX = min(points, 'x') || 0,
	          minY = min(points, 'y') || 0,
	          maxX = max(points, 'x') || 0,
	          maxY = max(points, 'y') || 0,
	          width = (maxX - minX),
	          height = (maxY - minY);

	      return {
	        left: minX,
	        top: minY,
	        width: width,
	        height: height
	      };
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        points: this.points.concat()
	      });
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y,
	          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

	      for (var i = 0, len = this.points.length; i < len; i++) {
	        points.push(
	          toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',',
	          toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' '
	        );
	      }
	      return [
	        '<' + this.type + ' ', 'COMMON_PARTS',
	        'points="', points.join(''),
	        '" />\n'
	      ];
	    },
	    /* _TO_SVG_END_ */


	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    commonRender: function(ctx) {
	      var point, len = this.points.length,
	          x = this.pathOffset.x,
	          y = this.pathOffset.y;

	      if (!len || isNaN(this.points[len - 1].y)) {
	        // do not draw if no points or odd points
	        // NaN comes from parseFloat of a empty string in parser
	        return false;
	      }
	      ctx.beginPath();
	      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);
	      for (var i = 0; i < len; i++) {
	        point = this.points[i];
	        ctx.lineTo(point.x - x, point.y - y);
	      }
	      return true;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      if (!this.commonRender(ctx)) {
	        return;
	      }
	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var p1, p2;

	      ctx.beginPath();
	      for (var i = 0, len = this.points.length; i < len; i++) {
	        p1 = this.points[i];
	        p2 = this.points[i + 1] || p1;
	        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);
	      }
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return this.get('points').length;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})
	   * @static
	   * @memberOf fabric.Polyline
	   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
	   */
	  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

	  /**
	   * Returns fabric.Polyline instance from an SVG element
	   * @static
	   * @memberOf fabric.Polyline
	   * @param {SVGElement} element Element to parser
	   * @param {Function} callback callback function invoked after parsing
	   * @param {Object} [options] Options object
	   */
	  fabric.Polyline.fromElementGenerator = function(_class) {
	    return function(element, callback, options) {
	      if (!element) {
	        return callback(null);
	      }
	      options || (options = { });

	      var points = fabric.parsePointsAttribute(element.getAttribute('points')),
	          parsedAttributes = fabric.parseAttributes(element, fabric[_class].ATTRIBUTE_NAMES);
	      parsedAttributes.fromSVG = true;
	      callback(new fabric[_class](points, extend(parsedAttributes, options)));
	    };
	  };

	  fabric.Polyline.fromElement = fabric.Polyline.fromElementGenerator('Polyline');

	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Polyline instance from an object representation
	   * @static
	   * @memberOf fabric.Polyline
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
	   */
	  fabric.Polyline.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Polyline', object, callback, 'points');
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Polygon) {
	    fabric.warn('fabric.Polygon is already defined');
	    return;
	  }

	  /**
	   * Polygon class
	   * @class fabric.Polygon
	   * @extends fabric.Polyline
	   * @see {@link fabric.Polygon#initialize} for constructor definition
	   */
	  fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'polygon',

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      if (!this.commonRender(ctx)) {
	        return;
	      }
	      ctx.closePath();
	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      this.callSuper('_renderDashedStroke', ctx);
	      ctx.closePath();
	    },
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
	   * @static
	   * @memberOf fabric.Polygon
	   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
	   */
	  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

	  /**
	   * Returns {@link fabric.Polygon} instance from an SVG element
	   * @static
	   * @memberOf fabric.Polygon
	   * @param {SVGElement} element Element to parse
	   * @param {Function} callback callback function invoked after parsing
	   * @param {Object} [options] Options object
	   */
	  fabric.Polygon.fromElement = fabric.Polyline.fromElementGenerator('Polygon');
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Polygon instance from an object representation
	   * @static
	   * @memberOf fabric.Polygon
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
	   */
	  fabric.Polygon.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Polygon', object, callback, 'points');
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      min = fabric.util.array.min,
	      max = fabric.util.array.max,
	      extend = fabric.util.object.extend,
	      _toString = Object.prototype.toString,
	      drawArc = fabric.util.drawArc,
	      toFixed = fabric.util.toFixed,
	      commandLengths = {
	        m: 2,
	        l: 2,
	        h: 1,
	        v: 1,
	        c: 6,
	        s: 4,
	        q: 4,
	        t: 2,
	        a: 7
	      },
	      repeatedCommands = {
	        m: 'l',
	        M: 'L'
	      };

	  if (fabric.Path) {
	    fabric.warn('fabric.Path is already defined');
	    return;
	  }

	  /**
	   * Path class
	   * @class fabric.Path
	   * @extends fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
	   * @see {@link fabric.Path#initialize} for constructor definition
	   */
	  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'path',

	    /**
	     * Array of path points
	     * @type Array
	     * @default
	     */
	    path: null,

	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),

	    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),

	    /**
	     * Constructor
	     * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
	     * @param {Object} [options] Options object
	     * @return {fabric.Path} thisArg
	     */
	    initialize: function(path, options) {
	      options = options || { };
	      this.callSuper('initialize', options);

	      if (!path) {
	        path = [];
	      }

	      var fromArray = _toString.call(path) === '[object Array]';

	      this.path = fromArray
	        ? path
	        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)
	        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);

	      if (!this.path) {
	        return;
	      }

	      if (!fromArray) {
	        this.path = this._parsePath();
	      }

	      fabric.Polyline.prototype._setPositionDimensions.call(this, options);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render path on
	     */
	    _renderPathCommands: function(ctx) {
	      var current, // current instruction
	          previous = null,
	          subpathStartX = 0,
	          subpathStartY = 0,
	          x = 0, // current x
	          y = 0, // current y
	          controlX = 0, // current control point x
	          controlY = 0, // current control point y
	          tempX,
	          tempY,
	          l = -this.pathOffset.x,
	          t = -this.pathOffset.y;

	      ctx.beginPath();

	      for (var i = 0, len = this.path.length; i < len; ++i) {

	        current = this.path[i];

	        switch (current[0]) { // first letter

	          case 'l': // lineto, relative
	            x += current[1];
	            y += current[2];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'L': // lineto, absolute
	            x = current[1];
	            y = current[2];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'h': // horizontal lineto, relative
	            x += current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'H': // horizontal lineto, absolute
	            x = current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'v': // vertical lineto, relative
	            y += current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'V': // verical lineto, absolute
	            y = current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'm': // moveTo, relative
	            x += current[1];
	            y += current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            ctx.moveTo(x + l, y + t);
	            break;

	          case 'M': // moveTo, absolute
	            x = current[1];
	            y = current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            ctx.moveTo(x + l, y + t);
	            break;

	          case 'c': // bezierCurveTo, relative
	            tempX = x + current[5];
	            tempY = y + current[6];
	            controlX = x + current[3];
	            controlY = y + current[4];
	            ctx.bezierCurveTo(
	              x + current[1] + l, // x1
	              y + current[2] + t, // y1
	              controlX + l, // x2
	              controlY + t, // y2
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'C': // bezierCurveTo, absolute
	            x = current[5];
	            y = current[6];
	            controlX = current[3];
	            controlY = current[4];
	            ctx.bezierCurveTo(
	              current[1] + l,
	              current[2] + t,
	              controlX + l,
	              controlY + t,
	              x + l,
	              y + t
	            );
	            break;

	          case 's': // shorthand cubic bezierCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            ctx.bezierCurveTo(
	              controlX + l,
	              controlY + t,
	              x + current[1] + l,
	              y + current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = x + current[1];
	            controlY = y + current[2];

	            x = tempX;
	            y = tempY;
	            break;

	          case 'S': // shorthand cubic bezierCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];
	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            ctx.bezierCurveTo(
	              controlX + l,
	              controlY + t,
	              current[1] + l,
	              current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;

	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = current[1];
	            controlY = current[2];

	            break;

	          case 'q': // quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            controlX = x + current[1];
	            controlY = y + current[2];

	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'Q': // quadraticCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];

	            ctx.quadraticCurveTo(
	              current[1] + l,
	              current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            controlX = current[1];
	            controlY = current[2];
	            break;

	          case 't': // shorthand quadraticCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[1];
	            tempY = y + current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;

	            break;

	          case 'T':
	            tempX = current[1];
	            tempY = current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'a':
	            // TODO: optimize this
	            drawArc(ctx, x + l, y + t, [
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + x + l,
	              current[7] + y + t
	            ]);
	            x += current[6];
	            y += current[7];
	            break;

	          case 'A':
	            // TODO: optimize this
	            drawArc(ctx, x + l, y + t, [
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + l,
	              current[7] + t
	            ]);
	            x = current[6];
	            y = current[7];
	            break;

	          case 'z':
	          case 'Z':
	            x = subpathStartX;
	            y = subpathStartY;
	            ctx.closePath();
	            break;
	        }
	        previous = current;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render path on
	     */
	    _render: function(ctx) {
	      this._renderPathCommands(ctx);
	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} string representation of an instance
	     */
	    toString: function() {
	      return '#<fabric.Path (' + this.complexity() +
	        '): { "top": ' + this.top + ', "left": ' + this.left + ' }>';
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        path: this.path.map(function(item) { return item.slice(); }),
	      });
	    },

	    /**
	     * Returns dataless object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));
	      if (o.sourcePath) {
	        delete o.path;
	      }
	      return o;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var path = this.path.map(function(path) {
	        return path.join(' ');
	      }).join(' ');
	      return [
	        '<path ', 'COMMON_PARTS',
	        'd="', path,
	        '" stroke-linecap="round" ',
	        '/>\n'
	      ];
	    },

	    _getOffsetTransform: function() {
	      var digits = fabric.Object.NUM_FRACTION_DIGITS;
	      return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' +
	          toFixed(-this.pathOffset.y, digits) + ')';
	    },

	    /**
	     * Returns svg clipPath representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toClipPathSVG: function(reviver) {
	      var additionalTransform = this._getOffsetTransform();
	      return '\t' + this._createBaseClipPathSVGMarkup(
	        this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform }
	      );
	    },

	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var additionalTransform = this._getOffsetTransform();
	      return this._createBaseSVGMarkup(this._toSVG(), { reviver: reviver, additionalTransform: additionalTransform  });
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns number representation of an instance complexity
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return this.path.length;
	    },

	    /**
	     * @private
	     */
	    _parsePath: function() {
	      var result = [],
	          coords = [],
	          currentPath,
	          parsed,
	          re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/ig,
	          match,
	          coordsStr;

	      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {
	        currentPath = this.path[i];

	        coordsStr = currentPath.slice(1).trim();
	        coords.length = 0;

	        while ((match = re.exec(coordsStr))) {
	          coords.push(match[0]);
	        }

	        coordsParsed = [currentPath.charAt(0)];

	        for (var j = 0, jlen = coords.length; j < jlen; j++) {
	          parsed = parseFloat(coords[j]);
	          if (!isNaN(parsed)) {
	            coordsParsed.push(parsed);
	          }
	        }

	        var command = coordsParsed[0],
	            commandLength = commandLengths[command.toLowerCase()],
	            repeatedCommand = repeatedCommands[command] || command;

	        if (coordsParsed.length - 1 > commandLength) {
	          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
	            result.push([command].concat(coordsParsed.slice(k, k + commandLength)));
	            command = repeatedCommand;
	          }
	        }
	        else {
	          result.push(coordsParsed);
	        }
	      }

	      return result;
	    },

	    /**
	     * @private
	     */
	    _calcDimensions: function() {

	      var aX = [],
	          aY = [],
	          current, // current instruction
	          previous = null,
	          subpathStartX = 0,
	          subpathStartY = 0,
	          x = 0, // current x
	          y = 0, // current y
	          controlX = 0, // current control point x
	          controlY = 0, // current control point y
	          tempX,
	          tempY,
	          bounds;

	      for (var i = 0, len = this.path.length; i < len; ++i) {

	        current = this.path[i];

	        switch (current[0]) { // first letter

	          case 'l': // lineto, relative
	            x += current[1];
	            y += current[2];
	            bounds = [];
	            break;

	          case 'L': // lineto, absolute
	            x = current[1];
	            y = current[2];
	            bounds = [];
	            break;

	          case 'h': // horizontal lineto, relative
	            x += current[1];
	            bounds = [];
	            break;

	          case 'H': // horizontal lineto, absolute
	            x = current[1];
	            bounds = [];
	            break;

	          case 'v': // vertical lineto, relative
	            y += current[1];
	            bounds = [];
	            break;

	          case 'V': // verical lineto, absolute
	            y = current[1];
	            bounds = [];
	            break;

	          case 'm': // moveTo, relative
	            x += current[1];
	            y += current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            bounds = [];
	            break;

	          case 'M': // moveTo, absolute
	            x = current[1];
	            y = current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            bounds = [];
	            break;

	          case 'c': // bezierCurveTo, relative
	            tempX = x + current[5];
	            tempY = y + current[6];
	            controlX = x + current[3];
	            controlY = y + current[4];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              x + current[1], // x1
	              y + current[2], // y1
	              controlX, // x2
	              controlY, // y2
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'C': // bezierCurveTo, absolute
	            controlX = current[3];
	            controlY = current[4];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              current[1],
	              current[2],
	              controlX,
	              controlY,
	              current[5],
	              current[6]
	            );
	            x = current[5];
	            y = current[6];
	            break;

	          case 's': // shorthand cubic bezierCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              x + current[1],
	              y + current[2],
	              tempX,
	              tempY
	            );
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = x + current[1];
	            controlY = y + current[2];
	            x = tempX;
	            y = tempY;
	            break;

	          case 'S': // shorthand cubic bezierCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];
	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              current[1],
	              current[2],
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = current[1];
	            controlY = current[2];
	            break;

	          case 'q': // quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];
	            controlX = x + current[1];
	            controlY = y + current[2];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'Q': // quadraticCurveTo, absolute
	            controlX = current[1];
	            controlY = current[2];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              current[3],
	              current[4]
	            );
	            x = current[3];
	            y = current[4];
	            break;

	          case 't': // shorthand quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[1];
	            tempY = y + current[2];
	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;

	            break;

	          case 'T':
	            tempX = current[1];
	            tempY = current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'a':
	            // TODO: optimize this
	            bounds = fabric.util.getBoundsOfArc(x, y,
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + x,
	              current[7] + y
	            );
	            x += current[6];
	            y += current[7];
	            break;

	          case 'A':
	            // TODO: optimize this
	            bounds = fabric.util.getBoundsOfArc(x, y,
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6],
	              current[7]
	            );
	            x = current[6];
	            y = current[7];
	            break;

	          case 'z':
	          case 'Z':
	            x = subpathStartX;
	            y = subpathStartY;
	            break;
	        }
	        previous = current;
	        bounds.forEach(function (point) {
	          aX.push(point.x);
	          aY.push(point.y);
	        });
	        aX.push(x);
	        aY.push(y);
	      }

	      var minX = min(aX) || 0,
	          minY = min(aY) || 0,
	          maxX = max(aX) || 0,
	          maxY = max(aY) || 0,
	          deltaX = maxX - minX,
	          deltaY = maxY - minY;

	      return {
	        left: minX,
	        top: minY,
	        width: deltaX,
	        height: deltaY
	      };
	    }
	  });

	  /**
	   * Creates an instance of fabric.Path from an object
	   * @static
	   * @memberOf fabric.Path
	   * @param {Object} object
	   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
	   */
	  fabric.Path.fromObject = function(object, callback) {
	    if (typeof object.sourcePath === 'string') {
	      var pathUrl = object.sourcePath;
	      fabric.loadSVGFromURL(pathUrl, function (elements) {
	        var path = elements[0];
	        path.setOptions(object);
	        callback && callback(path);
	      });
	    }
	    else {
	      fabric.Object._fromObject('Path', object, callback, 'path');
	    }
	  };

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
	   * @static
	   * @memberOf fabric.Path
	   * @see http://www.w3.org/TR/SVG/paths.html#PathElement
	   */
	  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);

	  /**
	   * Creates an instance of fabric.Path from an SVG <path> element
	   * @static
	   * @memberOf fabric.Path
	   * @param {SVGElement} element to parse
	   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
	   * @param {Object} [options] Options object
	   * @param {Function} [callback] Options callback invoked after parsing is finished
	   */
	  fabric.Path.fromElement = function(element, callback, options) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);
	    parsedAttributes.fromSVG = true;
	    callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));
	  };
	  /* _FROM_SVG_END_ */

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      min = fabric.util.array.min,
	      max = fabric.util.array.max;

	  if (fabric.Group) {
	    return;
	  }

	  /**
	   * Group class
	   * @class fabric.Group
	   * @extends fabric.Object
	   * @mixes fabric.Collection
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
	   * @see {@link fabric.Group#initialize} for constructor definition
	   */
	  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'group',

	    /**
	     * Width of stroke
	     * @type Number
	     * @default
	     */
	    strokeWidth: 0,

	    /**
	     * Indicates if click events should also check for subtargets
	     * @type Boolean
	     * @default
	     */
	    subTargetCheck: false,

	    /**
	     * Groups are container, do not render anything on theyr own, ence no cache properties
	     * @type Array
	     * @default
	     */
	    cacheProperties: [],

	    /**
	     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still
	     * available setting this boolean to true.
	     * @type Boolean
	     * @since 2.0.0
	     * @default
	     */
	    useSetOnGroup: false,

	    /**
	     * Constructor
	     * @param {Object} objects Group objects
	     * @param {Object} [options] Options object
	     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
	     * @return {Object} thisArg
	     */
	    initialize: function(objects, options, isAlreadyGrouped) {
	      options = options || {};
	      this._objects = [];
	      // if objects enclosed in a group have been grouped already,
	      // we cannot change properties of objects.
	      // Thus we need to set options to group without objects,
	      isAlreadyGrouped && this.callSuper('initialize', options);
	      this._objects = objects || [];
	      for (var i = this._objects.length; i--; ) {
	        this._objects[i].group = this;
	      }

	      if (!isAlreadyGrouped) {
	        var center = options && options.centerPoint;
	        // we want to set origins before calculating the bounding box.
	        // so that the topleft can be set with that in mind.
	        // if specific top and left are passed, are overwritten later
	        // with the callSuper('initialize', options)
	        if (options.originX !== undefined) {
	          this.originX = options.originX;
	        }
	        if (options.originY !== undefined) {
	          this.originY = options.originY;
	        }
	        // if coming from svg i do not want to calc bounds.
	        // i assume width and height are passed along options
	        center || this._calcBounds();
	        this._updateObjectsCoords(center);
	        delete options.centerPoint;
	        this.callSuper('initialize', options);
	      }
	      else {
	        this._updateObjectsACoords();
	      }

	      this.setCoords();
	    },

	    /**
	     * @private
	     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
	     */
	    _updateObjectsACoords: function() {
	      var ignoreZoom = true, skipAbsolute = true;
	      for (var i = this._objects.length; i--; ){
	        this._objects[i].setCoords(ignoreZoom, skipAbsolute);
	      }
	    },

	    /**
	     * @private
	     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
	     */
	    _updateObjectsCoords: function(center) {
	      var center = center || this.getCenterPoint();
	      for (var i = this._objects.length; i--; ){
	        this._updateObjectCoords(this._objects[i], center);
	      }
	    },

	    /**
	     * @private
	     * @param {Object} object
	     * @param {fabric.Point} center, current center of group.
	     */
	    _updateObjectCoords: function(object, center) {
	      var objectLeft = object.left,
	          objectTop = object.top,
	          ignoreZoom = true, skipAbsolute = true;

	      object.set({
	        left: objectLeft - center.x,
	        top: objectTop - center.y
	      });
	      object.group = this;
	      object.setCoords(ignoreZoom, skipAbsolute);
	    },

	    /**
	     * Returns string represenation of a group
	     * @return {String}
	     */
	    toString: function() {
	      return '#<fabric.Group: (' + this.complexity() + ')>';
	    },

	    /**
	     * Adds an object to a group; Then recalculates group's dimension, position.
	     * @param {Object} object
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    addWithUpdate: function(object) {
	      this._restoreObjectsState();
	      fabric.util.resetObjectTransform(this);
	      if (object) {
	        this._objects.push(object);
	        object.group = this;
	        object._set('canvas', this.canvas);
	      }
	      this._calcBounds();
	      this._updateObjectsCoords();
	      this.setCoords();
	      this.dirty = true;
	      return this;
	    },

	    /**
	     * Removes an object from a group; Then recalculates group's dimension, position.
	     * @param {Object} object
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    removeWithUpdate: function(object) {
	      this._restoreObjectsState();
	      fabric.util.resetObjectTransform(this);

	      this.remove(object);
	      this._calcBounds();
	      this._updateObjectsCoords();
	      this.setCoords();
	      this.dirty = true;
	      return this;
	    },

	    /**
	     * @private
	     */
	    _onObjectAdded: function(object) {
	      this.dirty = true;
	      object.group = this;
	      object._set('canvas', this.canvas);
	    },

	    /**
	     * @private
	     */
	    _onObjectRemoved: function(object) {
	      this.dirty = true;
	      delete object.group;
	    },

	    /**
	     * @private
	     */
	    _set: function(key, value) {
	      var i = this._objects.length;
	      if (this.useSetOnGroup) {
	        while (i--) {
	          this._objects[i].setOnGroup(key, value);
	        }
	      }
	      if (key === 'canvas') {
	        while (i--) {
	          this._objects[i]._set(key, value);
	        }
	      }
	      fabric.Object.prototype._set.call(this, key, value);
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var _includeDefaultValues = this.includeDefaultValues;
	      var objsToObject = this._objects.map(function(obj) {
	        var originalDefaults = obj.includeDefaultValues;
	        obj.includeDefaultValues = _includeDefaultValues;
	        var _obj = obj.toObject(propertiesToInclude);
	        obj.includeDefaultValues = originalDefaults;
	        return _obj;
	      });
	      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);
	      obj.objects = objsToObject;
	      return obj;
	    },

	    /**
	     * Returns object representation of an instance, in dataless mode.
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      var objsToObject, sourcePath = this.sourcePath;
	      if (sourcePath) {
	        objsToObject = sourcePath;
	      }
	      else {
	        var _includeDefaultValues = this.includeDefaultValues;
	        objsToObject = this._objects.map(function(obj) {
	          var originalDefaults = obj.includeDefaultValues;
	          obj.includeDefaultValues = _includeDefaultValues;
	          var _obj = obj.toDatalessObject(propertiesToInclude);
	          obj.includeDefaultValues = originalDefaults;
	          return _obj;
	        });
	      }
	      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);
	      obj.objects = objsToObject;
	      return obj;
	    },

	    /**
	     * Renders instance on a given context
	     * @param {CanvasRenderingContext2D} ctx context to render instance on
	     */
	    render: function(ctx) {
	      this._transformDone = true;
	      this.callSuper('render', ctx);
	      this._transformDone = false;
	    },

	    /**
	     * Decide if the object should cache or not. Create its own cache level
	     * needsItsOwnCache should be used when the object drawing method requires
	     * a cache step. None of the fabric classes requires it.
	     * Generally you do not cache objects in groups because the group is already cached.
	     * @return {Boolean}
	     */
	    shouldCache: function() {
	      var ownCache = fabric.Object.prototype.shouldCache.call(this);
	      if (ownCache) {
	        for (var i = 0, len = this._objects.length; i < len; i++) {
	          if (this._objects[i].willDrawShadow()) {
	            this.ownCaching = false;
	            return false;
	          }
	        }
	      }
	      return ownCache;
	    },

	    /**
	     * Check if this object or a child object will cast a shadow
	     * @return {Boolean}
	     */
	    willDrawShadow: function() {
	      if (this.shadow) {
	        return fabric.Object.prototype.willDrawShadow.call(this);
	      }
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        if (this._objects[i].willDrawShadow()) {
	          return true;
	        }
	      }
	      return false;
	    },

	    /**
	     * Check if this group or its parent group are caching, recursively up
	     * @return {Boolean}
	     */
	    isOnACache: function() {
	      return this.ownCaching || (this.group && this.group.isOnACache());
	    },

	    /**
	     * Execute the drawing operation for an object on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    drawObject: function(ctx) {
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i].render(ctx);
	      }
	      this._drawClipPath(ctx);
	    },

	    /**
	     * Check if cache is dirty
	     */
	    isCacheDirty: function(skipCanvas) {
	      if (this.callSuper('isCacheDirty', skipCanvas)) {
	        return true;
	      }
	      if (!this.statefullCache) {
	        return false;
	      }
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        if (this._objects[i].isCacheDirty(true)) {
	          if (this._cacheCanvas) {
	            // if this group has not a cache canvas there is nothing to clean
	            var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;
	            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);
	          }
	          return true;
	        }
	      }
	      return false;
	    },

	    /**
	     * Retores original state of each of group objects (original state is that which was before group was created).
	     * @private
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    _restoreObjectsState: function() {
	      this._objects.forEach(this._restoreObjectState, this);
	      return this;
	    },

	    /**
	     * Realises the transform from this group onto the supplied object
	     * i.e. it tells you what would happen if the supplied object was in
	     * the group, and then the group was destroyed. It mutates the supplied
	     * object.
	     * @param {fabric.Object} object
	     * @return {fabric.Object} transformedObject
	     */
	    realizeTransform: function(object) {
	      var matrix = object.calcTransformMatrix(),
	          options = fabric.util.qrDecompose(matrix),
	          center = new fabric.Point(options.translateX, options.translateY);
	      object.flipX = false;
	      object.flipY = false;
	      object.set('scaleX', options.scaleX);
	      object.set('scaleY', options.scaleY);
	      object.skewX = options.skewX;
	      object.skewY = options.skewY;
	      object.angle = options.angle;
	      object.setPositionByOrigin(center, 'center', 'center');
	      return object;
	    },

	    /**
	     * Restores original state of a specified object in group
	     * @private
	     * @param {fabric.Object} object
	     * @return {fabric.Group} thisArg
	     */
	    _restoreObjectState: function(object) {
	      this.realizeTransform(object);
	      object.setCoords();
	      delete object.group;
	      return this;
	    },

	    /**
	     * Destroys a group (restoring state of its objects)
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    destroy: function() {
	      // when group is destroyed objects needs to get a repaint to be eventually
	      // displayed on canvas.
	      this._objects.forEach(function(object) {
	        object.set('dirty', true);
	      });
	      return this._restoreObjectsState();
	    },

	    /**
	     * make a group an active selection, remove the group from canvas
	     * the group has to be on canvas for this to work.
	     * @return {fabric.ActiveSelection} thisArg
	     * @chainable
	     */
	    toActiveSelection: function() {
	      if (!this.canvas) {
	        return;
	      }
	      var objects = this._objects, canvas = this.canvas;
	      this._objects = [];
	      var options = this.toObject();
	      delete options.objects;
	      var activeSelection = new fabric.ActiveSelection([]);
	      activeSelection.set(options);
	      activeSelection.type = 'activeSelection';
	      canvas.remove(this);
	      objects.forEach(function(object) {
	        object.group = activeSelection;
	        object.dirty = true;
	        canvas.add(object);
	      });
	      activeSelection.canvas = canvas;
	      activeSelection._objects = objects;
	      canvas._activeObject = activeSelection;
	      activeSelection.setCoords();
	      return activeSelection;
	    },

	    /**
	     * Destroys a group (restoring state of its objects)
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    ungroupOnCanvas: function() {
	      return this._restoreObjectsState();
	    },

	    /**
	     * Sets coordinates of all objects inside group
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    setObjectsCoords: function() {
	      var ignoreZoom = true, skipAbsolute = true;
	      this.forEachObject(function(object) {
	        object.setCoords(ignoreZoom, skipAbsolute);
	      });
	      return this;
	    },

	    /**
	     * @private
	     */
	    _calcBounds: function(onlyWidthHeight) {
	      var aX = [],
	          aY = [],
	          o, prop,
	          props = ['tr', 'br', 'bl', 'tl'],
	          i = 0, iLen = this._objects.length,
	          j, jLen = props.length,
	          ignoreZoom = true;

	      for ( ; i < iLen; ++i) {
	        o = this._objects[i];
	        o.setCoords(ignoreZoom);
	        for (j = 0; j < jLen; j++) {
	          prop = props[j];
	          aX.push(o.oCoords[prop].x);
	          aY.push(o.oCoords[prop].y);
	        }
	      }

	      this._getBounds(aX, aY, onlyWidthHeight);
	    },

	    /**
	     * @private
	     */
	    _getBounds: function(aX, aY, onlyWidthHeight) {
	      var minXY = new fabric.Point(min(aX), min(aY)),
	          maxXY = new fabric.Point(max(aX), max(aY)),
	          top = minXY.y || 0, left = minXY.x || 0,
	          width = (maxXY.x - minXY.x) || 0,
	          height = (maxXY.y - minXY.y) || 0;
	      this.width = width;
	      this.height = height;
	      if (!onlyWidthHeight) {
	        // the bounding box always finds the topleft most corner.
	        // whatever is the group origin, we set up here the left/top position.
	        this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');
	      }
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    _toSVG: function(reviver) {
	      var svgString = ['<g ', 'COMMON_PARTS', ' >\n'];

	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        svgString.push('\t\t', this._objects[i].toSVG(reviver));
	      }
	      svgString.push('</g>\n');
	      return svgString;
	    },

	    /**
	     * Returns styles-string for svg-export, specific version for group
	     * @return {String}
	     */
	    getSvgStyles: function() {
	      var opacity = typeof this.opacity !== 'undefined' && this.opacity !== 1 ?
	            'opacity: ' + this.opacity + ';' : '',
	          visibility = this.visible ? '' : ' visibility: hidden;';
	      return [
	        opacity,
	        this.getSvgFilter(),
	        visibility
	      ].join('');
	    },

	    /**
	     * Returns svg clipPath representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toClipPathSVG: function(reviver) {
	      var svgString = [];

	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        svgString.push('\t', this._objects[i].toClipPathSVG(reviver));
	      }

	      return this._createBaseClipPathSVGMarkup(svgString, { reviver: reviver });
	    },
	    /* _TO_SVG_END_ */
	  });

	  /**
	   * Returns {@link fabric.Group} instance from an object representation
	   * @static
	   * @memberOf fabric.Group
	   * @param {Object} object Object to create a group from
	   * @param {Function} [callback] Callback to invoke when an group instance is created
	   */
	  fabric.Group.fromObject = function(object, callback) {
	    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {
	      fabric.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {
	        var options = fabric.util.object.clone(object, true);
	        options.clipPath = enlivedClipPath[0];
	        delete options.objects;
	        callback && callback(new fabric.Group(enlivenedObjects, options, true));
	      });
	    });
	  };

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.ActiveSelection) {
	    return;
	  }

	  /**
	   * Group class
	   * @class fabric.ActiveSelection
	   * @extends fabric.Group
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
	   * @see {@link fabric.ActiveSelection#initialize} for constructor definition
	   */
	  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'activeSelection',

	    /**
	     * Constructor
	     * @param {Object} objects ActiveSelection objects
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(objects, options) {
	      options = options || {};
	      this._objects = objects || [];
	      for (var i = this._objects.length; i--; ) {
	        this._objects[i].group = this;
	      }

	      if (options.originX) {
	        this.originX = options.originX;
	      }
	      if (options.originY) {
	        this.originY = options.originY;
	      }
	      this._calcBounds();
	      this._updateObjectsCoords();
	      fabric.Object.prototype.initialize.call(this, options);
	      this.setCoords();
	    },

	    /**
	     * Change te activeSelection to a normal group,
	     * High level function that automatically adds it to canvas as
	     * active object. no events fired.
	     * @since 2.0.0
	     * @return {fabric.Group}
	     */
	    toGroup: function() {
	      var objects = this._objects.concat();
	      this._objects = [];
	      var options = fabric.Object.prototype.toObject.call(this);
	      var newGroup = new fabric.Group([]);
	      delete options.type;
	      newGroup.set(options);
	      objects.forEach(function(object) {
	        object.canvas.remove(object);
	        object.group = newGroup;
	      });
	      newGroup._objects = objects;
	      if (!this.canvas) {
	        return newGroup;
	      }
	      var canvas = this.canvas;
	      canvas.add(newGroup);
	      canvas._activeObject = newGroup;
	      newGroup.setCoords();
	      return newGroup;
	    },

	    /**
	     * If returns true, deselection is cancelled.
	     * @since 2.0.0
	     * @return {Boolean} [cancel]
	     */
	    onDeselect: function() {
	      this.destroy();
	      return false;
	    },

	    /**
	     * Returns string representation of a group
	     * @return {String}
	     */
	    toString: function() {
	      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';
	    },

	    /**
	     * Decide if the object should cache or not. Create its own cache level
	     * objectCaching is a global flag, wins over everything
	     * needsItsOwnCache should be used when the object drawing method requires
	     * a cache step. None of the fabric classes requires it.
	     * Generally you do not cache objects in groups because the group outside is cached.
	     * @return {Boolean}
	     */
	    shouldCache: function() {
	      return false;
	    },

	    /**
	     * Check if this group or its parent group are caching, recursively up
	     * @return {Boolean}
	     */
	    isOnACache: function() {
	      return false;
	    },

	    /**
	     * Renders controls and borders for the object
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Object} [styleOverride] properties to override the object style
	     * @param {Object} [childrenOverride] properties to override the children overrides
	     */
	    _renderControls: function(ctx, styleOverride, childrenOverride) {
	      ctx.save();
	      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
	      this.callSuper('_renderControls', ctx, styleOverride);
	      childrenOverride = childrenOverride || { };
	      if (typeof childrenOverride.hasControls === 'undefined') {
	        childrenOverride.hasControls = false;
	      }
	      if (typeof childrenOverride.hasRotatingPoint === 'undefined') {
	        childrenOverride.hasRotatingPoint = false;
	      }
	      childrenOverride.forActiveSelection = true;
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i]._renderControls(ctx, childrenOverride);
	      }
	      ctx.restore();
	    },
	  });

	  /**
	   * Returns {@link fabric.ActiveSelection} instance from an object representation
	   * @static
	   * @memberOf fabric.ActiveSelection
	   * @param {Object} object Object to create a group from
	   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created
	   */
	  fabric.ActiveSelection.fromObject = function(object, callback) {
	    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {
	      delete object.objects;
	      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));
	    });
	  };

	})( exports );


	(function(global) {

	  var extend = fabric.util.object.extend;

	  if (!global.fabric) {
	    global.fabric = { };
	  }

	  if (global.fabric.Image) {
	    fabric.warn('fabric.Image is already defined.');
	    return;
	  }

	  /**
	   * Image class
	   * @class fabric.Image
	   * @extends fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}
	   * @see {@link fabric.Image#initialize} for constructor definition
	   */
	  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'image',

	    /**
	     * crossOrigin value (one of "", "anonymous", "use-credentials")
	     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
	     * @type String
	     * @default
	     */
	    crossOrigin: '',

	    /**
	     * Width of a stroke.
	     * For image quality a stroke multiple of 2 gives better results.
	     * @type Number
	     * @default
	     */
	    strokeWidth: 0,

	    /**
	     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.
	     * This allows for relative urls as image src.
	     * @since 2.7.0
	     * @type Boolean
	     * @default
	     */
	    srcFromAttribute: false,

	    /**
	     * private
	     * contains last value of scaleX to detect
	     * if the Image got resized after the last Render
	     * @type Number
	     */
	    _lastScaleX: 1,

	    /**
	     * private
	     * contains last value of scaleY to detect
	     * if the Image got resized after the last Render
	     * @type Number
	     */
	    _lastScaleY: 1,

	    /**
	     * private
	     * contains last value of scaling applied by the apply filter chain
	     * @type Number
	     */
	    _filterScalingX: 1,

	    /**
	     * private
	     * contains last value of scaling applied by the apply filter chain
	     * @type Number
	     */
	    _filterScalingY: 1,

	    /**
	     * minimum scale factor under which any resizeFilter is triggered to resize the image
	     * 0 will disable the automatic resize. 1 will trigger automatically always.
	     * number bigger than 1 are not implemented yet.
	     * @type Number
	     */
	    minimumScaleTrigger: 0.5,

	    /**
	     * List of properties to consider when checking if
	     * state of an object is changed ({@link fabric.Object#hasStateChanged})
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),

	    /**
	     * key used to retrieve the texture representing this image
	     * @since 2.0.0
	     * @type String
	     * @default
	     */
	    cacheKey: '',

	    /**
	     * Image crop in pixels from original image size.
	     * @since 2.0.0
	     * @type Number
	     * @default
	     */
	    cropX: 0,

	    /**
	     * Image crop in pixels from original image size.
	     * @since 2.0.0
	     * @type Number
	     * @default
	     */
	    cropY: 0,

	    /**
	     * Constructor
	     * @param {HTMLImageElement | String} element Image element
	     * @param {Object} [options] Options object
	     * @param {function} [callback] callback function to call after eventual filters applied.
	     * @return {fabric.Image} thisArg
	     */
	    initialize: function(element, options) {
	      options || (options = { });
	      this.filters = [];
	      this.cacheKey = 'texture' + fabric.Object.__uid++;
	      this.callSuper('initialize', options);
	      this._initElement(element, options);
	    },

	    /**
	     * Returns image element which this instance if based on
	     * @return {HTMLImageElement} Image element
	     */
	    getElement: function() {
	      return this._element || {};
	    },

	    /**
	     * Sets image element for this instance to a specified one.
	     * If filters defined they are applied to new image.
	     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
	     * @param {HTMLImageElement} element
	     * @param {Object} [options] Options object
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setElement: function(element, options) {
	      this.removeTexture(this.cacheKey);
	      this.removeTexture(this.cacheKey + '_filtered');
	      this._element = element;
	      this._originalElement = element;
	      this._initConfig(options);
	      if (this.filters.length !== 0) {
	        this.applyFilters();
	      }
	      // resizeFilters work on the already filtered copy.
	      // we need to apply resizeFilters AFTER normal filters.
	      // applyResizeFilters is run more often than normal fiters
	      // and is triggered by user interactions rather than dev code
	      if (this.resizeFilter) {
	        this.applyResizeFilters();
	      }
	      return this;
	    },

	    /**
	     * Delete a single texture if in webgl mode
	     */
	    removeTexture: function(key) {
	      var backend = fabric.filterBackend;
	      if (backend && backend.evictCachesForKey) {
	        backend.evictCachesForKey(key);
	      }
	    },

	    /**
	     * Delete textures, reference to elements and eventually JSDOM cleanup
	     */
	    dispose: function() {
	      this.removeTexture(this.cacheKey);
	      this.removeTexture(this.cacheKey + '_filtered');
	      this._cacheContext = undefined;
	      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {
	        fabric.util.cleanUpJsdomNode(this[element]);
	        this[element] = undefined;
	      }).bind(this));
	    },

	    /**
	     * Sets crossOrigin value (on an instance and corresponding image element)
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setCrossOrigin: function(value) {
	      this.crossOrigin = value;
	      this._element.crossOrigin = value;

	      return this;
	    },

	    /**
	     * Returns original size of an image
	     * @return {Object} Object with "width" and "height" properties
	     */
	    getOriginalSize: function() {
	      var element = this.getElement();
	      return {
	        width: element.naturalWidth || element.width,
	        height: element.naturalHeight || element.height
	      };
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _stroke: function(ctx) {
	      if (!this.stroke || this.strokeWidth === 0) {
	        return;
	      }
	      var w = this.width / 2, h = this.height / 2;
	      ctx.beginPath();
	      ctx.moveTo(-w, -h);
	      ctx.lineTo(w, -h);
	      ctx.lineTo(w, h);
	      ctx.lineTo(-w, h);
	      ctx.lineTo(-w, -h);
	      ctx.closePath();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var x = -this.width / 2,
	          y = -this.height / 2,
	          w = this.width,
	          h = this.height;

	      ctx.save();
	      this._setStrokeStyles(ctx, this);

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
	      ctx.closePath();
	      ctx.restore();
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var filters = [];

	      this.filters.forEach(function(filterObj) {
	        if (filterObj) {
	          filters.push(filterObj.toObject());
	        }
	      });
	      var object = extend(
	        this.callSuper(
	          'toObject',
	          ['crossOrigin', 'cropX', 'cropY'].concat(propertiesToInclude)
	        ), {
	          src: this.getSrc(),
	          filters: filters,
	        });
	      if (this.resizeFilter) {
	        object.resizeFilter = this.resizeFilter.toObject();
	      }
	      return object;
	    },

	    /**
	     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,hight.
	     * @return {Boolean}
	     */
	    hasCrop: function() {
	      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @return {Array} an array of strings with the specific svg representation
	     * of the instance
	     */
	    _toSVG: function() {
	      var svgString = [], imageMarkup = [], strokeSvg,
	          x = -this.width / 2, y = -this.height / 2, clipPath = '';
	      if (this.hasCrop()) {
	        var clipPathId = fabric.Object.__uid++;
	        svgString.push(
	          '<clipPath id="imageCrop_' + clipPathId + '">\n',
	          '\t<rect x="' + x + '" y="' + y + '" width="' + this.width + '" height="' + this.height + '" />\n',
	          '</clipPath>\n'
	        );
	        clipPath = ' clip-path="url(#imageCrop_' + clipPathId + ')" ';
	      }
	      imageMarkup.push('\t<image ', 'COMMON_PARTS', 'xlink:href="', this.getSvgSrc(true),
	        '" x="', x - this.cropX, '" y="', y - this.cropY,
	        // we're essentially moving origin of transformation from top/left corner to the center of the shape
	        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
	        // so that object's center aligns with container's left/top
	        '" width="', this._element.width || this._element.naturalWidth,
	        '" height="', this._element.height || this._element.height,
	        '"', clipPath,
	        '></image>\n');

	      if (this.stroke || this.strokeDashArray) {
	        var origFill = this.fill;
	        this.fill = null;
	        strokeSvg = [
	          '\t<rect ',
	          'x="', x, '" y="', y,
	          '" width="', this.width, '" height="', this.height,
	          '" style="', this.getSvgStyles(),
	          '"/>\n'
	        ];
	        this.fill = origFill;
	      }
	      if (this.paintFirst !== 'fill') {
	        svgString = svgString.concat(strokeSvg, imageMarkup);
	      }
	      else {
	        svgString = svgString.concat(imageMarkup, strokeSvg);
	      }
	      return svgString;
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns source of an image
	     * @param {Boolean} filtered indicates if the src is needed for svg
	     * @return {String} Source of an image
	     */
	    getSrc: function(filtered) {
	      var element = filtered ? this._element : this._originalElement;
	      if (element) {
	        if (element.toDataURL) {
	          return element.toDataURL();
	        }

	        if (this.srcFromAttribute) {
	          return element.getAttribute('src');
	        }
	        else {
	          return element.src;
	        }
	      }
	      else {
	        return this.src || '';
	      }
	    },

	    /**
	     * Sets source of an image
	     * @param {String} src Source string (URL)
	     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
	     * @param {Object} [options] Options object
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setSrc: function(src, callback, options) {
	      fabric.util.loadImage(src, function(img) {
	        this.setElement(img, options);
	        this._setWidthHeight();
	        callback && callback(this);
	      }, this, options && options.crossOrigin);
	      return this;
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} String representation of an instance
	     */
	    toString: function() {
	      return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
	    },

	    applyResizeFilters: function() {
	      var filter = this.resizeFilter,
	          minimumScale = this.minimumScaleTrigger,
	          objectScale = this.getTotalObjectScaling(),
	          scaleX = objectScale.scaleX,
	          scaleY = objectScale.scaleY,
	          elementToFilter = this._filteredEl || this._originalElement;
	      if (this.group) {
	        this.set('dirty', true);
	      }
	      if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {
	        this._element = elementToFilter;
	        this._filterScalingX = 1;
	        this._filterScalingY = 1;
	        this._lastScaleX = scaleX;
	        this._lastScaleY = scaleY;
	        return;
	      }
	      if (!fabric.filterBackend) {
	        fabric.filterBackend = fabric.initFilterBackend();
	      }
	      var canvasEl = fabric.util.createCanvasElement(),
	          cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,
	          sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;
	      canvasEl.width = sourceWidth;
	      canvasEl.height = sourceHeight;
	      this._element = canvasEl;
	      this._lastScaleX = filter.scaleX = scaleX;
	      this._lastScaleY = filter.scaleY = scaleY;
	      fabric.filterBackend.applyFilters(
	        [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);
	      this._filterScalingX = canvasEl.width / this._originalElement.width;
	      this._filterScalingY = canvasEl.height / this._originalElement.height;
	    },

	    /**
	     * Applies filters assigned to this image (from "filters" array) or from filter param
	     * @method applyFilters
	     * @param {Array} filters to be applied
	     * @param {Boolean} forResizing specify if the filter operation is a resize operation
	     * @return {thisArg} return the fabric.Image object
	     * @chainable
	     */
	    applyFilters: function(filters) {

	      filters = filters || this.filters || [];
	      filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });
	      this.set('dirty', true);

	      // needs to clear out or WEBGL will not resize correctly
	      this.removeTexture(this.cacheKey + '_filtered');

	      if (filters.length === 0) {
	        this._element = this._originalElement;
	        this._filteredEl = null;
	        this._filterScalingX = 1;
	        this._filterScalingY = 1;
	        return this;
	      }

	      var imgElement = this._originalElement,
	          sourceWidth = imgElement.naturalWidth || imgElement.width,
	          sourceHeight = imgElement.naturalHeight || imgElement.height;

	      if (this._element === this._originalElement) {
	        // if the element is the same we need to create a new element
	        var canvasEl = fabric.util.createCanvasElement();
	        canvasEl.width = sourceWidth;
	        canvasEl.height = sourceHeight;
	        this._element = canvasEl;
	        this._filteredEl = canvasEl;
	      }
	      else {
	        // clear the existing element to get new filter data
	        // also dereference the eventual resized _element
	        this._element = this._filteredEl;
	        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);
	        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y
	        this._lastScaleX = 1;
	        this._lastScaleY = 1;
	      }
	      if (!fabric.filterBackend) {
	        fabric.filterBackend = fabric.initFilterBackend();
	      }
	      fabric.filterBackend.applyFilters(
	        filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);
	      if (this._originalElement.width !== this._element.width ||
	        this._originalElement.height !== this._element.height) {
	        this._filterScalingX = this._element.width / this._originalElement.width;
	        this._filterScalingY = this._element.height / this._originalElement.height;
	      }
	      return this;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {
	        this.applyResizeFilters();
	      }
	      this._stroke(ctx);
	      this._renderPaintInOrder(ctx);
	    },

	    /**
	     * Decide if the object should cache or not. Create its own cache level
	     * needsItsOwnCache should be used when the object drawing method requires
	     * a cache step. None of the fabric classes requires it.
	     * Generally you do not cache objects in groups because the group outside is cached.
	     * This is the special image version where we would like to avoid caching where possible.
	     * Essentially images do not benefit from caching. They may require caching, and in that
	     * case we do it. Also caching an image usually ends in a loss of details.
	     * A full performance audit should be done.
	     * @return {Boolean}
	     */
	    shouldCache: function() {
	      return this.needsItsOwnCache();
	    },

	    _renderFill: function(ctx) {
	      var elementToDraw = this._element,
	          w = this.width, h = this.height,
	          sW = Math.min(elementToDraw.naturalWidth || elementToDraw.width, w * this._filterScalingX),
	          sH = Math.min(elementToDraw.naturalHeight || elementToDraw.height, h * this._filterScalingY),
	          x = -w / 2, y = -h / 2,
	          sX = Math.max(0, this.cropX * this._filterScalingX),
	          sY = Math.max(0, this.cropY * this._filterScalingY);

	      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, w, h);
	    },

	    /**
	     * @private, needed to check if image needs resize
	     */
	    _needsResize: function() {
	      var scale = this.getTotalObjectScaling();
	      return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);
	    },

	    /**
	     * @private
	     */
	    _resetWidthHeight: function() {
	      this.set(this.getOriginalSize());
	    },

	    /**
	     * The Image class's initialization method. This method is automatically
	     * called by the constructor.
	     * @private
	     * @param {HTMLImageElement|String} element The element representing the image
	     * @param {Object} [options] Options object
	     */
	    _initElement: function(element, options) {
	      this.setElement(fabric.util.getById(element), options);
	      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initConfig: function(options) {
	      options || (options = { });
	      this.setOptions(options);
	      this._setWidthHeight(options);
	      if (this._element && this.crossOrigin) {
	        this._element.crossOrigin = this.crossOrigin;
	      }
	    },

	    /**
	     * @private
	     * @param {Array} filters to be initialized
	     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
	     */
	    _initFilters: function(filters, callback) {
	      if (filters && filters.length) {
	        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {
	          callback && callback(enlivenedObjects);
	        }, 'fabric.Image.filters');
	      }
	      else {
	        callback && callback();
	      }
	    },

	    /**
	     * @private
	     * Set the width and the height of the image object, using the element or the
	     * options.
	     * @param {Object} [options] Object with width/height properties
	     */
	    _setWidthHeight: function(options) {
	      options || (options = { });
	      var el = this.getElement();
	      this.width = options.width || el.naturalWidth || el.width || 0;
	      this.height = options.height || el.naturalHeight || el.height || 0;
	    },

	    /**
	     * Calculate offset for center and scale factor for the image in order to respect
	     * the preserveAspectRatio attribute
	     * @private
	     * @return {Object}
	     */
	    parsePreserveAspectRatioAttribute: function() {
	      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),
	          rWidth = this._element.width, rHeight = this._element.height,
	          scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,
	          offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };
	      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {
	        if (pAR.meetOrSlice === 'meet') {
	          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);
	          offset = (pWidth - rWidth * scaleX) / 2;
	          if (pAR.alignX === 'Min') {
	            offsetLeft = -offset;
	          }
	          if (pAR.alignX === 'Max') {
	            offsetLeft = offset;
	          }
	          offset = (pHeight - rHeight * scaleY) / 2;
	          if (pAR.alignY === 'Min') {
	            offsetTop = -offset;
	          }
	          if (pAR.alignY === 'Max') {
	            offsetTop = offset;
	          }
	        }
	        if (pAR.meetOrSlice === 'slice') {
	          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);
	          offset = rWidth - pWidth / scaleX;
	          if (pAR.alignX === 'Mid') {
	            cropX = offset / 2;
	          }
	          if (pAR.alignX === 'Max') {
	            cropX = offset;
	          }
	          offset = rHeight - pHeight / scaleY;
	          if (pAR.alignY === 'Mid') {
	            cropY = offset / 2;
	          }
	          if (pAR.alignY === 'Max') {
	            cropY = offset;
	          }
	          rWidth = pWidth / scaleX;
	          rHeight = pHeight / scaleY;
	        }
	      }
	      else {
	        scaleX = pWidth / rWidth;
	        scaleY = pHeight / rHeight;
	      }
	      return {
	        width: rWidth,
	        height: rHeight,
	        scaleX: scaleX,
	        scaleY: scaleY,
	        offsetLeft: offsetLeft,
	        offsetTop: offsetTop,
	        cropX: cropX,
	        cropY: cropY
	      };
	    }
	  });

	  /**
	   * Default CSS class name for canvas
	   * @static
	   * @type String
	   * @default
	   */
	  fabric.Image.CSS_CANVAS = 'canvas-img';

	  /**
	   * Alias for getSrc
	   * @static
	   */
	  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;

	  /**
	   * Creates an instance of fabric.Image from its object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} callback Callback to invoke when an image instance is created
	   */
	  fabric.Image.fromObject = function(_object, callback) {
	    var object = fabric.util.object.clone(_object);
	    fabric.util.loadImage(object.src, function(img, error) {
	      if (error) {
	        callback && callback(null, error);
	        return;
	      }
	      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {
	        object.filters = filters || [];
	        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {
	          object.resizeFilter = resizeFilters[0];
	          fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {
	            object.clipPath = enlivedProps[0];
	            var image = new fabric.Image(img, object);
	            callback(image);
	          });
	        });
	      });
	    }, null, object.crossOrigin);
	  };

	  /**
	   * Creates an instance of fabric.Image from an URL string
	   * @static
	   * @param {String} url URL to create an image from
	   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)
	   * @param {Object} [imgOptions] Options object
	   */
	  fabric.Image.fromURL = function(url, callback, imgOptions) {
	    fabric.util.loadImage(url, function(img) {
	      callback && callback(new fabric.Image(img, imgOptions));
	    }, null, imgOptions && imgOptions.crossOrigin);
	  };

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
	   * @static
	   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}
	   */
	  fabric.Image.ATTRIBUTE_NAMES =
	    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));

	  /**
	   * Returns {@link fabric.Image} instance from an SVG element
	   * @static
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @param {Function} callback Callback to execute when fabric.Image object is created
	   * @return {fabric.Image} Instance of fabric.Image
	   */
	  fabric.Image.fromElement = function(element, callback, options) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);
	    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,
	      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));
	  };
	  /* _FROM_SVG_END_ */

	})( exports );


	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * @private
	   * @return {Number} angle value
	   */
	  _getAngleValueForStraighten: function() {
	    var angle = this.angle % 360;
	    if (angle > 0) {
	      return Math.round((angle - 1) / 90) * 90;
	    }
	    return Math.round(angle / 90) * 90;
	  },

	  /**
	   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  straighten: function() {
	    this.rotate(this._getAngleValueForStraighten());
	    return this;
	  },

	  /**
	   * Same as {@link fabric.Object.prototype.straighten} but with animation
	   * @param {Object} callbacks Object with callback functions
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  fxStraighten: function(callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: this.get('angle'),
	      endValue: this._getAngleValueForStraighten(),
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        _this.rotate(value);
	        onChange();
	      },
	      onComplete: function() {
	        _this.setCoords();
	        onComplete();
	      },
	    });

	    return this;
	  }
	});

	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Straightens object, then rerenders canvas
	   * @param {fabric.Object} object Object to straighten
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  straightenObject: function (object) {
	    object.straighten();
	    this.requestRenderAll();
	    return this;
	  },

	  /**
	   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
	   * @param {fabric.Object} object Object to straighten
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxStraightenObject: function (object) {
	    object.fxStraighten({
	      onChange: this.requestRenderAllBound
	    });
	    return this;
	  }
	});


	(function() {

	  /**
	   * Tests if webgl supports certain precision
	   * @param {WebGL} Canvas WebGL context to test on
	   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'
	   * @returns {Boolean} Whether the user's browser WebGL supports given precision.
	   */
	  function testPrecision(gl, precision){
	    var fragmentSource = 'precision ' + precision + ' float;\nvoid main(){}';
	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, fragmentSource);
	    gl.compileShader(fragmentShader);
	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	      return false;
	    }
	    return true;
	  }

	  /**
	   * Indicate whether this filtering backend is supported by the user's browser.
	   * @param {Number} tileSize check if the tileSize is supported
	   * @returns {Boolean} Whether the user's browser supports WebGL.
	   */
	  fabric.isWebglSupported = function(tileSize) {
	    if (fabric.isLikelyNode) {
	      return false;
	    }
	    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;
	    var canvas = document.createElement('canvas');
	    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
	    var isSupported = false;
	    // eslint-disable-next-line
	    if (gl) {
	      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
	      isSupported = fabric.maxTextureSize >= tileSize;
	      var precisions = ['highp', 'mediump', 'lowp'];
	      for (var i = 0; i < 3; i++){
	        if (testPrecision(gl, precisions[i])){
	          fabric.webGlPrecision = precisions[i];
	          break;
	        }      }
	    }
	    this.isSupported = isSupported;
	    return isSupported;
	  };

	  fabric.WebglFilterBackend = WebglFilterBackend;

	  /**
	   * WebGL filter backend.
	   */
	  function WebglFilterBackend(options) {
	    if (options && options.tileSize) {
	      this.tileSize = options.tileSize;
	    }
	    this.setupGLContext(this.tileSize, this.tileSize);
	    this.captureGPUInfo();
	  }
	  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {

	    tileSize: 2048,

	    /**
	     * Experimental. This object is a sort of repository of help layers used to avoid
	     * of recreating them during frequent filtering. If you are previewing a filter with
	     * a slider you problably do not want to create help layers every filter step.
	     * in this object there will be appended some canvases, created once, resized sometimes
	     * cleared never. Clearing is left to the developer.
	     **/
	    resources: {

	    },

	    /**
	     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.
	     */
	    setupGLContext: function(width, height) {
	      this.dispose();
	      this.createWebGLCanvas(width, height);
	      // eslint-disable-next-line
	      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);
	      this.chooseFastestCopyGLTo2DMethod(width, height);
	    },

	    /**
	     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using
	     * putImageData is faster than drawImage for that specific operation.
	     */
	    chooseFastestCopyGLTo2DMethod: function(width, height) {
	      var canMeasurePerf = typeof window.performance !== 'undefined', canUseImageData;
	      try {
	        new ImageData(1, 1);
	        canUseImageData = true;
	      }
	      catch (e) {
	        canUseImageData = false;
	      }
	      // eslint-disable-next-line no-undef
	      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';
	      // eslint-disable-next-line no-undef
	      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';

	      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {
	        return;
	      }

	      var targetCanvas = fabric.util.createCanvasElement();
	      // eslint-disable-next-line no-undef
	      var imageBuffer = new ArrayBuffer(width * height * 4);
	      if (fabric.forceGLPutImageData) {
	        this.imageBuffer = imageBuffer;
	        this.copyGLTo2D = copyGLTo2DPutImageData;
	        return;
	      }
	      var testContext = {
	        imageBuffer: imageBuffer,
	        destinationWidth: width,
	        destinationHeight: height,
	        targetCanvas: targetCanvas
	      };
	      var startTime, drawImageTime, putImageDataTime;
	      targetCanvas.width = width;
	      targetCanvas.height = height;

	      startTime = window.performance.now();
	      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);
	      drawImageTime = window.performance.now() - startTime;

	      startTime = window.performance.now();
	      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);
	      putImageDataTime = window.performance.now() - startTime;

	      if (drawImageTime > putImageDataTime) {
	        this.imageBuffer = imageBuffer;
	        this.copyGLTo2D = copyGLTo2DPutImageData;
	      }
	      else {
	        this.copyGLTo2D = copyGLTo2DDrawImage;
	      }
	    },

	    /**
	     * Create a canvas element and associated WebGL context and attaches them as
	     * class properties to the GLFilterBackend class.
	     */
	    createWebGLCanvas: function(width, height) {
	      var canvas = fabric.util.createCanvasElement();
	      canvas.width = width;
	      canvas.height = height;
	      var glOptions = {
	            alpha: true,
	            premultipliedAlpha: false,
	            depth: false,
	            stencil: false,
	            antialias: false
	          },
	          gl = canvas.getContext('webgl', glOptions);
	      if (!gl) {
	        gl = canvas.getContext('experimental-webgl', glOptions);
	      }
	      if (!gl) {
	        return;
	      }
	      gl.clearColor(0, 0, 0, 0);
	      // this canvas can fire webglcontextlost and webglcontextrestored
	      this.canvas = canvas;
	      this.gl = gl;
	    },

	    /**
	     * Attempts to apply the requested filters to the source provided, drawing the filtered output
	     * to the provided target canvas.
	     *
	     * @param {Array} filters The filters to apply.
	     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.
	     * @param {Number} width The width of the source input.
	     * @param {Number} height The height of the source input.
	     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
	     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If
	     * omitted, caching will be skipped.
	     */
	    applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {
	      var gl = this.gl;
	      var cachedTexture;
	      if (cacheKey) {
	        cachedTexture = this.getCachedTexture(cacheKey, source);
	      }
	      var pipelineState = {
	        originalWidth: source.width || source.originalWidth,
	        originalHeight: source.height || source.originalHeight,
	        sourceWidth: width,
	        sourceHeight: height,
	        destinationWidth: width,
	        destinationHeight: height,
	        context: gl,
	        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),
	        targetTexture: this.createTexture(gl, width, height),
	        originalTexture: cachedTexture ||
	          this.createTexture(gl, width, height, !cachedTexture && source),
	        passes: filters.length,
	        webgl: true,
	        aPosition: this.aPosition,
	        programCache: this.programCache,
	        pass: 0,
	        filterBackend: this,
	        targetCanvas: targetCanvas
	      };
	      var tempFbo = gl.createFramebuffer();
	      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);
	      filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });
	      resizeCanvasIfNeeded(pipelineState);
	      this.copyGLTo2D(gl, pipelineState);
	      gl.bindTexture(gl.TEXTURE_2D, null);
	      gl.deleteTexture(pipelineState.sourceTexture);
	      gl.deleteTexture(pipelineState.targetTexture);
	      gl.deleteFramebuffer(tempFbo);
	      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);
	      return pipelineState;
	    },

	    /**
	     * Detach event listeners, remove references, and clean up caches.
	     */
	    dispose: function() {
	      if (this.canvas) {
	        this.canvas = null;
	        this.gl = null;
	      }
	      this.clearWebGLCaches();
	    },

	    /**
	     * Wipe out WebGL-related caches.
	     */
	    clearWebGLCaches: function() {
	      this.programCache = {};
	      this.textureCache = {};
	    },

	    /**
	     * Create a WebGL texture object.
	     *
	     * Accepts specific dimensions to initialize the textuer to or a source image.
	     *
	     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.
	     * @param {Number} width The width to initialize the texture at.
	     * @param {Number} height The height to initialize the texture.
	     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.
	     * @returns {WebGLTexture}
	     */
	    createTexture: function(gl, width, height, textureImageSource) {
	      var texture = gl.createTexture();
	      gl.bindTexture(gl.TEXTURE_2D, texture);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	      if (textureImageSource) {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);
	      }
	      else {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
	      }
	      return texture;
	    },

	    /**
	     * Can be optionally used to get a texture from the cache array
	     *
	     * If an existing texture is not found, a new texture is created and cached.
	     *
	     * @param {String} uniqueId A cache key to use to find an existing texture.
	     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the
	     * texture cache entry if one does not already exist.
	     */
	    getCachedTexture: function(uniqueId, textureImageSource) {
	      if (this.textureCache[uniqueId]) {
	        return this.textureCache[uniqueId];
	      }
	      else {
	        var texture = this.createTexture(
	          this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);
	        this.textureCache[uniqueId] = texture;
	        return texture;
	      }
	    },

	    /**
	     * Clear out cached resources related to a source image that has been
	     * filtered previously.
	     *
	     * @param {String} cacheKey The cache key provided when the source image was filtered.
	     */
	    evictCachesForKey: function(cacheKey) {
	      if (this.textureCache[cacheKey]) {
	        this.gl.deleteTexture(this.textureCache[cacheKey]);
	        delete this.textureCache[cacheKey];
	      }
	    },

	    copyGLTo2D: copyGLTo2DDrawImage,

	    /**
	     * Attempt to extract GPU information strings from a WebGL context.
	     *
	     * Useful information when debugging or blacklisting specific GPUs.
	     *
	     * @returns {Object} A GPU info object with renderer and vendor strings.
	     */
	    captureGPUInfo: function() {
	      if (this.gpuInfo) {
	        return this.gpuInfo;
	      }
	      var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };
	      if (!gl) {
	        return gpuInfo;
	      }
	      var ext = gl.getExtension('WEBGL_debug_renderer_info');
	      if (ext) {
	        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
	        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
	        if (renderer) {
	          gpuInfo.renderer = renderer.toLowerCase();
	        }
	        if (vendor) {
	          gpuInfo.vendor = vendor.toLowerCase();
	        }
	      }
	      this.gpuInfo = gpuInfo;
	      return gpuInfo;
	    },
	  };
	})();

	function resizeCanvasIfNeeded(pipelineState) {
	  var targetCanvas = pipelineState.targetCanvas,
	      width = targetCanvas.width, height = targetCanvas.height,
	      dWidth = pipelineState.destinationWidth,
	      dHeight = pipelineState.destinationHeight;

	  if (width !== dWidth || height !== dHeight) {
	    targetCanvas.width = dWidth;
	    targetCanvas.height = dHeight;
	  }
	}

	/**
	 * Copy an input WebGL canvas on to an output 2D canvas.
	 *
	 * The WebGL canvas is assumed to be upside down, with the top-left pixel of the
	 * desired output image appearing in the bottom-left corner of the WebGL canvas.
	 *
	 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
	 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
	 * @param {Object} pipelineState The 2D target canvas to copy on to.
	 */
	function copyGLTo2DDrawImage(gl, pipelineState) {
	  var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,
	      ctx = targetCanvas.getContext('2d');
	  ctx.translate(0, targetCanvas.height); // move it down again
	  ctx.scale(1, -1); // vertical flip
	  // where is my image on the big glcanvas?
	  var sourceY = glCanvas.height - targetCanvas.height;
	  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,
	    targetCanvas.width, targetCanvas.height);
	}

	/**
	 * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData
	 * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).
	 *
	 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
	 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
	 * @param {Object} pipelineState The 2D target canvas to copy on to.
	 */
	function copyGLTo2DPutImageData(gl, pipelineState) {
	  var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),
	      dWidth = pipelineState.destinationWidth,
	      dHeight = pipelineState.destinationHeight,
	      numBytes = dWidth * dHeight * 4;

	  // eslint-disable-next-line no-undef
	  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);
	  // eslint-disable-next-line no-undef
	  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);

	  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);
	  var imgData = new ImageData(u8Clamped, dWidth, dHeight);
	  ctx.putImageData(imgData, 0, 0);
	}


	(function() {

	  var noop = function() {};

	  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;

	  /**
	   * Canvas 2D filter backend.
	   */
	  function Canvas2dFilterBackend() {}
	  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {
	    evictCachesForKey: noop,
	    dispose: noop,
	    clearWebGLCaches: noop,

	    /**
	     * Experimental. This object is a sort of repository of help layers used to avoid
	     * of recreating them during frequent filtering. If you are previewing a filter with
	     * a slider you probably do not want to create help layers every filter step.
	     * in this object there will be appended some canvases, created once, resized sometimes
	     * cleared never. Clearing is left to the developer.
	     **/
	    resources: {

	    },

	    /**
	     * Apply a set of filters against a source image and draw the filtered output
	     * to the provided destination canvas.
	     *
	     * @param {EnhancedFilter} filters The filter to apply.
	     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.
	     * @param {Number} sourceWidth The width of the source input.
	     * @param {Number} sourceHeight The height of the source input.
	     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
	     */
	    applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {
	      var ctx = targetCanvas.getContext('2d');
	      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);
	      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
	      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
	      var pipelineState = {
	        sourceWidth: sourceWidth,
	        sourceHeight: sourceHeight,
	        imageData: imageData,
	        originalEl: sourceElement,
	        originalImageData: originalImageData,
	        canvasEl: targetCanvas,
	        ctx: ctx,
	        filterBackend: this,
	      };
	      filters.forEach(function(filter) { filter.applyTo(pipelineState); });
	      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {
	        targetCanvas.width = pipelineState.imageData.width;
	        targetCanvas.height = pipelineState.imageData.height;
	      }
	      ctx.putImageData(pipelineState.imageData, 0, 0);
	      return pipelineState;
	    },

	  };
	})();


	/**
	 * @namespace fabric.Image.filters
	 * @memberOf fabric.Image
	 * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}
	 * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	 */
	fabric.Image = fabric.Image || { };
	fabric.Image.filters = fabric.Image.filters || { };

	/**
	 * Root filter class from which all filter classes inherit from
	 * @class fabric.Image.filters.BaseFilter
	 * @memberOf fabric.Image.filters
	 */
	fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {

	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'BaseFilter',

	  /**
	   * Array of attributes to send with buffers. do not modify
	   * @private
	   */

	  vertexSource: 'attribute vec2 aPosition;\n' +
	    'varying vec2 vTexCoord;\n' +
	    'void main() {\n' +
	      'vTexCoord = aPosition;\n' +
	      'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n' +
	    '}',

	  fragmentSource: 'precision highp float;\n' +
	    'varying vec2 vTexCoord;\n' +
	    'uniform sampler2D uTexture;\n' +
	    'void main() {\n' +
	      'gl_FragColor = texture2D(uTexture, vTexCoord);\n' +
	    '}',

	  /**
	   * Constructor
	   * @param {Object} [options] Options object
	   */
	  initialize: function(options) {
	    if (options) {
	      this.setOptions(options);
	    }
	  },

	  /**
	   * Sets filter's properties from options
	   * @param {Object} [options] Options object
	   */
	  setOptions: function(options) {
	    for (var prop in options) {
	      this[prop] = options[prop];
	    }
	  },

	  /**
	   * Compile this filter's shader program.
	   *
	   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.
	   * @param {String} fragmentSource fragmentShader source for compilation
	   * @param {String} vertexSource vertexShader source for compilation
	   */
	  createProgram: function(gl, fragmentSource, vertexSource) {
	    fragmentSource = fragmentSource || this.fragmentSource;
	    vertexSource = vertexSource || this.vertexSource;
	    if (fabric.webGlPrecision !== 'highp'){
	      fragmentSource = fragmentSource.replace(
	        /precision highp float/g,
	        'precision ' + fabric.webGlPrecision + ' float'
	      );
	    }
	    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertexShader, vertexSource);
	    gl.compileShader(vertexShader);
	    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	      throw new Error(
	        // eslint-disable-next-line prefer-template
	        'Vertex shader compile error for ' + this.type + ': ' +
	        gl.getShaderInfoLog(vertexShader)
	      );
	    }

	    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	    gl.shaderSource(fragmentShader, fragmentSource);
	    gl.compileShader(fragmentShader);
	    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	      throw new Error(
	        // eslint-disable-next-line prefer-template
	        'Fragment shader compile error for ' + this.type + ': ' +
	        gl.getShaderInfoLog(fragmentShader)
	      );
	    }

	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	    gl.linkProgram(program);
	    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	      throw new Error(
	        // eslint-disable-next-line prefer-template
	        'Shader link error for "${this.type}" ' +
	        gl.getProgramInfoLog(program)
	      );
	    }

	    var attributeLocations = this.getAttributeLocations(gl, program);
	    var uniformLocations = this.getUniformLocations(gl, program) || { };
	    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');
	    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');
	    return {
	      program: program,
	      attributeLocations: attributeLocations,
	      uniformLocations: uniformLocations
	    };
	  },

	  /**
	   * Return a map of attribute names to WebGLAttributeLocation objects.
	   *
	   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
	   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.
	   * @returns {Object} A map of attribute names to attribute locations.
	   */
	  getAttributeLocations: function(gl, program) {
	    return {
	      aPosition: gl.getAttribLocation(program, 'aPosition'),
	    };
	  },

	  /**
	   * Return a map of uniform names to WebGLUniformLocation objects.
	   *
	   * Intended to be overridden by subclasses.
	   *
	   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
	   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.
	   * @returns {Object} A map of uniform names to uniform locations.
	   */
	  getUniformLocations: function (/* gl, program */) {
	    // in case i do not need any special uniform i need to return an empty object
	    return { };
	  },

	  /**
	   * Send attribute data from this filter to its shader program on the GPU.
	   *
	   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
	   * @param {Object} attributeLocations A map of shader attribute names to their locations.
	   */
	  sendAttributeData: function(gl, attributeLocations, aPositionData) {
	    var attributeLocation = attributeLocations.aPosition;
	    var buffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
	    gl.enableVertexAttribArray(attributeLocation);
	    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);
	  },

	  _setupFrameBuffer: function(options) {
	    var gl = options.context, width, height;
	    if (options.passes > 1) {
	      width = options.destinationWidth;
	      height = options.destinationHeight;
	      if (options.sourceWidth !== width || options.sourceHeight !== height) {
	        gl.deleteTexture(options.targetTexture);
	        options.targetTexture = options.filterBackend.createTexture(gl, width, height);
	      }
	      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,
	        options.targetTexture, 0);
	    }
	    else {
	      // draw last filter on canvas and not to framebuffer.
	      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
	      gl.finish();
	    }
	  },

	  _swapTextures: function(options) {
	    options.passes--;
	    options.pass++;
	    var temp = options.targetTexture;
	    options.targetTexture = options.sourceTexture;
	    options.sourceTexture = temp;
	  },

	  /**
	   * Generic isNeutral implementation for one parameter based filters.
	   * Used only in image applyFilters to discard filters that will not have an effect
	   * on the image
	   * Other filters may need their own verison ( ColorMatrix, HueRotation, gamma, ComposedFilter )
	   * @param {Object} options
	   **/
	  isNeutralState: function(/* options */) {
	    var main = this.mainParameter,
	        _class = fabric.Image.filters[this.type].prototype;
	    if (main) {
	      if (Array.isArray(_class[main])) {
	        for (var i = _class[main].length; i--;) {
	          if (this[main][i] !== _class[main][i]) {
	            return false;
	          }
	        }
	        return true;
	      }
	      else {
	        return _class[main] === this[main];
	      }
	    }
	    else {
	      return false;
	    }
	  },

	  /**
	   * Apply this filter to the input image data provided.
	   *
	   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
	   *
	   * @param {Object} options
	   * @param {Number} options.passes The number of filters remaining to be executed
	   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
	   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
	   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
	   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	   */
	  applyTo: function(options) {
	    if (options.webgl) {
	      this._setupFrameBuffer(options);
	      this.applyToWebGL(options);
	      this._swapTextures(options);
	    }
	    else {
	      this.applyTo2d(options);
	    }
	  },

	  /**
	   * Retrieves the cached shader.
	   * @param {Object} options
	   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	   */
	  retrieveShader: function(options) {
	    if (!options.programCache.hasOwnProperty(this.type)) {
	      options.programCache[this.type] = this.createProgram(options.context);
	    }
	    return options.programCache[this.type];
	  },

	  /**
	   * Apply this filter using webgl.
	   *
	   * @param {Object} options
	   * @param {Number} options.passes The number of filters remaining to be executed
	   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
	   * @param {WebGLTexture} options.originalTexture The texture of the original input image.
	   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
	   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
	   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	   */
	  applyToWebGL: function(options) {
	    var gl = options.context;
	    var shader = this.retrieveShader(options);
	    if (options.pass === 0 && options.originalTexture) {
	      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);
	    }
	    else {
	      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);
	    }
	    gl.useProgram(shader.program);
	    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);

	    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);
	    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);

	    this.sendUniformData(gl, shader.uniformLocations);
	    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);
	    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
	  },

	  bindAdditionalTexture: function(gl, texture, textureUnit) {
	    gl.activeTexture(textureUnit);
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    // reset active texture to 0 as usual
	    gl.activeTexture(gl.TEXTURE0);
	  },

	  unbindAdditionalTexture: function(gl, textureUnit) {
	    gl.activeTexture(textureUnit);
	    gl.bindTexture(gl.TEXTURE_2D, null);
	    gl.activeTexture(gl.TEXTURE0);
	  },

	  getMainParameter: function() {
	    return this[this.mainParameter];
	  },

	  setMainParameter: function(value) {
	    this[this.mainParameter] = value;
	  },

	  /**
	   * Send uniform data from this filter to its shader program on the GPU.
	   *
	   * Intended to be overridden by subclasses.
	   *
	   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
	   * @param {Object} uniformLocations A map of shader uniform names to their locations.
	   */
	  sendUniformData: function(/* gl, uniformLocations */) {
	    // Intentionally left blank.  Override me in subclasses.
	  },

	  /**
	   * If needed by a 2d filter, this functions can create an helper canvas to be used
	   * remember that options.targetCanvas is available for use till end of chain.
	   */
	  createHelpLayer: function(options) {
	    if (!options.helpLayer) {
	      var helpLayer = document.createElement('canvas');
	      helpLayer.width = options.sourceWidth;
	      helpLayer.height = options.sourceHeight;
	      options.helpLayer = helpLayer;
	    }
	  },

	  /**
	   * Returns object representation of an instance
	   * @return {Object} Object representation of an instance
	   */
	  toObject: function() {
	    var object = { type: this.type }, mainP = this.mainParameter;
	    if (mainP) {
	      object[mainP] = this[mainP];
	    }
	    return object;
	  },

	  /**
	   * Returns a JSON representation of an instance
	   * @return {Object} JSON
	   */
	  toJSON: function() {
	    // delegate, not alias
	    return this.toObject();
	  }
	});

	fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {
	  var filter = new fabric.Image.filters[object.type](object);
	  callback && callback(filter);
	  return filter;
	};


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Color Matrix filter class
	   * @class fabric.Image.filters.ColorMatrix
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}
	   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}
	   * @example <caption>Kodachrome filter</caption>
	   * var filter = new fabric.Image.filters.ColorMatrix({
	   *  matrix: [
	       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,
	       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,
	       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,
	       0, 0, 0, 1, 0
	      ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'ColorMatrix',

	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'uniform mat4 uColorMatrix;\n' +
	      'uniform vec4 uConstants;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'color *= uColorMatrix;\n' +
	        'color += uConstants;\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    /**
	     * Colormatrix for pixels.
	     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
	     * outside the -1, 1 range.
	     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
	     * @param {Array} matrix array of 20 numbers.
	     * @default
	     */
	    matrix: [
	      1, 0, 0, 0, 0,
	      0, 1, 0, 0, 0,
	      0, 0, 1, 0, 0,
	      0, 0, 0, 1, 0
	    ],

	    mainParameter: 'matrix',

	    /**
	     * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario
	     * to save some calculation
	     */
	    colorsOnly: true,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     */
	    initialize: function(options) {
	      this.callSuper('initialize', options);
	      // create a new array instead mutating the prototype with push
	      this.matrix = this.matrix.slice(0);
	    },

	    /**
	     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8Array to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data,
	          iLen = data.length,
	          m = this.matrix,
	          r, g, b, a, i, colorsOnly = this.colorsOnly;

	      for (i = 0; i < iLen; i += 4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];
	        if (colorsOnly) {
	          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;
	          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;
	          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;
	        }
	        else {
	          a = data[i + 3];
	          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;
	          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;
	          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;
	          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;
	        }
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),
	        uConstants: gl.getUniformLocation(program, 'uConstants'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      var m = this.matrix,
	          matrix = [
	            m[0], m[1], m[2], m[3],
	            m[5], m[6], m[7], m[8],
	            m[10], m[11], m[12], m[13],
	            m[15], m[16], m[17], m[18]
	          ],
	          constants = [m[4], m[9], m[14], m[19]];
	      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);
	      gl.uniform4fv(uniformLocations.uConstants, constants);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] function to invoke after filter creation
	   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix
	   */
	  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;
	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Brightness filter class
	   * @class fabric.Image.filters.Brightness
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Brightness({
	   *   brightness: 0.05
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Brightness',

	    /**
	     * Fragment source for the brightness program
	     */
	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform float uBrightness;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'color.rgb += uBrightness;\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    /**
	     * Brightness value, from -1 to 1.
	     * translated to -255 to 255 for 2d
	     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
	     * @param {Number} brightness
	     * @default
	     */
	    brightness: 0,

	    /**
	     * Describe the property that is the filter parameter
	     * @param {String} m
	     * @default
	     */
	    mainParameter: 'brightness',

	    /**
	    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
	    *
	    * @param {Object} options
	    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	    */
	    applyTo2d: function(options) {
	      if (this.brightness === 0) {
	        return;
	      }
	      var imageData = options.imageData,
	          data = imageData.data, i, len = data.length,
	          brightness = Math.round(this.brightness * 255);
	      for (i = 0; i < len; i += 4) {
	        data[i] = data[i] + brightness;
	        data[i + 1] = data[i + 1] + brightness;
	        data[i + 2] = data[i + 2] + brightness;
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uBrightness: gl.getUniformLocation(program, 'uBrightness'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1f(uniformLocations.uBrightness, this.brightness);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness
	   */
	  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Adapted from <a href="http://www.html5rocks.com/en/tutorials/canvas/imagefilters/">html5rocks article</a>
	   * @class fabric.Image.filters.Convolute
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example <caption>Sharpen filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 0, -1,  0,
	   *            -1,  5, -1,
	   *             0, -1,  0 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   * @example <caption>Blur filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 1/9, 1/9, 1/9,
	   *             1/9, 1/9, 1/9,
	   *             1/9, 1/9, 1/9 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   * @example <caption>Emboss filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 1,   1,  1,
	   *             1, 0.7, -1,
	   *            -1,  -1, -1 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   * @example <caption>Emboss filter with opaqueness</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   opaque: true,
	   *   matrix: [ 1,   1,  1,
	   *             1, 0.7, -1,
	   *            -1,  -1, -1 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */
	  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Convolute',

	    /*
	     * Opaque value (true/false)
	     */
	    opaque: false,

	    /*
	     * matrix for the filter, max 9x9
	     */
	    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],

	    /**
	     * Fragment source for the brightness program
	     */
	    fragmentSource: {
	      Convolute_3_1: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[9];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 0);\n' +
	          'for (float h = 0.0; h < 3.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 3.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n' +
	              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	      Convolute_3_0: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[9];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 1);\n' +
	          'for (float h = 0.0; h < 3.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 3.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n' +
	              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'float alpha = texture2D(uTexture, vTexCoord).a;\n' +
	          'gl_FragColor = color;\n' +
	          'gl_FragColor.a = alpha;\n' +
	        '}',
	      Convolute_5_1: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[25];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 0);\n' +
	          'for (float h = 0.0; h < 5.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 5.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n' +
	              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	      Convolute_5_0: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[25];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 1);\n' +
	          'for (float h = 0.0; h < 5.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 5.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n' +
	              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'float alpha = texture2D(uTexture, vTexCoord).a;\n' +
	          'gl_FragColor = color;\n' +
	          'gl_FragColor.a = alpha;\n' +
	        '}',
	      Convolute_7_1: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[49];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 0);\n' +
	          'for (float h = 0.0; h < 7.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 7.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n' +
	              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	      Convolute_7_0: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[49];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 1);\n' +
	          'for (float h = 0.0; h < 7.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 7.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n' +
	              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'float alpha = texture2D(uTexture, vTexCoord).a;\n' +
	          'gl_FragColor = color;\n' +
	          'gl_FragColor.a = alpha;\n' +
	        '}',
	      Convolute_9_1: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[81];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 0);\n' +
	          'for (float h = 0.0; h < 9.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 9.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n' +
	              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	      Convolute_9_0: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform float uMatrix[81];\n' +
	        'uniform float uStepW;\n' +
	        'uniform float uStepH;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = vec4(0, 0, 0, 1);\n' +
	          'for (float h = 0.0; h < 9.0; h+=1.0) {\n' +
	            'for (float w = 0.0; w < 9.0; w+=1.0) {\n' +
	              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n' +
	              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n' +
	            '}\n' +
	          '}\n' +
	          'float alpha = texture2D(uTexture, vTexCoord).a;\n' +
	          'gl_FragColor = color;\n' +
	          'gl_FragColor.a = alpha;\n' +
	        '}',
	    },

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Convolute.prototype
	     * @param {Object} [options] Options object
	     * @param {Boolean} [options.opaque=false] Opaque value (true/false)
	     * @param {Array} [options.matrix] Filter matrix
	     */


	    /**
	    * Retrieves the cached shader.
	    * @param {Object} options
	    * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	    */
	    retrieveShader: function(options) {
	      var size = Math.sqrt(this.matrix.length);
	      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);
	      var shaderSource = this.fragmentSource[cacheKey];
	      if (!options.programCache.hasOwnProperty(cacheKey)) {
	        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
	      }
	      return options.programCache[cacheKey];
	    },

	    /**
	     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data,
	          weights = this.matrix,
	          side = Math.round(Math.sqrt(weights.length)),
	          halfSide = Math.floor(side / 2),
	          sw = imageData.width,
	          sh = imageData.height,
	          output = options.ctx.createImageData(sw, sh),
	          dst = output.data,
	          // go through the destination image pixels
	          alphaFac = this.opaque ? 1 : 0,
	          r, g, b, a, dstOff,
	          scx, scy, srcOff, wt,
	          x, y, cx, cy;

	      for (y = 0; y < sh; y++) {
	        for (x = 0; x < sw; x++) {
	          dstOff = (y * sw + x) * 4;
	          // calculate the weighed sum of the source image pixels that
	          // fall under the convolution matrix
	          r = 0; g = 0; b = 0; a = 0;

	          for (cy = 0; cy < side; cy++) {
	            for (cx = 0; cx < side; cx++) {
	              scy = y + cy - halfSide;
	              scx = x + cx - halfSide;

	              // eslint-disable-next-line max-depth
	              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {
	                continue;
	              }

	              srcOff = (scy * sw + scx) * 4;
	              wt = weights[cy * side + cx];

	              r += data[srcOff] * wt;
	              g += data[srcOff + 1] * wt;
	              b += data[srcOff + 2] * wt;
	              // eslint-disable-next-line max-depth
	              if (!alphaFac) {
	                a += data[srcOff + 3] * wt;
	              }
	            }
	          }
	          dst[dstOff] = r;
	          dst[dstOff + 1] = g;
	          dst[dstOff + 2] = b;
	          if (!alphaFac) {
	            dst[dstOff + 3] = a;
	          }
	          else {
	            dst[dstOff + 3] = data[dstOff + 3];
	          }
	        }
	      }
	      options.imageData = output;
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uMatrix: gl.getUniformLocation(program, 'uMatrix'),
	        uOpaque: gl.getUniformLocation(program, 'uOpaque'),
	        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),
	        uSize: gl.getUniformLocation(program, 'uSize'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        opaque: this.opaque,
	        matrix: this.matrix
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute
	   */
	  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Grayscale image filter class
	   * @class fabric.Image.filters.Grayscale
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Grayscale();
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Grayscale',

	    fragmentSource: {
	      average: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	          'float average = (color.r + color.b + color.g) / 3.0;\n' +
	          'gl_FragColor = vec4(average, average, average, color.a);\n' +
	        '}',
	      lightness: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform int uMode;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 col = texture2D(uTexture, vTexCoord);\n' +
	          'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n' +
	          'gl_FragColor = vec4(average, average, average, col.a);\n' +
	        '}',
	      luminosity: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform int uMode;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 col = texture2D(uTexture, vTexCoord);\n' +
	          'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n' +
	          'gl_FragColor = vec4(average, average, average, col.a);\n' +
	        '}',
	    },


	    /**
	     * Grayscale mode, between 'average', 'lightness', 'luminosity'
	     * @param {String} type
	     * @default
	     */
	    mode: 'average',

	    mainParameter: 'mode',

	    /**
	     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8Array to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data, i,
	          len = data.length, value,
	          mode = this.mode;
	      for (i = 0; i < len; i += 4) {
	        if (mode === 'average') {
	          value = (data[i] + data[i + 1] + data[i + 2]) / 3;
	        }
	        else if (mode === 'lightness') {
	          value = (Math.min(data[i], data[i + 1], data[i + 2]) +
	            Math.max(data[i], data[i + 1], data[i + 2])) / 2;
	        }
	        else if (mode === 'luminosity') {
	          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];
	        }
	        data[i] = value;
	        data[i + 1] = value;
	        data[i + 2] = value;
	      }
	    },

	    /**
	     * Retrieves the cached shader.
	     * @param {Object} options
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    retrieveShader: function(options) {
	      var cacheKey = this.type + '_' + this.mode;
	      if (!options.programCache.hasOwnProperty(cacheKey)) {
	        var shaderSource = this.fragmentSource[this.mode];
	        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
	      }
	      return options.programCache[cacheKey];
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uMode: gl.getUniformLocation(program, 'uMode'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      // default average mode.
	      var mode = 1;
	      gl.uniform1i(uniformLocations.uMode, mode);
	    },

	    /**
	     * Grayscale filter isNeutralState implementation
	     * The filter is never neutral
	     * on the image
	     **/
	    isNeutralState: function() {
	      return false;
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale
	   */
	  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Invert filter class
	   * @class fabric.Image.filters.Invert
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Invert();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Invert',

	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform int uInvert;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'if (uInvert == 1) {\n' +
	          'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n' +
	        '} else {\n' +
	          'gl_FragColor = color;\n' +
	        '}\n' +
	      '}',

	    /**
	     * Filter invert. if false, does nothing
	     * @param {Boolean} invert
	     * @default
	     */
	    invert: true,

	    mainParameter: 'invert',

	    /**
	     * Apply the Invert operation to a Uint8Array representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8Array to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data, i,
	          len = data.length;
	      for (i = 0; i < len; i += 4) {
	        data[i] = 255 - data[i];
	        data[i + 1] = 255 - data[i + 1];
	        data[i + 2] = 255 - data[i + 2];
	      }
	    },

	    /**
	     * Invert filter isNeutralState implementation
	     * Used only in image applyFilters to discard filters that will not have an effect
	     * on the image
	     * @param {Object} options
	     **/
	    isNeutralState: function() {
	      return !this.invert;
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uInvert: gl.getUniformLocation(program, 'uInvert'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1i(uniformLocations.uInvert, this.invert);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert
	   */
	  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;


	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Noise filter class
	   * @class fabric.Image.filters.Noise
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Noise({
	   *   noise: 700
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */
	  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Noise',

	    /**
	     * Fragment source for the noise program
	     */
	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform float uStepH;\n' +
	      'uniform float uNoise;\n' +
	      'uniform float uSeed;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'float rand(vec2 co, float seed, float vScale) {\n' +
	        'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n' +
	      '}\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    /**
	     * Describe the property that is the filter parameter
	     * @param {String} m
	     * @default
	     */
	    mainParameter: 'noise',

	    /**
	     * Noise value, from
	     * @param {Number} noise
	     * @default
	     */
	    noise: 0,

	    /**
	     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      if (this.noise === 0) {
	        return;
	      }
	      var imageData = options.imageData,
	          data = imageData.data, i, len = data.length,
	          noise = this.noise, rand;

	      for (i = 0, len = data.length; i < len; i += 4) {

	        rand = (0.5 - Math.random()) * noise;

	        data[i] += rand;
	        data[i + 1] += rand;
	        data[i + 2] += rand;
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uNoise: gl.getUniformLocation(program, 'uNoise'),
	        uSeed: gl.getUniformLocation(program, 'uSeed'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);
	      gl.uniform1f(uniformLocations.uSeed, Math.random());
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        noise: this.noise
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise
	   */
	  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Pixelate filter class
	   * @class fabric.Image.filters.Pixelate
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Pixelate({
	   *   blocksize: 8
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Pixelate',

	    blocksize: 4,

	    mainParameter: 'blocksize',

	    /**
	     * Fragment source for the Pixelate program
	     */
	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform float uBlocksize;\n' +
	      'uniform float uStepW;\n' +
	      'uniform float uStepH;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'float blockW = uBlocksize * uStepW;\n' +
	        'float blockH = uBlocksize * uStepW;\n' +
	        'int posX = int(vTexCoord.x / blockW);\n' +
	        'int posY = int(vTexCoord.y / blockH);\n' +
	        'float fposX = float(posX);\n' +
	        'float fposY = float(posY);\n' +
	        'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n' +
	        'vec4 color = texture2D(uTexture, squareCoords);\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    /**
	     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data,
	          iLen = imageData.height,
	          jLen = imageData.width,
	          index, i, j, r, g, b, a,
	          _i, _j, _iLen, _jLen;

	      for (i = 0; i < iLen; i += this.blocksize) {
	        for (j = 0; j < jLen; j += this.blocksize) {

	          index = (i * 4) * jLen + (j * 4);

	          r = data[index];
	          g = data[index + 1];
	          b = data[index + 2];
	          a = data[index + 3];

	          _iLen = Math.min(i + this.blocksize, iLen);
	          _jLen = Math.min(j + this.blocksize, jLen);
	          for (_i = i; _i < _iLen; _i++) {
	            for (_j = j; _j < _jLen; _j++) {
	              index = (_i * 4) * jLen + (_j * 4);
	              data[index] = r;
	              data[index + 1] = g;
	              data[index + 2] = b;
	              data[index + 3] = a;
	            }
	          }
	        }
	      }
	    },

	    /**
	     * Indicate when the filter is not gonna apply changes to the image
	     **/
	    isNeutralState: function() {
	      return this.blocksize === 1;
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),
	        uStepW: gl.getUniformLocation(program, 'uStepW'),
	        uStepH: gl.getUniformLocation(program, 'uStepH'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate
	   */
	  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Remove white filter class
	   * @class fabric.Image.filters.RemoveColor
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.RemoveColor({
	   *   threshold: 0.2,
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */
	  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'RemoveColor',

	    /**
	     * Color to remove, in any format understood by fabric.Color.
	     * @param {String} type
	     * @default
	     */
	    color: '#FFFFFF',

	    /**
	     * Fragment source for the brightness program
	     */
	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform vec4 uLow;\n' +
	      'uniform vec4 uHigh;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'gl_FragColor = texture2D(uTexture, vTexCoord);\n' +
	        'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n' +
	          'gl_FragColor.a = 0.0;\n' +
	        '}\n' +
	      '}',

	    /**
	     * distance to actual color, as value up or down from each r,g,b
	     * between 0 and 1
	     **/
	    distance: 0.02,

	    /**
	     * For color to remove inside distance, use alpha channel for a smoother deletion
	     * NOT IMPLEMENTED YET
	     **/
	    useAlpha: false,

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.RemoveWhite.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.color=#RRGGBB] Threshold value
	     * @param {Number} [options.distance=10] Distance value
	     */

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data, i,
	          distance = this.distance * 255,
	          r, g, b,
	          source = new fabric.Color(this.color).getSource(),
	          lowC = [
	            source[0] - distance,
	            source[1] - distance,
	            source[2] - distance,
	          ],
	          highC = [
	            source[0] + distance,
	            source[1] + distance,
	            source[2] + distance,
	          ];


	      for (i = 0; i < data.length; i += 4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        if (r > lowC[0] &&
	            g > lowC[1] &&
	            b > lowC[2] &&
	            r < highC[0] &&
	            g < highC[1] &&
	            b < highC[2]) {
	          data[i + 3] = 0;
	        }
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uLow: gl.getUniformLocation(program, 'uLow'),
	        uHigh: gl.getUniformLocation(program, 'uHigh'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      var source = new fabric.Color(this.color).getSource(),
	          distance = parseFloat(this.distance),
	          lowC = [
	            0 + source[0] / 255 - distance,
	            0 + source[1] / 255 - distance,
	            0 + source[2] / 255 - distance,
	            1
	          ],
	          highC = [
	            source[0] / 255 + distance,
	            source[1] / 255 + distance,
	            source[2] / 255 + distance,
	            1
	          ];
	      gl.uniform4fv(uniformLocations.uLow, lowC);
	      gl.uniform4fv(uniformLocations.uHigh, highC);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        color: this.color,
	        distance: this.distance
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite
	   */
	  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  var matrices = {
	    Brownie: [
	      0.59970,0.34553,-0.27082,0,0.186,
	      -0.03770,0.86095,0.15059,0,-0.1449,
	      0.24113,-0.07441,0.44972,0,-0.02965,
	      0,0,0,1,0
	    ],
	    Vintage: [
	      0.62793,0.32021,-0.03965,0,0.03784,
	      0.02578,0.64411,0.03259,0,0.02926,
	      0.04660,-0.08512,0.52416,0,0.02023,
	      0,0,0,1,0
	    ],
	    Kodachrome: [
	      1.12855,-0.39673,-0.03992,0,0.24991,
	      -0.16404,1.08352,-0.05498,0,0.09698,
	      -0.16786,-0.56034,1.60148,0,0.13972,
	      0,0,0,1,0
	    ],
	    Technicolor: [
	      1.91252,-0.85453,-0.09155,0,0.04624,
	      -0.30878,1.76589,-0.10601,0,-0.27589,
	      -0.23110,-0.75018,1.84759,0,0.12137,
	      0,0,0,1,0
	    ],
	    Polaroid: [
	      1.438,-0.062,-0.062,0,0,
	      -0.122,1.378,-0.122,0,0,
	      -0.016,-0.016,1.483,0,0,
	      0,0,0,1,0
	    ],
	    Sepia: [
	      0.393, 0.769, 0.189, 0, 0,
	      0.349, 0.686, 0.168, 0, 0,
	      0.272, 0.534, 0.131, 0, 0,
	      0, 0, 0, 1, 0
	    ],
	    BlackWhite: [
	      1.5, 1.5, 1.5, 0, -1,
	      1.5, 1.5, 1.5, 0, -1,
	      1.5, 1.5, 1.5, 0, -1,
	      0, 0, 0, 1, 0,
	    ]
	  };

	  for (var key in matrices) {
	    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {

	      /**
	       * Filter type
	       * @param {String} type
	       * @default
	       */
	      type: key,

	      /**
	       * Colormatrix for the effect
	       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
	       * outside the -1, 1 range.
	       * @param {Array} matrix array of 20 numbers.
	       * @default
	       */
	      matrix: matrices[key],

	      /**
	       * Lock the matrix export for this kind of static, parameter less filters.
	       */
	      mainParameter: false,
	      /**
	       * Lock the colormatrix on the color part, skipping alpha
	       */
	      colorsOnly: true,

	    });
	    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;
	  }
	})( exports );


	(function(global) {

	  var fabric = global.fabric,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Color Blend filter class
	   * @class fabric.Image.filter.BlendColor
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @example
	   * var filter = new fabric.Image.filters.BlendColor({
	   *  color: '#000',
	   *  mode: 'multiply'
	   * });
	   *
	   * var filter = new fabric.Image.filters.BlendImage({
	   *  image: fabricImageObject,
	   *  mode: 'multiply',
	   *  alpha: 0.5
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */

	  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {
	    type: 'BlendColor',

	    /**
	     * Color to make the blend operation with. default to a reddish color since black or white
	     * gives always strong result.
	     **/
	    color: '#F95C63',

	    /**
	     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
	     * darken, lighten, overlay, exclusion, tint.
	     **/
	    mode: 'multiply',

	    /**
	     * alpha value. represent the strength of the blend color operation.
	     **/
	    alpha: 1,

	    /**
	     * Fragment source for the Multiply program
	     */
	    fragmentSource: {
	      multiply: 'gl_FragColor.rgb *= uColor.rgb;\n',
	      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n',
	      add: 'gl_FragColor.rgb += uColor.rgb;\n',
	      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n',
	      subtract: 'gl_FragColor.rgb -= uColor.rgb;\n',
	      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n',
	      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n',
	      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n',
	      overlay: 'if (uColor.r < 0.5) {\n' +
	          'gl_FragColor.r *= 2.0 * uColor.r;\n' +
	        '} else {\n' +
	          'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n' +
	        '}\n' +
	        'if (uColor.g < 0.5) {\n' +
	          'gl_FragColor.g *= 2.0 * uColor.g;\n' +
	        '} else {\n' +
	          'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n' +
	        '}\n' +
	        'if (uColor.b < 0.5) {\n' +
	          'gl_FragColor.b *= 2.0 * uColor.b;\n' +
	        '} else {\n' +
	          'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n' +
	        '}\n',
	      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\n' +
	        'gl_FragColor.rgb += uColor.rgb;\n',
	    },

	    /**
	     * build the fragment source for the filters, joining the common part with
	     * the specific one.
	     * @param {String} mode the mode of the filter, a key of this.fragmentSource
	     * @return {String} the source to be compiled
	     * @private
	     */
	    buildSource: function(mode) {
	      return 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform vec4 uColor;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'void main() {\n' +
	          'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	          'gl_FragColor = color;\n' +
	          'if (color.a > 0.0) {\n' +
	            this.fragmentSource[mode] +
	          '}\n' +
	        '}';
	    },

	    /**
	     * Retrieves the cached shader.
	     * @param {Object} options
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    retrieveShader: function(options) {
	      var cacheKey = this.type + '_' + this.mode, shaderSource;
	      if (!options.programCache.hasOwnProperty(cacheKey)) {
	        shaderSource = this.buildSource(this.mode);
	        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
	      }
	      return options.programCache[cacheKey];
	    },

	    /**
	     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          data = imageData.data, iLen = data.length,
	          tr, tg, tb,
	          r, g, b,
	          source, alpha1 = 1 - this.alpha;

	      source = new fabric.Color(this.color).getSource();
	      tr = source[0] * this.alpha;
	      tg = source[1] * this.alpha;
	      tb = source[2] * this.alpha;

	      for (var i = 0; i < iLen; i += 4) {

	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        switch (this.mode) {
	          case 'multiply':
	            data[i] = r * tr / 255;
	            data[i + 1] = g * tg / 255;
	            data[i + 2] = b * tb / 255;
	            break;
	          case 'screen':
	            data[i] = 255 - (255 - r) * (255 - tr) / 255;
	            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;
	            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;
	            break;
	          case 'add':
	            data[i] = r + tr;
	            data[i + 1] = g + tg;
	            data[i + 2] = b + tb;
	            break;
	          case 'diff':
	          case 'difference':
	            data[i] = Math.abs(r - tr);
	            data[i + 1] = Math.abs(g - tg);
	            data[i + 2] = Math.abs(b - tb);
	            break;
	          case 'subtract':
	            data[i] = r - tr;
	            data[i + 1] = g - tg;
	            data[i + 2] = b - tb;
	            break;
	          case 'darken':
	            data[i] = Math.min(r, tr);
	            data[i + 1] = Math.min(g, tg);
	            data[i + 2] = Math.min(b, tb);
	            break;
	          case 'lighten':
	            data[i] = Math.max(r, tr);
	            data[i + 1] = Math.max(g, tg);
	            data[i + 2] = Math.max(b, tb);
	            break;
	          case 'overlay':
	            data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);
	            data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);
	            data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);
	            break;
	          case 'exclusion':
	            data[i] = tr + r - ((2 * tr * r) / 255);
	            data[i + 1] = tg + g - ((2 * tg * g) / 255);
	            data[i + 2] = tb + b - ((2 * tb * b) / 255);
	            break;
	          case 'tint':
	            data[i] = tr + r * alpha1;
	            data[i + 1] = tg + g * alpha1;
	            data[i + 2] = tb + b * alpha1;
	        }
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uColor: gl.getUniformLocation(program, 'uColor'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      var source = new fabric.Color(this.color).getSource();
	      source[0] = this.alpha * source[0] / 255;
	      source[1] = this.alpha * source[1] / 255;
	      source[2] = this.alpha * source[2] / 255;
	      source[3] = this.alpha;
	      gl.uniform4fv(uniformLocations.uColor, source);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return {
	        type: this.type,
	        color: this.color,
	        mode: this.mode,
	        alpha: this.alpha
	      };
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor
	   */
	  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric = global.fabric,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Image Blend filter class
	   * @class fabric.Image.filter.BlendImage
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @example
	   * var filter = new fabric.Image.filters.BlendColor({
	   *  color: '#000',
	   *  mode: 'multiply'
	   * });
	   *
	   * var filter = new fabric.Image.filters.BlendImage({
	   *  image: fabricImageObject,
	   *  mode: 'multiply',
	   *  alpha: 0.5
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */

	  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {
	    type: 'BlendImage',

	    /**
	     * Color to make the blend operation with. default to a reddish color since black or white
	     * gives always strong result.
	     **/
	    image: null,

	    /**
	     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
	     * darken, lighten, overlay, exclusion, tint.
	     **/
	    mode: 'multiply',

	    /**
	     * alpha value. represent the strength of the blend image operation.
	     * not implemented.
	     **/
	    alpha: 1,

	    vertexSource: 'attribute vec2 aPosition;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'varying vec2 vTexCoord2;\n' +
	      'uniform mat3 uTransformMatrix;\n' +
	      'void main() {\n' +
	        'vTexCoord = aPosition;\n' +
	        'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n' +
	        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n' +
	      '}',

	    /**
	     * Fragment source for the Multiply program
	     */
	    fragmentSource: {
	      multiply: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform sampler2D uImage;\n' +
	        'uniform vec4 uColor;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'varying vec2 vTexCoord2;\n' +
	        'void main() {\n' +
	          'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	          'vec4 color2 = texture2D(uImage, vTexCoord2);\n' +
	          'color.rgba *= color2.rgba;\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	      mask: 'precision highp float;\n' +
	        'uniform sampler2D uTexture;\n' +
	        'uniform sampler2D uImage;\n' +
	        'uniform vec4 uColor;\n' +
	        'varying vec2 vTexCoord;\n' +
	        'varying vec2 vTexCoord2;\n' +
	        'void main() {\n' +
	          'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	          'vec4 color2 = texture2D(uImage, vTexCoord2);\n' +
	          'color.a = color2.a;\n' +
	          'gl_FragColor = color;\n' +
	        '}',
	    },

	    /**
	     * Retrieves the cached shader.
	     * @param {Object} options
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    retrieveShader: function(options) {
	      var cacheKey = this.type + '_' + this.mode;
	      var shaderSource = this.fragmentSource[this.mode];
	      if (!options.programCache.hasOwnProperty(cacheKey)) {
	        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
	      }
	      return options.programCache[cacheKey];
	    },

	    applyToWebGL: function(options) {
	      // load texture to blend.
	      var gl = options.context,
	          texture = this.createTexture(options.filterBackend, this.image);
	      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);
	      this.callSuper('applyToWebGL', options);
	      this.unbindAdditionalTexture(gl, gl.TEXTURE1);
	    },

	    createTexture: function(backend, image) {
	      return backend.getCachedTexture(image.cacheKey, image._element);
	    },

	    /**
	     * Calculate a transformMatrix to adapt the image to blend over
	     * @param {Object} options
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    calculateMatrix: function() {
	      var image = this.image,
	          width = image._element.width,
	          height = image._element.height;
	      return [
	        1 / image.scaleX, 0, 0,
	        0, 1 / image.scaleY, 0,
	        -image.left / width, -image.top / height, 1
	      ];
	    },

	    /**
	     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          resources = options.filterBackend.resources,
	          data = imageData.data, iLen = data.length,
	          width = imageData.width,
	          height = imageData.height,
	          tr, tg, tb, ta,
	          r, g, b, a,
	          canvas1, context, image = this.image, blendData;

	      if (!resources.blendImage) {
	        resources.blendImage = fabric.util.createCanvasElement();
	      }
	      canvas1 = resources.blendImage;
	      context = canvas1.getContext('2d');
	      if (canvas1.width !== width || canvas1.height !== height) {
	        canvas1.width = width;
	        canvas1.height = height;
	      }
	      else {
	        context.clearRect(0, 0, width, height);
	      }
	      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);
	      context.drawImage(image._element, 0, 0, width, height);
	      blendData = context.getImageData(0, 0, width, height).data;
	      for (var i = 0; i < iLen; i += 4) {

	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];

	        tr = blendData[i];
	        tg = blendData[i + 1];
	        tb = blendData[i + 2];
	        ta = blendData[i + 3];

	        switch (this.mode) {
	          case 'multiply':
	            data[i] = r * tr / 255;
	            data[i + 1] = g * tg / 255;
	            data[i + 2] = b * tb / 255;
	            data[i + 3] = a * ta / 255;
	            break;
	          case 'mask':
	            data[i + 3] = ta;
	            break;
	        }
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),
	        uImage: gl.getUniformLocation(program, 'uImage'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      var matrix = this.calculateMatrix();
	      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.
	      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return {
	        type: this.type,
	        image: this.image && this.image.toObject(),
	        mode: this.mode,
	        alpha: this.alpha
	      };
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} callback to be invoked after filter creation
	   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage
	   */
	  fabric.Image.filters.BlendImage.fromObject = function(object, callback) {
	    fabric.Image.fromObject(object.image, function(image) {
	      var options = fabric.util.object.clone(object);
	      options.image = image;
	      callback(new fabric.Image.filters.BlendImage(options));
	    });
	  };

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,
	      sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,
	      ceil = Math.ceil,
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Resize image filter class
	   * @class fabric.Image.filters.Resize
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Resize();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Resize',

	    /**
	     * Resize type
	     * for webgl resizeType is just lanczos, for canvas2d can be:
	     * bilinear, hermite, sliceHack, lanczos.
	     * @param {String} resizeType
	     * @default
	     */
	    resizeType: 'hermite',

	    /**
	     * Scale factor for resizing, x axis
	     * @param {Number} scaleX
	     * @default
	     */
	    scaleX: 1,

	    /**
	     * Scale factor for resizing, y axis
	     * @param {Number} scaleY
	     * @default
	     */
	    scaleY: 1,

	    /**
	     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos
	     * @param {Number} lanczosLobes
	     * @default
	     */
	    lanczosLobes: 3,


	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uDelta: gl.getUniformLocation(program, 'uDelta'),
	        uTaps: gl.getUniformLocation(program, 'uTaps'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);
	      gl.uniform1fv(uniformLocations.uTaps, this.taps);
	    },

	    /**
	     * Retrieves the cached shader.
	     * @param {Object} options
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    retrieveShader: function(options) {
	      var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;
	      if (!options.programCache.hasOwnProperty(cacheKey)) {
	        var fragmentShader = this.generateShader(filterWindow);
	        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);
	      }
	      return options.programCache[cacheKey];
	    },

	    getFilterWindow: function() {
	      var scale = this.tempScale;
	      return Math.ceil(this.lanczosLobes / scale);
	    },

	    getTaps: function() {
	      var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,
	          filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);
	      for (var i = 1; i <= filterWindow; i++) {
	        taps[i - 1] = lobeFunction(i * scale);
	      }
	      return taps;
	    },

	    /**
	     * Generate vertex and shader sources from the necessary steps numbers
	     * @param {Number} filterWindow
	     */
	    generateShader: function(filterWindow) {
	      var offsets = new Array(filterWindow),
	          fragmentShader = this.fragmentSourceTOP, filterWindow;

	      for (var i = 1; i <= filterWindow; i++) {
	        offsets[i - 1] = i + '.0 * uDelta';
	      }

	      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\n';
	      fragmentShader += 'void main() {\n';
	      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\n';
	      fragmentShader += '  float sum = 1.0;\n';

	      offsets.forEach(function(offset, i) {
	        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\n';
	        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\n';
	        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\n';
	      });
	      fragmentShader += '  gl_FragColor = color / sum;\n';
	      fragmentShader += '}';
	      return fragmentShader;
	    },

	    fragmentSourceTOP: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform vec2 uDelta;\n' +
	      'varying vec2 vTexCoord;\n',

	    /**
	     * Apply the resize filter to the image
	     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
	     *
	     * @param {Object} options
	     * @param {Number} options.passes The number of filters remaining to be executed
	     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
	     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
	     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    applyTo: function(options) {
	      if (options.webgl) {
	        options.passes++;
	        this.width = options.sourceWidth;
	        this.horizontal = true;
	        this.dW = Math.round(this.width * this.scaleX);
	        this.dH = options.sourceHeight;
	        this.tempScale = this.dW / this.width;
	        this.taps = this.getTaps();
	        options.destinationWidth = this.dW;
	        this._setupFrameBuffer(options);
	        this.applyToWebGL(options);
	        this._swapTextures(options);
	        options.sourceWidth = options.destinationWidth;

	        this.height = options.sourceHeight;
	        this.horizontal = false;
	        this.dH = Math.round(this.height * this.scaleY);
	        this.tempScale = this.dH / this.height;
	        this.taps = this.getTaps();
	        options.destinationHeight = this.dH;
	        this._setupFrameBuffer(options);
	        this.applyToWebGL(options);
	        this._swapTextures(options);
	        options.sourceHeight = options.destinationHeight;
	      }
	      else {
	        this.applyTo2d(options);
	      }
	    },

	    isNeutralState: function() {
	      return this.scaleX === 1 && this.scaleY === 1;
	    },

	    lanczosCreate: function(lobes) {
	      return function(x) {
	        if (x >= lobes || x <= -lobes) {
	          return 0.0;
	        }
	        if (x < 1.19209290E-07 && x > -1.19209290E-07) {
	          return 1.0;
	        }
	        x *= Math.PI;
	        var xx = x / lobes;
	        return (sin(x) / x) * sin(xx) / xx;
	      };
	    },

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Resize.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     * @param {Number} scaleX
	     * @param {Number} scaleY
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData,
	          scaleX = this.scaleX,
	          scaleY = this.scaleY;

	      this.rcpScaleX = 1 / scaleX;
	      this.rcpScaleY = 1 / scaleY;

	      var oW = imageData.width, oH = imageData.height,
	          dW = round(oW * scaleX), dH = round(oH * scaleY),
	          newData;

	      if (this.resizeType === 'sliceHack') {
	        newData = this.sliceByTwo(options, oW, oH, dW, dH);
	      }
	      else if (this.resizeType === 'hermite') {
	        newData = this.hermiteFastResize(options, oW, oH, dW, dH);
	      }
	      else if (this.resizeType === 'bilinear') {
	        newData = this.bilinearFiltering(options, oW, oH, dW, dH);
	      }
	      else if (this.resizeType === 'lanczos') {
	        newData = this.lanczosResize(options, oW, oH, dW, dH);
	      }
	      options.imageData = newData;
	    },

	    /**
	     * Filter sliceByTwo
	     * @param {Object} canvasEl Canvas element to apply filter to
	     * @param {Number} oW Original Width
	     * @param {Number} oH Original Height
	     * @param {Number} dW Destination Width
	     * @param {Number} dH Destination Height
	     * @returns {ImageData}
	     */
	    sliceByTwo: function(options, oW, oH, dW, dH) {
	      var imageData = options.imageData,
	          mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,
	          stepH = oH * mult, resources = fabric.filterBackend.resources,
	          tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;
	      if (!resources.sliceByTwo) {
	        resources.sliceByTwo = document.createElement('canvas');
	      }
	      tmpCanvas = resources.sliceByTwo;
	      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {
	        tmpCanvas.width = oW * 1.5;
	        tmpCanvas.height = oH;
	      }
	      ctx = tmpCanvas.getContext('2d');
	      ctx.clearRect(0, 0, oW * 1.5, oH);
	      ctx.putImageData(imageData, 0, 0);

	      dW = floor(dW);
	      dH = floor(dH);

	      while (!doneW || !doneH) {
	        oW = stepW;
	        oH = stepH;
	        if (dW < floor(stepW * mult)) {
	          stepW = floor(stepW * mult);
	        }
	        else {
	          stepW = dW;
	          doneW = true;
	        }
	        if (dH < floor(stepH * mult)) {
	          stepH = floor(stepH * mult);
	        }
	        else {
	          stepH = dH;
	          doneH = true;
	        }
	        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);
	        sX = dX;
	        sY = dY;
	        dY += stepH;
	      }
	      return ctx.getImageData(sX, sY, dW, dH);
	    },

	    /**
	     * Filter lanczosResize
	     * @param {Object} canvasEl Canvas element to apply filter to
	     * @param {Number} oW Original Width
	     * @param {Number} oH Original Height
	     * @param {Number} dW Destination Width
	     * @param {Number} dH Destination Height
	     * @returns {ImageData}
	     */
	    lanczosResize: function(options, oW, oH, dW, dH) {

	      function process(u) {
	        var v, i, weight, idx, a, red, green,
	            blue, alpha, fX, fY;
	        center.x = (u + 0.5) * ratioX;
	        icenter.x = floor(center.x);
	        for (v = 0; v < dH; v++) {
	          center.y = (v + 0.5) * ratioY;
	          icenter.y = floor(center.y);
	          a = 0; red = 0; green = 0; blue = 0; alpha = 0;
	          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {
	            if (i < 0 || i >= oW) {
	              continue;
	            }
	            fX = floor(1000 * abs(i - center.x));
	            if (!cacheLanc[fX]) {
	              cacheLanc[fX] = { };
	            }
	            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {
	              if (j < 0 || j >= oH) {
	                continue;
	              }
	              fY = floor(1000 * abs(j - center.y));
	              if (!cacheLanc[fX][fY]) {
	                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);
	              }
	              weight = cacheLanc[fX][fY];
	              if (weight > 0) {
	                idx = (j * oW + i) * 4;
	                a += weight;
	                red += weight * srcData[idx];
	                green += weight * srcData[idx + 1];
	                blue += weight * srcData[idx + 2];
	                alpha += weight * srcData[idx + 3];
	              }
	            }
	          }
	          idx = (v * dW + u) * 4;
	          destData[idx] = red / a;
	          destData[idx + 1] = green / a;
	          destData[idx + 2] = blue / a;
	          destData[idx + 3] = alpha / a;
	        }

	        if (++u < dW) {
	          return process(u);
	        }
	        else {
	          return destImg;
	        }
	      }

	      var srcData = options.imageData.data,
	          destImg = options.ctx.createImageData(dW, dH),
	          destData = destImg.data,
	          lanczos = this.lanczosCreate(this.lanczosLobes),
	          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,
	          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,
	          range2X = ceil(ratioX * this.lanczosLobes / 2),
	          range2Y = ceil(ratioY * this.lanczosLobes / 2),
	          cacheLanc = { }, center = { }, icenter = { };

	      return process(0);
	    },

	    /**
	     * bilinearFiltering
	     * @param {Object} canvasEl Canvas element to apply filter to
	     * @param {Number} oW Original Width
	     * @param {Number} oH Original Height
	     * @param {Number} dW Destination Width
	     * @param {Number} dH Destination Height
	     * @returns {ImageData}
	     */
	    bilinearFiltering: function(options, oW, oH, dW, dH) {
	      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,
	          color, offset = 0, origPix, ratioX = this.rcpScaleX,
	          ratioY = this.rcpScaleY,
	          w4 = 4 * (oW - 1), img = options.imageData,
	          pixels = img.data, destImage = options.ctx.createImageData(dW, dH),
	          destPixels = destImage.data;
	      for (i = 0; i < dH; i++) {
	        for (j = 0; j < dW; j++) {
	          x = floor(ratioX * j);
	          y = floor(ratioY * i);
	          xDiff = ratioX * j - x;
	          yDiff = ratioY * i - y;
	          origPix = 4 * (y * oW + x);

	          for (chnl = 0; chnl < 4; chnl++) {
	            a = pixels[origPix + chnl];
	            b = pixels[origPix + 4 + chnl];
	            c = pixels[origPix + w4 + chnl];
	            d = pixels[origPix + w4 + 4 + chnl];
	            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +
	                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;
	            destPixels[offset++] = color;
	          }
	        }
	      }
	      return destImage;
	    },

	    /**
	     * hermiteFastResize
	     * @param {Object} canvasEl Canvas element to apply filter to
	     * @param {Number} oW Original Width
	     * @param {Number} oH Original Height
	     * @param {Number} dW Destination Width
	     * @param {Number} dH Destination Height
	     * @returns {ImageData}
	     */
	    hermiteFastResize: function(options, oW, oH, dW, dH) {
	      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,
	          ratioWHalf = ceil(ratioW / 2),
	          ratioHHalf = ceil(ratioH / 2),
	          img = options.imageData, data = img.data,
	          img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;
	      for (var j = 0; j < dH; j++) {
	        for (var i = 0; i < dW; i++) {
	          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,
	              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;
	          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {
	            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,
	                centerX = (i + 0.5) * ratioW, w0 = dy * dy;
	            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {
	              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,
	                  w = sqrt(w0 + dx * dx);
	              /* eslint-disable max-depth */
	              if (w > 1 && w < -1) {
	                continue;
	              }
	              //hermite filter
	              weight = 2 * w * w * w - 3 * w * w + 1;
	              if (weight > 0) {
	                dx = 4 * (xx + yy * oW);
	                //alpha
	                gxA += weight * data[dx + 3];
	                weightsAlpha += weight;
	                //colors
	                if (data[dx + 3] < 255) {
	                  weight = weight * data[dx + 3] / 250;
	                }
	                gxR += weight * data[dx];
	                gxG += weight * data[dx + 1];
	                gxB += weight * data[dx + 2];
	                weights += weight;
	              }
	              /* eslint-enable max-depth */
	            }
	          }
	          data2[x2] = gxR / weights;
	          data2[x2 + 1] = gxG / weights;
	          data2[x2 + 2] = gxB / weights;
	          data2[x2 + 3] = gxA / weightsAlpha;
	        }
	      }
	      return img2;
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return {
	        type: this.type,
	        scaleX: this.scaleX,
	        scaleY: this.scaleY,
	        resizeType: this.resizeType,
	        lanczosLobes: this.lanczosLobes
	      };
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize
	   */
	  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Contrast filter class
	   * @class fabric.Image.filters.Contrast
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Contrast({
	   *   contrast: 40
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Contrast',

	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform float uContrast;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n' +
	        'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    contrast: 0,

	    mainParameter: 'contrast',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Contrast.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)
	     */

	    /**
	      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.
	      *
	      * @param {Object} options
	      * @param {ImageData} options.imageData The Uint8Array to be filtered.
	      */
	    applyTo2d: function(options) {
	      if (this.contrast === 0) {
	        return;
	      }
	      var imageData = options.imageData, i, len,
	          data = imageData.data, len = data.length,
	          contrast = Math.floor(this.contrast * 255),
	          contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));

	      for (i = 0; i < len; i += 4) {
	        data[i] = contrastF * (data[i] - 128) + 128;
	        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;
	        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uContrast: gl.getUniformLocation(program, 'uContrast'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1f(uniformLocations.uContrast, this.contrast);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast
	   */
	  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Saturate filter class
	   * @class fabric.Image.filters.Saturation
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Saturation({
	   *   saturation: 100
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Saturation',

	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform float uSaturation;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'float rgMax = max(color.r, color.g);\n' +
	        'float rgbMax = max(rgMax, color.b);\n' +
	        'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n' +
	        'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n' +
	        'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n' +
	        'gl_FragColor = color;\n' +
	      '}',

	    saturation: 0,

	    mainParameter: 'saturation',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Saturate.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)
	     */

	    /**
	     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
	     */
	    applyTo2d: function(options) {
	      if (this.saturation === 0) {
	        return;
	      }
	      var imageData = options.imageData,
	          data = imageData.data, len = data.length,
	          adjust = -this.saturation, i, max;

	      for (i = 0; i < len; i += 4) {
	        max = Math.max(data[i], data[i + 1], data[i + 2]);
	        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;
	        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;
	        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uSaturation: gl.getUniformLocation(program, 'uSaturation'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate
	   */
	  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Blur filter class
	   * @class fabric.Image.filters.Blur
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Blur({
	   *   blur: 0.5
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   * canvas.renderAll();
	   */
	  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {

	    type: 'Blur',

	    /*
	'gl_FragColor = vec4(0.0);',
	'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',
	'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',
	'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',
	'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',
	'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',
	'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',
	'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',
	'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',
	'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',
	'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',
	'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',
	'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',
	'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',
	'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',
	'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',
	*/

	    /* eslint-disable max-len */
	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform vec2 uDelta;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'const float nSamples = 15.0;\n' +
	      'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n' +
	      'float random(vec3 scale) {\n' +
	        /* use the fragment position for a different seed per-pixel */
	        'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n' +
	      '}\n' +
	      'void main() {\n' +
	        'vec4 color = vec4(0.0);\n' +
	        'float total = 0.0;\n' +
	        'float offset = random(v3offset);\n' +
	        'for (float t = -nSamples; t <= nSamples; t++) {\n' +
	          'float percent = (t + offset - 0.5) / nSamples;\n' +
	          'float weight = 1.0 - abs(percent);\n' +
	          'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n' +
	          'total += weight;\n' +
	        '}\n' +
	        'gl_FragColor = color / total;\n' +
	      '}',
	    /* eslint-enable max-len */

	    /**
	     * blur value, in percentage of image dimensions.
	     * specific to keep the image blur constant at different resolutions
	     * range bewteen 0 and 1.
	     */
	    blur: 0,

	    mainParameter: 'blur',

	    applyTo: function(options) {
	      if (options.webgl) {
	        // this aspectRatio is used to give the same blur to vertical and horizontal
	        this.aspectRatio = options.sourceWidth / options.sourceHeight;
	        options.passes++;
	        this._setupFrameBuffer(options);
	        this.horizontal = true;
	        this.applyToWebGL(options);
	        this._swapTextures(options);
	        this._setupFrameBuffer(options);
	        this.horizontal = false;
	        this.applyToWebGL(options);
	        this._swapTextures(options);
	      }
	      else {
	        this.applyTo2d(options);
	      }
	    },

	    applyTo2d: function(options) {
	      // paint canvasEl with current image data.
	      //options.ctx.putImageData(options.imageData, 0, 0);
	      options.imageData = this.simpleBlur(options);
	    },

	    simpleBlur: function(options) {
	      var resources = options.filterBackend.resources, canvas1, canvas2,
	          width = options.imageData.width,
	          height = options.imageData.height;

	      if (!resources.blurLayer1) {
	        resources.blurLayer1 = fabric.util.createCanvasElement();
	        resources.blurLayer2 = fabric.util.createCanvasElement();
	      }
	      canvas1 = resources.blurLayer1;
	      canvas2 = resources.blurLayer2;
	      if (canvas1.width !== width || canvas1.height !== height) {
	        canvas2.width = canvas1.width = width;
	        canvas2.height = canvas1.height = height;
	      }
	      var ctx1 = canvas1.getContext('2d'),
	          ctx2 = canvas2.getContext('2d'),
	          nSamples = 15,
	          random, percent, j, i,
	          blur = this.blur * 0.06 * 0.5;

	      // load first canvas
	      ctx1.putImageData(options.imageData, 0, 0);
	      ctx2.clearRect(0, 0, width, height);

	      for (i = -nSamples; i <= nSamples; i++) {
	        random = (Math.random() - 0.5) / 4;
	        percent = i / nSamples;
	        j = blur * percent * width + random;
	        ctx2.globalAlpha = 1 - Math.abs(percent);
	        ctx2.drawImage(canvas1, j, random);
	        ctx1.drawImage(canvas2, 0, 0);
	        ctx2.globalAlpha = 1;
	        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
	      }
	      for (i = -nSamples; i <= nSamples; i++) {
	        random = (Math.random() - 0.5) / 4;
	        percent = i / nSamples;
	        j = blur * percent * height + random;
	        ctx2.globalAlpha = 1 - Math.abs(percent);
	        ctx2.drawImage(canvas1, random, j);
	        ctx1.drawImage(canvas2, 0, 0);
	        ctx2.globalAlpha = 1;
	        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
	      }
	      options.ctx.drawImage(canvas1, 0, 0);
	      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);
	      ctx1.globalAlpha = 1;
	      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
	      return newImageData;
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        delta: gl.getUniformLocation(program, 'uDelta'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      var delta = this.chooseRightDelta();
	      gl.uniform2fv(uniformLocations.delta, delta);
	    },

	    /**
	     * choose right value of image percentage to blur with
	     * @returns {Array} a numeric array with delta values
	     */
	    chooseRightDelta: function() {
	      var blurScale = 1, delta = [0, 0], blur;
	      if (this.horizontal) {
	        if (this.aspectRatio > 1) {
	          // image is wide, i want to shrink radius horizontal
	          blurScale = 1 / this.aspectRatio;
	        }
	      }
	      else {
	        if (this.aspectRatio < 1) {
	          // image is tall, i want to shrink radius vertical
	          blurScale = this.aspectRatio;
	        }
	      }
	      blur = blurScale * this.blur * 0.12;
	      if (this.horizontal) {
	        delta[0] = blur;
	      }
	      else {
	        delta[1] = blur;
	      }
	      return delta;
	    },
	  });

	  /**
	   * Deserialize a JSON definition of a BlurFilter into a concrete instance.
	   */
	  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * Gamma filter class
	   * @class fabric.Image.filters.Gamma
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Gamma({
	   *   brightness: 200
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Gamma',

	    fragmentSource: 'precision highp float;\n' +
	      'uniform sampler2D uTexture;\n' +
	      'uniform vec3 uGamma;\n' +
	      'varying vec2 vTexCoord;\n' +
	      'void main() {\n' +
	        'vec4 color = texture2D(uTexture, vTexCoord);\n' +
	        'vec3 correction = (1.0 / uGamma);\n' +
	        'color.r = pow(color.r, correction.r);\n' +
	        'color.g = pow(color.g, correction.g);\n' +
	        'color.b = pow(color.b, correction.b);\n' +
	        'gl_FragColor = color;\n' +
	        'gl_FragColor.rgb *= color.a;\n' +
	      '}',

	    /**
	     * Gamma array value, from 0.01 to 2.2.
	     * @param {Array} gamma
	     * @default
	     */
	    gamma: [1, 1, 1],

	    /**
	     * Describe the property that is the filter parameter
	     * @param {String} m
	     * @default
	     */
	    mainParameter: 'gamma',

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     */
	    initialize: function(options) {
	      this.gamma = [1, 1, 1];
	      filters.BaseFilter.prototype.initialize.call(this, options);
	    },

	    /**
	     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.
	     *
	     * @param {Object} options
	     * @param {ImageData} options.imageData The Uint8Array to be filtered.
	     */
	    applyTo2d: function(options) {
	      var imageData = options.imageData, data = imageData.data,
	          gamma = this.gamma, len = data.length,
	          rInv = 1 / gamma[0], gInv = 1 / gamma[1],
	          bInv = 1 / gamma[2], i;

	      if (!this.rVals) {
	        // eslint-disable-next-line
	        this.rVals = new Uint8Array(256);
	        // eslint-disable-next-line
	        this.gVals = new Uint8Array(256);
	        // eslint-disable-next-line
	        this.bVals = new Uint8Array(256);
	      }

	      // This is an optimization - pre-compute a look-up table for each color channel
	      // instead of performing these pow calls for each pixel in the image.
	      for (i = 0, len = 256; i < len; i++) {
	        this.rVals[i] = Math.pow(i / 255, rInv) * 255;
	        this.gVals[i] = Math.pow(i / 255, gInv) * 255;
	        this.bVals[i] = Math.pow(i / 255, bInv) * 255;
	      }
	      for (i = 0, len = data.length; i < len; i += 4) {
	        data[i] = this.rVals[data[i]];
	        data[i + 1] = this.gVals[data[i + 1]];
	        data[i + 2] = this.bVals[data[i + 2]];
	      }
	    },

	    /**
	     * Return WebGL uniform locations for this filter's shader.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {WebGLShaderProgram} program This filter's compiled shader program.
	     */
	    getUniformLocations: function(gl, program) {
	      return {
	        uGamma: gl.getUniformLocation(program, 'uGamma'),
	      };
	    },

	    /**
	     * Send data from this filter to its shader program's uniforms.
	     *
	     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
	     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
	     */
	    sendUniformData: function(gl, uniformLocations) {
	      gl.uniform3fv(uniformLocations.uGamma, this.gamma);
	    },
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma
	   */
	  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * A container class that knows how to apply a sequence of filters to an input image.
	   */
	  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {

	    type: 'Composed',

	    /**
	     * A non sparse array of filters to apply
	     */
	    subFilters: [],

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     */
	    initialize: function(options) {
	      this.callSuper('initialize', options);
	      // create a new array instead mutating the prototype with push
	      this.subFilters = this.subFilters.slice(0);
	    },

	    /**
	     * Apply this container's filters to the input image provided.
	     *
	     * @param {Object} options
	     * @param {Number} options.passes The number of filters remaining to be applied.
	     */
	    applyTo: function(options) {
	      options.passes += this.subFilters.length - 1;
	      this.subFilters.forEach(function(filter) {
	        filter.applyTo(options);
	      });
	    },

	    /**
	     * Serialize this filter into JSON.
	     *
	     * @returns {Object} A JSON representation of this filter.
	     */
	    toObject: function() {
	      return fabric.util.object.extend(this.callSuper('toObject'), {
	        subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),
	      });
	    },

	    isNeutralState: function() {
	      return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });
	    }
	  });

	  /**
	   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.
	   */
	  fabric.Image.filters.Composed.fromObject = function(object, callback) {
	    var filters = object.subFilters || [],
	        subFilters = filters.map(function(filter) {
	          return new fabric.Image.filters[filter.type](filter);
	        }),
	        instance = new fabric.Image.filters.Composed({ subFilters: subFilters });
	    callback && callback(instance);
	    return instance;
	  };
	})( exports );


	(function(global) {

	  var fabric  = global.fabric || (global.fabric = { }),
	      filters = fabric.Image.filters,
	      createClass = fabric.util.createClass;

	  /**
	   * HueRotation filter class
	   * @class fabric.Image.filters.HueRotation
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.HueRotation({
	   *   rotation: -0.5
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters();
	   */
	  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'HueRotation',

	    /**
	     * HueRotation value, from -1 to 1.
	     * the unit is radians
	     * @param {Number} myParameter
	     * @default
	     */
	    rotation: 0,

	    /**
	     * Describe the property that is the filter parameter
	     * @param {String} m
	     * @default
	     */
	    mainParameter: 'rotation',

	    calculateMatrix: function() {
	      var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),
	          aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;
	      this.matrix = [
	        1, 0, 0, 0, 0,
	        0, 1, 0, 0, 0,
	        0, 0, 1, 0, 0,
	        0, 0, 0, 1, 0
	      ];
	      this.matrix[0] = cos + OneMinusCos / 3;
	      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;
	      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;
	      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;
	      this.matrix[6] = cos + aThird * OneMinusCos;
	      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;
	      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;
	      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;
	      this.matrix[12] = cos + aThird * OneMinusCos;
	    },

	    /**
	     * HueRotation isNeutralState implementation
	     * Used only in image applyFilters to discard filters that will not have an effect
	     * on the image
	     * @param {Object} options
	     **/
	    isNeutralState: function(options) {
	      this.calculateMatrix();
	      return filters.BaseFilter.prototype.isNeutralState.call(this, options);
	    },

	    /**
	     * Apply this filter to the input image data provided.
	     *
	     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
	     *
	     * @param {Object} options
	     * @param {Number} options.passes The number of filters remaining to be executed
	     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
	     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
	     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
	     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
	     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
	     */
	    applyTo: function(options) {
	      this.calculateMatrix();
	      filters.BaseFilter.prototype.applyTo.call(this, options);
	    },

	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] to be invoked after filter creation
	   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation
	   */
	  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;

	})( exports );


	(function(global) {

	  var fabric = global.fabric || (global.fabric = { }),
	      clone = fabric.util.object.clone;

	  if (fabric.Text) {
	    fabric.warn('fabric.Text is already defined');
	    return;
	  }

	  /**
	   * Text class
	   * @class fabric.Text
	   * @extends fabric.Object
	   * @return {fabric.Text} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}
	   * @see {@link fabric.Text#initialize} for constructor definition
	   */
	  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {

	    /**
	     * Properties which when set cause object to change dimensions
	     * @type Array
	     * @private
	     */
	    _dimensionAffectingProps: [
	      'fontSize',
	      'fontWeight',
	      'fontFamily',
	      'fontStyle',
	      'lineHeight',
	      'text',
	      'charSpacing',
	      'textAlign',
	      'styles',
	    ],

	    /**
	     * @private
	     */
	    _reNewline: /\r?\n/,

	    /**
	     * Use this regular expression to filter for whitespaces that is not a new line.
	     * Mostly used when text is 'justify' aligned.
	     * @private
	     */
	    _reSpacesAndTabs: /[ \t\r]/g,

	    /**
	     * Use this regular expression to filter for whitespace that is not a new line.
	     * Mostly used when text is 'justify' aligned.
	     * @private
	     */
	    _reSpaceAndTab: /[ \t\r]/,

	    /**
	     * Use this regular expression to filter consecutive groups of non spaces.
	     * Mostly used when text is 'justify' aligned.
	     * @private
	     */
	    _reWords: /\S+/g,

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type:                 'text',

	    /**
	     * Font size (in pixels)
	     * @type Number
	     * @default
	     */
	    fontSize:             40,

	    /**
	     * Font weight (e.g. bold, normal, 400, 600, 800)
	     * @type {(Number|String)}
	     * @default
	     */
	    fontWeight:           'normal',

	    /**
	     * Font family
	     * @type String
	     * @default
	     */
	    fontFamily:           'Times New Roman',

	    /**
	     * Text decoration underline.
	     * @type Boolean
	     * @default
	     */
	    underline:       false,

	    /**
	     * Text decoration overline.
	     * @type Boolean
	     * @default
	     */
	    overline:       false,

	    /**
	     * Text decoration linethrough.
	     * @type Boolean
	     * @default
	     */
	    linethrough:       false,

	    /**
	     * Text alignment. Possible values: "left", "center", "right", "justify",
	     * "justify-left", "justify-center" or "justify-right".
	     * @type String
	     * @default
	     */
	    textAlign:            'left',

	    /**
	     * Font style . Possible values: "", "normal", "italic" or "oblique".
	     * @type String
	     * @default
	     */
	    fontStyle:            'normal',

	    /**
	     * Line height
	     * @type Number
	     * @default
	     */
	    lineHeight:           1.16,

	    /**
	     * Superscript schema object (minimum overlap)
	     * @type {Object}
	     * @default
	     */
	    superscript: {
	      size:      0.60, // fontSize factor
	      baseline: -0.35  // baseline-shift factor (upwards)
	    },

	    /**
	     * Subscript schema object (minimum overlap)
	     * @type {Object}
	     * @default
	     */
	    subscript: {
	      size:      0.60, // fontSize factor
	      baseline:  0.11  // baseline-shift factor (downwards)
	    },

	    /**
	     * Background color of text lines
	     * @type String
	     * @default
	     */
	    textBackgroundColor:  '',

	    /**
	     * List of properties to consider when checking if
	     * state of an object is changed ({@link fabric.Object#hasStateChanged})
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties: fabric.Object.prototype.stateProperties.concat('fontFamily',
	      'fontWeight',
	      'fontSize',
	      'text',
	      'underline',
	      'overline',
	      'linethrough',
	      'textAlign',
	      'fontStyle',
	      'lineHeight',
	      'textBackgroundColor',
	      'charSpacing',
	      'styles'),

	    /**
	     * List of properties to consider when checking if cache needs refresh
	     * @type Array
	     */
	    cacheProperties: fabric.Object.prototype.cacheProperties.concat('fontFamily',
	      'fontWeight',
	      'fontSize',
	      'text',
	      'underline',
	      'overline',
	      'linethrough',
	      'textAlign',
	      'fontStyle',
	      'lineHeight',
	      'textBackgroundColor',
	      'charSpacing',
	      'styles'),

	    /**
	     * When defined, an object is rendered via stroke and this property specifies its color.
	     * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
	     * @type String
	     * @default
	     */
	    stroke:               null,

	    /**
	     * Shadow object representing shadow of this shape.
	     * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
	     * @type fabric.Shadow
	     * @default
	     */
	    shadow:               null,

	    /**
	     * @private
	     */
	    _fontSizeFraction: 0.222,

	    /**
	     * @private
	     */
	    offsets: {
	      underline: 0.10,
	      linethrough: -0.315,
	      overline: -0.88
	    },

	    /**
	     * Text Line proportion to font Size (in pixels)
	     * @type Number
	     * @default
	     */
	    _fontSizeMult:             1.13,

	    /**
	     * additional space between characters
	     * expressed in thousands of em unit
	     * @type Number
	     * @default
	     */
	    charSpacing:             0,

	    /**
	     * Object containing character styles - top-level properties -> line numbers,
	     * 2nd-level properties - charater numbers
	     * @type Object
	     * @default
	     */
	    styles: null,

	    /**
	     * Reference to a context to measure text char or couple of chars
	     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas
	     * once created it will be referenced on fabric._measuringContext to avoide creating a canvas for every
	     * text object created.
	     * @type {CanvasRenderingContext2D}
	     * @default
	     */
	    _measuringContext: null,

	    /**
	     * Baseline shift, stlyes only, keep at 0 for the main text object
	     * @type {Number}
	     * @default
	     */
	    deltaY: 0,

	    /**
	     * Array of properties that define a style unit (of 'styles').
	     * @type {Array}
	     * @default
	     */
	    _styleProperties: [
	      'stroke',
	      'strokeWidth',
	      'fill',
	      'fontFamily',
	      'fontSize',
	      'fontWeight',
	      'fontStyle',
	      'underline',
	      'overline',
	      'linethrough',
	      'deltaY',
	      'textBackgroundColor',
	    ],

	    /**
	     * contains characters bounding boxes
	     */
	    __charBounds: [],

	    /**
	     * use this size when measuring text. To avoid IE11 rounding errors
	     * @type {Number}
	     * @default
	     * @readonly
	     * @private
	     */
	    CACHE_FONT_SIZE: 400,

	    /**
	     * contains the min text width to avoid getting 0
	     * @type {Number}
	     * @default
	     */
	    MIN_TEXT_WIDTH: 2,

	    /**
	     * Constructor
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.Text} thisArg
	     */
	    initialize: function(text, options) {
	      this.styles = options ? (options.styles || { }) : { };
	      this.text = text;
	      this.__skipDimension = true;
	      this.callSuper('initialize', options);
	      this.__skipDimension = false;
	      this.initDimensions();
	      this.setCoords();
	      this.setupState({ propertySet: '_dimensionAffectingProps' });
	    },

	    /**
	     * Return a contex for measurement of text string.
	     * if created it gets stored for reuse
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.Text} thisArg
	     */
	    getMeasuringContext: function() {
	      // if we did not return we have to measure something.
	      if (!fabric._measuringContext) {
	        fabric._measuringContext = this.canvas && this.canvas.contextCache ||
	          fabric.util.createCanvasElement().getContext('2d');
	      }
	      return fabric._measuringContext;
	    },

	    /**
	     * @private
	     * Divides text into lines of text and lines of graphemes.
	     */
	    _splitText: function() {
	      var newLines = this._splitTextIntoLines(this.text);
	      this.textLines = newLines.lines;
	      this._textLines = newLines.graphemeLines;
	      this._unwrappedTextLines = newLines._unwrappedLines;
	      this._text = newLines.graphemeText;
	      return newLines;
	    },

	    /**
	     * Initialize or update text dimensions.
	     * Updates this.width and this.height with the proper values.
	     * Does not return dimensions.
	     */
	    initDimensions: function() {
	      if (this.__skipDimension) {
	        return;
	      }
	      this._splitText();
	      this._clearCache();
	      this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;
	      if (this.textAlign.indexOf('justify') !== -1) {
	        // once text is measured we need to make space fatter to make justified text.
	        this.enlargeSpaces();
	      }
	      this.height = this.calcTextHeight();
	      this.saveState({ propertySet: '_dimensionAffectingProps' });
	    },

	    /**
	     * Enlarge space boxes and shift the others
	     */
	    enlargeSpaces: function() {
	      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {
	          continue;
	        }
	        accumulatedSpace = 0;
	        line = this._textLines[i];
	        currentLineWidth = this.getLineWidth(i);
	        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {
	          numberOfSpaces = spaces.length;
	          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;
	          for (var j = 0, jlen = line.length; j <= jlen; j++) {
	            charBound = this.__charBounds[i][j];
	            if (this._reSpaceAndTab.test(line[j])) {
	              charBound.width += diffSpace;
	              charBound.kernedWidth += diffSpace;
	              charBound.left += accumulatedSpace;
	              accumulatedSpace += diffSpace;
	            }
	            else {
	              charBound.left += accumulatedSpace;
	            }
	          }
	        }
	      }
	    },

	    /**
	     * Detect if the text line is ended with an hard break
	     * text and itext do not have wrapping, return false
	     * @return {Boolean}
	     */
	    isEndOfWrapping: function(lineIndex) {
	      return lineIndex === this._textLines.length - 1;
	    },

	    /**
	     * Detect if a line has a linebreak and so we need to account for it when moving
	     * and counting style.
	     * It return always for text and Itext.
	     * @return Number
	     */
	    missingNewlineOffset: function() {
	      return 1;
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} String representation of text object
	     */
	    toString: function() {
	      return '#<fabric.Text (' + this.complexity() +
	        '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
	    },

	    /**
	     * Return the dimension and the zoom level needed to create a cache canvas
	     * big enough to host the object to be cached.
	     * @private
	     * @param {Object} dim.x width of object to be cached
	     * @param {Object} dim.y height of object to be cached
	     * @return {Object}.width width of canvas
	     * @return {Object}.height height of canvas
	     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
	     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
	     */
	    _getCacheCanvasDimensions: function() {
	      var dims = this.callSuper('_getCacheCanvasDimensions');
	      var fontSize = this.fontSize;
	      dims.width += fontSize * dims.zoomX;
	      dims.height += fontSize * dims.zoomY;
	      return dims;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      this._setTextStyles(ctx);
	      this._renderTextLinesBackground(ctx);
	      this._renderTextDecoration(ctx, 'underline');
	      this._renderText(ctx);
	      this._renderTextDecoration(ctx, 'overline');
	      this._renderTextDecoration(ctx, 'linethrough');
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderText: function(ctx) {
	      if (this.paintFirst === 'stroke') {
	        this._renderTextStroke(ctx);
	        this._renderTextFill(ctx);
	      }
	      else {
	        this._renderTextFill(ctx);
	        this._renderTextStroke(ctx);
	      }
	    },

	    /**
	     * Set the font parameter of the context with the object properties or with charStyle
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Object} [charStyle] object with font style properties
	     * @param {String} [charStyle.fontFamily] Font Family
	     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )
	     * @param {String} [charStyle.fontWeight] Font weight
	     * @param {String} [charStyle.fontStyle] Font style (italic|normal)
	     */
	    _setTextStyles: function(ctx, charStyle, forMeasuring) {
	      ctx.textBaseline = 'alphabetic';
	      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);
	    },

	    /**
	     * calculate and return the text Width measuring each line.
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @return {Number} Maximum width of fabric.Text object
	     */
	    calcTextWidth: function() {
	      var maxWidth = this.getLineWidth(0);

	      for (var i = 1, len = this._textLines.length; i < len; i++) {
	        var currentLineWidth = this.getLineWidth(i);
	        if (currentLineWidth > maxWidth) {
	          maxWidth = currentLineWidth;
	        }
	      }
	      return maxWidth;
	    },

	    /**
	     * @private
	     * @param {String} method Method name ("fillText" or "strokeText")
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} line Text to render
	     * @param {Number} left Left position of text
	     * @param {Number} top Top position of text
	     * @param {Number} lineIndex Index of a line in a text
	     */
	    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {
	      this._renderChars(method, ctx, line, left, top, lineIndex);
	    },

	    /**
	     * Renders the text background for lines, taking care of style
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextLinesBackground: function(ctx) {
	      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {
	        return;
	      }
	      var lineTopOffset = 0, heightOfLine,
	          lineLeftOffset, originalFill = ctx.fillStyle,
	          line, lastColor,
	          leftOffset = this._getLeftOffset(),
	          topOffset = this._getTopOffset(),
	          boxStart = 0, boxWidth = 0, charBox, currentColor;

	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        heightOfLine = this.getHeightOfLine(i);
	        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {
	          lineTopOffset += heightOfLine;
	          continue;
	        }
	        line = this._textLines[i];
	        lineLeftOffset = this._getLineLeftOffset(i);
	        boxWidth = 0;
	        boxStart = 0;
	        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');
	        for (var j = 0, jlen = line.length; j < jlen; j++) {
	          charBox = this.__charBounds[i][j];
	          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');
	          if (currentColor !== lastColor) {
	            ctx.fillStyle = lastColor;
	            lastColor && ctx.fillRect(
	              leftOffset + lineLeftOffset + boxStart,
	              topOffset + lineTopOffset,
	              boxWidth,
	              heightOfLine / this.lineHeight
	            );
	            boxStart = charBox.left;
	            boxWidth = charBox.width;
	            lastColor = currentColor;
	          }
	          else {
	            boxWidth += charBox.kernedWidth;
	          }
	        }
	        if (currentColor) {
	          ctx.fillStyle = currentColor;
	          ctx.fillRect(
	            leftOffset + lineLeftOffset + boxStart,
	            topOffset + lineTopOffset,
	            boxWidth,
	            heightOfLine / this.lineHeight
	          );
	        }
	        lineTopOffset += heightOfLine;
	      }
	      ctx.fillStyle = originalFill;
	      // if there is text background color no
	      // other shadows should be casted
	      this._removeShadow(ctx);
	    },

	    /**
	     * @private
	     * @param {Object} decl style declaration for cache
	     * @param {String} decl.fontFamily fontFamily
	     * @param {String} decl.fontStyle fontStyle
	     * @param {String} decl.fontWeight fontWeight
	     * @return {Object} reference to cache
	     */
	    getFontCache: function(decl) {
	      var fontFamily = decl.fontFamily.toLowerCase();
	      if (!fabric.charWidthsCache[fontFamily]) {
	        fabric.charWidthsCache[fontFamily] = { };
	      }
	      var cache = fabric.charWidthsCache[fontFamily],
	          cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();
	      if (!cache[cacheProp]) {
	        cache[cacheProp] = { };
	      }
	      return cache[cacheProp];
	    },

	    /**
	     * apply all the character style to canvas for rendering
	     * @private
	     * @param {String} _char
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} [decl]
	     */
	    _applyCharStyles: function(method, ctx, lineIndex, charIndex, styleDeclaration) {

	      this._setFillStyles(ctx, styleDeclaration);
	      this._setStrokeStyles(ctx, styleDeclaration);

	      ctx.font = this._getFontDeclaration(styleDeclaration);
	    },

	    /**
	     * measure and return the width of a single character.
	     * possibly overridden to accommodate different measure logic or
	     * to hook some external lib for character measurement
	     * @private
	     * @param {String} _char, char to be measured
	     * @param {Object} charStyle style of char to be measured
	     * @param {String} [previousChar] previous char
	     * @param {Object} [prevCharStyle] style of previous char
	     */
	    _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {
	      // first i try to return from cache
	      var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),
	          previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,
	          stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,
	          fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;

	      if (previousChar && fontCache[previousChar] !== undefined) {
	        previousWidth = fontCache[previousChar];
	      }
	      if (fontCache[_char] !== undefined) {
	        kernedWidth = width = fontCache[_char];
	      }
	      if (stylesAreEqual && fontCache[couple] !== undefined) {
	        coupleWidth = fontCache[couple];
	        kernedWidth = coupleWidth - previousWidth;
	      }
	      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {
	        var ctx = this.getMeasuringContext();
	        // send a TRUE to specify measuring font size CACHE_FONT_SIZE
	        this._setTextStyles(ctx, charStyle, true);
	      }
	      if (width === undefined) {
	        kernedWidth = width = ctx.measureText(_char).width;
	        fontCache[_char] = width;
	      }
	      if (previousWidth === undefined && stylesAreEqual && previousChar) {
	        previousWidth = ctx.measureText(previousChar).width;
	        fontCache[previousChar] = previousWidth;
	      }
	      if (stylesAreEqual && coupleWidth === undefined) {
	        // we can measure the kerning couple and subtract the width of the previous character
	        coupleWidth = ctx.measureText(couple).width;
	        fontCache[couple] = coupleWidth;
	        kernedWidth = coupleWidth - previousWidth;
	      }
	      return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };
	    },

	    /**
	     * Computes height of character at given position
	     * @param {Number} line the line index number
	     * @param {Number} _char the character index number
	     * @return {Number} fontSize of the character
	     */
	    getHeightOfChar: function(line, _char) {
	      return this.getValueOfPropertyAt(line, _char, 'fontSize');
	    },

	    /**
	     * measure a text line measuring all characters.
	     * @param {Number} lineIndex line number
	     * @return {Number} Line width
	     */
	    measureLine: function(lineIndex) {
	      var lineInfo = this._measureLine(lineIndex);
	      if (this.charSpacing !== 0) {
	        lineInfo.width -= this._getWidthOfCharSpacing();
	      }
	      if (lineInfo.width < 0) {
	        lineInfo.width = 0;
	      }
	      return lineInfo;
	    },

	    /**
	     * measure every grapheme of a line, populating __charBounds
	     * @param {Number} lineIndex
	     * @return {Object} object.width total width of characters
	     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs
	     */
	    _measureLine: function(lineIndex) {
	      var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,
	          graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length);

	      this.__charBounds[lineIndex] = lineBounds;
	      for (i = 0; i < line.length; i++) {
	        grapheme = line[i];
	        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);
	        lineBounds[i] = graphemeInfo;
	        width += graphemeInfo.kernedWidth;
	        prevGrapheme = grapheme;
	      }
	      // this latest bound box represent the last character of the line
	      // to simplify cursor handling in interactive mode.
	      lineBounds[i] = {
	        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,
	        width: 0,
	        kernedWidth: 0,
	        height: this.fontSize
	      };
	      return { width: width, numOfSpaces: numOfSpaces };
	    },

	    /**
	     * Measure and return the info of a single grapheme.
	     * needs the the info of previous graphemes already filled
	     * @private
	     * @param {String} grapheme to be measured
	     * @param {Number} lineIndex index of the line where the char is
	     * @param {Number} charIndex position in the line
	     * @param {String} [prevGrapheme] character preceding the one to be measured
	     */
	    _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {
	      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),
	          prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },
	          info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),
	          kernedWidth = info.kernedWidth,
	          width = info.width, charSpacing;

	      if (this.charSpacing !== 0) {
	        charSpacing = this._getWidthOfCharSpacing();
	        width += charSpacing;
	        kernedWidth += charSpacing;
	      }

	      var box = {
	        width: width,
	        left: 0,
	        height: style.fontSize,
	        kernedWidth: kernedWidth,
	        deltaY: style.deltaY,
	      };
	      if (charIndex > 0 && !skipLeft) {
	        var previousBox = this.__charBounds[lineIndex][charIndex - 1];
	        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;
	      }
	      return box;
	    },

	    /**
	     * Calculate height of line at 'lineIndex'
	     * @param {Number} lineIndex index of line to calculate
	     * @return {Number}
	     */
	    getHeightOfLine: function(lineIndex) {
	      if (this.__lineHeights[lineIndex]) {
	        return this.__lineHeights[lineIndex];
	      }

	      var line = this._textLines[lineIndex],
	          // char 0 is measured before the line cycle because it nneds to char
	          // emptylines
	          maxHeight = this.getHeightOfChar(lineIndex, 0);
	      for (var i = 1, len = line.length; i < len; i++) {
	        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);
	      }

	      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;
	    },

	    /**
	     * Calculate text box height
	     */
	    calcTextHeight: function() {
	      var lineHeight, height = 0;
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        lineHeight = this.getHeightOfLine(i);
	        height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);
	      }
	      return height;
	    },

	    /**
	     * @private
	     * @return {Number} Left offset
	     */
	    _getLeftOffset: function() {
	      return -this.width / 2;
	    },

	    /**
	     * @private
	     * @return {Number} Top offset
	     */
	    _getTopOffset: function() {
	      return -this.height / 2;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} method Method name ("fillText" or "strokeText")
	     */
	    _renderTextCommon: function(ctx, method) {
	      ctx.save();
	      var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset(),
	          offsets = this._applyPatternGradientTransform(ctx, method === 'fillText' ? this.fill : this.stroke);
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        var heightOfLine = this.getHeightOfLine(i),
	            maxHeight = heightOfLine / this.lineHeight,
	            leftOffset = this._getLineLeftOffset(i);
	        this._renderTextLine(
	          method,
	          ctx,
	          this._textLines[i],
	          left + leftOffset - offsets.offsetX,
	          top + lineHeights + maxHeight - offsets.offsetY,
	          i
	        );
	        lineHeights += heightOfLine;
	      }
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextFill: function(ctx) {
	      if (!this.fill && !this.styleHas('fill')) {
	        return;
	      }

	      this._renderTextCommon(ctx, 'fillText');
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextStroke: function(ctx) {
	      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
	        return;
	      }

	      if (this.shadow && !this.shadow.affectStroke) {
	        this._removeShadow(ctx);
	      }

	      ctx.save();
	      this._setLineDash(ctx, this.strokeDashArray);
	      ctx.beginPath();
	      this._renderTextCommon(ctx, 'strokeText');
	      ctx.closePath();
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} line Content of the line
	     * @param {Number} left
	     * @param {Number} top
	     * @param {Number} lineIndex
	     * @param {Number} charOffset
	     */
	    _renderChars: function(method, ctx, line, left, top, lineIndex) {
	      // set proper line offset
	      var lineHeight = this.getHeightOfLine(lineIndex),
	          isJustify = this.textAlign.indexOf('justify') !== -1,
	          actualStyle,
	          nextStyle,
	          charsToRender = '',
	          charBox,
	          boxWidth = 0,
	          timeToRender,
	          shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex);

	      ctx.save();
	      top -= lineHeight * this._fontSizeFraction / this.lineHeight;
	      if (shortCut) {
	        // render all the line in one pass without checking
	        this._renderChar(method, ctx, lineIndex, 0, this.textLines[lineIndex], left, top, lineHeight);
	        ctx.restore();
	        return;
	      }
	      for (var i = 0, len = line.length - 1; i <= len; i++) {
	        timeToRender = i === len || this.charSpacing;
	        charsToRender += line[i];
	        charBox = this.__charBounds[lineIndex][i];
	        if (boxWidth === 0) {
	          left += charBox.kernedWidth - charBox.width;
	          boxWidth += charBox.width;
	        }
	        else {
	          boxWidth += charBox.kernedWidth;
	        }
	        if (isJustify && !timeToRender) {
	          if (this._reSpaceAndTab.test(line[i])) {
	            timeToRender = true;
	          }
	        }
	        if (!timeToRender) {
	          // if we have charSpacing, we render char by char
	          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
	          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
	          timeToRender = this._hasStyleChanged(actualStyle, nextStyle);
	        }
	        if (timeToRender) {
	          this._renderChar(method, ctx, lineIndex, i, charsToRender, left, top, lineHeight);
	          charsToRender = '';
	          actualStyle = nextStyle;
	          left += boxWidth;
	          boxWidth = 0;
	        }
	      }
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {String} _char
	     * @param {Number} left Left coordinate
	     * @param {Number} top Top coordinate
	     * @param {Number} lineHeight Height of the line
	     */
	    _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {
	      var decl = this._getStyleDeclaration(lineIndex, charIndex),
	          fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),
	          shouldFill = method === 'fillText' && fullDecl.fill,
	          shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;

	      if (!shouldStroke && !shouldFill) {
	        return;
	      }
	      decl && ctx.save();

	      this._applyCharStyles(method, ctx, lineIndex, charIndex, fullDecl);

	      if (decl && decl.textBackgroundColor) {
	        this._removeShadow(ctx);
	      }
	      if (decl && decl.deltaY) {
	        top += decl.deltaY;
	      }

	      shouldFill && ctx.fillText(_char, left, top);
	      shouldStroke && ctx.strokeText(_char, left, top);
	      decl && ctx.restore();
	    },

	    /**
	     * Turns the character into a 'superior figure' (i.e. 'superscript')
	     * @param {Number} start selection start
	     * @param {Number} end selection end
	     * @returns {fabric.Text} thisArg
	     * @chainable
	     */
	    setSuperscript: function(start, end) {
	      return this._setScript(start, end, this.superscript);
	    },

	    /**
	     * Turns the character into an 'inferior figure' (i.e. 'subscript')
	     * @param {Number} start selection start
	     * @param {Number} end selection end
	     * @returns {fabric.Text} thisArg
	     * @chainable
	     */
	    setSubscript: function(start, end) {
	      return this._setScript(start, end, this.subscript);
	    },

	    /**
	     * Applies 'schema' at given position
	     * @private
	     * @param {Number} start selection start
	     * @param {Number} end selection end
	     * @param {Number} schema
	     * @returns {fabric.Text} thisArg
	     * @chainable
	     */
	    _setScript: function(start, end, schema) {
	      var loc = this.get2DCursorLocation(start, true),
	          fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),
	          dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),
	          style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };
	      this.setSelectionStyles(style, start, end);
	      return this;
	    },

	    /**
	     * @private
	     * @param {Object} prevStyle
	     * @param {Object} thisStyle
	     */
	    _hasStyleChanged: function(prevStyle, thisStyle) {
	      return prevStyle.fill !== thisStyle.fill ||
	              prevStyle.stroke !== thisStyle.stroke ||
	              prevStyle.strokeWidth !== thisStyle.strokeWidth ||
	              prevStyle.fontSize !== thisStyle.fontSize ||
	              prevStyle.fontFamily !== thisStyle.fontFamily ||
	              prevStyle.fontWeight !== thisStyle.fontWeight ||
	              prevStyle.fontStyle !== thisStyle.fontStyle ||
	              prevStyle.deltaY !== thisStyle.deltaY;
	    },

	    /**
	     * @private
	     * @param {Object} prevStyle
	     * @param {Object} thisStyle
	     */
	    _hasStyleChangedForSvg: function(prevStyle, thisStyle) {
	      return this._hasStyleChanged(prevStyle, thisStyle) ||
	        prevStyle.overline !== thisStyle.overline ||
	        prevStyle.underline !== thisStyle.underline ||
	        prevStyle.linethrough !== thisStyle.linethrough;
	    },

	    /**
	     * @private
	     * @param {Number} lineIndex index text line
	     * @return {Number} Line left offset
	     */
	    _getLineLeftOffset: function(lineIndex) {
	      var lineWidth = this.getLineWidth(lineIndex);
	      if (this.textAlign === 'center') {
	        return (this.width - lineWidth) / 2;
	      }
	      if (this.textAlign === 'right') {
	        return this.width - lineWidth;
	      }
	      if (this.textAlign === 'justify-center' && this.isEndOfWrapping(lineIndex)) {
	        return (this.width - lineWidth) / 2;
	      }
	      if (this.textAlign === 'justify-right' && this.isEndOfWrapping(lineIndex)) {
	        return this.width - lineWidth;
	      }
	      return 0;
	    },

	    /**
	     * @private
	     */
	    _clearCache: function() {
	      this.__lineWidths = [];
	      this.__lineHeights = [];
	      this.__charBounds = [];
	    },

	    /**
	     * @private
	     */
	    _shouldClearDimensionCache: function() {
	      var shouldClear = this._forceClearCache;
	      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));
	      if (shouldClear) {
	        this.dirty = true;
	        this._forceClearCache = false;
	      }
	      return shouldClear;
	    },

	    /**
	     * Measure a single line given its index. Used to calculate the initial
	     * text bounding box. The values are calculated and stored in __lineWidths cache.
	     * @private
	     * @param {Number} lineIndex line number
	     * @return {Number} Line width
	     */
	    getLineWidth: function(lineIndex) {
	      if (this.__lineWidths[lineIndex]) {
	        return this.__lineWidths[lineIndex];
	      }

	      var width, line = this._textLines[lineIndex], lineInfo;

	      if (line === '') {
	        width = 0;
	      }
	      else {
	        lineInfo = this.measureLine(lineIndex);
	        width = lineInfo.width;
	      }
	      this.__lineWidths[lineIndex] = width;
	      return width;
	    },

	    _getWidthOfCharSpacing: function() {
	      if (this.charSpacing !== 0) {
	        return this.fontSize * this.charSpacing / 1000;
	      }
	      return 0;
	    },

	    /**
	     * Retrieves the value of property at given character position
	     * @param {Number} lineIndex the line number
	     * @param {Number} charIndex the charater number
	     * @param {String} property the property name
	     * @returns the value of 'property'
	     */
	    getValueOfPropertyAt: function(lineIndex, charIndex, property) {
	      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);
	      if (charStyle && typeof charStyle[property] !== 'undefined') {
	        return charStyle[property];
	      }
	      return this[property];
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextDecoration: function(ctx, type) {
	      if (!this[type] && !this.styleHas(type)) {
	        return;
	      }
	      var heightOfLine, size, _size,
	          lineLeftOffset, dy, _dy,
	          line, lastDecoration,
	          leftOffset = this._getLeftOffset(),
	          topOffset = this._getTopOffset(), top,
	          boxStart, boxWidth, charBox, currentDecoration,
	          maxHeight, currentFill, lastFill,
	          charSpacing = this._getWidthOfCharSpacing();

	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        heightOfLine = this.getHeightOfLine(i);
	        if (!this[type] && !this.styleHas(type, i)) {
	          topOffset += heightOfLine;
	          continue;
	        }
	        line = this._textLines[i];
	        maxHeight = heightOfLine / this.lineHeight;
	        lineLeftOffset = this._getLineLeftOffset(i);
	        boxStart = 0;
	        boxWidth = 0;
	        lastDecoration = this.getValueOfPropertyAt(i, 0, type);
	        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');
	        top = topOffset + maxHeight * (1 - this._fontSizeFraction);
	        size = this.getHeightOfChar(i, 0);
	        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');
	        for (var j = 0, jlen = line.length; j < jlen; j++) {
	          charBox = this.__charBounds[i][j];
	          currentDecoration = this.getValueOfPropertyAt(i, j, type);
	          currentFill = this.getValueOfPropertyAt(i, j, 'fill');
	          _size = this.getHeightOfChar(i, j);
	          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');
	          if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) &&
	              boxWidth > 0) {
	            ctx.fillStyle = lastFill;
	            lastDecoration && lastFill && ctx.fillRect(
	              leftOffset + lineLeftOffset + boxStart,
	              top + this.offsets[type] * size + dy,
	              boxWidth,
	              this.fontSize / 15
	            );
	            boxStart = charBox.left;
	            boxWidth = charBox.width;
	            lastDecoration = currentDecoration;
	            lastFill = currentFill;
	            size = _size;
	            dy = _dy;
	          }
	          else {
	            boxWidth += charBox.kernedWidth;
	          }
	        }
	        ctx.fillStyle = currentFill;
	        currentDecoration && currentFill && ctx.fillRect(
	          leftOffset + lineLeftOffset + boxStart,
	          top + this.offsets[type] * size + dy,
	          boxWidth - charSpacing,
	          this.fontSize / 15
	        );
	        topOffset += heightOfLine;
	      }
	      // if there is text background color no
	      // other shadows should be casted
	      this._removeShadow(ctx);
	    },

	    /**
	     * return font declaration string for canvas context
	     * @param {Object} [styleObject] object
	     * @returns {String} font declaration formatted for canvas context.
	     */
	    _getFontDeclaration: function(styleObject, forMeasuring) {
	      var style = styleObject || this, family = this.fontFamily,
	          fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;
	      var fontFamily = family === undefined ||
	      family.indexOf('\'') > -1 || family.indexOf(',') > -1 ||
	      family.indexOf('"') > -1 || fontIsGeneric
	        ? style.fontFamily : '"' + style.fontFamily + '"';
	      return [
	        // node-canvas needs "weight style", while browsers need "style weight"
	        // verify if this can be fixed in JSDOM
	        (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),
	        (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),
	        forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',
	        fontFamily
	      ].join(' ');
	    },

	    /**
	     * Renders text instance on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    render: function(ctx) {
	      // do not render if object is not visible
	      if (!this.visible) {
	        return;
	      }
	      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
	        return;
	      }
	      if (this._shouldClearDimensionCache()) {
	        this.initDimensions();
	      }
	      this.callSuper('render', ctx);
	    },

	    /**
	     * Returns the text as an array of lines.
	     * @param {String} text text to split
	     * @returns {Array} Lines in the text
	     */
	    _splitTextIntoLines: function(text) {
	      var lines = text.split(this._reNewline),
	          newLines = new Array(lines.length),
	          newLine = ['\n'],
	          newText = [];
	      for (var i = 0; i < lines.length; i++) {
	        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);
	        newText = newText.concat(newLines[i], newLine);
	      }
	      newText.pop();
	      return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var additionalProperties = [
	        'text',
	        'fontSize',
	        'fontWeight',
	        'fontFamily',
	        'fontStyle',
	        'lineHeight',
	        'underline',
	        'overline',
	        'linethrough',
	        'textAlign',
	        'textBackgroundColor',
	        'charSpacing',
	      ].concat(propertiesToInclude);
	      var obj = this.callSuper('toObject', additionalProperties);
	      obj.styles = clone(this.styles, true);
	      return obj;
	    },

	    /**
	     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
	     * @param {String|Object} key Property name or object (if object, iterate over the object properties)
	     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    set: function(key, value) {
	      this.callSuper('set', key, value);
	      var needsDims = false;
	      if (typeof key === 'object') {
	        for (var _key in key) {
	          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;
	        }
	      }
	      else {
	        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;
	      }
	      if (needsDims) {
	        this.initDimensions();
	        this.setCoords();
	      }
	      return this;
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})
	   * @static
	   * @memberOf fabric.Text
	   * @see: http://www.w3.org/TR/SVG/text.html#TextElement
	   */
	  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(
	    'x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));

	  /**
	   * Default SVG font size
	   * @static
	   * @memberOf fabric.Text
	   */
	  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;

	  /**
	   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
	   * @static
	   * @memberOf fabric.Text
	   * @param {SVGElement} element Element to parse
	   * @param {Function} callback callback function invoked after parsing
	   * @param {Object} [options] Options object
	   */
	  fabric.Text.fromElement = function(element, callback, options) {
	    if (!element) {
	      return callback(null);
	    }

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),
	        parsedAnchor = parsedAttributes.textAnchor || 'left';
	    options = fabric.util.object.extend((options ? clone(options) : { }), parsedAttributes);

	    options.top = options.top || 0;
	    options.left = options.left || 0;
	    if (parsedAttributes.textDecoration) {
	      var textDecoration = parsedAttributes.textDecoration;
	      if (textDecoration.indexOf('underline') !== -1) {
	        options.underline = true;
	      }
	      if (textDecoration.indexOf('overline') !== -1) {
	        options.overline = true;
	      }
	      if (textDecoration.indexOf('line-through') !== -1) {
	        options.linethrough = true;
	      }
	      delete options.textDecoration;
	    }
	    if ('dx' in parsedAttributes) {
	      options.left += parsedAttributes.dx;
	    }
	    if ('dy' in parsedAttributes) {
	      options.top += parsedAttributes.dy;
	    }
	    if (!('fontSize' in options)) {
	      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
	    }

	    var textContent = '';

	    // The XML is not properly parsed in IE9 so a workaround to get
	    // textContent is through firstChild.data. Another workaround would be
	    // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)
	    if (!('textContent' in element)) {
	      if ('firstChild' in element && element.firstChild !== null) {
	        if ('data' in element.firstChild && element.firstChild.data !== null) {
	          textContent = element.firstChild.data;
	        }
	      }
	    }
	    else {
	      textContent = element.textContent;
	    }

	    textContent = textContent.replace(/^\s+|\s+$|\n+/g, '').replace(/\s+/g, ' ');
	    var originalStrokeWidth = options.strokeWidth;
	    options.strokeWidth = 0;

	    var text = new fabric.Text(textContent, options),
	        textHeightScaleFactor = text.getScaledHeight() / text.height,
	        lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,
	        scaledDiff = lineHeightDiff * textHeightScaleFactor,
	        textHeight = text.getScaledHeight() + scaledDiff,
	        offX = 0;
	    /*
	      Adjust positioning:
	        x/y attributes in SVG correspond to the bottom-left corner of text bounding box
	        fabric output by default at top, left.
	    */
	    if (parsedAnchor === 'center') {
	      offX = text.getScaledWidth() / 2;
	    }
	    if (parsedAnchor === 'right') {
	      offX = text.getScaledWidth();
	    }
	    text.set({
	      left: text.left - offX,
	      top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,
	      strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1,
	    });
	    callback(text);
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Text instance from an object representation
	   * @static
	   * @memberOf fabric.Text
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created
	   */
	  fabric.Text.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Text', object, callback, 'text');
	  };

	  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];

	  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);

	})( exports );


	(function() {
	  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {
	    /**
	     * Returns true if object has no styling or no styling in a line
	     * @param {Number} lineIndex , lineIndex is on wrapped lines.
	     * @return {Boolean}
	     */
	    isEmptyStyles: function(lineIndex) {
	      if (!this.styles) {
	        return true;
	      }
	      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {
	        return true;
	      }
	      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };
	      for (var p1 in obj) {
	        for (var p2 in obj[p1]) {
	          // eslint-disable-next-line no-unused-vars
	          for (var p3 in obj[p1][p2]) {
	            return false;
	          }
	        }
	      }
	      return true;
	    },

	    /**
	     * Returns true if object has a style property or has it ina specified line
	     * This function is used to detect if a text will use a particular property or not.
	     * @param {String} property to check for
	     * @param {Number} lineIndex to check the style on
	     * @return {Boolean}
	     */
	    styleHas: function(property, lineIndex) {
	      if (!this.styles || !property || property === '') {
	        return false;
	      }
	      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {
	        return false;
	      }
	      var obj = typeof lineIndex === 'undefined' ? this.styles : { 0: this.styles[lineIndex] };
	      // eslint-disable-next-line
	      for (var p1 in obj) {
	        // eslint-disable-next-line
	        for (var p2 in obj[p1]) {
	          if (typeof obj[p1][p2][property] !== 'undefined') {
	            return true;
	          }
	        }
	      }
	      return false;
	    },

	    /**
	     * Check if characters in a text have a value for a property
	     * whose value matches the textbox's value for that property.  If so,
	     * the character-level property is deleted.  If the character
	     * has no other properties, then it is also deleted.  Finally,
	     * if the line containing that character has no other characters
	     * then it also is deleted.
	     *
	     * @param {string} property The property to compare between characters and text.
	     */
	    cleanStyle: function(property) {
	      if (!this.styles || !property || property === '') {
	        return false;
	      }
	      var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,
	          allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;
	      // eslint-disable-next-line
	      for (var p1 in obj) {
	        letterCount = 0;
	        // eslint-disable-next-line
	        for (var p2 in obj[p1]) {
	          var styleObject = obj[p1][p2],
	              stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);

	          stylesCount++;

	          if (stylePropertyHasBeenSet) {
	            if (!stylePropertyValue) {
	              stylePropertyValue = styleObject[property];
	            }
	            else if (styleObject[property] !== stylePropertyValue) {
	              allStyleObjectPropertiesMatch = false;
	            }

	            if (styleObject[property] === this[property]) {
	              delete styleObject[property];
	            }
	          }
	          else {
	            allStyleObjectPropertiesMatch = false;
	          }

	          if (Object.keys(styleObject).length !== 0) {
	            letterCount++;
	          }
	          else {
	            delete obj[p1][p2];
	          }
	        }

	        if (letterCount === 0) {
	          delete obj[p1];
	        }
	      }
	      // if every grapheme has the same style set then
	      // delete those styles and set it on the parent
	      for (var i = 0; i < this._textLines.length; i++) {
	        graphemeCount += this._textLines[i].length;
	      }
	      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {
	        this[property] = stylePropertyValue;
	        this.removeStyle(property);
	      }
	    },

	    /**
	     * Remove a style property or properties from all individual character styles
	     * in a text object.  Deletes the character style object if it contains no other style
	     * props.  Deletes a line style object if it contains no other character styles.
	     *
	     * @param {String} props The property to remove from character styles.
	     */
	    removeStyle: function(property) {
	      if (!this.styles || !property || property === '') {
	        return;
	      }
	      var obj = this.styles, line, lineNum, charNum;
	      for (lineNum in obj) {
	        line = obj[lineNum];
	        for (charNum in line) {
	          delete line[charNum][property];
	          if (Object.keys(line[charNum]).length === 0) {
	            delete line[charNum];
	          }
	        }
	        if (Object.keys(line).length === 0) {
	          delete obj[lineNum];
	        }
	      }
	    },

	    /**
	     * @private
	     */
	    _extendStyles: function(index, styles) {
	      var loc = this.get2DCursorLocation(index);

	      if (!this._getLineStyle(loc.lineIndex)) {
	        this._setLineStyle(loc.lineIndex);
	      }

	      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
	        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
	      }

	      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);
	    },

	    /**
	     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
	     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
	     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. usefull to manage styles.
	     */
	    get2DCursorLocation: function(selectionStart, skipWrapping) {
	      if (typeof selectionStart === 'undefined') {
	        selectionStart = this.selectionStart;
	      }
	      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,
	          len = lines.length;
	      for (var i = 0; i < len; i++) {
	        if (selectionStart <= lines[i].length) {
	          return {
	            lineIndex: i,
	            charIndex: selectionStart
	          };
	        }
	        selectionStart -= lines[i].length + this.missingNewlineOffset(i);
	      }
	      return {
	        lineIndex: i - 1,
	        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart
	      };
	    },

	    /**
	     * Gets style of a current selection/cursor (at the start position)
	     * if startIndex or endIndex are not provided, slectionStart or selectionEnd will be used.
	     * @param {Number} [startIndex] Start index to get styles at
	     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
	     * @param {Boolean} [complete] get full style or not
	     * @return {Array} styles an array with one, zero or more Style objects
	     */
	    getSelectionStyles: function(startIndex, endIndex, complete) {
	      if (typeof startIndex === 'undefined') {
	        startIndex = this.selectionStart || 0;
	      }
	      if (typeof endIndex === 'undefined') {
	        endIndex = this.selectionEnd || startIndex;
	      }
	      var styles = [];
	      for (var i = startIndex; i < endIndex; i++) {
	        styles.push(this.getStyleAtPosition(i, complete));
	      }
	      return styles;
	    },

	    /**
	     * Gets style of a current selection/cursor position
	     * @param {Number} position  to get styles at
	     * @param {Boolean} [complete] full style if true
	     * @return {Object} style Style object at a specified index
	     * @private
	     */
	    getStyleAtPosition: function(position, complete) {
	      var loc = this.get2DCursorLocation(position),
	          style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :
	            this._getStyleDeclaration(loc.lineIndex, loc.charIndex);
	      return style || {};
	    },

	    /**
	     * Sets style of a current selection, if no selection exist, do not set anything.
	     * @param {Object} [styles] Styles object
	     * @param {Number} [startIndex] Start index to get styles at
	     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    setSelectionStyles: function(styles, startIndex, endIndex) {
	      if (typeof startIndex === 'undefined') {
	        startIndex = this.selectionStart || 0;
	      }
	      if (typeof endIndex === 'undefined') {
	        endIndex = this.selectionEnd || startIndex;
	      }
	      for (var i = startIndex; i < endIndex; i++) {
	        this._extendStyles(i, styles);
	      }
	      /* not included in _extendStyles to avoid clearing cache more than once */
	      this._forceClearCache = true;
	      return this;
	    },

	    /**
	     * get the reference, not a clone, of the style object for a given character
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @return {Object} style object
	     */
	    _getStyleDeclaration: function(lineIndex, charIndex) {
	      var lineStyle = this.styles && this.styles[lineIndex];
	      if (!lineStyle) {
	        return null;
	      }
	      return lineStyle[charIndex];
	    },

	    /**
	     * return a new object that contains all the style property for a character
	     * the object returned is newly created
	     * @param {Number} lineIndex of the line where the character is
	     * @param {Number} charIndex position of the character on the line
	     * @return {Object} style object
	     */
	    getCompleteStyleDeclaration: function(lineIndex, charIndex) {
	      var style = this._getStyleDeclaration(lineIndex, charIndex) || { },
	          styleObject = { }, prop;
	      for (var i = 0; i < this._styleProperties.length; i++) {
	        prop = this._styleProperties[i];
	        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];
	      }
	      return styleObject;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} style
	     * @private
	     */
	    _setStyleDeclaration: function(lineIndex, charIndex, style) {
	      this.styles[lineIndex][charIndex] = style;
	    },

	    /**
	     *
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @private
	     */
	    _deleteStyleDeclaration: function(lineIndex, charIndex) {
	      delete this.styles[lineIndex][charIndex];
	    },

	    /**
	     * @param {Number} lineIndex
	     * @return {Boolean} if the line exists or not
	     * @private
	     */
	    _getLineStyle: function(lineIndex) {
	      return !!this.styles[lineIndex];
	    },

	    /**
	     * Set the line style to an empty object so that is initialized
	     * @param {Number} lineIndex
	     * @private
	     */
	    _setLineStyle: function(lineIndex) {
	      this.styles[lineIndex] = {};
	    },

	    /**
	     * @param {Number} lineIndex
	     * @private
	     */
	    _deleteLineStyle: function(lineIndex) {
	      delete this.styles[lineIndex];
	    }
	  });
	})();


	(function() {

	  function parseDecoration(object) {
	    if (object.textDecoration) {
	      object.textDecoration.indexOf('underline') > -1 && (object.underline = true);
	      object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);
	      object.textDecoration.indexOf('overline') > -1 && (object.overline = true);
	      delete object.textDecoration;
	    }
	  }

	  /**
	   * IText class (introduced in <b>v1.4</b>) Events are also fired with "text:"
	   * prefix when observing canvas.
	   * @class fabric.IText
	   * @extends fabric.Text
	   * @mixes fabric.Observable
	   *
	   * @fires changed
	   * @fires selection:changed
	   * @fires editing:entered
	   * @fires editing:exited
	   *
	   * @return {fabric.IText} thisArg
	   * @see {@link fabric.IText#initialize} for constructor definition
	   *
	   * <p>Supported key combinations:</p>
	   * <pre>
	   *   Move cursor:                    left, right, up, down
	   *   Select character:               shift + left, shift + right
	   *   Select text vertically:         shift + up, shift + down
	   *   Move cursor by word:            alt + left, alt + right
	   *   Select words:                   shift + alt + left, shift + alt + right
	   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end
	   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end
	   *   Jump to start/end of text:      cmd + up, cmd + down
	   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown
	   *   Delete character:               backspace
	   *   Delete word:                    alt + backspace
	   *   Delete line:                    cmd + backspace
	   *   Forward delete:                 delete
	   *   Copy text:                      ctrl/cmd + c
	   *   Paste text:                     ctrl/cmd + v
	   *   Cut text:                       ctrl/cmd + x
	   *   Select entire text:             ctrl/cmd + a
	   *   Quit editing                    tab or esc
	   * </pre>
	   *
	   * <p>Supported mouse/touch combination</p>
	   * <pre>
	   *   Position cursor:                click/touch
	   *   Create selection:               click/touch & drag
	   *   Create selection:               click & shift + click
	   *   Select word:                    double click
	   *   Select line:                    triple click
	   * </pre>
	   */
	  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'i-text',

	    /**
	     * Index where text selection starts (or where cursor is when there is no selection)
	     * @type Number
	     * @default
	     */
	    selectionStart: 0,

	    /**
	     * Index where text selection ends
	     * @type Number
	     * @default
	     */
	    selectionEnd: 0,

	    /**
	     * Color of text selection
	     * @type String
	     * @default
	     */
	    selectionColor: 'rgba(17,119,255,0.3)',

	    /**
	     * Indicates whether text is in editing mode
	     * @type Boolean
	     * @default
	     */
	    isEditing: false,

	    /**
	     * Indicates whether a text can be edited
	     * @type Boolean
	     * @default
	     */
	    editable: true,

	    /**
	     * Border color of text object while it's in editing mode
	     * @type String
	     * @default
	     */
	    editingBorderColor: 'rgba(102,153,255,0.25)',

	    /**
	     * Width of cursor (in px)
	     * @type Number
	     * @default
	     */
	    cursorWidth: 2,

	    /**
	     * Color of default cursor (when not overwritten by character style)
	     * @type String
	     * @default
	     */
	    cursorColor: '#333',

	    /**
	     * Delay between cursor blink (in ms)
	     * @type Number
	     * @default
	     */
	    cursorDelay: 1000,

	    /**
	     * Duration of cursor fadein (in ms)
	     * @type Number
	     * @default
	     */
	    cursorDuration: 600,

	    /**
	     * Indicates whether internal text char widths can be cached
	     * @type Boolean
	     * @default
	     */
	    caching: true,

	    /**
	     * @private
	     */
	    _reSpace: /\s|\n/,

	    /**
	     * @private
	     */
	    _currentCursorOpacity: 0,

	    /**
	     * @private
	     */
	    _selectionDirection: null,

	    /**
	     * @private
	     */
	    _abortCursorAnimation: false,

	    /**
	     * @private
	     */
	    __widthOfSpace: [],

	    /**
	     * Helps determining when the text is in composition, so that the cursor
	     * rendering is altered.
	     */
	    inCompositionMode: false,

	    /**
	     * Constructor
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.IText} thisArg
	     */
	    initialize: function(text, options) {
	      this.callSuper('initialize', text, options);
	      this.initBehavior();
	    },

	    /**
	     * Sets selection start (left boundary of a selection)
	     * @param {Number} index Index to set selection start to
	     */
	    setSelectionStart: function(index) {
	      index = Math.max(index, 0);
	      this._updateAndFire('selectionStart', index);
	    },

	    /**
	     * Sets selection end (right boundary of a selection)
	     * @param {Number} index Index to set selection end to
	     */
	    setSelectionEnd: function(index) {
	      index = Math.min(index, this.text.length);
	      this._updateAndFire('selectionEnd', index);
	    },

	    /**
	     * @private
	     * @param {String} property 'selectionStart' or 'selectionEnd'
	     * @param {Number} index new position of property
	     */
	    _updateAndFire: function(property, index) {
	      if (this[property] !== index) {
	        this._fireSelectionChanged();
	        this[property] = index;
	      }
	      this._updateTextarea();
	    },

	    /**
	     * Fires the even of selection changed
	     * @private
	     */
	    _fireSelectionChanged: function() {
	      this.fire('selection:changed');
	      this.canvas && this.canvas.fire('text:selection:changed', { target: this });
	    },

	    /**
	     * Initialize text dimensions. Render all text on given context
	     * or on a offscreen canvas to get the text width with measureText.
	     * Updates this.width and this.height with the proper values.
	     * Does not return dimensions.
	     * @private
	     */
	    initDimensions: function() {
	      this.isEditing && this.initDelayedCursor();
	      this.clearContextTop();
	      this.callSuper('initDimensions');
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    render: function(ctx) {
	      this.clearContextTop();
	      this.callSuper('render', ctx);
	      // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor
	      // the correct position but not at every cursor animation.
	      this.cursorOffsetCache = { };
	      this.renderCursorOrSelection();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      this.callSuper('_render', ctx);
	    },

	    /**
	     * Prepare and clean the contextTop
	     */
	    clearContextTop: function(skipRestore) {
	      if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
	        return;
	      }
	      var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;
	      ctx.save();
	      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	      this.transform(ctx);
	      this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);
	      this._clearTextArea(ctx);
	      skipRestore || ctx.restore();
	    },

	    /**
	     * Renders cursor or selection (depending on what exists)
	     * it does on the contextTop. If contextTop is not available, do nothing.
	     */
	    renderCursorOrSelection: function() {
	      if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
	        return;
	      }
	      var boundaries = this._getCursorBoundaries(),
	          ctx = this.canvas.contextTop;
	      this.clearContextTop(true);
	      if (this.selectionStart === this.selectionEnd) {
	        this.renderCursor(boundaries, ctx);
	      }
	      else {
	        this.renderSelection(boundaries, ctx);
	      }
	      ctx.restore();
	    },

	    _clearTextArea: function(ctx) {
	      // we add 4 pixel, to be sure to do not leave any pixel out
	      var width = this.width + 4, height = this.height + 4;
	      ctx.clearRect(-width / 2, -height / 2, width, height);
	    },

	    /**
	     * Returns cursor boundaries (left, top, leftOffset, topOffset)
	     * @private
	     * @param {Array} chars Array of characters
	     * @param {String} typeOfBoundaries
	     */
	    _getCursorBoundaries: function(position) {

	      // left/top are left/top of entire text box
	      // leftOffset/topOffset are offset from that left/top point of a text box

	      if (typeof position === 'undefined') {
	        position = this.selectionStart;
	      }

	      var left = this._getLeftOffset(),
	          top = this._getTopOffset(),
	          offsets = this._getCursorBoundariesOffsets(position);

	      return {
	        left: left,
	        top: top,
	        leftOffset: offsets.left,
	        topOffset: offsets.top
	      };
	    },

	    /**
	     * @private
	     */
	    _getCursorBoundariesOffsets: function(position) {
	      if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {
	        return this.cursorOffsetCache;
	      }
	      var lineLeftOffset,
	          lineIndex,
	          charIndex,
	          topOffset = 0,
	          leftOffset = 0,
	          boundaries,
	          cursorPosition = this.get2DCursorLocation(position);
	      charIndex = cursorPosition.charIndex;
	      lineIndex = cursorPosition.lineIndex;
	      for (var i = 0; i < lineIndex; i++) {
	        topOffset += this.getHeightOfLine(i);
	      }
	      lineLeftOffset = this._getLineLeftOffset(lineIndex);
	      var bound = this.__charBounds[lineIndex][charIndex];
	      bound && (leftOffset = bound.left);
	      if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {
	        leftOffset -= this._getWidthOfCharSpacing();
	      }
	      boundaries = {
	        top: topOffset,
	        left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),
	      };
	      this.cursorOffsetCache = boundaries;
	      return this.cursorOffsetCache;
	    },

	    /**
	     * Renders cursor
	     * @param {Object} boundaries
	     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
	     */
	    renderCursor: function(boundaries, ctx) {
	      var cursorLocation = this.get2DCursorLocation(),
	          lineIndex = cursorLocation.lineIndex,
	          charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,
	          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),
	          multiplier = this.scaleX * this.canvas.getZoom(),
	          cursorWidth = this.cursorWidth / multiplier,
	          topOffset = boundaries.topOffset,
	          dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');

	      topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight
	        - charHeight * (1 - this._fontSizeFraction);

	      if (this.inCompositionMode) {
	        this.renderSelection(boundaries, ctx);
	      }

	      ctx.fillStyle = this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');
	      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;
	      ctx.fillRect(
	        boundaries.left + boundaries.leftOffset - cursorWidth / 2,
	        topOffset + boundaries.top + dy,
	        cursorWidth,
	        charHeight);
	    },

	    /**
	     * Renders text selection
	     * @param {Object} boundaries Object with left/top/leftOffset/topOffset
	     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
	     */
	    renderSelection: function(boundaries, ctx) {

	      var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,
	          selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,
	          isJustify = this.textAlign.indexOf('justify') !== -1,
	          start = this.get2DCursorLocation(selectionStart),
	          end = this.get2DCursorLocation(selectionEnd),
	          startLine = start.lineIndex,
	          endLine = end.lineIndex,
	          startChar = start.charIndex < 0 ? 0 : start.charIndex,
	          endChar = end.charIndex < 0 ? 0 : end.charIndex;

	      for (var i = startLine; i <= endLine; i++) {
	        var lineOffset = this._getLineLeftOffset(i) || 0,
	            lineHeight = this.getHeightOfLine(i),
	            realLineHeight = 0, boxStart = 0, boxEnd = 0;

	        if (i === startLine) {
	          boxStart = this.__charBounds[startLine][startChar].left;
	        }
	        if (i >= startLine && i < endLine) {
	          boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?
	        }
	        else if (i === endLine) {
	          if (endChar === 0) {
	            boxEnd = this.__charBounds[endLine][endChar].left;
	          }
	          else {
	            var charSpacing = this._getWidthOfCharSpacing();
	            boxEnd = this.__charBounds[endLine][endChar - 1].left
	              + this.__charBounds[endLine][endChar - 1].width - charSpacing;
	          }
	        }
	        realLineHeight = lineHeight;
	        if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {
	          lineHeight /= this.lineHeight;
	        }
	        if (this.inCompositionMode) {
	          ctx.fillStyle = this.compositionColor || 'black';
	          ctx.fillRect(
	            boundaries.left + lineOffset + boxStart,
	            boundaries.top + boundaries.topOffset + lineHeight,
	            boxEnd - boxStart,
	            1);
	        }
	        else {
	          ctx.fillStyle = this.selectionColor;
	          ctx.fillRect(
	            boundaries.left + lineOffset + boxStart,
	            boundaries.top + boundaries.topOffset,
	            boxEnd - boxStart,
	            lineHeight);
	        }


	        boundaries.topOffset += realLineHeight;
	      }
	    },

	    /**
	     * High level function to know the height of the cursor.
	     * the currentChar is the one that precedes the cursor
	     * Returns fontSize of char at the current cursor
	     * @return {Number} Character font size
	     */
	    getCurrentCharFontSize: function() {
	      var cp = this._getCurrentCharIndex();
	      return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');
	    },

	    /**
	     * High level function to know the color of the cursor.
	     * the currentChar is the one that precedes the cursor
	     * Returns color (fill) of char at the current cursor
	     * @return {String} Character color (fill)
	     */
	    getCurrentCharColor: function() {
	      var cp = this._getCurrentCharIndex();
	      return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');
	    },

	    /**
	     * Returns the cursor position for the getCurrent.. functions
	     * @private
	     */
	    _getCurrentCharIndex: function() {
	      var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),
	          charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;
	      return { l: cursorPosition.lineIndex, c: charIndex };
	    }
	  });

	  /**
	   * Returns fabric.IText instance from an object representation
	   * @static
	   * @memberOf fabric.IText
	   * @param {Object} object Object to create an instance from
	   * @param {function} [callback] invoked with new instance as argument
	   */
	  fabric.IText.fromObject = function(object, callback) {
	    parseDecoration(object);
	    if (object.styles) {
	      for (var i in object.styles) {
	        for (var j in object.styles[i]) {
	          parseDecoration(object.styles[i][j]);
	        }
	      }
	    }
	    fabric.Object._fromObject('IText', object, callback, 'text');
	  };
	})();


	(function() {

	  var clone = fabric.util.object.clone;

	  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {

	    /**
	     * Initializes all the interactive behavior of IText
	     */
	    initBehavior: function() {
	      this.initAddedHandler();
	      this.initRemovedHandler();
	      this.initCursorSelectionHandlers();
	      this.initDoubleClickSimulation();
	      this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
	    },

	    onDeselect: function() {
	      this.isEditing && this.exitEditing();
	      this.selected = false;
	    },

	    /**
	     * Initializes "added" event handler
	     */
	    initAddedHandler: function() {
	      var _this = this;
	      this.on('added', function() {
	        var canvas = _this.canvas;
	        if (canvas) {
	          if (!canvas._hasITextHandlers) {
	            canvas._hasITextHandlers = true;
	            _this._initCanvasHandlers(canvas);
	          }
	          canvas._iTextInstances = canvas._iTextInstances || [];
	          canvas._iTextInstances.push(_this);
	        }
	      });
	    },

	    initRemovedHandler: function() {
	      var _this = this;
	      this.on('removed', function() {
	        var canvas = _this.canvas;
	        if (canvas) {
	          canvas._iTextInstances = canvas._iTextInstances || [];
	          fabric.util.removeFromArray(canvas._iTextInstances, _this);
	          if (canvas._iTextInstances.length === 0) {
	            canvas._hasITextHandlers = false;
	            _this._removeCanvasHandlers(canvas);
	          }
	        }
	      });
	    },

	    /**
	     * register canvas event to manage exiting on other instances
	     * @private
	     */
	    _initCanvasHandlers: function(canvas) {
	      canvas._mouseUpITextHandler = function() {
	        if (canvas._iTextInstances) {
	          canvas._iTextInstances.forEach(function(obj) {
	            obj.__isMousedown = false;
	          });
	        }
	      };
	      canvas.on('mouse:up', canvas._mouseUpITextHandler);
	    },

	    /**
	     * remove canvas event to manage exiting on other instances
	     * @private
	     */
	    _removeCanvasHandlers: function(canvas) {
	      canvas.off('mouse:up', canvas._mouseUpITextHandler);
	    },

	    /**
	     * @private
	     */
	    _tick: function() {
	      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');
	    },

	    /**
	     * @private
	     */
	    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {

	      var tickState;

	      tickState = {
	        isAborted: false,
	        abort: function() {
	          this.isAborted = true;
	        },
	      };

	      obj.animate('_currentCursorOpacity', targetOpacity, {
	        duration: duration,
	        onComplete: function() {
	          if (!tickState.isAborted) {
	            obj[completeMethod]();
	          }
	        },
	        onChange: function() {
	          // we do not want to animate a selection, only cursor
	          if (obj.canvas && obj.selectionStart === obj.selectionEnd) {
	            obj.renderCursorOrSelection();
	          }
	        },
	        abort: function() {
	          return tickState.isAborted;
	        }
	      });
	      return tickState;
	    },

	    /**
	     * @private
	     */
	    _onTickComplete: function() {

	      var _this = this;

	      if (this._cursorTimeout1) {
	        clearTimeout(this._cursorTimeout1);
	      }
	      this._cursorTimeout1 = setTimeout(function() {
	        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');
	      }, 100);
	    },

	    /**
	     * Initializes delayed cursor
	     */
	    initDelayedCursor: function(restart) {
	      var _this = this,
	          delay = restart ? 0 : this.cursorDelay;

	      this.abortCursorAnimation();
	      this._currentCursorOpacity = 1;
	      this._cursorTimeout2 = setTimeout(function() {
	        _this._tick();
	      }, delay);
	    },

	    /**
	     * Aborts cursor animation and clears all timeouts
	     */
	    abortCursorAnimation: function() {
	      var shouldClear = this._currentTickState || this._currentTickCompleteState,
	          canvas = this.canvas;
	      this._currentTickState && this._currentTickState.abort();
	      this._currentTickCompleteState && this._currentTickCompleteState.abort();

	      clearTimeout(this._cursorTimeout1);
	      clearTimeout(this._cursorTimeout2);

	      this._currentCursorOpacity = 0;
	      // to clear just itext area we need to transform the context
	      // it may not be worth it
	      if (shouldClear && canvas) {
	        canvas.clearContext(canvas.contextTop || canvas.contextContainer);
	      }

	    },

	    /**
	     * Selects entire text
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    selectAll: function() {
	      this.selectionStart = 0;
	      this.selectionEnd = this._text.length;
	      this._fireSelectionChanged();
	      this._updateTextarea();
	      return this;
	    },

	    /**
	     * Returns selected text
	     * @return {String}
	     */
	    getSelectedText: function() {
	      return this._text.slice(this.selectionStart, this.selectionEnd).join('');
	    },

	    /**
	     * Find new selection index representing start of current word according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findWordBoundaryLeft: function(startFrom) {
	      var offset = 0, index = startFrom - 1;

	      // remove space before cursor first
	      if (this._reSpace.test(this._text[index])) {
	        while (this._reSpace.test(this._text[index])) {
	          offset++;
	          index--;
	        }
	      }
	      while (/\S/.test(this._text[index]) && index > -1) {
	        offset++;
	        index--;
	      }

	      return startFrom - offset;
	    },

	    /**
	     * Find new selection index representing end of current word according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findWordBoundaryRight: function(startFrom) {
	      var offset = 0, index = startFrom;

	      // remove space after cursor first
	      if (this._reSpace.test(this._text[index])) {
	        while (this._reSpace.test(this._text[index])) {
	          offset++;
	          index++;
	        }
	      }
	      while (/\S/.test(this._text[index]) && index < this._text.length) {
	        offset++;
	        index++;
	      }

	      return startFrom + offset;
	    },

	    /**
	     * Find new selection index representing start of current line according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findLineBoundaryLeft: function(startFrom) {
	      var offset = 0, index = startFrom - 1;

	      while (!/\n/.test(this._text[index]) && index > -1) {
	        offset++;
	        index--;
	      }

	      return startFrom - offset;
	    },

	    /**
	     * Find new selection index representing end of current line according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findLineBoundaryRight: function(startFrom) {
	      var offset = 0, index = startFrom;

	      while (!/\n/.test(this._text[index]) && index < this._text.length) {
	        offset++;
	        index++;
	      }

	      return startFrom + offset;
	    },

	    /**
	     * Finds index corresponding to beginning or end of a word
	     * @param {Number} selectionStart Index of a character
	     * @param {Number} direction 1 or -1
	     * @return {Number} Index of the beginning or end of a word
	     */
	    searchWordBoundary: function(selectionStart, direction) {
	      var index     = this._reSpace.test(this._text[selectionStart]) ? selectionStart - 1 : selectionStart,
	          _char     = this._text[index],
	          reNonWord = /[ \n\.,;!\?\-]/;

	      while (!reNonWord.test(_char) && index > 0 && index < this._text.length) {
	        index += direction;
	        _char = this._text[index];
	      }
	      if (reNonWord.test(_char) && _char !== '\n') {
	        index += direction === 1 ? 0 : 1;
	      }
	      return index;
	    },

	    /**
	     * Selects a word based on the index
	     * @param {Number} selectionStart Index of a character
	     */
	    selectWord: function(selectionStart) {
	      selectionStart = selectionStart || this.selectionStart;
	      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */
	          newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */

	      this.selectionStart = newSelectionStart;
	      this.selectionEnd = newSelectionEnd;
	      this._fireSelectionChanged();
	      this._updateTextarea();
	      this.renderCursorOrSelection();
	    },

	    /**
	     * Selects a line based on the index
	     * @param {Number} selectionStart Index of a character
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    selectLine: function(selectionStart) {
	      selectionStart = selectionStart || this.selectionStart;
	      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),
	          newSelectionEnd = this.findLineBoundaryRight(selectionStart);

	      this.selectionStart = newSelectionStart;
	      this.selectionEnd = newSelectionEnd;
	      this._fireSelectionChanged();
	      this._updateTextarea();
	      return this;
	    },

	    /**
	     * Enters editing state
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    enterEditing: function(e) {
	      if (this.isEditing || !this.editable) {
	        return;
	      }

	      if (this.canvas) {
	        this.canvas.calcOffset();
	        this.exitEditingOnOthers(this.canvas);
	      }

	      this.isEditing = true;

	      this.initHiddenTextarea(e);
	      this.hiddenTextarea.focus();
	      this.hiddenTextarea.value = this.text;
	      this._updateTextarea();
	      this._saveEditingProps();
	      this._setEditingProps();
	      this._textBeforeEdit = this.text;

	      this._tick();
	      this.fire('editing:entered');
	      this._fireSelectionChanged();
	      if (!this.canvas) {
	        return this;
	      }
	      this.canvas.fire('text:editing:entered', { target: this });
	      this.initMouseMoveHandler();
	      this.canvas.requestRenderAll();
	      return this;
	    },

	    exitEditingOnOthers: function(canvas) {
	      if (canvas._iTextInstances) {
	        canvas._iTextInstances.forEach(function(obj) {
	          obj.selected = false;
	          if (obj.isEditing) {
	            obj.exitEditing();
	          }
	        });
	      }
	    },

	    /**
	     * Initializes "mousemove" event handler
	     */
	    initMouseMoveHandler: function() {
	      this.canvas.on('mouse:move', this.mouseMoveHandler);
	    },

	    /**
	     * @private
	     */
	    mouseMoveHandler: function(options) {
	      if (!this.__isMousedown || !this.isEditing) {
	        return;
	      }

	      var newSelectionStart = this.getSelectionStartFromPointer(options.e),
	          currentStart = this.selectionStart,
	          currentEnd = this.selectionEnd;
	      if (
	        (newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd)
	        &&
	        (currentStart === newSelectionStart || currentEnd === newSelectionStart)
	      ) {
	        return;
	      }
	      if (newSelectionStart > this.__selectionStartOnMouseDown) {
	        this.selectionStart = this.__selectionStartOnMouseDown;
	        this.selectionEnd = newSelectionStart;
	      }
	      else {
	        this.selectionStart = newSelectionStart;
	        this.selectionEnd = this.__selectionStartOnMouseDown;
	      }
	      if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {
	        this.restartCursorIfNeeded();
	        this._fireSelectionChanged();
	        this._updateTextarea();
	        this.renderCursorOrSelection();
	      }
	    },

	    /**
	     * @private
	     */
	    _setEditingProps: function() {
	      this.hoverCursor = 'text';

	      if (this.canvas) {
	        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';
	      }

	      this.borderColor = this.editingBorderColor;
	      this.hasControls = this.selectable = false;
	      this.lockMovementX = this.lockMovementY = true;
	    },

	    /**
	     * convert from textarea to grapheme indexes
	     */
	    fromStringToGraphemeSelection: function(start, end, text) {
	      var smallerTextStart = text.slice(0, start),
	          graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;
	      if (start === end) {
	        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
	      }
	      var smallerTextEnd = text.slice(start, end),
	          graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;
	      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
	    },

	    /**
	     * convert from fabric to textarea values
	     */
	    fromGraphemeToStringSelection: function(start, end, _text) {
	      var smallerTextStart = _text.slice(0, start),
	          graphemeStart = smallerTextStart.join('').length;
	      if (start === end) {
	        return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
	      }
	      var smallerTextEnd = _text.slice(start, end),
	          graphemeEnd = smallerTextEnd.join('').length;
	      return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
	    },

	    /**
	     * @private
	     */
	    _updateTextarea: function() {
	      this.cursorOffsetCache = { };
	      if (!this.hiddenTextarea) {
	        return;
	      }
	      if (!this.inCompositionMode) {
	        var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
	        this.hiddenTextarea.selectionStart = newSelection.selectionStart;
	        this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;
	      }
	      this.updateTextareaPosition();
	    },

	    /**
	     * @private
	     */
	    updateFromTextArea: function() {
	      if (!this.hiddenTextarea) {
	        return;
	      }
	      this.cursorOffsetCache = { };
	      this.text = this.hiddenTextarea.value;
	      if (this._shouldClearDimensionCache()) {
	        this.initDimensions();
	        this.setCoords();
	      }
	      var newSelection = this.fromStringToGraphemeSelection(
	        this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
	      this.selectionEnd = this.selectionStart = newSelection.selectionEnd;
	      if (!this.inCompositionMode) {
	        this.selectionStart = newSelection.selectionStart;
	      }
	      this.updateTextareaPosition();
	    },

	    /**
	     * @private
	     */
	    updateTextareaPosition: function() {
	      if (this.selectionStart === this.selectionEnd) {
	        var style = this._calcTextareaPosition();
	        this.hiddenTextarea.style.left = style.left;
	        this.hiddenTextarea.style.top = style.top;
	      }
	    },

	    /**
	     * @private
	     * @return {Object} style contains style for hiddenTextarea
	     */
	    _calcTextareaPosition: function() {
	      if (!this.canvas) {
	        return { x: 1, y: 1 };
	      }
	      var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart,
	          boundaries = this._getCursorBoundaries(desiredPosition),
	          cursorLocation = this.get2DCursorLocation(desiredPosition),
	          lineIndex = cursorLocation.lineIndex,
	          charIndex = cursorLocation.charIndex,
	          charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,
	          leftOffset = boundaries.leftOffset,
	          m = this.calcTransformMatrix(),
	          p = {
	            x: boundaries.left + leftOffset,
	            y: boundaries.top + boundaries.topOffset + charHeight
	          },
	          upperCanvas = this.canvas.upperCanvasEl,
	          upperCanvasWidth = upperCanvas.width,
	          upperCanvasHeight = upperCanvas.height,
	          maxWidth = upperCanvasWidth - charHeight,
	          maxHeight = upperCanvasHeight - charHeight,
	          scaleX = upperCanvas.clientWidth / upperCanvasWidth,
	          scaleY = upperCanvas.clientHeight / upperCanvasHeight;

	      p = fabric.util.transformPoint(p, m);
	      p = fabric.util.transformPoint(p, this.canvas.viewportTransform);
	      p.x *= scaleX;
	      p.y *= scaleY;
	      if (p.x < 0) {
	        p.x = 0;
	      }
	      if (p.x > maxWidth) {
	        p.x = maxWidth;
	      }
	      if (p.y < 0) {
	        p.y = 0;
	      }
	      if (p.y > maxHeight) {
	        p.y = maxHeight;
	      }

	      // add canvas offset on document
	      p.x += this.canvas._offset.left;
	      p.y += this.canvas._offset.top;

	      return { left: p.x + 'px', top: p.y + 'px', fontSize: charHeight + 'px', charHeight: charHeight };
	    },

	    /**
	     * @private
	     */
	    _saveEditingProps: function() {
	      this._savedProps = {
	        hasControls: this.hasControls,
	        borderColor: this.borderColor,
	        lockMovementX: this.lockMovementX,
	        lockMovementY: this.lockMovementY,
	        hoverCursor: this.hoverCursor,
	        selectable: this.selectable,
	        defaultCursor: this.canvas && this.canvas.defaultCursor,
	        moveCursor: this.canvas && this.canvas.moveCursor
	      };
	    },

	    /**
	     * @private
	     */
	    _restoreEditingProps: function() {
	      if (!this._savedProps) {
	        return;
	      }

	      this.hoverCursor = this._savedProps.hoverCursor;
	      this.hasControls = this._savedProps.hasControls;
	      this.borderColor = this._savedProps.borderColor;
	      this.selectable = this._savedProps.selectable;
	      this.lockMovementX = this._savedProps.lockMovementX;
	      this.lockMovementY = this._savedProps.lockMovementY;

	      if (this.canvas) {
	        this.canvas.defaultCursor = this._savedProps.defaultCursor;
	        this.canvas.moveCursor = this._savedProps.moveCursor;
	      }
	    },

	    /**
	     * Exits from editing state
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    exitEditing: function() {
	      var isTextChanged = (this._textBeforeEdit !== this.text);
	      this.selected = false;
	      this.isEditing = false;

	      this.selectionEnd = this.selectionStart;

	      if (this.hiddenTextarea) {
	        this.hiddenTextarea.blur && this.hiddenTextarea.blur();
	        this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);
	        this.hiddenTextarea = null;
	      }

	      this.abortCursorAnimation();
	      this._restoreEditingProps();
	      this._currentCursorOpacity = 0;
	      if (this._shouldClearDimensionCache()) {
	        this.initDimensions();
	        this.setCoords();
	      }
	      this.fire('editing:exited');
	      isTextChanged && this.fire('modified');
	      if (this.canvas) {
	        this.canvas.off('mouse:move', this.mouseMoveHandler);
	        this.canvas.fire('text:editing:exited', { target: this });
	        isTextChanged && this.canvas.fire('object:modified', { target: this });
	      }
	      return this;
	    },

	    /**
	     * @private
	     */
	    _removeExtraneousStyles: function() {
	      for (var prop in this.styles) {
	        if (!this._textLines[prop]) {
	          delete this.styles[prop];
	        }
	      }
	    },

	    /**
	     * remove and reflow a style block from start to end.
	     * @param {Number} start linear start position for removal (included in removal)
	     * @param {Number} end linear end position for removal ( excluded from removal )
	     */
	    removeStyleFromTo: function(start, end) {
	      var cursorStart = this.get2DCursorLocation(start, true),
	          cursorEnd = this.get2DCursorLocation(end, true),
	          lineStart = cursorStart.lineIndex,
	          charStart = cursorStart.charIndex,
	          lineEnd = cursorEnd.lineIndex,
	          charEnd = cursorEnd.charIndex,
	          i, styleObj;
	      if (lineStart !== lineEnd) {
	        // step1 remove the trailing of lineStart
	        if (this.styles[lineStart]) {
	          for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {
	            delete this.styles[lineStart][i];
	          }
	        }
	        // step2 move the trailing of lineEnd to lineStart if needed
	        if (this.styles[lineEnd]) {
	          for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {
	            styleObj = this.styles[lineEnd][i];
	            if (styleObj) {
	              this.styles[lineStart] || (this.styles[lineStart] = { });
	              this.styles[lineStart][charStart + i - charEnd] = styleObj;
	            }
	          }
	        }
	        // step3 detects lines will be completely removed.
	        for (i = lineStart + 1; i <= lineEnd; i++) {
	          delete this.styles[i];
	        }
	        // step4 shift remaining lines.
	        this.shiftLineStyles(lineEnd, lineStart - lineEnd);
	      }
	      else {
	        // remove and shift left on the same line
	        if (this.styles[lineStart]) {
	          styleObj = this.styles[lineStart];
	          var diff = charEnd - charStart, numericChar, _char;
	          for (i = charStart; i < charEnd; i++) {
	            delete styleObj[i];
	          }
	          for (_char in this.styles[lineStart]) {
	            numericChar = parseInt(_char, 10);
	            if (numericChar >= charEnd) {
	              styleObj[numericChar - diff] = styleObj[_char];
	              delete styleObj[_char];
	            }
	          }
	        }
	      }
	    },

	    /**
	     * Shifts line styles up or down
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} offset Can any number?
	     */
	    shiftLineStyles: function(lineIndex, offset) {
	      // shift all line styles by offset upward or downward
	      // do not clone deep. we need new array, not new style objects
	      var clonedStyles = clone(this.styles);
	      for (var line in this.styles) {
	        var numericLine = parseInt(line, 10);
	        if (numericLine > lineIndex) {
	          this.styles[numericLine + offset] = clonedStyles[numericLine];
	          if (!clonedStyles[numericLine - offset]) {
	            delete this.styles[numericLine];
	          }
	        }
	      }
	    },

	    restartCursorIfNeeded: function() {
	      if (!this._currentTickState || this._currentTickState.isAborted
	        || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted
	      ) {
	        this.initDelayedCursor();
	      }
	    },

	    /**
	     * Inserts new style object
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Number} qty number of lines to add
	     * @param {Array} copiedStyle Array of objects styles
	     */
	    insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {
	      var currentCharStyle,
	          newLineStyles = {},
	          somethingAdded = false;

	      qty || (qty = 1);
	      this.shiftLineStyles(lineIndex, qty);
	      if (this.styles[lineIndex]) {
	        currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];
	      }

	      // we clone styles of all chars
	      // after cursor onto the current line
	      for (var index in this.styles[lineIndex]) {
	        var numIndex = parseInt(index, 10);
	        if (numIndex >= charIndex) {
	          somethingAdded = true;
	          newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];
	          // remove lines from the previous line since they're on a new line now
	          delete this.styles[lineIndex][index];
	        }
	      }
	      if (somethingAdded) {
	        this.styles[lineIndex + qty] = newLineStyles;
	      }
	      else {
	        delete this.styles[lineIndex + qty];
	      }
	      // for the other lines
	      // we clone current char style onto the next (otherwise empty) line
	      while (qty > 1) {
	        qty--;
	        if (copiedStyle && copiedStyle[qty]) {
	          this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty]) };
	        }
	        else if (currentCharStyle) {
	          this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };
	        }
	        else {
	          delete this.styles[lineIndex + qty];
	        }
	      }
	      this._forceClearCache = true;
	    },

	    /**
	     * Inserts style object for a given line/char index
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Number} quantity number Style object to insert, if given
	     * @param {Array} copiedStyle array of style objects
	     */
	    insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {
	      if (!this.styles) {
	        this.styles = {};
	      }
	      var currentLineStyles       = this.styles[lineIndex],
	          currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};

	      quantity || (quantity = 1);
	      // shift all char styles by quantity forward
	      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4
	      for (var index in currentLineStylesCloned) {
	        var numericIndex = parseInt(index, 10);
	        if (numericIndex >= charIndex) {
	          currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];
	          // only delete the style if there was nothing moved there
	          if (!currentLineStylesCloned[numericIndex - quantity]) {
	            delete currentLineStyles[numericIndex];
	          }
	        }
	      }
	      this._forceClearCache = true;
	      if (copiedStyle) {
	        while (quantity--) {
	          if (!Object.keys(copiedStyle[quantity]).length) {
	            continue;
	          }
	          if (!this.styles[lineIndex]) {
	            this.styles[lineIndex] = {};
	          }
	          this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);
	        }
	        return;
	      }
	      if (!currentLineStyles) {
	        return;
	      }
	      var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];
	      while (newStyle && quantity--) {
	        this.styles[lineIndex][charIndex + quantity] = clone(newStyle);
	      }
	    },

	    /**
	     * Inserts style object(s)
	     * @param {Array} insertedText Characters at the location where style is inserted
	     * @param {Number} start cursor index for inserting style
	     * @param {Array} [copiedStyle] array of style objects to insert.
	     */
	    insertNewStyleBlock: function(insertedText, start, copiedStyle) {
	      var cursorLoc = this.get2DCursorLocation(start, true),
	          addedLines = [0], linesLength = 0;
	      for (var i = 0; i < insertedText.length; i++) {
	        if (insertedText[i] === '\n') {
	          linesLength++;
	          addedLines[linesLength] = 0;
	        }
	        else {
	          addedLines[linesLength]++;
	        }
	      }
	      if (addedLines[0] > 0) {
	        this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);
	        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);
	      }
	      linesLength && this.insertNewlineStyleObject(
	        cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);
	      for (var i = 1; i < linesLength; i++) {
	        if (addedLines[i] > 0) {
	          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
	        }
	        else if (copiedStyle) {
	          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];
	        }
	        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);
	      }
	      // we use i outside the loop to get it like linesLength
	      if (addedLines[i] > 0) {
	        this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
	      }
	    },

	    /**
	     * Set the selectionStart and selectionEnd according to the new position of cursor
	     * mimic the key - mouse navigation when shift is pressed.
	     */
	    setSelectionStartEndWithShift: function(start, end, newSelection) {
	      if (newSelection <= start) {
	        if (end === start) {
	          this._selectionDirection = 'left';
	        }
	        else if (this._selectionDirection === 'right') {
	          this._selectionDirection = 'left';
	          this.selectionEnd = start;
	        }
	        this.selectionStart = newSelection;
	      }
	      else if (newSelection > start && newSelection < end) {
	        if (this._selectionDirection === 'right') {
	          this.selectionEnd = newSelection;
	        }
	        else {
	          this.selectionStart = newSelection;
	        }
	      }
	      else {
	        // newSelection is > selection start and end
	        if (end === start) {
	          this._selectionDirection = 'right';
	        }
	        else if (this._selectionDirection === 'left') {
	          this._selectionDirection = 'right';
	          this.selectionStart = end;
	        }
	        this.selectionEnd = newSelection;
	      }
	    },

	    setSelectionInBoundaries: function() {
	      var length = this.text.length;
	      if (this.selectionStart > length) {
	        this.selectionStart = length;
	      }
	      else if (this.selectionStart < 0) {
	        this.selectionStart = 0;
	      }
	      if (this.selectionEnd > length) {
	        this.selectionEnd = length;
	      }
	      else if (this.selectionEnd < 0) {
	        this.selectionEnd = 0;
	      }
	    }
	  });
	})();


	fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {
	  /**
	   * Initializes "dbclick" event handler
	   */
	  initDoubleClickSimulation: function() {

	    // for double click
	    this.__lastClickTime = +new Date();

	    // for triple click
	    this.__lastLastClickTime = +new Date();

	    this.__lastPointer = { };

	    this.on('mousedown', this.onMouseDown);
	  },

	  /**
	   * Default event handler to simulate triple click
	   * @private
	   */
	  onMouseDown: function(options) {
	    if (!this.canvas) {
	      return;
	    }
	    this.__newClickTime = +new Date();
	    var newPointer = options.pointer;
	    if (this.isTripleClick(newPointer)) {
	      this.fire('tripleclick', options);
	      this._stopEvent(options.e);
	    }
	    this.__lastLastClickTime = this.__lastClickTime;
	    this.__lastClickTime = this.__newClickTime;
	    this.__lastPointer = newPointer;
	    this.__lastIsEditing = this.isEditing;
	    this.__lastSelected = this.selected;
	  },

	  isTripleClick: function(newPointer) {
	    return this.__newClickTime - this.__lastClickTime < 500 &&
	        this.__lastClickTime - this.__lastLastClickTime < 500 &&
	        this.__lastPointer.x === newPointer.x &&
	        this.__lastPointer.y === newPointer.y;
	  },

	  /**
	   * @private
	   */
	  _stopEvent: function(e) {
	    e.preventDefault && e.preventDefault();
	    e.stopPropagation && e.stopPropagation();
	  },

	  /**
	   * Initializes event handlers related to cursor or selection
	   */
	  initCursorSelectionHandlers: function() {
	    this.initMousedownHandler();
	    this.initMouseupHandler();
	    this.initClicks();
	  },

	  /**
	   * Initializes double and triple click event handlers
	   */
	  initClicks: function() {
	    this.on('mousedblclick', function(options) {
	      this.selectWord(this.getSelectionStartFromPointer(options.e));
	    });
	    this.on('tripleclick', function(options) {
	      this.selectLine(this.getSelectionStartFromPointer(options.e));
	    });
	  },

	  /**
	   * Default event handler for the basic functionalities needed on _mouseDown
	   * can be overridden to do something different.
	   * Scope of this implementation is: find the click position, set selectionStart
	   * find selectionEnd, initialize the drawing of either cursor or selection area
	   */
	  _mouseDownHandler: function(options) {
	    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {
	      return;
	    }

	    this.__isMousedown = true;

	    if (this.selected) {
	      this.setCursorByClick(options.e);
	    }

	    if (this.isEditing) {
	      this.__selectionStartOnMouseDown = this.selectionStart;
	      if (this.selectionStart === this.selectionEnd) {
	        this.abortCursorAnimation();
	      }
	      this.renderCursorOrSelection();
	    }
	  },

	  /**
	   * Default event handler for the basic functionalities needed on mousedown:before
	   * can be overridden to do something different.
	   * Scope of this implementation is: verify the object is already selected when mousing down
	   */
	  _mouseDownHandlerBefore: function(options) {
	    if (!this.canvas || !this.editable || (options.e.button && options.e.button !== 1)) {
	      return;
	    }
	    if (this === this.canvas._activeObject) {
	      this.selected = true;
	    }
	  },

	  /**
	   * Initializes "mousedown" event handler
	   */
	  initMousedownHandler: function() {
	    this.on('mousedown', this._mouseDownHandler);
	    this.on('mousedown:before', this._mouseDownHandlerBefore);
	  },

	  /**
	   * Initializes "mouseup" event handler
	   */
	  initMouseupHandler: function() {
	    this.on('mouseup', this.mouseUpHandler);
	  },

	  /**
	   * standard hander for mouse up, overridable
	   * @private
	   */
	  mouseUpHandler: function(options) {
	    this.__isMousedown = false;
	    if (!this.editable || this.group ||
	      (options.transform && options.transform.actionPerformed) ||
	      (options.e.button && options.e.button !== 1)) {
	      return;
	    }

	    if (this.canvas) {
	      var currentActive = this.canvas._activeObject;
	      if (currentActive && currentActive !== this) {
	        // avoid running this logic when there is an active object
	        // this because is possible with shift click and fast clicks,
	        // to rapidly deselect and reselect this object and trigger an enterEdit
	        return;
	      }
	    }

	    if (this.__lastSelected && !this.__corner) {
	      this.selected = false;
	      this.__lastSelected = false;
	      this.enterEditing(options.e);
	      if (this.selectionStart === this.selectionEnd) {
	        this.initDelayedCursor(true);
	      }
	      else {
	        this.renderCursorOrSelection();
	      }
	    }
	    else {
	      this.selected = true;
	    }
	  },

	  /**
	   * Changes cursor location in a text depending on passed pointer (x/y) object
	   * @param {Event} e Event object
	   */
	  setCursorByClick: function(e) {
	    var newSelection = this.getSelectionStartFromPointer(e),
	        start = this.selectionStart, end = this.selectionEnd;
	    if (e.shiftKey) {
	      this.setSelectionStartEndWithShift(start, end, newSelection);
	    }
	    else {
	      this.selectionStart = newSelection;
	      this.selectionEnd = newSelection;
	    }
	    if (this.isEditing) {
	      this._fireSelectionChanged();
	      this._updateTextarea();
	    }
	  },

	  /**
	   * Returns index of a character corresponding to where an object was clicked
	   * @param {Event} e Event object
	   * @return {Number} Index of a character
	   */
	  getSelectionStartFromPointer: function(e) {
	    var mouseOffset = this.getLocalPointer(e),
	        prevWidth = 0,
	        width = 0,
	        height = 0,
	        charIndex = 0,
	        lineIndex = 0,
	        lineLeftOffset,
	        line;

	    for (var i = 0, len = this._textLines.length; i < len; i++) {
	      if (height <= mouseOffset.y) {
	        height += this.getHeightOfLine(i) * this.scaleY;
	        lineIndex = i;
	        if (i > 0) {
	          charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);
	        }
	      }
	      else {
	        break;
	      }
	    }
	    lineLeftOffset = this._getLineLeftOffset(lineIndex);
	    width = lineLeftOffset * this.scaleX;
	    line = this._textLines[lineIndex];
	    for (var j = 0, jlen = line.length; j < jlen; j++) {
	      prevWidth = width;
	      // i removed something about flipX here, check.
	      width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;
	      if (width <= mouseOffset.x) {
	        charIndex++;
	      }
	      else {
	        break;
	      }
	    }
	    return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);
	  },

	  /**
	   * @private
	   */
	  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {
	    // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0
	    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,
	        distanceBtwNextCharAndCursor = width - mouseOffset.x,
	        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ||
	          distanceBtwNextCharAndCursor < 0 ? 0 : 1,
	        newSelectionStart = index + offset;
	    // if object is horizontally flipped, mirror cursor location from the end
	    if (this.flipX) {
	      newSelectionStart = jlen - newSelectionStart;
	    }

	    if (newSelectionStart > this._text.length) {
	      newSelectionStart = this._text.length;
	    }

	    return newSelectionStart;
	  }
	});


	fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {

	  /**
	   * Initializes hidden textarea (needed to bring up keyboard in iOS)
	   */
	  initHiddenTextarea: function() {
	    this.hiddenTextarea = fabric.document.createElement('textarea');
	    this.hiddenTextarea.setAttribute('autocapitalize', 'off');
	    this.hiddenTextarea.setAttribute('autocorrect', 'off');
	    this.hiddenTextarea.setAttribute('autocomplete', 'off');
	    this.hiddenTextarea.setAttribute('spellcheck', 'false');
	    this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');
	    this.hiddenTextarea.setAttribute('wrap', 'off');
	    var style = this._calcTextareaPosition();
	    // line-height: 1px; was removed from the style to fix this:
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966
	    this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top +
	    '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' +
	    ' paddingï½°top: ' + style.fontSize + ';';
	    fabric.document.body.appendChild(this.hiddenTextarea);

	    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));

	    if (!this._clickHandlerInitialized && this.canvas) {
	      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));
	      this._clickHandlerInitialized = true;
	    }
	  },

	  /**
	   * For functionalities on keyDown
	   * Map a special key to a function of the instance/prototype
	   * If you need different behaviour for ESC or TAB or arrows, you have to change
	   * this map setting the name of a function that you build on the fabric.Itext or
	   * your prototype.
	   * the map change will affect all Instances unless you need for only some text Instances
	   * in that case you have to clone this object and assign your Instance.
	   * this.keysMap = fabric.util.object.clone(this.keysMap);
	   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
	   */
	  keysMap: {
	    9:  'exitEditing',
	    27: 'exitEditing',
	    33: 'moveCursorUp',
	    34: 'moveCursorDown',
	    35: 'moveCursorRight',
	    36: 'moveCursorLeft',
	    37: 'moveCursorLeft',
	    38: 'moveCursorUp',
	    39: 'moveCursorRight',
	    40: 'moveCursorDown',
	  },

	  /**
	   * For functionalities on keyUp + ctrl || cmd
	   */
	  ctrlKeysMapUp: {
	    67: 'copy',
	    88: 'cut'
	  },

	  /**
	   * For functionalities on keyDown + ctrl || cmd
	   */
	  ctrlKeysMapDown: {
	    65: 'selectAll'
	  },

	  onClick: function() {
	    // No need to trigger click event here, focus is enough to have the keyboard appear on Android
	    this.hiddenTextarea && this.hiddenTextarea.focus();
	  },

	  /**
	   * Handles keyup event
	   * @param {Event} e Event object
	   */
	  onKeyDown: function(e) {
	    if (!this.isEditing || this.inCompositionMode) {
	      return;
	    }
	    if (e.keyCode in this.keysMap) {
	      this[this.keysMap[e.keyCode]](e);
	    }
	    else if ((e.keyCode in this.ctrlKeysMapDown) && (e.ctrlKey || e.metaKey)) {
	      this[this.ctrlKeysMapDown[e.keyCode]](e);
	    }
	    else {
	      return;
	    }
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    if (e.keyCode >= 33 && e.keyCode <= 40) {
	      // if i press an arrow key just update selection
	      this.clearContextTop();
	      this.renderCursorOrSelection();
	    }
	    else {
	      this.canvas && this.canvas.requestRenderAll();
	    }
	  },

	  /**
	   * Handles keyup event
	   * We handle KeyUp because ie11 and edge have difficulties copy/pasting
	   * if a copy/cut event fired, keyup is dismissed
	   * @param {Event} e Event object
	   */
	  onKeyUp: function(e) {
	    if (!this.isEditing || this._copyDone || this.inCompositionMode) {
	      this._copyDone = false;
	      return;
	    }
	    if ((e.keyCode in this.ctrlKeysMapUp) && (e.ctrlKey || e.metaKey)) {
	      this[this.ctrlKeysMapUp[e.keyCode]](e);
	    }
	    else {
	      return;
	    }
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    this.canvas && this.canvas.requestRenderAll();
	  },

	  /**
	   * Handles onInput event
	   * @param {Event} e Event object
	   */
	  onInput: function(e) {
	    var fromPaste = this.fromPaste;
	    this.fromPaste = false;
	    e && e.stopPropagation();
	    if (!this.isEditing) {
	      return;
	    }
	    // decisions about style changes.
	    var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,
	        charCount = this._text.length,
	        nextCharCount = nextText.length,
	        removedText, insertedText,
	        charDiff = nextCharCount - charCount;
	    if (this.hiddenTextarea.value === '') {
	      this.styles = { };
	      this.updateFromTextArea();
	      this.fire('changed');
	      if (this.canvas) {
	        this.canvas.fire('text:changed', { target: this });
	        this.canvas.requestRenderAll();
	      }
	      return;
	    }

	    var textareaSelection = this.fromStringToGraphemeSelection(
	      this.hiddenTextarea.selectionStart,
	      this.hiddenTextarea.selectionEnd,
	      this.hiddenTextarea.value
	    );
	    var backDelete = this.selectionStart > textareaSelection.selectionStart;

	    if (this.selectionStart !== this.selectionEnd) {
	      removedText = this._text.slice(this.selectionStart, this.selectionEnd);
	      charDiff += this.selectionEnd - this.selectionStart;
	    }
	    else if (nextCharCount < charCount) {
	      if (backDelete) {
	        removedText = this._text.slice(this.selectionEnd + charDiff, this.selectionEnd);
	      }
	      else {
	        removedText = this._text.slice(this.selectionStart, this.selectionStart - charDiff);
	      }
	    }
	    insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);
	    if (removedText && removedText.length) {
	      if (this.selectionStart !== this.selectionEnd) {
	        this.removeStyleFromTo(this.selectionStart, this.selectionEnd);
	      }
	      else if (backDelete) {
	        // detect differencies between forwardDelete and backDelete
	        this.removeStyleFromTo(this.selectionEnd - removedText.length, this.selectionEnd);
	      }
	      else {
	        this.removeStyleFromTo(this.selectionEnd, this.selectionEnd + removedText.length);
	      }
	    }
	    if (insertedText.length) {
	      if (fromPaste && insertedText.join('') === fabric.copiedText && !fabric.disableStyleCopyPaste) {
	        this.insertNewStyleBlock(insertedText, this.selectionStart, fabric.copiedTextStyle);
	      }
	      else {
	        this.insertNewStyleBlock(insertedText, this.selectionStart);
	      }
	    }
	    this.updateFromTextArea();
	    this.fire('changed');
	    if (this.canvas) {
	      this.canvas.fire('text:changed', { target: this });
	      this.canvas.requestRenderAll();
	    }
	  },
	  /**
	   * Composition start
	   */
	  onCompositionStart: function() {
	    this.inCompositionMode = true;
	  },

	  /**
	   * Composition end
	   */
	  onCompositionEnd: function() {
	    this.inCompositionMode = false;
	  },

	  // /**
	  //  * Composition update
	  //  */
	  onCompositionUpdate: function(e) {
	    this.compositionStart = e.target.selectionStart;
	    this.compositionEnd = e.target.selectionEnd;
	    this.updateTextareaPosition();
	  },

	  /**
	   * Copies selected text
	   * @param {Event} e Event object
	   */
	  copy: function() {
	    if (this.selectionStart === this.selectionEnd) {
	      //do not cut-copy if no selection
	      return;
	    }

	    fabric.copiedText = this.getSelectedText();
	    if (!fabric.disableStyleCopyPaste) {
	      fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);
	    }
	    else {
	      fabric.copiedTextStyle = null;
	    }
	    this._copyDone = true;
	  },

	  /**
	   * Pastes text
	   * @param {Event} e Event object
	   */
	  paste: function() {
	    this.fromPaste = true;
	  },

	  /**
	   * @private
	   * @param {Event} e Event object
	   * @return {Object} Clipboard data object
	   */
	  _getClipboardData: function(e) {
	    return (e && e.clipboardData) || fabric.window.clipboardData;
	  },

	  /**
	   * Finds the width in pixels before the cursor on the same line
	   * @private
	   * @param {Number} lineIndex
	   * @param {Number} charIndex
	   * @return {Number} widthBeforeCursor width before cursor
	   */
	  _getWidthBeforeCursor: function(lineIndex, charIndex) {
	    var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;

	    if (charIndex > 0) {
	      bound = this.__charBounds[lineIndex][charIndex - 1];
	      widthBeforeCursor += bound.left + bound.width;
	    }
	    return widthBeforeCursor;
	  },

	  /**
	   * Gets start offset of a selection
	   * @param {Event} e Event object
	   * @param {Boolean} isRight
	   * @return {Number}
	   */
	  getDownCursorOffset: function(e, isRight) {
	    var selectionProp = this._getSelectionForOffset(e, isRight),
	        cursorLocation = this.get2DCursorLocation(selectionProp),
	        lineIndex = cursorLocation.lineIndex;
	    // if on last line, down cursor goes to end of line
	    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {
	      // move to the end of a text
	      return this._text.length - selectionProp;
	    }
	    var charIndex = cursorLocation.charIndex,
	        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),
	        indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),
	        textAfterCursor = this._textLines[lineIndex].slice(charIndex);
	    return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);
	  },

	  /**
	   * private
	   * Helps finding if the offset should be counted from Start or End
	   * @param {Event} e Event object
	   * @param {Boolean} isRight
	   * @return {Number}
	   */
	  _getSelectionForOffset: function(e, isRight) {
	    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {
	      return this.selectionEnd;
	    }
	    else {
	      return this.selectionStart;
	    }
	  },

	  /**
	   * @param {Event} e Event object
	   * @param {Boolean} isRight
	   * @return {Number}
	   */
	  getUpCursorOffset: function(e, isRight) {
	    var selectionProp = this._getSelectionForOffset(e, isRight),
	        cursorLocation = this.get2DCursorLocation(selectionProp),
	        lineIndex = cursorLocation.lineIndex;
	    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {
	      // if on first line, up cursor goes to start of line
	      return -selectionProp;
	    }
	    var charIndex = cursorLocation.charIndex,
	        widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),
	        indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),
	        textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),
	        missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);
	    // return a negative offset
	    return -this._textLines[lineIndex - 1].length
	     + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);
	  },

	  /**
	   * for a given width it founds the matching character.
	   * @private
	   */
	  _getIndexOnLine: function(lineIndex, width) {

	    var line = this._textLines[lineIndex],
	        lineLeftOffset = this._getLineLeftOffset(lineIndex),
	        widthOfCharsOnLine = lineLeftOffset,
	        indexOnLine = 0, charWidth, foundMatch;

	    for (var j = 0, jlen = line.length; j < jlen; j++) {
	      charWidth = this.__charBounds[lineIndex][j].width;
	      widthOfCharsOnLine += charWidth;
	      if (widthOfCharsOnLine > width) {
	        foundMatch = true;
	        var leftEdge = widthOfCharsOnLine - charWidth,
	            rightEdge = widthOfCharsOnLine,
	            offsetFromLeftEdge = Math.abs(leftEdge - width),
	            offsetFromRightEdge = Math.abs(rightEdge - width);

	        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);
	        break;
	      }
	    }

	    // reached end
	    if (!foundMatch) {
	      indexOnLine = line.length - 1;
	    }

	    return indexOnLine;
	  },


	  /**
	   * Moves cursor down
	   * @param {Event} e Event object
	   */
	  moveCursorDown: function(e) {
	    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
	      return;
	    }
	    this._moveCursorUpOrDown('Down', e);
	  },

	  /**
	   * Moves cursor up
	   * @param {Event} e Event object
	   */
	  moveCursorUp: function(e) {
	    if (this.selectionStart === 0 && this.selectionEnd === 0) {
	      return;
	    }
	    this._moveCursorUpOrDown('Up', e);
	  },

	  /**
	   * Moves cursor up or down, fires the events
	   * @param {String} direction 'Up' or 'Down'
	   * @param {Event} e Event object
	   */
	  _moveCursorUpOrDown: function(direction, e) {
	    // getUpCursorOffset
	    // getDownCursorOffset
	    var action = 'get' + direction + 'CursorOffset',
	        offset = this[action](e, this._selectionDirection === 'right');
	    if (e.shiftKey) {
	      this.moveCursorWithShift(offset);
	    }
	    else {
	      this.moveCursorWithoutShift(offset);
	    }
	    if (offset !== 0) {
	      this.setSelectionInBoundaries();
	      this.abortCursorAnimation();
	      this._currentCursorOpacity = 1;
	      this.initDelayedCursor();
	      this._fireSelectionChanged();
	      this._updateTextarea();
	    }
	  },

	  /**
	   * Moves cursor with shift
	   * @param {Number} offset
	   */
	  moveCursorWithShift: function(offset) {
	    var newSelection = this._selectionDirection === 'left'
	      ? this.selectionStart + offset
	      : this.selectionEnd + offset;
	    this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);
	    return offset !== 0;
	  },

	  /**
	   * Moves cursor up without shift
	   * @param {Number} offset
	   */
	  moveCursorWithoutShift: function(offset) {
	    if (offset < 0) {
	      this.selectionStart += offset;
	      this.selectionEnd = this.selectionStart;
	    }
	    else {
	      this.selectionEnd += offset;
	      this.selectionStart = this.selectionEnd;
	    }
	    return offset !== 0;
	  },

	  /**
	   * Moves cursor left
	   * @param {Event} e Event object
	   */
	  moveCursorLeft: function(e) {
	    if (this.selectionStart === 0 && this.selectionEnd === 0) {
	      return;
	    }
	    this._moveCursorLeftOrRight('Left', e);
	  },

	  /**
	   * @private
	   * @return {Boolean} true if a change happened
	   */
	  _move: function(e, prop, direction) {
	    var newValue;
	    if (e.altKey) {
	      newValue = this['findWordBoundary' + direction](this[prop]);
	    }
	    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {
	      newValue = this['findLineBoundary' + direction](this[prop]);
	    }
	    else {
	      this[prop] += direction === 'Left' ? -1 : 1;
	      return true;
	    }
	    if (typeof newValue !== undefined && this[prop] !== newValue) {
	      this[prop] = newValue;
	      return true;
	    }
	  },

	  /**
	   * @private
	   */
	  _moveLeft: function(e, prop) {
	    return this._move(e, prop, 'Left');
	  },

	  /**
	   * @private
	   */
	  _moveRight: function(e, prop) {
	    return this._move(e, prop, 'Right');
	  },

	  /**
	   * Moves cursor left without keeping selection
	   * @param {Event} e
	   */
	  moveCursorLeftWithoutShift: function(e) {
	    var change = true;
	    this._selectionDirection = 'left';

	    // only move cursor when there is no selection,
	    // otherwise we discard it, and leave cursor on same place
	    if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {
	      change = this._moveLeft(e, 'selectionStart');

	    }
	    this.selectionEnd = this.selectionStart;
	    return change;
	  },

	  /**
	   * Moves cursor left while keeping selection
	   * @param {Event} e
	   */
	  moveCursorLeftWithShift: function(e) {
	    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {
	      return this._moveLeft(e, 'selectionEnd');
	    }
	    else if (this.selectionStart !== 0){
	      this._selectionDirection = 'left';
	      return this._moveLeft(e, 'selectionStart');
	    }
	  },

	  /**
	   * Moves cursor right
	   * @param {Event} e Event object
	   */
	  moveCursorRight: function(e) {
	    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
	      return;
	    }
	    this._moveCursorLeftOrRight('Right', e);
	  },

	  /**
	   * Moves cursor right or Left, fires event
	   * @param {String} direction 'Left', 'Right'
	   * @param {Event} e Event object
	   */
	  _moveCursorLeftOrRight: function(direction, e) {
	    var actionName = 'moveCursor' + direction + 'With';
	    this._currentCursorOpacity = 1;

	    if (e.shiftKey) {
	      actionName += 'Shift';
	    }
	    else {
	      actionName += 'outShift';
	    }
	    if (this[actionName](e)) {
	      this.abortCursorAnimation();
	      this.initDelayedCursor();
	      this._fireSelectionChanged();
	      this._updateTextarea();
	    }
	  },

	  /**
	   * Moves cursor right while keeping selection
	   * @param {Event} e
	   */
	  moveCursorRightWithShift: function(e) {
	    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {
	      return this._moveRight(e, 'selectionStart');
	    }
	    else if (this.selectionEnd !== this._text.length) {
	      this._selectionDirection = 'right';
	      return this._moveRight(e, 'selectionEnd');
	    }
	  },

	  /**
	   * Moves cursor right without keeping selection
	   * @param {Event} e Event object
	   */
	  moveCursorRightWithoutShift: function(e) {
	    var changed = true;
	    this._selectionDirection = 'right';

	    if (this.selectionStart === this.selectionEnd) {
	      changed = this._moveRight(e, 'selectionStart');
	      this.selectionEnd = this.selectionStart;
	    }
	    else {
	      this.selectionStart = this.selectionEnd;
	    }
	    return changed;
	  },

	  /**
	   * Removes characters from start/end
	   * start/end ar per grapheme position in _text array.
	   *
	   * @param {Number} start
	   * @param {Number} end default to start + 1
	   */
	  removeChars: function(start, end) {
	    if (typeof end === 'undefined') {
	      end = start + 1;
	    }
	    this.removeStyleFromTo(start, end);
	    this._text.splice(start, end - start);
	    this.text = this._text.join('');
	    this.set('dirty', true);
	    if (this._shouldClearDimensionCache()) {
	      this.initDimensions();
	      this.setCoords();
	    }
	    this._removeExtraneousStyles();
	  },

	  /**
	   * insert characters at start position, before start position.
	   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1
	   * if style array is provided, it must be as the same length of text in graphemes
	   * if end is provided and is bigger than start, old text is replaced.
	   * start/end ar per grapheme position in _text array.
	   *
	   * @param {String} text text to insert
	   * @param {Array} style array of style objects
	   * @param {Number} start
	   * @param {Number} end default to start + 1
	   */
	  insertChars: function(text, style, start, end) {
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	    if (end > start) {
	      this.removeStyleFromTo(start, end);
	    }
	    var graphemes = fabric.util.string.graphemeSplit(text);
	    this.insertNewStyleBlock(graphemes, start, style);
	    this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));
	    this.text = this._text.join('');
	    this.set('dirty', true);
	    if (this._shouldClearDimensionCache()) {
	      this.initDimensions();
	      this.setCoords();
	    }
	    this._removeExtraneousStyles();
	  },

	});


	/* _TO_SVG_START_ */
	(function() {
	  var toFixed = fabric.util.toFixed,
	      multipleSpacesRegex = /  +/g;

	  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {

	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    _toSVG: function() {
	      var offsets = this._getSVGLeftTopOffsets(),
	          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
	      return this._wrapSVGTextAndBg(textAndBg);
	    },

	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      return this._createBaseSVGMarkup(
	        this._toSVG(),
	        { reviver: reviver, noStyle: true, withShadow: true }
	      );
	    },

	    /**
	     * @private
	     */
	    _getSVGLeftTopOffsets: function() {
	      return {
	        textLeft: -this.width / 2,
	        textTop: -this.height / 2,
	        lineTop: this.getHeightOfLine(0)
	      };
	    },

	    /**
	     * @private
	     */
	    _wrapSVGTextAndBg: function(textAndBg) {
	      var noShadow = true,
	          textDecoration = this.getSvgTextDecoration(this);
	      return [
	        textAndBg.textBgRects.join(''),
	        '\t\t<text xml:space="preserve" ',
	        (this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, '\'') + '" ' : ''),
	        (this.fontSize ? 'font-size="' + this.fontSize + '" ' : ''),
	        (this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : ''),
	        (this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : ''),
	        (textDecoration ? 'text-decoration="' + textDecoration + '" ' : ''),
	        'style="', this.getSvgStyles(noShadow), '"', this.addPaintOrder(), ' >',
	        textAndBg.textSpans.join(''),
	        '</text>\n'
	      ];
	    },

	    /**
	     * @private
	     * @param {Number} textTopOffset Text top offset
	     * @param {Number} textLeftOffset Text left offset
	     * @return {Object}
	     */
	    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {
	      var textSpans = [],
	          textBgRects = [],
	          height = textTopOffset, lineOffset;
	      // bounding-box background
	      this._setSVGBg(textBgRects);

	      // text and text-background
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        lineOffset = this._getLineLeftOffset(i);
	        if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {
	          this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);
	        }
	        this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);
	        height += this.getHeightOfLine(i);
	      }

	      return {
	        textSpans: textSpans,
	        textBgRects: textBgRects
	      };
	    },

	    /**
	     * @private
	     */
	    _createTextCharSpan: function(_char, styleDecl, left, top) {
	      var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),
	          styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),
	          fillStyles = styleProps ? 'style="' + styleProps + '"' : '',
	          dy = styleDecl.deltaY, dySpan = '',
	          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
	      if (dy) {
	        dySpan = ' dy="' + toFixed(dy, NUM_FRACTION_DIGITS) + '" ';
	      }
	      return [
	        '<tspan x="', toFixed(left, NUM_FRACTION_DIGITS), '" y="',
	        toFixed(top, NUM_FRACTION_DIGITS), '" ', dySpan,
	        fillStyles, '>',
	        fabric.util.string.escapeXml(_char),
	        '</tspan>'
	      ].join('');
	    },

	    _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {
	      // set proper line offset
	      var lineHeight = this.getHeightOfLine(lineIndex),
	          isJustify = this.textAlign.indexOf('justify') !== -1,
	          actualStyle,
	          nextStyle,
	          charsToRender = '',
	          charBox, style,
	          boxWidth = 0,
	          line = this._textLines[lineIndex],
	          timeToRender;

	      textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;
	      for (var i = 0, len = line.length - 1; i <= len; i++) {
	        timeToRender = i === len || this.charSpacing;
	        charsToRender += line[i];
	        charBox = this.__charBounds[lineIndex][i];
	        if (boxWidth === 0) {
	          textLeftOffset += charBox.kernedWidth - charBox.width;
	          boxWidth += charBox.width;
	        }
	        else {
	          boxWidth += charBox.kernedWidth;
	        }
	        if (isJustify && !timeToRender) {
	          if (this._reSpaceAndTab.test(line[i])) {
	            timeToRender = true;
	          }
	        }
	        if (!timeToRender) {
	          // if we have charSpacing, we render char by char
	          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
	          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
	          timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);
	        }
	        if (timeToRender) {
	          style = this._getStyleDeclaration(lineIndex, i) || { };
	          textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));
	          charsToRender = '';
	          actualStyle = nextStyle;
	          textLeftOffset += boxWidth;
	          boxWidth = 0;
	        }
	      }
	    },

	    _pushTextBgRect: function(textBgRects, color, left, top, width, height) {
	      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
	      textBgRects.push(
	        '\t\t<rect ',
	        this._getFillAttributes(color),
	        ' x="',
	        toFixed(left, NUM_FRACTION_DIGITS),
	        '" y="',
	        toFixed(top, NUM_FRACTION_DIGITS),
	        '" width="',
	        toFixed(width, NUM_FRACTION_DIGITS),
	        '" height="',
	        toFixed(height, NUM_FRACTION_DIGITS),
	        '"></rect>\n');
	    },

	    _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {
	      var line = this._textLines[i],
	          heightOfLine = this.getHeightOfLine(i) / this.lineHeight,
	          boxWidth = 0,
	          boxStart = 0,
	          charBox, currentColor,
	          lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');
	      for (var j = 0, jlen = line.length; j < jlen; j++) {
	        charBox = this.__charBounds[i][j];
	        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');
	        if (currentColor !== lastColor) {
	          lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart,
	            textTopOffset, boxWidth, heightOfLine);
	          boxStart = charBox.left;
	          boxWidth = charBox.width;
	          lastColor = currentColor;
	        }
	        else {
	          boxWidth += charBox.kernedWidth;
	        }
	      }
	      currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart,
	        textTopOffset, boxWidth, heightOfLine);
	    },

	    /**
	     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
	     * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
	     *
	     * @private
	     * @param {*} value
	     * @return {String}
	     */
	    _getFillAttributes: function(value) {
	      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';
	      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
	        return 'fill="' + value + '"';
	      }
	      return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
	    },

	    /**
	     * @private
	     */
	    _getSVGLineTopOffset: function(lineIndex) {
	      var lineTopOffset = 0, lastHeight = 0;
	      for (var j = 0; j < lineIndex; j++) {
	        lineTopOffset += this.getHeightOfLine(j);
	      }
	      lastHeight = this.getHeightOfLine(j);
	      return {
	        lineTop: lineTopOffset,
	        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
	      };
	    },

	    /**
	     * Returns styles-string for svg-export
	     * @param {Boolean} skipShadow a boolean to skip shadow filter output
	     * @return {String}
	     */
	    getSvgStyles: function(skipShadow) {
	      var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);
	      return svgStyle + ' white-space: pre;';
	    },
	  });
	})();
	/* _TO_SVG_END_ */


	(function(global) {

	  var fabric = global.fabric || (global.fabric = {});

	  /**
	   * Textbox class, based on IText, allows the user to resize the text rectangle
	   * and wraps lines automatically. Textboxes have their Y scaling locked, the
	   * user can only change width. Height is adjusted automatically based on the
	   * wrapping of lines.
	   * @class fabric.Textbox
	   * @extends fabric.IText
	   * @mixes fabric.Observable
	   * @return {fabric.Textbox} thisArg
	   * @see {@link fabric.Textbox#initialize} for constructor definition
	   */
	  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'textbox',

	    /**
	     * Minimum width of textbox, in pixels.
	     * @type Number
	     * @default
	     */
	    minWidth: 20,

	    /**
	     * Minimum calculated width of a textbox, in pixels.
	     * fixed to 2 so that an empty textbox cannot go to 0
	     * and is still selectable without text.
	     * @type Number
	     * @default
	     */
	    dynamicMinWidth: 2,

	    /**
	     * Cached array of text wrapping.
	     * @type Array
	     */
	    __cachedLines: null,

	    /**
	     * Override standard Object class values
	     */
	    lockScalingFlip: true,

	    /**
	     * Override standard Object class values
	     * Textbox needs this on false
	     */
	    noScaleCache: false,

	    /**
	     * Properties which when set cause object to change dimensions
	     * @type Object
	     * @private
	     */
	    _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),

	    /**
	     * Use this regular expression to split strings in breakable lines
	     * @private
	     */
	    _wordJoiners: /[ \t\r]/,

	    /**
	     * Use this boolean property in order to split strings that have no white space concept.
	     * this is a cheap way to help with chinese/japaense
	     * @type Boolean
	     * @since 2.6.0
	     */
	    splitByGrapheme: false,

	    /**
	     * Unlike superclass's version of this function, Textbox does not update
	     * its width.
	     * @private
	     * @override
	     */
	    initDimensions: function() {
	      if (this.__skipDimension) {
	        return;
	      }
	      this.isEditing && this.initDelayedCursor();
	      this.clearContextTop();
	      this._clearCache();
	      // clear dynamicMinWidth as it will be different after we re-wrap line
	      this.dynamicMinWidth = 0;
	      // wrap lines
	      this._styleMap = this._generateStyleMap(this._splitText());
	      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap
	      if (this.dynamicMinWidth > this.width) {
	        this._set('width', this.dynamicMinWidth);
	      }
	      if (this.textAlign.indexOf('justify') !== -1) {
	        // once text is measured we need to make space fatter to make justified text.
	        this.enlargeSpaces();
	      }
	      // clear cache and re-calculate height
	      this.height = this.calcTextHeight();
	      this.saveState({ propertySet: '_dimensionAffectingProps' });
	    },

	    /**
	     * Generate an object that translates the style object so that it is
	     * broken up by visual lines (new lines and automatic wrapping).
	     * The original text styles object is broken up by actual lines (new lines only),
	     * which is only sufficient for Text / IText
	     * @private
	     */
	    _generateStyleMap: function(textInfo) {
	      var realLineCount     = 0,
	          realLineCharCount = 0,
	          charCount         = 0,
	          map               = {};

	      for (var i = 0; i < textInfo.graphemeLines.length; i++) {
	        if (textInfo.graphemeText[charCount] === '\n' && i > 0) {
	          realLineCharCount = 0;
	          charCount++;
	          realLineCount++;
	        }
	        else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {
	          // this case deals with space's that are removed from end of lines when wrapping
	          realLineCharCount++;
	          charCount++;
	        }

	        map[i] = { line: realLineCount, offset: realLineCharCount };

	        charCount += textInfo.graphemeLines[i].length;
	        realLineCharCount += textInfo.graphemeLines[i].length;
	      }

	      return map;
	    },

	    /**
	     * Returns true if object has a style property or has it on a specified line
	     * @param {Number} lineIndex
	     * @return {Boolean}
	     */
	    styleHas: function(property, lineIndex) {
	      if (this._styleMap && !this.isWrapping) {
	        var map = this._styleMap[lineIndex];
	        if (map) {
	          lineIndex = map.line;
	        }
	      }
	      return fabric.Text.prototype.styleHas.call(this, property, lineIndex);
	    },

	    /**
	     * Returns true if object has no styling or no styling in a line
	     * @param {Number} lineIndex , lineIndex is on wrapped lines.
	     * @return {Boolean}
	     */
	    isEmptyStyles: function(lineIndex) {
	      var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false;
	      var map = this._styleMap[lineIndex];
	      var mapNextLine = this._styleMap[lineIndex + 1];
	      if (map) {
	        lineIndex = map.line;
	        offset = map.offset;
	      }
	      if (mapNextLine) {
	        nextLineIndex = mapNextLine.line;
	        shouldLimit = nextLineIndex === lineIndex;
	        nextOffset = mapNextLine.offset;
	      }
	      obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };
	      for (var p1 in obj) {
	        for (var p2 in obj[p1]) {
	          if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {
	            // eslint-disable-next-line no-unused-vars
	            for (var p3 in obj[p1][p2]) {
	              return false;
	            }
	          }
	        }
	      }
	      return true;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @private
	     */
	    _getStyleDeclaration: function(lineIndex, charIndex) {
	      if (this._styleMap && !this.isWrapping) {
	        var map = this._styleMap[lineIndex];
	        if (!map) {
	          return null;
	        }
	        lineIndex = map.line;
	        charIndex = map.offset + charIndex;
	      }
	      return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} style
	     * @private
	     */
	    _setStyleDeclaration: function(lineIndex, charIndex, style) {
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;

	      this.styles[lineIndex][charIndex] = style;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @private
	     */
	    _deleteStyleDeclaration: function(lineIndex, charIndex) {
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;
	      delete this.styles[lineIndex][charIndex];
	    },

	    /**
	     * probably broken need a fix
	     * Returns the real style line that correspond to the wrapped lineIndex line
	     * Used just to verify if the line does exist or not.
	     * @param {Number} lineIndex
	     * @returns {Boolean} if the line exists or not
	     * @private
	     */
	    _getLineStyle: function(lineIndex) {
	      var map = this._styleMap[lineIndex];
	      return !!this.styles[map.line];
	    },

	    /**
	     * Set the line style to an empty object so that is initialized
	     * @param {Number} lineIndex
	     * @param {Object} style
	     * @private
	     */
	    _setLineStyle: function(lineIndex) {
	      var map = this._styleMap[lineIndex];
	      this.styles[map.line] = {};
	    },

	    /**
	     * Wraps text using the 'width' property of Textbox. First this function
	     * splits text on newlines, so we preserve newlines entered by the user.
	     * Then it wraps each line using the width of the Textbox by calling
	     * _wrapLine().
	     * @param {Array} lines The string array of text that is split into lines
	     * @param {Number} desiredWidth width you want to wrap to
	     * @returns {Array} Array of lines
	     */
	    _wrapText: function(lines, desiredWidth) {
	      var wrapped = [], i;
	      this.isWrapping = true;
	      for (i = 0; i < lines.length; i++) {
	        wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));
	      }
	      this.isWrapping = false;
	      return wrapped;
	    },

	    /**
	     * Helper function to measure a string of text, given its lineIndex and charIndex offset
	     * it gets called when charBounds are not available yet.
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {String} text
	     * @param {number} lineIndex
	     * @param {number} charOffset
	     * @returns {number}
	     * @private
	     */
	    _measureWord: function(word, lineIndex, charOffset) {
	      var width = 0, prevGrapheme, skipLeft = true;
	      charOffset = charOffset || 0;
	      for (var i = 0, len = word.length; i < len; i++) {
	        var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);
	        width += box.kernedWidth;
	        prevGrapheme = word[i];
	      }
	      return width;
	    },

	    /**
	     * Wraps a line of text using the width of the Textbox and a context.
	     * @param {Array} line The grapheme array that represent the line
	     * @param {Number} lineIndex
	     * @param {Number} desiredWidth width you want to wrap the line to
	     * @param {Number} reservedSpace space to remove from wrapping for custom functionalities
	     * @returns {Array} Array of line(s) into which the given text is wrapped
	     * to.
	     */
	    _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {
	      var lineWidth = 0,
	          splitByGrapheme = this.splitByGrapheme,
	          graphemeLines = [],
	          line = [],
	          // spaces in different languges?
	          words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),
	          word = '',
	          offset = 0,
	          infix = splitByGrapheme ? '' : ' ',
	          wordWidth = 0,
	          infixWidth = 0,
	          largestWordWidth = 0,
	          lineJustStarted = true,
	          additionalSpace = splitByGrapheme ? 0 : this._getWidthOfCharSpacing(),
	          reservedSpace = reservedSpace || 0;
	      // fix a difference between split and graphemeSplit
	      if (words.length === 0) {
	        words.push([]);
	      }
	      desiredWidth -= reservedSpace;
	      for (var i = 0; i < words.length; i++) {
	        // if using splitByGrapheme words are already in graphemes.
	        word = splitByGrapheme ? words[i] : fabric.util.string.graphemeSplit(words[i]);
	        wordWidth = this._measureWord(word, lineIndex, offset);
	        offset += word.length;

	        lineWidth += infixWidth + wordWidth - additionalSpace;

	        if (lineWidth >= desiredWidth && !lineJustStarted) {
	          graphemeLines.push(line);
	          line = [];
	          lineWidth = wordWidth;
	          lineJustStarted = true;
	        }
	        else {
	          lineWidth += additionalSpace;
	        }

	        if (!lineJustStarted && !splitByGrapheme) {
	          line.push(infix);
	        }
	        line = line.concat(word);

	        infixWidth = this._measureWord([infix], lineIndex, offset);
	        offset++;
	        lineJustStarted = false;
	        // keep track of largest word
	        if (wordWidth > largestWordWidth) {
	          largestWordWidth = wordWidth;
	        }
	      }

	      i && graphemeLines.push(line);

	      if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
	        this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
	      }

	      return graphemeLines;
	    },

	    /**
	     * Detect if the text line is ended with an hard break
	     * text and itext do not have wrapping, return false
	     * @param {Number} lineIndex text to split
	     * @return {Boolean}
	     */
	    isEndOfWrapping: function(lineIndex) {
	      if (!this._styleMap[lineIndex + 1]) {
	        // is last line, return true;
	        return true;
	      }
	      if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {
	        // this is last line before a line break, return true;
	        return true;
	      }
	      return false;
	    },

	    /**
	     * Detect if a line has a linebreak and so we need to account for it when moving
	     * and counting style.
	     * @return Number
	     */
	    missingNewlineOffset: function(lineIndex) {
	      if (this.splitByGrapheme) {
	        return this.isEndOfWrapping(lineIndex) ? 1 : 0;
	      }
	      return 1;
	    },

	    /**
	    * Gets lines of text to render in the Textbox. This function calculates
	    * text wrapping on the fly every time it is called.
	    * @param {String} text text to split
	    * @returns {Array} Array of lines in the Textbox.
	    * @override
	    */
	    _splitTextIntoLines: function(text) {
	      var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),
	          graphemeLines = this._wrapText(newText.lines, this.width),
	          lines = new Array(graphemeLines.length);
	      for (var i = 0; i < graphemeLines.length; i++) {
	        lines[i] = graphemeLines[i].join('');
	      }
	      newText.lines = lines;
	      newText.graphemeLines = graphemeLines;
	      return newText;
	    },

	    getMinWidth: function() {
	      return Math.max(this.minWidth, this.dynamicMinWidth);
	    },

	    _removeExtraneousStyles: function() {
	      var linesToKeep = {};
	      for (var prop in this._styleMap) {
	        if (this._textLines[prop]) {
	          linesToKeep[this._styleMap[prop].line] = 1;
	        }
	      }
	      for (var prop in this.styles) {
	        if (!linesToKeep[prop]) {
	          delete this.styles[prop];
	        }
	      }
	    },

	    /**
	     * Returns object representation of an instance
	     * @method toObject
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));
	    }
	  });

	  /**
	   * Returns fabric.Textbox instance from an object representation
	   * @static
	   * @memberOf fabric.Textbox
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created
	   */
	  fabric.Textbox.fromObject = function(object, callback) {
	    return fabric.Object._fromObject('Textbox', object, callback, 'text');
	  };
	})( exports );
	});
	var fabric_2 = fabric_1.fabric;

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Component interface
	 */

	/**
	 * Component interface
	 * @class
	 * @param {string} name - component name
	 * @param {Graphics} graphics - Graphics instance
	 * @ignore
	 */
	var Component =
	/*#__PURE__*/
	function () {
	  function Component(name, graphics) {
	    _classCallCheck(this, Component);

	    /**
	     * Component name
	     * @type {string}
	     */
	    this.name = name;
	    /**
	     * Graphics instance
	     * @type {Graphics}
	     */

	    this.graphics = graphics;
	  }
	  /**
	   * Fire Graphics event
	   * @param {Array} args - arguments
	   * @returns {Object} return value
	   */


	  _createClass(Component, [{
	    key: "fire",
	    value: function fire() {
	      var context = this.graphics;

	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return this.graphics.fire.apply(context, args);
	    }
	    /**
	     * Save image(background) of canvas
	     * @param {string} name - Name of image
	     * @param {fabric.Image} oImage - Fabric image instance
	     */

	  }, {
	    key: "setCanvasImage",
	    value: function setCanvasImage(name, oImage) {
	      this.graphics.setCanvasImage(name, oImage);
	    }
	    /**
	     * Returns canvas element of fabric.Canvas[[lower-canvas]]
	     * @returns {HTMLCanvasElement}
	     */

	  }, {
	    key: "getCanvasElement",
	    value: function getCanvasElement() {
	      return this.graphics.getCanvasElement();
	    }
	    /**
	     * Get fabric.Canvas instance
	     * @returns {fabric.Canvas}
	     */

	  }, {
	    key: "getCanvas",
	    value: function getCanvas() {
	      return this.graphics.getCanvas();
	    }
	    /**
	     * Get canvasImage (fabric.Image instance)
	     * @returns {fabric.Image}
	     */

	  }, {
	    key: "getCanvasImage",
	    value: function getCanvasImage() {
	      return this.graphics.getCanvasImage();
	    }
	    /**
	     * Get image name
	     * @returns {string}
	     */

	  }, {
	    key: "getImageName",
	    value: function getImageName() {
	      return this.graphics.getImageName();
	    }
	    /**
	     * Get image editor
	     * @returns {ImageEditor}
	     */

	  }, {
	    key: "getEditor",
	    value: function getEditor() {
	      return this.graphics.getEditor();
	    }
	    /**
	     * Return component name
	     * @returns {string}
	     */

	  }, {
	    key: "getName",
	    value: function getName() {
	      return this.name;
	    }
	    /**
	     * Set image properties
	     * @param {Object} setting - Image properties
	     * @param {boolean} [withRendering] - If true, The changed image will be reflected in the canvas
	     */

	  }, {
	    key: "setImageProperties",
	    value: function setImageProperties(setting, withRendering) {
	      this.graphics.setImageProperties(setting, withRendering);
	    }
	    /**
	     * Set canvas dimension - css only
	     * @param {Object} dimension - Canvas css dimension
	     */

	  }, {
	    key: "setCanvasCssDimension",
	    value: function setCanvasCssDimension(dimension) {
	      this.graphics.setCanvasCssDimension(dimension);
	    }
	    /**
	     * Set canvas dimension - css only
	     * @param {Object} dimension - Canvas backstore dimension
	     */

	  }, {
	    key: "setCanvasBackstoreDimension",
	    value: function setCanvasBackstoreDimension(dimension) {
	      this.graphics.setCanvasBackstoreDimension(dimension);
	    }
	    /**
	     * Adjust canvas dimension with scaling image
	     */

	  }, {
	    key: "adjustCanvasDimension",
	    value: function adjustCanvasDimension() {
	      this.graphics.adjustCanvasDimension();
	    }
	  }]);

	  return Component;
	}();

	var imageOption = {
	  padding: 0,
	  crossOrigin: 'Anonymous'
	};
	/**
	 * ImageLoader components
	 * @extends {Component}
	 * @class ImageLoader
	 * @param {Graphics} graphics - Graphics instance
	 * @ignore
	 */

	var ImageLoader =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(ImageLoader, _Component);

	  function ImageLoader(graphics) {
	    _classCallCheck(this, ImageLoader);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ImageLoader).call(this, componentNames.IMAGE_LOADER, graphics));
	  }
	  /**
	   * Load image from url
	   * @param {?string} imageName - File name
	   * @param {?(fabric.Image|string)} img - fabric.Image instance or URL of an image
	   * @returns {jQuery.Deferred} deferred
	   */


	  _createClass(ImageLoader, [{
	    key: "load",
	    value: function load(imageName, img) {
	      var _this = this;

	      var promise;

	      if (!imageName && !img) {
	        // Back to the initial state, not error.
	        var canvas = this.getCanvas();
	        canvas.backgroundImage = null;
	        canvas.renderAll();
	        promise = new Promise(function (resolve) {
	          _this.setCanvasImage('', null);

	          resolve();
	        });
	      } else {
	        promise = this._setBackgroundImage(img).then(function (oImage) {
	          _this.setCanvasImage(imageName, oImage);

	          _this.adjustCanvasDimension();

	          return oImage;
	        });
	      }

	      return promise;
	    }
	    /**
	     * Set background image
	     * @param {?(fabric.Image|String)} img fabric.Image instance or URL of an image to set background to
	     * @returns {$.Deferred} deferred
	     * @private
	     */

	  }, {
	    key: "_setBackgroundImage",
	    value: function _setBackgroundImage(img) {
	      var _this2 = this;

	      if (!img) {
	        return Promise.reject(rejectMessages.loadImage);
	      }

	      return new Promise(function (resolve, reject) {
	        var canvas = _this2.getCanvas();

	        canvas.setBackgroundImage(img, function () {
	          var oImage = canvas.backgroundImage;

	          if (oImage && oImage.getElement()) {
	            resolve(oImage);
	          } else {
	            reject(rejectMessages.loadingImageFailed);
	          }
	        }, imageOption);
	      });
	    }
	  }]);

	  return ImageLoader;
	}(Component);

	var CORNER_TYPE_TOP_LEFT = 'tl';
	var CORNER_TYPE_TOP_RIGHT = 'tr';
	var CORNER_TYPE_MIDDLE_TOP = 'mt';
	var CORNER_TYPE_MIDDLE_LEFT = 'ml';
	var CORNER_TYPE_MIDDLE_RIGHT = 'mr';
	var CORNER_TYPE_MIDDLE_BOTTOM = 'mb';
	var CORNER_TYPE_BOTTOM_LEFT = 'bl';
	var CORNER_TYPE_BOTTOM_RIGHT = 'br';
	console.log('fabric', fabric_2);
	/**
	 * Cropzone object
	 * Issue: IE7, 8(with excanvas)
	 *  - Cropzone is a black zone without transparency.
	 * @class Cropzone
	 * @extends {fabric.Rect}
	 * @ignore
	 */

	var Cropzone = fabric_2.util.createClass(fabric_2.Rect,
	/** @lends Cropzone.prototype */
	{
	  /**
	   * Constructor
	   * @param {Object} canvas canvas
	   * @param {Object} options Options object
	   * @param {Object} extendsOptions object for extends "options" 
	   * @override
	   */
	  initialize: function initialize(canvas, options, extendsOptions) {
	    options = Object.assign(options, extendsOptions);
	    options.type = 'cropzone';
	    this.callSuper('initialize', options);
	    this.canvas = canvas;
	    this.options = options;
	    this.on({
	      'moving': this._onMoving.bind(this),
	      'scaling': this._onScaling.bind(this)
	    });
	  },

	  /**
	   * Render Crop-zone
	   * @private
	   * @override
	   */
	  _renderCropzone: function _renderCropzone() {
	    var cropzoneDashLineWidth = 7;
	    var cropzoneDashLineOffset = 7; // Calc original scale

	    var ctx = this.canvas.getContext();
	    var originalFlipX = this.flipX ? -1 : 1;
	    var originalFlipY = this.flipY ? -1 : 1;
	    var originalScaleX = originalFlipX / this.scaleX;
	    var originalScaleY = originalFlipY / this.scaleY; // Set original scale

	    ctx.scale(originalScaleX, originalScaleY); // Render outer rect

	    this._fillOuterRect(ctx, 'rgba(0, 0, 0, 0.5)');

	    if (this.options.lineWidth) {
	      this._fillInnerRect(ctx);

	      this._strokeBorder(ctx, 'rgb(255, 255, 255)', {
	        lineWidth: this.options.lineWidth
	      });
	    } else {
	      // Black dash line
	      this._strokeBorder(ctx, 'rgb(0, 0, 0)', {
	        lineDashWidth: cropzoneDashLineWidth
	      }); // White dash line


	      this._strokeBorder(ctx, 'rgb(255, 255, 255)', {
	        lineDashWidth: cropzoneDashLineWidth,
	        lineDashOffset: cropzoneDashLineOffset
	      });
	    } // Reset scale


	    ctx.scale(1 / originalScaleX, 1 / originalScaleY);
	  },

	  /**
	   * Render Crop-zone
	   * @private
	   * @override
	   */
	  _render: function _render() {
	    var ctx = this.canvas.getContext();
	    this.callSuper('_render', ctx);

	    this._renderCropzone();
	  },

	  /**
	   * Cropzone-coordinates with outer rectangle
	   *
	   *     x0     x1         x2      x3
	   *  y0 +--------------------------+
	   *     |///////|//////////|///////|    // <--- "Outer-rectangle"
	   *     |///////|//////////|///////|
	   *  y1 +-------+----------+-------+
	   *     |///////| Cropzone |///////|    Cropzone is the "Inner-rectangle"
	   *     |///////|  (0, 0)  |///////|    Center point (0, 0)
	   *  y2 +-------+----------+-------+
	   *     |///////|//////////|///////|
	   *     |///////|//////////|///////|
	   *  y3 +--------------------------+
	   *
	   * @typedef {{x: Array<number>, y: Array<number>}} cropzoneCoordinates
	   * @ignore
	   */

	  /**
	   * Fill outer rectangle
	   * @param {CanvasRenderingContext2D} ctx - Context
	   * @param {string|CanvasGradient|CanvasPattern} fillStyle - Fill-style
	   * @private
	   */
	  _fillOuterRect: function _fillOuterRect(ctx, fillStyle) {
	    var _this$_getCoordinates = this._getCoordinates(),
	        x = _this$_getCoordinates.x,
	        y = _this$_getCoordinates.y;

	    ctx.save();
	    ctx.fillStyle = fillStyle;
	    ctx.beginPath(); // Outer rectangle
	    // Numbers are +/-1 so that overlay edges don't get blurry.

	    ctx.moveTo(x[0] - 1, y[0] - 1);
	    ctx.lineTo(x[3] + 1, y[0] - 1);
	    ctx.lineTo(x[3] + 1, y[3] + 1);
	    ctx.lineTo(x[0] - 1, y[3] + 1);
	    ctx.lineTo(x[0] - 1, y[0] - 1);
	    ctx.closePath(); // Inner rectangle

	    ctx.moveTo(x[1], y[1]);
	    ctx.lineTo(x[1], y[2]);
	    ctx.lineTo(x[2], y[2]);
	    ctx.lineTo(x[2], y[1]);
	    ctx.lineTo(x[1], y[1]);
	    ctx.closePath();
	    ctx.fill();
	    ctx.restore();
	  },

	  /**
	   * Draw Inner grid line
	   * @param {CanvasRenderingContext2D} ctx - Context
	   * @private
	   */
	  _fillInnerRect: function _fillInnerRect(ctx) {
	    var _this$_getCoordinates2 = this._getCoordinates(),
	        outerX = _this$_getCoordinates2.x,
	        outerY = _this$_getCoordinates2.y;

	    var x = this._caculateInnerPosition(outerX, (outerX[2] - outerX[1]) / 3);

	    var y = this._caculateInnerPosition(outerY, (outerY[2] - outerY[1]) / 3);

	    ctx.save();
	    ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';
	    ctx.lineWidth = this.options.lineWidth;
	    ctx.beginPath();
	    ctx.moveTo(x[0], y[1]);
	    ctx.lineTo(x[3], y[1]);
	    ctx.moveTo(x[0], y[2]);
	    ctx.lineTo(x[3], y[2]);
	    ctx.moveTo(x[1], y[0]);
	    ctx.lineTo(x[1], y[3]);
	    ctx.moveTo(x[2], y[0]);
	    ctx.lineTo(x[2], y[3]);
	    ctx.stroke();
	    ctx.closePath();
	    ctx.restore();
	  },

	  /**
	   * Calculate Inner Position
	   * @param {Array} outer - outer position
	   * @param {number} size - interval for calculate
	   * @returns {Array} - inner position
	   * @private
	   */
	  _caculateInnerPosition: function _caculateInnerPosition(outer, size) {
	    var position = [];
	    position[0] = outer[1];
	    position[1] = outer[1] + size;
	    position[2] = outer[1] + size * 2;
	    position[3] = outer[2];
	    return position;
	  },

	  /**
	   * Get coordinates
	   * @param {CanvasRenderingContext2D} ctx - Context
	   * @returns {cropzoneCoordinates} - {@link cropzoneCoordinates}
	   * @private
	   */
	  _getCoordinates: function _getCoordinates() {
	    var canvas = this.canvas,
	        width = this.width,
	        height = this.height,
	        left = this.left,
	        top = this.top;
	    var halfWidth = width / 2;
	    var halfHeight = height / 2;
	    var canvasHeight = canvas.getHeight(); // fabric object

	    var canvasWidth = canvas.getWidth(); // fabric object

	    return {
	      x: [-(halfWidth + left), // x0
	      -halfWidth, // x1
	      halfWidth, // x2
	      halfWidth + (canvasWidth - left - width) // x3
	      ].map(Math.ceil),
	      y: [-(halfHeight + top), // y0
	      -halfHeight, // y1
	      halfHeight, // y2
	      halfHeight + (canvasHeight - top - height) // y3
	      ].map(Math.ceil)
	    };
	  },

	  /**
	   * Stroke border
	   * @param {CanvasRenderingContext2D} ctx - Context
	   * @param {string|CanvasGradient|CanvasPattern} strokeStyle - Stroke-style
	   * @param {number} lineDashWidth - Dash width
	   * @param {number} [lineDashOffset] - Dash offset
	   * @private
	   */
	  _strokeBorder: function _strokeBorder(ctx, strokeStyle, _ref) {
	    var lineDashWidth = _ref.lineDashWidth,
	        lineDashOffset = _ref.lineDashOffset,
	        lineWidth = _ref.lineWidth;
	    var halfWidth = this.width / 2;
	    var halfHeight = this.height / 2;
	    ctx.save();
	    ctx.strokeStyle = strokeStyle;

	    if (ctx.setLineDash) {
	      ctx.setLineDash([lineDashWidth, lineDashWidth]);
	    }

	    if (lineDashOffset) {
	      ctx.lineDashOffset = lineDashOffset;
	    }

	    if (lineWidth) {
	      ctx.lineWidth = lineWidth;
	    }

	    ctx.beginPath();
	    ctx.moveTo(-halfWidth, -halfHeight);
	    ctx.lineTo(halfWidth, -halfHeight);
	    ctx.lineTo(halfWidth, halfHeight);
	    ctx.lineTo(-halfWidth, halfHeight);
	    ctx.lineTo(-halfWidth, -halfHeight);
	    ctx.stroke();
	    ctx.restore();
	  },

	  /**
	   * onMoving event listener
	   * @private
	   */
	  _onMoving: function _onMoving() {
	    var height = this.height,
	        width = this.width,
	        left = this.left,
	        top = this.top;
	    var maxLeft = this.canvas.getWidth() - width;
	    var maxTop = this.canvas.getHeight() - height;
	    this.left = clamp(left, 0, maxLeft);
	    this.top = clamp(top, 0, maxTop);
	  },

	  /**
	   * onScaling event listener
	   * @param {{e: MouseEvent}} fEvent - Fabric event
	   * @private
	   */
	  _onScaling: function _onScaling(fEvent) {
	    var pointer = this.canvas.getPointer(fEvent.e);

	    var settings = this._calcScalingSizeFromPointer(pointer); // On scaling cropzone,
	    // change real width and height and fix scaleFactor to 1


	    this.scale(1).set(settings);
	  },

	  /**
	   * Calc scaled size from mouse pointer with selected corner
	   * @param {{x: number, y: number}} pointer - Mouse position
	   * @returns {Object} Having left or(and) top or(and) width or(and) height.
	   * @private
	   */
	  _calcScalingSizeFromPointer: function _calcScalingSizeFromPointer(pointer) {
	    var pointerX = pointer.x,
	        pointerY = pointer.y,
	        tlScalingSize = this._calcTopLeftScalingSizeFromPointer(pointerX, pointerY),
	        brScalingSize = this._calcBottomRightScalingSizeFromPointer(pointerX, pointerY);
	    /*
	     * @todo: ì¼ë° ê°ì²´ìì shift ì¡°í©í¤ë¥¼ ëë¥´ë©´ free size scalingì´ ë¨ --> íì¸í´ë³¼ê²
	     *      canvas.class.js // _scaleObject: function(...){...}
	     */


	    return this._makeScalingSettings(tlScalingSize, brScalingSize);
	  },

	  /**
	   * Calc scaling size(position + dimension) from left-top corner
	   * @param {number} x - Mouse position X
	   * @param {number} y - Mouse position Y
	   * @returns {{top: number, left: number, width: number, height: number}}
	   * @private
	   */
	  _calcTopLeftScalingSizeFromPointer: function _calcTopLeftScalingSizeFromPointer(x, y) {
	    var rect = this.getBoundingRect(false, true);
	    var bottom = rect.height + this.top;
	    var right = rect.width + this.left;
	    var top = clamp(y, 0, bottom - 1); // 0 <= top <= (bottom - 1)

	    var left = clamp(x, 0, right - 1); // 0 <= left <= (right - 1)
	    // When scaling "Top-Left corner": It fixes right and bottom coordinates

	    return {
	      top: top,
	      left: left,
	      width: right - left,
	      height: bottom - top
	    };
	  },

	  /**
	   * Calc scaling size from right-bottom corner
	   * @param {number} x - Mouse position X
	   * @param {number} y - Mouse position Y
	   * @returns {{width: number, height: number}}
	   * @private
	   */
	  _calcBottomRightScalingSizeFromPointer: function _calcBottomRightScalingSizeFromPointer(x, y) {
	    var _this$canvas = this.canvas,
	        maxX = _this$canvas.width,
	        maxY = _this$canvas.height;
	    var left = this.left,
	        top = this.top; // When scaling "Bottom-Right corner": It fixes left and top coordinates

	    return {
	      width: clamp(x, left + 1, maxX) - left,
	      // (width = x - left), (left + 1 <= x <= maxX)
	      height: clamp(y, top + 1, maxY) - top // (height = y - top), (top + 1 <= y <= maxY)

	    };
	  },

	  /* eslint-disable complexity */

	  /**
	   * Make scaling settings
	   * @param {{width: number, height: number, left: number, top: number}} tl - Top-Left setting
	   * @param {{width: number, height: number}} br - Bottom-Right setting
	   * @returns {{width: ?number, height: ?number, left: ?number, top: ?number}} Position setting
	   * @private
	   */
	  _makeScalingSettings: function _makeScalingSettings(tl, br) {
	    var tlWidth = tl.width;
	    var tlHeight = tl.height;
	    var brHeight = br.height;
	    var brWidth = br.width;
	    var tlLeft = tl.left;
	    var tlTop = tl.top;
	    var settings;

	    switch (this.__corner) {
	      case CORNER_TYPE_TOP_LEFT:
	        settings = tl;
	        break;

	      case CORNER_TYPE_TOP_RIGHT:
	        settings = {
	          width: brWidth,
	          height: tlHeight,
	          top: tlTop
	        };
	        break;

	      case CORNER_TYPE_BOTTOM_LEFT:
	        settings = {
	          width: tlWidth,
	          height: brHeight,
	          left: tlLeft
	        };
	        break;

	      case CORNER_TYPE_BOTTOM_RIGHT:
	        settings = br;
	        break;

	      case CORNER_TYPE_MIDDLE_LEFT:
	        settings = {
	          width: tlWidth,
	          left: tlLeft
	        };
	        break;

	      case CORNER_TYPE_MIDDLE_TOP:
	        settings = {
	          height: tlHeight,
	          top: tlTop
	        };
	        break;

	      case CORNER_TYPE_MIDDLE_RIGHT:
	        settings = {
	          width: brWidth
	        };
	        break;

	      case CORNER_TYPE_MIDDLE_BOTTOM:
	        settings = {
	          height: brHeight
	        };
	        break;
	    }

	    return settings;
	  },

	  /* eslint-enable complexity */

	  /**
	   * Return the whether this cropzone is valid
	   * @returns {boolean}
	   */
	  isValid: function isValid() {
	    return this.left >= 0 && this.top >= 0 && this.width > 0 && this.height > 0;
	  }
	});

	var MOUSE_MOVE_THRESHOLD = 10;
	var DEFAULT_OPTION = {
	  top: -10,
	  left: -10,
	  height: 1,
	  width: 1
	};
	/**
	 * Cropper components
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @class Cropper
	 * @ignore
	 */

	var Cropper =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Cropper, _Component);

	  function Cropper(graphics) {
	    var _this;

	    _classCallCheck(this, Cropper);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cropper).call(this, componentNames.CROPPER, graphics));
	    /**
	     * Cropzone
	     * @type {Cropzone}
	     * @private
	     */

	    _this._cropzone = null;
	    /**
	     * StartX of Cropzone
	     * @type {number}
	     * @private
	     */

	    _this._startX = null;
	    /**
	     * StartY of Cropzone
	     * @type {number}
	     * @private
	     */

	    _this._startY = null;
	    /**
	     * State whether shortcut key is pressed or not
	     * @type {boolean}
	     * @private
	     */

	    _this._withShiftKey = false;
	    /**
	     * Listeners
	     * @type {object.<string, function>}
	     * @private
	     */

	    _this._listeners = {
	      keydown: _this._onKeyDown.bind(_assertThisInitialized(_this)),
	      keyup: _this._onKeyUp.bind(_assertThisInitialized(_this)),
	      mousedown: _this._onFabricMouseDown.bind(_assertThisInitialized(_this)),
	      mousemove: _this._onFabricMouseMove.bind(_assertThisInitialized(_this)),
	      mouseup: _this._onFabricMouseUp.bind(_assertThisInitialized(_this))
	    };
	    return _this;
	  }
	  /**
	   * Start cropping
	   */


	  _createClass(Cropper, [{
	    key: "start",
	    value: function start() {
	      if (this._cropzone) {
	        return;
	      }

	      var canvas = this.getCanvas();
	      canvas.forEachObject(function (obj) {
	        // {@link http://fabricjs.com/docs/fabric.Object.html#evented}
	        obj.evented = false;
	      });
	      this._cropzone = new Cropzone(canvas, {
	        left: 0,
	        top: 0,
	        width: 0.5,
	        height: 0.5,
	        strokeWidth: 0,
	        // {@link https://github.com/kangax/fabric.js/issues/2860}
	        cornerSize: 10,
	        cornerColor: 'black',
	        fill: 'transparent',
	        hasRotatingPoint: false,
	        hasBorders: false,
	        lockScalingFlip: true,
	        lockRotation: true
	      }, this.graphics.cropSelectionStyle);
	      canvas.discardActiveObject();
	      canvas.add(this._cropzone);
	      canvas.on('mouse:down', this._listeners.mousedown);
	      canvas.selection = false;
	      canvas.defaultCursor = 'crosshair';
	      fabric_2.util.addListener(document, 'keydown', this._listeners.keydown);
	      fabric_2.util.addListener(document, 'keyup', this._listeners.keyup);
	    }
	    /**
	     * End cropping
	     */

	  }, {
	    key: "end",
	    value: function end() {
	      var canvas = this.getCanvas();
	      var cropzone = this._cropzone;

	      if (!cropzone) {
	        return;
	      }

	      canvas.remove(cropzone);
	      canvas.selection = true;
	      canvas.defaultCursor = 'default';
	      canvas.off('mouse:down', this._listeners.mousedown);
	      canvas.forEachObject(function (obj) {
	        obj.evented = true;
	      });
	      this._cropzone = null;
	      fabric_2.util.removeListener(document, 'keydown', this._listeners.keydown);
	      fabric_2.util.removeListener(document, 'keyup', this._listeners.keyup);
	    }
	    /**
	     * onMousedown handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseDown",
	    value: function _onFabricMouseDown(fEvent) {
	      var canvas = this.getCanvas();

	      if (fEvent.target) {
	        return;
	      }

	      canvas.selection = false;
	      var coord = canvas.getPointer(fEvent.e);
	      this._startX = coord.x;
	      this._startY = coord.y;
	      canvas.on({
	        'mouse:move': this._listeners.mousemove,
	        'mouse:up': this._listeners.mouseup
	      });
	    }
	    /**
	     * onMousemove handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseMove",
	    value: function _onFabricMouseMove(fEvent) {
	      var canvas = this.getCanvas();
	      var pointer = canvas.getPointer(fEvent.e);
	      var x = pointer.x,
	          y = pointer.y;
	      var cropzone = this._cropzone;

	      if (Math.abs(x - this._startX) + Math.abs(y - this._startY) > MOUSE_MOVE_THRESHOLD) {
	        canvas.remove(cropzone);
	        cropzone.set(this._calcRectDimensionFromPoint(x, y));
	        canvas.add(cropzone);
	        canvas.setActiveObject(cropzone);
	      }
	    }
	    /**
	     * Get rect dimension setting from Canvas-Mouse-Position(x, y)
	     * @param {number} x - Canvas-Mouse-Position x
	     * @param {number} y - Canvas-Mouse-Position Y
	     * @returns {{left: number, top: number, width: number, height: number}}
	     * @private
	     */

	  }, {
	    key: "_calcRectDimensionFromPoint",
	    value: function _calcRectDimensionFromPoint(x, y) {
	      var canvas = this.getCanvas();
	      var canvasWidth = canvas.getWidth();
	      var canvasHeight = canvas.getHeight();
	      var startX = this._startX;
	      var startY = this._startY;
	      var left = clamp(x, 0, startX);
	      var top = clamp(y, 0, startY);
	      var width = clamp(x, startX, canvasWidth) - left; // (startX <= x(mouse) <= canvasWidth) - left

	      var height = clamp(y, startY, canvasHeight) - top; // (startY <= y(mouse) <= canvasHeight) - top

	      if (this._withShiftKey) {
	        // make fixed ratio cropzone
	        if (width > height) {
	          height = width;
	        } else if (height > width) {
	          width = height;
	        }

	        if (startX >= x) {
	          left = startX - width;
	        }

	        if (startY >= y) {
	          top = startY - height;
	        }
	      }

	      return {
	        left: left,
	        top: top,
	        width: width,
	        height: height
	      };
	    }
	    /**
	     * onMouseup handler in fabric canvas
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseUp",
	    value: function _onFabricMouseUp() {
	      var cropzone = this._cropzone;
	      var listeners = this._listeners;
	      var canvas = this.getCanvas();
	      canvas.setActiveObject(cropzone);
	      canvas.off({
	        'mouse:move': listeners.mousemove,
	        'mouse:up': listeners.mouseup
	      });
	    }
	    /**
	     * Get cropped image data
	     * @param {Object} cropRect cropzone rect
	     *  @param {Number} cropRect.left left position
	     *  @param {Number} cropRect.top top position
	     *  @param {Number} cropRect.width width
	     *  @param {Number} cropRect.height height
	     * @returns {?{imageName: string, url: string}} cropped Image data
	     */

	  }, {
	    key: "getCroppedImageData",
	    value: function getCroppedImageData(cropRect) {
	      var canvas = this.getCanvas();
	      var containsCropzone = canvas.contains(this._cropzone);

	      if (!cropRect) {
	        return null;
	      }

	      if (containsCropzone) {
	        canvas.remove(this._cropzone);
	      }

	      var imageData = {
	        imageName: this.getImageName(),
	        url: canvas.toDataURL(cropRect)
	      };

	      if (containsCropzone) {
	        canvas.add(this._cropzone);
	      }

	      return imageData;
	    }
	    /**
	     * Get cropped rect
	     * @returns {Object} rect
	     */

	  }, {
	    key: "getCropzoneRect",
	    value: function getCropzoneRect() {
	      var cropzone = this._cropzone;

	      if (!cropzone.isValid()) {
	        return null;
	      }

	      return {
	        left: cropzone.left,
	        top: cropzone.top,
	        width: cropzone.width,
	        height: cropzone.height
	      };
	    }
	    /**
	     * Set a cropzone square
	     * @param {number} [presetRatio] - preset ratio
	     */

	  }, {
	    key: "setCropzoneRect",
	    value: function setCropzoneRect(presetRatio) {
	      var canvas = this.getCanvas();
	      var cropzone = this._cropzone;
	      canvas.discardActiveObject();
	      canvas.selection = false;
	      canvas.remove(cropzone);
	      cropzone.set(presetRatio ? this._getPresetCropSizePosition(presetRatio) : DEFAULT_OPTION);
	      canvas.add(cropzone);
	      canvas.selection = true;

	      if (presetRatio) {
	        canvas.setActiveObject(cropzone);
	      }
	    }
	    /**
	     * Set a cropzone square
	     * @param {number} presetRatio - preset ratio
	     * @returns {{left: number, top: number, width: number, height: number}}
	     * @private
	     */

	  }, {
	    key: "_getPresetCropSizePosition",
	    value: function _getPresetCropSizePosition(presetRatio) {
	      var canvas = this.getCanvas();
	      var originalWidth = canvas.getWidth();
	      var originalHeight = canvas.getHeight();
	      var standardSize = originalWidth >= originalHeight ? originalWidth : originalHeight;

	      var getScale = function getScale(value, orignalValue) {
	        return value > orignalValue ? orignalValue / value : 1;
	      };

	      var width = standardSize * presetRatio;
	      var height = standardSize;
	      var scaleWidth = getScale(width, originalWidth);

	      var _map = [width, height].map(function (sizeValue) {
	        return sizeValue * scaleWidth;
	      });

	      var _map2 = _slicedToArray(_map, 2);

	      width = _map2[0];
	      height = _map2[1];
	      var scaleHeight = getScale(height, originalHeight);

	      var _map3 = [width, height].map(function (sizeValue) {
	        return sizeValue * scaleHeight;
	      });

	      var _map4 = _slicedToArray(_map3, 2);

	      width = _map4[0];
	      height = _map4[1];
	      return {
	        top: (originalHeight - height) / 2,
	        left: (originalWidth - width) / 2,
	        width: width,
	        height: height
	      };
	    }
	    /**
	     * Keydown event handler
	     * @param {KeyboardEvent} e - Event object
	     * @private
	     */

	  }, {
	    key: "_onKeyDown",
	    value: function _onKeyDown(e) {
	      if (e.keyCode === keyCodes.SHIFT) {
	        this._withShiftKey = true;
	      }
	    }
	    /**
	     * Keyup event handler
	     * @param {KeyboardEvent} e - Event object
	     * @private
	     */

	  }, {
	    key: "_onKeyUp",
	    value: function _onKeyUp(e) {
	      if (e.keyCode === keyCodes.SHIFT) {
	        this._withShiftKey = false;
	      }
	    }
	  }]);

	  return Cropper;
	}(Component);

	/**
	 * Flip
	 * @class Flip
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Flip$1 =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Flip, _Component);

	  function Flip(graphics) {
	    _classCallCheck(this, Flip);

	    return _possibleConstructorReturn(this, _getPrototypeOf(Flip).call(this, componentNames.FLIP, graphics));
	  }
	  /**
	   * Get current flip settings
	   * @returns {{flipX: Boolean, flipY: Boolean}}
	   */


	  _createClass(Flip, [{
	    key: "getCurrentSetting",
	    value: function getCurrentSetting() {
	      var canvasImage = this.getCanvasImage();
	      return {
	        flipX: canvasImage.flipX,
	        flipY: canvasImage.flipY
	      };
	    }
	    /**
	     * Set flipX, flipY
	     * @param {{flipX: Boolean, flipY: Boolean}} newSetting - Flip setting
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "set",
	    value: function set(newSetting) {
	      var setting = this.getCurrentSetting();
	      var isChangingFlipX = setting.flipX !== newSetting.flipX;
	      var isChangingFlipY = setting.flipY !== newSetting.flipY;

	      if (!isChangingFlipX && !isChangingFlipY) {
	        return Promise.reject(rejectMessages.flip);
	      }

	      Object.assign(setting, newSetting);
	      this.setImageProperties(setting, true);

	      this._invertAngle(isChangingFlipX, isChangingFlipY);

	      this._flipObjects(isChangingFlipX, isChangingFlipY);

	      return Promise.resolve({
	        flipX: setting.flipX,
	        flipY: setting.flipY,
	        angle: this.getCanvasImage().angle
	      });
	    }
	    /**
	     * Invert image angle for flip
	     * @param {boolean} isChangingFlipX - Change flipX
	     * @param {boolean} isChangingFlipY - Change flipY
	     */

	  }, {
	    key: "_invertAngle",
	    value: function _invertAngle(isChangingFlipX, isChangingFlipY) {
	      var canvasImage = this.getCanvasImage();
	      var angle = canvasImage.angle;

	      if (isChangingFlipX) {
	        angle *= -1;
	      }

	      if (isChangingFlipY) {
	        angle *= -1;
	      }

	      canvasImage.rotate(parseFloat(angle)).setCoords(); // parseFloat for -0 to 0
	    }
	    /**
	     * Flip objects
	     * @param {boolean} isChangingFlipX - Change flipX
	     * @param {boolean} isChangingFlipY - Change flipY
	     * @private
	     */

	  }, {
	    key: "_flipObjects",
	    value: function _flipObjects(isChangingFlipX, isChangingFlipY) {
	      var canvas = this.getCanvas();

	      if (isChangingFlipX) {
	        canvas.forEachObject(function (obj) {
	          obj.set({
	            angle: parseFloat(obj.angle * -1),
	            // parseFloat for -0 to 0
	            flipX: !obj.flipX,
	            left: canvas.width - obj.left
	          }).setCoords();
	        });
	      }

	      if (isChangingFlipY) {
	        canvas.forEachObject(function (obj) {
	          obj.set({
	            angle: parseFloat(obj.angle * -1),
	            // parseFloat for -0 to 0
	            flipY: !obj.flipY,
	            top: canvas.height - obj.top
	          }).setCoords();
	        });
	      }

	      canvas.renderAll();
	    }
	    /**
	     * Reset flip settings
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "reset",
	    value: function reset() {
	      return this.set({
	        flipX: false,
	        flipY: false
	      });
	    }
	    /**
	     * Flip x
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "flipX",
	    value: function flipX() {
	      var current = this.getCurrentSetting();
	      return this.set({
	        flipX: !current.flipX,
	        flipY: current.flipY
	      });
	    }
	    /**
	     * Flip y
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "flipY",
	    value: function flipY() {
	      var current = this.getCurrentSetting();
	      return this.set({
	        flipX: current.flipX,
	        flipY: !current.flipY
	      });
	    }
	  }]);

	  return Flip;
	}(Component);

	/**
	 * Image Rotation component
	 * @class Rotation
	 * @extends {Component}
	 * @param {Graphics} graphics - Graphics instance
	 * @ignore
	 */

	var Rotation =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Rotation, _Component);

	  function Rotation(graphics) {
	    _classCallCheck(this, Rotation);

	    return _possibleConstructorReturn(this, _getPrototypeOf(Rotation).call(this, componentNames.ROTATION, graphics));
	  }
	  /**
	   * Get current angle
	   * @returns {Number}
	   */


	  _createClass(Rotation, [{
	    key: "getCurrentAngle",
	    value: function getCurrentAngle() {
	      return this.getCanvasImage().angle;
	    }
	    /**
	     * Set angle of the image
	     *
	     *  Do not call "this.setImageProperties" for setting angle directly.
	     *  Before setting angle, The originX,Y of image should be set to center.
	     *      See "http://fabricjs.com/docs/fabric.Object.html#setAngle"
	     *
	     * @param {number} angle - Angle value
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "setAngle",
	    value: function setAngle(angle) {
	      var oldAngle = this.getCurrentAngle() % 360; // The angle is lower than 2*PI(===360 degrees)

	      angle %= 360;
	      var canvasImage = this.getCanvasImage();
	      var oldImageCenter = canvasImage.getCenterPoint();
	      canvasImage.set({
	        angle: angle
	      }).setCoords();
	      this.adjustCanvasDimension();
	      var newImageCenter = canvasImage.getCenterPoint();

	      this._rotateForEachObject(oldImageCenter, newImageCenter, angle - oldAngle);

	      return Promise.resolve(angle);
	    }
	    /**
	     * Rotate for each object
	     * @param {fabric.Point} oldImageCenter - Image center point before rotation
	     * @param {fabric.Point} newImageCenter - Image center point after rotation
	     * @param {number} angleDiff - Image angle difference after rotation
	     * @private
	     */

	  }, {
	    key: "_rotateForEachObject",
	    value: function _rotateForEachObject(oldImageCenter, newImageCenter, angleDiff) {
	      var canvas = this.getCanvas();
	      var centerDiff = {
	        x: oldImageCenter.x - newImageCenter.x,
	        y: oldImageCenter.y - newImageCenter.y
	      };
	      canvas.forEachObject(function (obj) {
	        var objCenter = obj.getCenterPoint();
	        var radian = fabric_2.util.degreesToRadians(angleDiff);
	        var newObjCenter = fabric_2.util.rotatePoint(objCenter, oldImageCenter, radian);
	        obj.set({
	          left: newObjCenter.x - centerDiff.x,
	          top: newObjCenter.y - centerDiff.y,
	          angle: (obj.angle + angleDiff) % 360
	        });
	        obj.setCoords();
	      });
	      canvas.renderAll();
	    }
	    /**
	     * Rotate the image
	     * @param {number} additionalAngle - Additional angle
	     * @returns {jQuery.Deferred}
	     */

	  }, {
	    key: "rotate",
	    value: function rotate(additionalAngle) {
	      var current = this.getCurrentAngle();
	      return this.setAngle(current + additionalAngle);
	    }
	  }]);

	  return Rotation;
	}(Component);

	/**
	 * FreeDrawing
	 * @class FreeDrawing
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var FreeDrawing =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(FreeDrawing, _Component);

	  function FreeDrawing(graphics) {
	    var _this;

	    _classCallCheck(this, FreeDrawing);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(FreeDrawing).call(this, componentNames.FREE_DRAWING, graphics));
	    /**
	     * Brush width
	     * @type {number}
	     */

	    _this.width = 12;
	    /**
	     * fabric.Color instance for brush color
	     * @type {fabric.Color}
	     */

	    _this.oColor = new fabric_2.Color('rgba(0, 0, 0, 0.5)');
	    return _this;
	  }
	  /**
	   * Start free drawing mode
	   * @param {{width: ?number, color: ?string}} [setting] - Brush width & color
	   */


	  _createClass(FreeDrawing, [{
	    key: "start",
	    value: function start(setting) {
	      var canvas = this.getCanvas();
	      canvas.isDrawingMode = true;
	      this.setBrush(setting);
	    }
	    /**
	     * Set brush
	     * @param {{width: ?number, color: ?string}} [setting] - Brush width & color
	     */

	  }, {
	    key: "setBrush",
	    value: function setBrush(setting) {
	      var brush = this.getCanvas().freeDrawingBrush;
	      setting = setting || {};
	      this.width = setting.width || this.width;

	      if (setting.color) {
	        this.oColor = new fabric_2.Color(setting.color);
	      }

	      brush.width = this.width;
	      brush.color = this.oColor.toRgba();
	    }
	    /**
	     * End free drawing mode
	     */

	  }, {
	    key: "end",
	    value: function end() {
	      var canvas = this.getCanvas();
	      canvas.isDrawingMode = false;
	    }
	  }]);

	  return FreeDrawing;
	}(Component);

	/**
	 * Line
	 * @class Line
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Line =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Line, _Component);

	  function Line(graphics) {
	    var _this;

	    _classCallCheck(this, Line);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, componentNames.LINE, graphics));
	    /**
	     * Brush width
	     * @type {number}
	     * @private
	     */

	    _this._width = 12;
	    /**
	     * fabric.Color instance for brush color
	     * @type {fabric.Color}
	     * @private
	     */

	    _this._oColor = new fabric_2.Color('rgba(0, 0, 0, 0.5)');
	    /**
	     * Listeners
	     * @type {object.<string, function>}
	     * @private
	     */

	    _this._listeners = {
	      mousedown: _this._onFabricMouseDown.bind(_assertThisInitialized(_this)),
	      mousemove: _this._onFabricMouseMove.bind(_assertThisInitialized(_this)),
	      mouseup: _this._onFabricMouseUp.bind(_assertThisInitialized(_this))
	    };
	    return _this;
	  }
	  /**
	   * Start drawing line mode
	   * @param {{width: ?number, color: ?string}} [setting] - Brush width & color
	   */


	  _createClass(Line, [{
	    key: "start",
	    value: function start(setting) {
	      var canvas = this.getCanvas();
	      canvas.defaultCursor = 'crosshair';
	      canvas.selection = false;
	      this.setBrush(setting);
	      canvas.forEachObject(function (obj) {
	        obj.set({
	          evented: false
	        });
	      });
	      canvas.on({
	        'mouse:down': this._listeners.mousedown
	      });
	    }
	    /**
	     * Set brush
	     * @param {{width: ?number, color: ?string}} [setting] - Brush width & color
	     */

	  }, {
	    key: "setBrush",
	    value: function setBrush(setting) {
	      var brush = this.getCanvas().freeDrawingBrush;
	      setting = setting || {};
	      this._width = setting.width || this._width;

	      if (setting.color) {
	        this._oColor = new fabric_2.Color(setting.color);
	      }

	      brush.width = this._width;
	      brush.color = this._oColor.toRgba();
	    }
	    /**
	     * End drawing line mode
	     */

	  }, {
	    key: "end",
	    value: function end() {
	      var canvas = this.getCanvas();
	      canvas.defaultCursor = 'default';
	      canvas.selection = true;
	      canvas.forEachObject(function (obj) {
	        obj.set({
	          evented: true
	        });
	      });
	      canvas.off('mouse:down', this._listeners.mousedown);
	    }
	    /**
	     * Mousedown event handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseDown",
	    value: function _onFabricMouseDown(fEvent) {
	      var canvas = this.getCanvas();
	      var pointer = canvas.getPointer(fEvent.e);
	      var points = [pointer.x, pointer.y, pointer.x, pointer.y];
	      this._line = new fabric_2.Line(points, {
	        stroke: this._oColor.toRgba(),
	        strokeWidth: this._width,
	        evented: false
	      });

	      this._line.set(fObjectOptions.SELECTION_STYLE);

	      canvas.add(this._line);
	      canvas.on({
	        'mouse:move': this._listeners.mousemove,
	        'mouse:up': this._listeners.mouseup
	      });
	    }
	    /**
	     * Mousemove event handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseMove",
	    value: function _onFabricMouseMove(fEvent) {
	      var canvas = this.getCanvas();
	      var pointer = canvas.getPointer(fEvent.e);

	      this._line.set({
	        x2: pointer.x,
	        y2: pointer.y
	      });

	      this._line.setCoords();

	      canvas.renderAll();
	    }
	    /**
	     * Mouseup event handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseUp",
	    value: function _onFabricMouseUp() {
	      var canvas = this.getCanvas();
	      var params = this.graphics.createObjectProperties(this._line);
	      this.fire(eventNames.ADD_OBJECT, params);
	      this._line = null;
	      canvas.off({
	        'mouse:move': this._listeners.mousemove,
	        'mouse:up': this._listeners.mouseup
	      });
	    }
	  }]);

	  return Line;
	}(Component);

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue$1 = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue$1 = currentQueue.concat(queue$1);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue$1.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue$1.length;
	    while(len) {
	        currentQueue = queue$1;
	        queue$1 = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue$1.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue$1.push(new Item(fun, args));
	    if (queue$1.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions$1 = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process$3 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions$1,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var detectBrowser = createCommonjsModule(function (module, exports) {
	var __spreadArrays = (commonjsGlobal && commonjsGlobal.__spreadArrays) || function () {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var BrowserInfo = /** @class */ (function () {
	    function BrowserInfo(name, version, os) {
	        this.name = name;
	        this.version = version;
	        this.os = os;
	    }
	    return BrowserInfo;
	}());
	exports.BrowserInfo = BrowserInfo;
	var NodeInfo = /** @class */ (function () {
	    function NodeInfo(version) {
	        this.version = version;
	        this.name = 'node';
	        this.os = process$3.platform;
	    }
	    return NodeInfo;
	}());
	exports.NodeInfo = NodeInfo;
	var BotInfo = /** @class */ (function () {
	    function BotInfo() {
	        this.bot = true; // NOTE: deprecated test name instead
	        this.name = 'bot';
	        this.version = null;
	        this.os = null;
	    }
	    return BotInfo;
	}());
	exports.BotInfo = BotInfo;
	// tslint:disable-next-line:max-line-length
	var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
	var SEARCHBOT_OS_REGEX = /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/;
	var REQUIRED_VERSION_PARTS = 3;
	var userAgentRules = [
	    ['aol', /AOLShield\/([0-9\._]+)/],
	    ['edge', /Edge\/([0-9\._]+)/],
	    ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
	    ['vivaldi', /Vivaldi\/([0-9\.]+)/],
	    ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
	    ['samsung', /SamsungBrowser\/([0-9\.]+)/],
	    ['silk', /\bSilk\/([0-9._-]+)\b/],
	    ['miui', /MiuiBrowser\/([0-9\.]+)$/],
	    ['beaker', /BeakerBrowser\/([0-9\.]+)/],
	    ['edge-chromium', /Edg\/([0-9\.]+)/],
	    [
	        'chromium-webview',
	        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
	    ],
	    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
	    ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
	    ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
	    ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
	    ['fxios', /FxiOS\/([0-9\.]+)/],
	    ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
	    ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
	    ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
	    ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
	    ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
	    ['ie', /MSIE\s(7\.0)/],
	    ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
	    ['android', /Android\s([0-9\.]+)/],
	    ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
	    ['safari', /Version\/([0-9\._]+).*Safari/],
	    ['facebook', /FBAV\/([0-9\.]+)/],
	    ['instagram', /Instagram\s([0-9\.]+)/],
	    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
	    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
	    ['searchbot', SEARCHBOX_UA_REGEX],
	];
	var operatingSystemRules = [
	    ['iOS', /iP(hone|od|ad)/],
	    ['Android OS', /Android/],
	    ['BlackBerry OS', /BlackBerry|BB10/],
	    ['Windows Mobile', /IEMobile/],
	    ['Amazon OS', /Kindle/],
	    ['Windows 3.11', /Win16/],
	    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
	    ['Windows 98', /(Windows 98)|(Win98)/],
	    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
	    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
	    ['Windows Server 2003', /(Windows NT 5.2)/],
	    ['Windows Vista', /(Windows NT 6.0)/],
	    ['Windows 7', /(Windows NT 6.1)/],
	    ['Windows 8', /(Windows NT 6.2)/],
	    ['Windows 8.1', /(Windows NT 6.3)/],
	    ['Windows 10', /(Windows NT 10.0)/],
	    ['Windows ME', /Windows ME/],
	    ['Open BSD', /OpenBSD/],
	    ['Sun OS', /SunOS/],
	    ['Chrome OS', /CrOS/],
	    ['Linux', /(Linux)|(X11)/],
	    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
	    ['QNX', /QNX/],
	    ['BeOS', /BeOS/],
	    ['OS/2', /OS\/2/],
	    ['Search Bot', SEARCHBOT_OS_REGEX],
	];
	function detect(userAgent) {
	    if (!!userAgent) {
	        return parseUserAgent(userAgent);
	    }
	    if (typeof navigator !== 'undefined') {
	        return parseUserAgent(navigator.userAgent);
	    }
	    return getNodeVersion();
	}
	exports.detect = detect;
	function parseUserAgent(ua) {
	    // opted for using reduce here rather than Array#first with a regex.test call
	    // this is primarily because using the reduce we only perform the regex
	    // execution once rather than once for the test and for the exec again below
	    // probably something that needs to be benchmarked though
	    var matchedRule = ua !== '' &&
	        userAgentRules.reduce(function (matched, _a) {
	            var browser = _a[0], regex = _a[1];
	            if (matched) {
	                return matched;
	            }
	            var uaMatch = regex.exec(ua);
	            return !!uaMatch && [browser, uaMatch];
	        }, false);
	    if (!matchedRule) {
	        return null;
	    }
	    var name = matchedRule[0], match = matchedRule[1];
	    if (name === 'searchbot') {
	        return new BotInfo();
	    }
	    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
	    if (versionParts) {
	        if (versionParts.length < REQUIRED_VERSION_PARTS) {
	            versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
	        }
	    }
	    else {
	        versionParts = [];
	    }
	    return new BrowserInfo(name, versionParts.join('.'), detectOS(ua));
	}
	exports.parseUserAgent = parseUserAgent;
	function detectOS(ua) {
	    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
	        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
	        var match = regex.test(ua);
	        if (match) {
	            return os;
	        }
	    }
	    return null;
	}
	exports.detectOS = detectOS;
	function getNodeVersion() {
	    var isNode = typeof process$3 !== 'undefined' && process$3.version;
	    return isNode ? new NodeInfo(process$3.version.slice(1)) : null;
	}
	exports.getNodeVersion = getNodeVersion;
	function createVersionParts(count) {
	    var output = [];
	    for (var ii = 0; ii < count; ii++) {
	        output.push('0');
	    }
	    return output;
	}
	});

	unwrapExports(detectBrowser);
	var detectBrowser_1 = detectBrowser.BrowserInfo;
	var detectBrowser_2 = detectBrowser.NodeInfo;
	var detectBrowser_3 = detectBrowser.BotInfo;
	var detectBrowser_4 = detectBrowser.detect;
	var detectBrowser_5 = detectBrowser.parseUserAgent;
	var detectBrowser_6 = detectBrowser.detectOS;
	var detectBrowser_7 = detectBrowser.getNodeVersion;

	var browser$1 = detectBrowser_4();
	var defaultStyles = {
	  fill: '#000000',
	  left: 0,
	  top: 0
	};
	var resetStyles = {
	  fill: '#000000',
	  fontStyle: 'normal',
	  fontWeight: 'normal',
	  textAlign: 'left',
	  textDecoraiton: ''
	};
	var TEXTAREA_CLASSNAME = 'tui-image-eidtor-textarea';
	var TEXTAREA_STYLES = makeStyleText({
	  position: 'absolute',
	  padding: 0,
	  display: 'none',
	  border: '1px dotted red',
	  overflow: 'hidden',
	  resize: 'none',
	  outline: 'none',
	  'border-radius': 0,
	  'background-color': 'transparent',
	  '-webkit-appearance': 'none',
	  'z-index': 9999,
	  'white-space': 'pre'
	});
	var EXTRA_PIXEL_LINEHEIGHT = 0.1;
	var DBCLICK_TIME = 500;
	/**
	 * Text
	 * @class Text
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Text$1 =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Text, _Component);

	  function Text(graphics) {
	    var _this;

	    _classCallCheck(this, Text);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this, componentNames.TEXT, graphics));
	    /**
	     * Default text style
	     * @type {Object}
	     */

	    _this._defaultStyles = defaultStyles;
	    /**
	     * Selected state
	     * @type {boolean}
	     */

	    _this._isSelected = false;
	    /**
	     * Selected text object
	     * @type {Object}
	     */

	    _this._selectedObj = {};
	    /**
	     * Editing text object
	     * @type {Object}
	     */

	    _this._editingObj = {};
	    /**
	     * Listeners for fabric event
	     * @type {Object}
	     */

	    _this._listeners = {
	      mousedown: _this._onFabricMouseDown.bind(_assertThisInitialized(_this)),
	      select: _this._onFabricSelect.bind(_assertThisInitialized(_this)),
	      selectClear: _this._onFabricSelectClear.bind(_assertThisInitialized(_this)),
	      scaling: _this._onFabricScaling.bind(_assertThisInitialized(_this))
	    };
	    /**
	     * Textarea element for editing
	     * @type {HTMLElement}
	     */

	    _this._textarea = null;
	    /**
	     * Ratio of current canvas
	     * @type {number}
	     */

	    _this._ratio = 1;
	    /**
	     * Last click time
	     * @type {Date}
	     */

	    _this._lastClickTime = new Date().getTime();
	    /**
	     * Text object infos before editing
	     * @type {Object}
	     */

	    _this._editingObjInfos = {};
	    /**
	     * Previous state of editing
	     * @type {boolean}
	     */

	    _this.isPrevEditing = false;
	    /**
	     * use itext
	     * @type {boolean}
	     */

	    _this.useItext = graphics.useItext;
	    return _this;
	  }
	  /**
	   * Start input text mode
	   */


	  _createClass(Text, [{
	    key: "start",
	    value: function start() {
	      var canvas = this.getCanvas();
	      canvas.selection = false;
	      canvas.defaultCursor = 'text';
	      canvas.on({
	        'mouse:down': this._listeners.mousedown,
	        'object:selected': this._listeners.select,
	        'before:selection:cleared': this._listeners.selectClear,
	        'object:scaling': this._listeners.scaling,
	        'text:editing': this._listeners.modify
	      });

	      if (this.useItext) {
	        canvas.forEachObject(function (obj) {
	          if (obj.type === 'i-text') {
	            obj.set({
	              left: obj.left - obj.width / 2,
	              top: obj.top - obj.height / 2,
	              originX: 'left',
	              originY: 'top'
	            });
	          }
	        });
	      } else {
	        this._createTextarea();
	      }

	      this.setCanvasRatio();
	    }
	    /**
	     * End input text mode
	     */

	  }, {
	    key: "end",
	    value: function end() {
	      var canvas = this.getCanvas();
	      canvas.selection = true;
	      canvas.defaultCursor = 'default';

	      if (this.useItext) {
	        canvas.forEachObject(function (obj) {
	          if (obj.type === 'i-text') {
	            if (obj.text === '') {
	              canvas.remove(obj);
	            } else {
	              obj.set({
	                left: obj.left + obj.width / 2,
	                top: obj.top + obj.height / 2,
	                originX: 'center',
	                originY: 'center'
	              });
	            }
	          }
	        });
	      } else {
	        canvas.discardActiveObject();

	        this._removeTextarea();
	      }

	      canvas.off({
	        'mouse:down': this._listeners.mousedown,
	        'object:selected': this._listeners.select,
	        'before:selection:cleared': this._listeners.selectClear,
	        'object:scaling': this._listeners.scaling,
	        'text:editing': this._listeners.modify
	      });
	    }
	    /**
	     * Add new text on canvas image
	     * @param {string} text - Initial input text
	     * @param {Object} options - Options for generating text
	     *     @param {Object} [options.styles] Initial styles
	     *         @param {string} [options.styles.fill] Color
	     *         @param {string} [options.styles.fontFamily] Font type for text
	     *         @param {number} [options.styles.fontSize] Size
	     *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)
	     *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)
	     *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)
	     *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)
	     *     @param {{x: number, y: number}} [options.position] - Initial position
	     * @returns {Promise}
	     */

	  }, {
	    key: "add",
	    value: function add(text, options) {
	      var _this2 = this;

	      return new Promise(function (resolve) {
	        var canvas = _this2.getCanvas();

	        var newText = null;
	        var selectionStyle = fObjectOptions.SELECTION_STYLE;
	        var styles = _this2._defaultStyles;

	        _this2._setInitPos(options.position);

	        if (options.styles) {
	          styles = Object.assign(styles, options.styles);
	        }

	        if (_this2.useItext) {
	          newText = new fabric_2.IText(text, styles);
	          selectionStyle = Object.assign({}, selectionStyle, {
	            originX: 'left',
	            originY: 'top'
	          });
	        } else {
	          newText = new fabric_2.Text(text, styles);
	        }

	        newText.set(selectionStyle);
	        newText.on({
	          mouseup: _this2._onFabricMouseUp.bind(_this2)
	        });
	        canvas.add(newText);

	        if (!canvas.getActiveObject()) {
	          canvas.setActiveObject(newText);
	        }

	        _this2.isPrevEditing = true;
	        resolve(_this2.graphics.createObjectProperties(newText));
	      });
	    }
	    /**
	     * Change text of activate object on canvas image
	     * @param {Object} activeObj - Current selected text object
	     * @param {string} text - Changed text
	     * @returns {Promise}
	     */

	  }, {
	    key: "change",
	    value: function change(activeObj, text) {
	      var _this3 = this;

	      return new Promise(function (resolve) {
	        activeObj.set('text', text);

	        _this3.getCanvas().renderAll();

	        resolve();
	      });
	    }
	    /**
	     * Set style
	     * @param {Object} activeObj - Current selected text object
	     * @param {Object} styleObj - Initial styles
	     *     @param {string} [styleObj.fill] Color
	     *     @param {string} [styleObj.fontFamily] Font type for text
	     *     @param {number} [styleObj.fontSize] Size
	     *     @param {string} [styleObj.fontStyle] Type of inclination (normal / italic)
	     *     @param {string} [styleObj.fontWeight] Type of thicker or thinner looking (normal / bold)
	     *     @param {string} [styleObj.textAlign] Type of text align (left / center / right)
	     *     @param {string} [styleObj.textDecoraiton] Type of line (underline / line-throgh / overline)
	     * @returns {Promise}
	     */

	  }, {
	    key: "setStyle",
	    value: function setStyle(activeObj, styleObj) {
	      var _this4 = this;

	      return new Promise(function (resolve) {
	        forEach_1(styleObj, function (val, key) {
	          if (activeObj[key] === val) {
	            styleObj[key] = resetStyles[key] || '';
	          }
	        });
	        activeObj.set(styleObj);

	        _this4.getCanvas().renderAll();

	        resolve();
	      });
	    }
	    /**
	     * Get the text
	     * @param {Object} activeObj - Current selected text object
	     * @returns {String} text
	     */

	  }, {
	    key: "getText",
	    value: function getText(activeObj) {
	      return activeObj.text;
	    }
	    /**
	     * Set infos of the current selected object
	     * @param {fabric.Text} obj - Current selected text object
	     * @param {boolean} state - State of selecting
	     */

	  }, {
	    key: "setSelectedInfo",
	    value: function setSelectedInfo(obj, state) {
	      this._selectedObj = obj;
	      this._isSelected = state;
	    }
	    /**
	     * Whether object is selected or not
	     * @returns {boolean} State of selecting
	     */

	  }, {
	    key: "isSelected",
	    value: function isSelected() {
	      return this._isSelected;
	    }
	    /**
	     * Get current selected text object
	     * @returns {fabric.Text} Current selected text object
	     */

	  }, {
	    key: "getSelectedObj",
	    value: function getSelectedObj() {
	      return this._selectedObj;
	    }
	    /**
	     * Set ratio value of canvas
	     */

	  }, {
	    key: "setCanvasRatio",
	    value: function setCanvasRatio() {
	      var canvasElement = this.getCanvasElement();
	      var cssWidth = parseInt(canvasElement.style.maxWidth, 10);
	      var originWidth = canvasElement.width;
	      var ratio = originWidth / cssWidth;
	      this._ratio = ratio;
	    }
	    /**
	     * Get ratio value of canvas
	     * @returns {number} Ratio value
	     */

	  }, {
	    key: "getCanvasRatio",
	    value: function getCanvasRatio() {
	      return this._ratio;
	    }
	    /**
	     * Set initial position on canvas image
	     * @param {{x: number, y: number}} [position] - Selected position
	     * @private
	     */

	  }, {
	    key: "_setInitPos",
	    value: function _setInitPos(position) {
	      position = position || this.getCanvasImage().getCenterPoint();
	      this._defaultStyles.left = position.x;
	      this._defaultStyles.top = position.y;
	    }
	    /**
	     * Create textarea element on canvas container
	     * @private
	     */

	  }, {
	    key: "_createTextarea",
	    value: function _createTextarea() {
	      var container = this.getCanvasElement().parentNode;
	      var textarea = document.createElement('textarea');
	      textarea.className = TEXTAREA_CLASSNAME;
	      textarea.setAttribute('style', TEXTAREA_STYLES);
	      textarea.setAttribute('wrap', 'off');
	      container.appendChild(textarea);
	      this._textarea = textarea;
	      this._listeners = Object.assign(this._listeners, {
	        input: this._onInput.bind(this),
	        keydown: this._onKeyDown.bind(this),
	        blur: this._onBlur.bind(this),
	        scroll: this._onScroll.bind(this)
	      });

	      if (browser$1.msie && browser$1.version === 9) {
	        fabric_2.util.addListener(textarea, 'keydown', this._listeners.keydown);
	      } else {
	        fabric_2.util.addListener(textarea, 'input', this._listeners.input);
	      }

	      fabric_2.util.addListener(textarea, 'blur', this._listeners.blur);
	      fabric_2.util.addListener(textarea, 'scroll', this._listeners.scroll);
	    }
	    /**
	     * Remove textarea element on canvas container
	     * @private
	     */

	  }, {
	    key: "_removeTextarea",
	    value: function _removeTextarea() {
	      var container = this.getCanvasElement().parentNode;
	      var textarea = container.querySelector('textarea');
	      container.removeChild(textarea);
	      this._textarea = null;

	      if (browser$1.name === 'ie' && browser$1.version < 10) {
	        fabric_2.util.removeListener(textarea, 'keydown', this._listeners.keydown);
	      } else {
	        fabric_2.util.removeListener(textarea, 'input', this._listeners.input);
	      }

	      fabric_2.util.removeListener(textarea, 'blur', this._listeners.blur);
	      fabric_2.util.removeListener(textarea, 'scroll', this._listeners.scroll);
	    }
	    /**
	     * Input event handler
	     * @private
	     */

	  }, {
	    key: "_onInput",
	    value: function _onInput() {
	      var ratio = this.getCanvasRatio();
	      var obj = this._editingObj;
	      var textareaStyle = this._textarea.style;
	      textareaStyle.width = "".concat(Math.ceil(obj.width / ratio), "px");
	      textareaStyle.height = "".concat(Math.ceil(obj.height / ratio), "px");
	    }
	    /**
	     * Keydown event handler
	     * @private
	     */

	  }, {
	    key: "_onKeyDown",
	    value: function _onKeyDown() {
	      var _this5 = this;

	      var ratio = this.getCanvasRatio();
	      var obj = this._editingObj;
	      var textareaStyle = this._textarea.style;
	      setTimeout(function () {
	        obj.setText(_this5._textarea.value);
	        textareaStyle.width = "".concat(Math.ceil(obj.width / ratio), "px");
	        textareaStyle.height = "".concat(Math.ceil(obj.height / ratio), "px");
	      }, 0);
	    }
	    /**
	     * Blur event handler
	     * @private
	     */

	  }, {
	    key: "_onBlur",
	    value: function _onBlur() {
	      var ratio = this.getCanvasRatio();
	      var editingObj = this._editingObj;
	      var editingObjInfos = this._editingObjInfos;
	      var textContent = this._textarea.value;
	      var transWidth = editingObj.width / ratio - editingObjInfos.width / ratio;
	      var transHeight = editingObj.height / ratio - editingObjInfos.height / ratio;

	      if (ratio === 1) {
	        transWidth /= 2;
	        transHeight /= 2;
	      }

	      this._textarea.style.display = 'none';
	      editingObj.set({
	        left: editingObjInfos.left + transWidth,
	        top: editingObjInfos.top + transHeight
	      });

	      if (textContent.length) {
	        this.getCanvas().add(editingObj);
	        var params = {
	          id: stamp(editingObj),
	          type: editingObj.type,
	          text: textContent
	        };
	        this.fire(eventNames.TEXT_CHANGED, params);
	      }
	    }
	    /**
	     * Scroll event handler
	     * @private
	     */

	  }, {
	    key: "_onScroll",
	    value: function _onScroll() {
	      this._textarea.scrollLeft = 0;
	      this._textarea.scrollTop = 0;
	    }
	    /**
	     * Fabric scaling event handler
	     * @param {fabric.Event} fEvent - Current scaling event on selected object
	     * @private
	     */

	  }, {
	    key: "_onFabricScaling",
	    value: function _onFabricScaling(fEvent) {
	      var obj = fEvent.target;
	      var scalingSize = obj.fontSize * obj.scaleY;
	      obj.fontSize = scalingSize;
	      obj.scaleX = 1;
	      obj.scaleY = 1;
	    }
	    /**
	     * onSelectClear handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onFabricSelectClear",
	    value: function _onFabricSelectClear(fEvent) {
	      var obj = this.getSelectedObj();
	      this.isPrevEditing = true;
	      this.setSelectedInfo(fEvent.target, false);

	      if (obj) {
	        // obj is empty object at initial time, will be set fabric object
	        if (obj.text === '') {
	          this.getCanvas().remove(obj);
	        }
	      }
	    }
	    /**
	     * onSelect handler in fabric canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onFabricSelect",
	    value: function _onFabricSelect(fEvent) {
	      this.isPrevEditing = true;
	      this.setSelectedInfo(fEvent.target, true);
	    }
	    /**
	     * Fabric 'mousedown' event handler
	     * @param {fabric.Event} fEvent - Current mousedown event on selected object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseDown",
	    value: function _onFabricMouseDown(fEvent) {
	      var obj = fEvent.target;

	      if (obj && !obj.isType('text')) {
	        return;
	      }

	      if (this.isPrevEditing) {
	        this.isPrevEditing = false;
	        return;
	      }

	      this._fireAddText(fEvent);
	    }
	    /**
	     * Fire 'addText' event if object is not selected.
	     * @param {fabric.Event} fEvent - Current mousedown event on selected object
	     * @private
	     */

	  }, {
	    key: "_fireAddText",
	    value: function _fireAddText(fEvent) {
	      var obj = fEvent.target;
	      var e = fEvent.e || {};
	      var originPointer = this.getCanvas().getPointer(e);

	      if (!obj) {
	        this.fire(eventNames.ADD_TEXT, {
	          originPosition: {
	            x: originPointer.x,
	            y: originPointer.y
	          },
	          clientPosition: {
	            x: e.clientX || 0,
	            y: e.clientY || 0
	          }
	        });
	      }
	    }
	    /**
	     * Fabric mouseup event handler
	     * @param {fabric.Event} fEvent - Current mousedown event on selected object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseUp",
	    value: function _onFabricMouseUp(fEvent) {
	      var target = fEvent.target;
	      var newClickTime = new Date().getTime();

	      if (target.isEditing || this._isDoubleClick(newClickTime)) {
	        if (!this.useItext) {
	          this._changeToEditingMode(target);
	        }

	        this.fire(eventNames.TEXT_EDITING); // fire editing text event
	      }

	      this._lastClickTime = newClickTime;
	    }
	    /**
	     * Get state of firing double click event
	     * @param {Date} newClickTime - Current clicked time
	     * @returns {boolean} Whether double clicked or not
	     * @private
	     */

	  }, {
	    key: "_isDoubleClick",
	    value: function _isDoubleClick(newClickTime) {
	      return newClickTime - this._lastClickTime < DBCLICK_TIME;
	    }
	    /**
	     * Change state of text object for editing
	     * @param {fabric.Text} obj - Text object fired event
	     * @private
	     */

	  }, {
	    key: "_changeToEditingMode",
	    value: function _changeToEditingMode(obj) {
	      var ratio = this.getCanvasRatio();
	      var textareaStyle = this._textarea.style;
	      var canvas = this.getCanvas();
	      this.isPrevEditing = true;
	      canvas.remove(obj);
	      canvas.discardActiveObject();
	      obj.remove();
	      this._editingObj = obj;
	      this._textarea.value = obj.text;
	      this._editingObjInfos = {
	        left: obj.left,
	        top: obj.top,
	        width: obj.width,
	        height: obj.height
	      };
	      textareaStyle.display = 'block';
	      textareaStyle.left = "".concat(obj.oCoords.tl.x / ratio, "px");
	      textareaStyle.top = "".concat(obj.oCoords.tl.y / ratio, "px");
	      textareaStyle.width = "".concat(Math.ceil(obj.width / ratio), "px");
	      textareaStyle.height = "".concat(Math.ceil(obj.height / ratio), "px");
	      textareaStyle.transform = "rotate(".concat(obj.angle, "deg)");
	      textareaStyle.color = obj.fill;
	      textareaStyle['font-size'] = "".concat(obj.fontSize / ratio, "px");
	      textareaStyle['font-family'] = obj.fontFamily;
	      textareaStyle['font-style'] = obj.fontStyle;
	      textareaStyle['font-weight'] = obj.fontWeight;
	      textareaStyle['text-align'] = obj.textAlign;
	      textareaStyle['line-height'] = obj.lineHeight + EXTRA_PIXEL_LINEHEIGHT;
	      textareaStyle['transform-origin'] = 'left top';

	      this._textarea.focus();
	    }
	  }]);

	  return Text;
	}(Component);

	var pathMap = {
	  arrow: 'M 0 90 H 105 V 120 L 160 60 L 105 0 V 30 H 0 Z',
	  cancel: 'M 0 30 L 30 60 L 0 90 L 30 120 L 60 90 L 90 120 L 120 90 ' + 'L 90 60 L 120 30 L 90 0 L 60 30 L 30 0 Z'
	};
	/**
	 * Icon
	 * @class Icon
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Icon$1 =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Icon, _Component);

	  function Icon(graphics) {
	    var _this;

	    _classCallCheck(this, Icon);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Icon).call(this, componentNames.ICON, graphics));
	    /**
	     * Default icon color
	     * @type {string}
	     */

	    _this._oColor = '#000000';
	    /**
	     * Path value of each icon type
	     * @type {Object}
	     */

	    _this._pathMap = pathMap;
	    /**
	     * Option to add icon to drag.
	     * @type {boolean}
	     */

	    _this.useDragAddIcon = graphics.useDragAddIcon;
	    return _this;
	  }
	  /**
	   * Add icon
	   * @param {string} type - Icon type
	   * @param {Object} options - Icon options
	   *      @param {string} [options.fill] - Icon foreground color
	   *      @param {string} [options.left] - Icon x position
	   *      @param {string} [options.top] - Icon y position
	   * @returns {Promise}
	   */


	  _createClass(Icon, [{
	    key: "add",
	    value: function add(type, options) {
	      var _this2 = this;

	      return new Promise(function (resolve, reject) {
	        var canvas = _this2.getCanvas();

	        var path = _this2._pathMap[type];
	        var selectionStyle = fObjectOptions.SELECTION_STYLE;
	        var registerdIcon = Object.keys(defaultIconPath).indexOf(type) >= 0;
	        var useDragAddIcon = _this2.useDragAddIcon && registerdIcon;
	        var icon = path ? _this2._createIcon(path) : null;

	        if (!icon) {
	          reject(rejectMessages.invalidParameters);
	        }

	        icon.set(Object.assign({
	          type: 'icon',
	          fill: _this2._oColor
	        }, selectionStyle, options, _this2.graphics.controlStyle));
	        canvas.add(icon).setActiveObject(icon);

	        if (useDragAddIcon) {
	          _this2._addWithDragEvent(canvas);
	        }

	        resolve(_this2.graphics.createObjectProperties(icon));
	      });
	    }
	    /**
	     * Added icon drag event
	     * @param {fabric.Canvas} canvas - Canvas instance
	     * @private
	     */

	  }, {
	    key: "_addWithDragEvent",
	    value: function _addWithDragEvent(canvas) {
	      var _this3 = this;

	      canvas.on({
	        'mouse:move': function mouseMove(fEvent) {
	          canvas.selection = false;

	          _this3.fire(eventNames.ICON_CREATE_RESIZE, {
	            moveOriginPointer: canvas.getPointer(fEvent.e)
	          });
	        },
	        'mouse:up': function mouseUp(fEvent) {
	          _this3.fire(eventNames.ICON_CREATE_END, {
	            moveOriginPointer: canvas.getPointer(fEvent.e)
	          });

	          canvas.defaultCursor = 'default';
	          canvas.off('mouse:up');
	          canvas.off('mouse:move');
	          canvas.selection = true;
	        }
	      });
	    }
	    /**
	     * Register icon paths
	     * @param {{key: string, value: string}} pathInfos - Path infos
	     */

	  }, {
	    key: "registerPaths",
	    value: function registerPaths(pathInfos) {
	      var _this4 = this;

	      forEach_1(pathInfos, function (path, type) {
	        _this4._pathMap[type] = path;
	      });
	    }
	    /**
	     * Set icon object color
	     * @param {string} color - Color to set
	     * @param {fabric.Path}[obj] - Current activated path object
	     */

	  }, {
	    key: "setColor",
	    value: function setColor(color, obj) {
	      this._oColor = color;

	      if (obj && obj.get('type') === 'icon') {
	        obj.set({
	          fill: this._oColor
	        });
	        this.getCanvas().renderAll();
	      }
	    }
	    /**
	     * Get icon color
	     * @param {fabric.Path}[obj] - Current activated path object
	     * @returns {string} color
	     */

	  }, {
	    key: "getColor",
	    value: function getColor(obj) {
	      return obj.fill;
	    }
	    /**
	     * Create icon object
	     * @param {string} path - Path value to create icon
	     * @returns {fabric.Path} Path object
	     */

	  }, {
	    key: "_createIcon",
	    value: function _createIcon(path) {
	      return new fabric_2.Path(path);
	    }
	  }]);

	  return Icon;
	}(Component);

	var $filter$1 = arrayIteration.filter;


	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('filter') }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Mask extending fabric.Image.filters.Mask
	 */
	/**
	 * Mask object
	 * @class Mask
	 * @extends {fabric.Image.filters.BlendImage}
	 * @ignore
	 */

	var Mask$1 = fabric_2.util.createClass(fabric_2.Image.filters.BlendImage,
	/** @lends Mask.prototype */
	{
	  /**
	   * Apply filter to canvas element
	   * @param {Object} pipelineState - Canvas element to apply filter
	   * @override
	   */
	  applyTo: function applyTo(pipelineState) {
	    if (!this.mask) {
	      return;
	    }

	    var canvas = pipelineState.canvasEl;
	    var width = canvas.width,
	        height = canvas.height;

	    var maskCanvasEl = this._createCanvasOfMask(width, height);

	    var ctx = canvas.getContext('2d');
	    var maskCtx = maskCanvasEl.getContext('2d');
	    var imageData = ctx.getImageData(0, 0, width, height);

	    this._drawMask(maskCtx, canvas, ctx);

	    this._mapData(maskCtx, imageData, width, height);

	    pipelineState.imageData = imageData;
	  },

	  /**
	   * Create canvas of mask image
	   * @param {number} width - Width of main canvas
	   * @param {number} height - Height of main canvas
	   * @returns {HTMLElement} Canvas element
	   * @private
	   */
	  _createCanvasOfMask: function _createCanvasOfMask(width, height) {
	    var maskCanvasEl = fabric_2.util.createCanvasElement();
	    maskCanvasEl.width = width;
	    maskCanvasEl.height = height;
	    return maskCanvasEl;
	  },

	  /**
	   * Draw mask image on canvas element
	   * @param {Object} maskCtx - Context of mask canvas
	   * @private
	   */
	  _drawMask: function _drawMask(maskCtx) {
	    var mask = this.mask;
	    var maskImg = mask.getElement();
	    var angle = mask.angle,
	        left = mask.left,
	        scaleX = mask.scaleX,
	        scaleY = mask.scaleY,
	        top = mask.top;
	    maskCtx.save();
	    maskCtx.translate(left, top);
	    maskCtx.rotate(angle * Math.PI / 180);
	    maskCtx.scale(scaleX, scaleY);
	    maskCtx.drawImage(maskImg, -maskImg.width / 2, -maskImg.height / 2);
	    maskCtx.restore();
	  },

	  /**
	   * Map mask image data to source image data
	   * @param {Object} maskCtx - Context of mask canvas
	   * @param {Object} imageData - Data of source image
	   * @param {number} width - Width of main canvas
	   * @param {number} height - Height of main canvas
	   * @private
	   */
	  _mapData: function _mapData(maskCtx, imageData, width, height) {
	    var data = imageData.data,
	        imgHeight = imageData.height,
	        imgWidth = imageData.width;
	    var sourceData = data;
	    var len = imgWidth * imgHeight * 4;
	    var maskData = maskCtx.getImageData(0, 0, width, height).data;

	    for (var i = 0; i < len; i += 4) {
	      sourceData[i + 3] = maskData[i]; // adjust value of alpha data
	    }
	  }
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Blur extending fabric.Image.filters.Convolute
	 */
	/**
	 * Blur object
	 * @class Blur
	 * @extends {fabric.Image.filters.Convolute}
	 * @ignore
	 */

	var Blur = fabric_2.util.createClass(fabric_2.Image.filters.Convolute,
	/** @lends Convolute.prototype */
	{
	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'Blur',

	  /**
	   * constructor
	   * @override
	   */
	  initialize: function initialize() {
	    var matrix = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
	    this.matrix = matrix;
	  }
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Sharpen extending fabric.Image.filters.Convolute
	 */
	/**
	 * Sharpen object
	 * @class Sharpen
	 * @extends {fabric.Image.filters.Convolute}
	 * @ignore
	 */

	var Sharpen = fabric_2.util.createClass(fabric_2.Image.filters.Convolute,
	/** @lends Convolute.prototype */
	{
	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'Sharpen',

	  /**
	   * constructor
	   * @override
	   */
	  initialize: function initialize() {
	    var matrix = [0, -1, 0, -1, 5, -1, 0, -1, 0];
	    this.matrix = matrix;
	  }
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Emboss extending fabric.Image.filters.Convolute
	 */
	/**
	 * Emboss object
	 * @class Emboss
	 * @extends {fabric.Image.filters.Convolute}
	 * @ignore
	 */

	var Emboss = fabric_2.util.createClass(fabric_2.Image.filters.Convolute,
	/** @lends Convolute.prototype */
	{
	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'Emboss',

	  /**
	   * constructor
	   * @override
	   */
	  initialize: function initialize() {
	    var matrix = [1, 1, 1, 1, 0.7, -1, -1, -1, -1];
	    this.matrix = matrix;
	  }
	});

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview ColorFilter extending fabric.Image.filters.BaseFilter
	 */
	/**
	 * ColorFilter object
	 * @class ColorFilter
	 * @extends {fabric.Image.filters.BaseFilter}
	 * @ignore
	 */

	var ColorFilter = fabric_2.util.createClass(fabric_2.Image.filters.BaseFilter,
	/** @lends BaseFilter.prototype */
	{
	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'ColorFilter',

	  /**
	   * Constructor
	   * @member fabric.Image.filters.ColorFilter.prototype
	   * @param {Object} [options] Options object
	   * @param {Number} [options.color='#FFFFFF'] Value of color (0...255)
	   * @param {Number} [options.threshold=45] Value of threshold (0...255)
	   * @override
	   */
	  initialize: function initialize(options) {
	    if (!options) {
	      options = {};
	    }

	    this.color = options.color || '#FFFFFF';
	    this.threshold = options.threshold || 45;
	    this.x = options.x || null;
	    this.y = options.y || null;
	  },

	  /**
	   * Applies filter to canvas element
	   * @param {Object} canvas Canvas object passed by fabric
	   */
	  applyTo: function applyTo(canvas) {
	    // eslint-disable-line
	    var canvasEl = canvas.canvasEl;
	    var context = canvasEl.getContext('2d');
	    var imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height);
	    var data = imageData.data;
	    var threshold = this.threshold;
	    var filterColor = fabric_2.Color.sourceFromHex(this.color);
	    var i, len;

	    if (this.x && this.y) {
	      filterColor = this._getColor(imageData, this.x, this.y);
	    }

	    for (i = 0, len = data.length; i < len; i += 4) {
	      if (this._isOutsideThreshold(data[i], filterColor[0], threshold) || this._isOutsideThreshold(data[i + 1], filterColor[1], threshold) || this._isOutsideThreshold(data[i + 2], filterColor[2], threshold)) {
	        continue;
	      }

	      data[i] = data[i + 1] = data[i + 2] = data[i + 3] = 0;
	    }

	    context.putImageData(imageData, 0, 0);
	  },

	  /**
	   * Check color if it is within threshold
	   * @param {Number} color1 source color
	   * @param {Number} color2 filtering color
	   * @param {Number} threshold threshold
	   * @returns {boolean} true if within threshold or false
	   */
	  _isOutsideThreshold: function _isOutsideThreshold(color1, color2, threshold) {
	    var diff = color1 - color2;
	    return Math.abs(diff) > threshold;
	  },

	  /**
	   * Get color at (x, y)
	   * @param {Object} imageData of canvas
	   * @param {Number} x left position
	   * @param {Number} y top position
	   * @returns {Array} color array
	   */
	  _getColor: function _getColor(imageData, x, y) {
	    var color = [0, 0, 0, 0];
	    var data = imageData.data,
	        width = imageData.width;
	    var bytes = 4;
	    var position = (width * y + x) * bytes;
	    color[0] = data[position];
	    color[1] = data[position + 1];
	    color[2] = data[position + 2];
	    color[3] = data[position + 3];
	    return color;
	  }
	});

	var filters = fabric_2.Image.filters;
	filters.Mask = Mask$1;
	filters.Blur = Blur;
	filters.Sharpen = Sharpen;
	filters.Emboss = Emboss;
	filters.ColorFilter = ColorFilter;
	/**
	 * Filter
	 * @class Filter
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Filter$1 =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Filter, _Component);

	  function Filter(graphics) {
	    _classCallCheck(this, Filter);

	    return _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, componentNames.FILTER, graphics));
	  }
	  /**
	   * Add filter to source image (a specific filter is added on fabric.js)
	   * @param {string} type - Filter type
	   * @param {Object} [options] - Options of filter
	   * @returns {Promise}
	   */


	  _createClass(Filter, [{
	    key: "add",
	    value: function add(type, options) {
	      var _this = this;

	      return new Promise(function (resolve, reject) {
	        var sourceImg = _this._getSourceImage();

	        var canvas = _this.getCanvas();

	        var imgFilter = _this._getFilter(sourceImg, type);

	        if (!imgFilter) {
	          imgFilter = _this._createFilter(sourceImg, type, options);
	        }

	        if (!imgFilter) {
	          reject(rejectMessages.invalidParameters);
	        }

	        _this._changeFilterValues(imgFilter, options);

	        _this._apply(sourceImg, function () {
	          canvas.renderAll();
	          resolve({
	            type: type,
	            action: 'add'
	          });
	        });
	      });
	    }
	    /**
	     * Remove filter to source image
	     * @param {string} type - Filter type
	     * @returns {Promise}
	     */

	  }, {
	    key: "remove",
	    value: function remove(type) {
	      var _this2 = this;

	      return new Promise(function (resolve, reject) {
	        var sourceImg = _this2._getSourceImage();

	        var canvas = _this2.getCanvas();

	        if (!sourceImg.filters.length) {
	          reject(rejectMessages.unsupportedOperation);
	        }

	        _this2._removeFilter(sourceImg, type);

	        _this2._apply(sourceImg, function () {
	          canvas.renderAll();
	          resolve({
	            type: type,
	            action: 'remove'
	          });
	        });
	      });
	    }
	    /**
	     * Whether this has the filter or not
	     * @param {string} type - Filter type
	     * @returns {boolean} true if it has the filter
	     */

	  }, {
	    key: "hasFilter",
	    value: function hasFilter(type) {
	      return !!this._getFilter(this._getSourceImage(), type);
	    }
	    /**
	     * Get a filter options
	     * @param {string} type - Filter type
	     * @returns {Object} filter options or null if there is no that filter
	     */

	  }, {
	    key: "getOptions",
	    value: function getOptions(type) {
	      var sourceImg = this._getSourceImage();

	      var imgFilter = this._getFilter(sourceImg, type);

	      if (!imgFilter) {
	        return null;
	      }

	      return Object.assign({}, imgFilter.options);
	    }
	    /**
	     * Change filter values
	     * @param {Object} imgFilter object of filter
	     * @param {Object} options object
	     * @private
	     */

	  }, {
	    key: "_changeFilterValues",
	    value: function _changeFilterValues(imgFilter, options) {
	      forEach_1(options, function (value, key) {
	        if (!isUndefined_1(imgFilter[key])) {
	          imgFilter[key] = value;
	        }
	      });
	      forEach_1(imgFilter.options, function (value, key) {
	        if (!isUndefined_1(options[key])) {
	          imgFilter.options[key] = options[key];
	        }
	      });
	    }
	    /**
	     * Apply filter
	     * @param {fabric.Image} sourceImg - Source image to apply filter
	     * @param {function} callback - Executed function after applying filter
	     * @private
	     */

	  }, {
	    key: "_apply",
	    value: function _apply(sourceImg, callback) {
	      sourceImg.filters.push();
	      var result = sourceImg.applyFilters();

	      if (result) {
	        callback();
	      }
	    }
	    /**
	     * Get source image on canvas
	     * @returns {fabric.Image} Current source image on canvas
	     * @private
	     */

	  }, {
	    key: "_getSourceImage",
	    value: function _getSourceImage() {
	      return this.getCanvasImage();
	    }
	    /**
	     * Create filter instance
	     * @param {fabric.Image} sourceImg - Source image to apply filter
	     * @param {string} type - Filter type
	     * @param {Object} [options] - Options of filter
	     * @returns {Object} Fabric object of filter
	     * @private
	     */

	  }, {
	    key: "_createFilter",
	    value: function _createFilter(sourceImg, type, options) {
	      var filterObj; // capitalize first letter for matching with fabric image filter name

	      var fabricType = this._getFabricFilterType(type);

	      var ImageFilter = fabric_2.Image.filters[fabricType];

	      if (ImageFilter) {
	        filterObj = new ImageFilter(options);
	        filterObj.options = options;
	        sourceImg.filters.push(filterObj);
	      }

	      return filterObj;
	    }
	    /**
	     * Get applied filter instance
	     * @param {fabric.Image} sourceImg - Source image to apply filter
	     * @param {string} type - Filter type
	     * @returns {Object} Fabric object of filter
	     * @private
	     */

	  }, {
	    key: "_getFilter",
	    value: function _getFilter(sourceImg, type) {
	      var imgFilter = null;

	      if (sourceImg) {
	        var fabricType = this._getFabricFilterType(type);

	        var length = sourceImg.filters.length;
	        var item, i;

	        for (i = 0; i < length; i += 1) {
	          item = sourceImg.filters[i];

	          if (item.type === fabricType) {
	            imgFilter = item;
	            break;
	          }
	        }
	      }

	      return imgFilter;
	    }
	    /**
	     * Remove applied filter instance
	     * @param {fabric.Image} sourceImg - Source image to apply filter
	     * @param {string} type - Filter type
	     * @private
	     */

	  }, {
	    key: "_removeFilter",
	    value: function _removeFilter(sourceImg, type) {
	      var fabricType = this._getFabricFilterType(type);

	      sourceImg.filters = sourceImg.filters.filter(function (value) {
	        return value.type !== fabricType;
	      });
	    }
	    /**
	     * Change filter class name to fabric's, especially capitalizing first letter
	     * @param {string} type - Filter type
	     * @example
	     * 'grayscale' -> 'Grayscale'
	     * @returns {string} Fabric filter class name
	     */

	  }, {
	    key: "_getFabricFilterType",
	    value: function _getFabricFilterType(type) {
	      return type.charAt(0).toUpperCase() + type.slice(1);
	    }
	  }]);

	  return Filter;
	}(Component);

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Shape resize helper
	 */
	var DIVISOR = {
	  rect: 1,
	  circle: 2,
	  triangle: 1
	};
	var DIMENSION_KEYS = {
	  rect: {
	    w: 'width',
	    h: 'height'
	  },
	  circle: {
	    w: 'rx',
	    h: 'ry'
	  },
	  triangle: {
	    w: 'width',
	    h: 'height'
	  }
	};
	/**
	 * Set the start point value to the shape object
	 * @param {fabric.Object} shape - Shape object
	 * @ignore
	 */

	function setStartPoint(shape) {
	  var originX = shape.originX,
	      originY = shape.originY;
	  var originKey = originX.substring(0, 1) + originY.substring(0, 1);
	  shape.startPoint = shape.origins[originKey];
	}
	/**
	 * Get the positions of ratated origin by the pointer value
	 * @param {{x: number, y: number}} origin - Origin value
	 * @param {{x: number, y: number}} pointer - Pointer value
	 * @param {number} angle - Rotating angle
	 * @returns {Object} Postions of origin
	 * @ignore
	 */


	function getPositionsOfRotatedOrigin(origin, pointer, angle) {
	  var sx = origin.x;
	  var sy = origin.y;
	  var px = pointer.x;
	  var py = pointer.y;
	  var r = angle * Math.PI / 180;
	  var rx = (px - sx) * Math.cos(r) - (py - sy) * Math.sin(r) + sx;
	  var ry = (px - sx) * Math.sin(r) + (py - sy) * Math.cos(r) + sy;
	  return {
	    originX: sx > rx ? 'right' : 'left',
	    originY: sy > ry ? 'bottom' : 'top'
	  };
	}
	/**
	 * Whether the shape has the center origin or not
	 * @param {fabric.Object} shape - Shape object
	 * @returns {boolean} State
	 * @ignore
	 */


	function hasCenterOrigin(shape) {
	  return shape.originX === 'center' && shape.originY === 'center';
	}
	/**
	 * Adjust the origin of shape by the start point
	 * @param {{x: number, y: number}} pointer - Pointer value
	 * @param {fabric.Object} shape - Shape object
	 * @ignore
	 */


	function adjustOriginByStartPoint(pointer, shape) {
	  var centerPoint = shape.getPointByOrigin('center', 'center');
	  var angle = -shape.angle;
	  var originPositions = getPositionsOfRotatedOrigin(centerPoint, pointer, angle);
	  var originX = originPositions.originX,
	      originY = originPositions.originY;
	  var origin = shape.getPointByOrigin(originX, originY);
	  var left = shape.left - (centerPoint.x - origin.x);
	  var top = shape.top - (centerPoint.x - origin.y);
	  shape.set({
	    originX: originX,
	    originY: originY,
	    left: left,
	    top: top
	  });
	  shape.setCoords();
	}
	/**
	 * Adjust the origin of shape by the moving pointer value
	 * @param {{x: number, y: number}} pointer - Pointer value
	 * @param {fabric.Object} shape - Shape object
	 * @ignore
	 */


	function adjustOriginByMovingPointer(pointer, shape) {
	  var origin = shape.startPoint;
	  var angle = -shape.angle;
	  var originPositions = getPositionsOfRotatedOrigin(origin, pointer, angle);
	  var originX = originPositions.originX,
	      originY = originPositions.originY;
	  shape.setPositionByOrigin(origin, originX, originY);
	}
	/**
	 * Adjust the dimension of shape on firing scaling event
	 * @param {fabric.Object} shape - Shape object
	 * @ignore
	 */


	function adjustDimensionOnScaling(shape) {
	  var type = shape.type,
	      scaleX = shape.scaleX,
	      scaleY = shape.scaleY;
	  var dimensionKeys = DIMENSION_KEYS[type];
	  var width = shape[dimensionKeys.w] * scaleX;
	  var height = shape[dimensionKeys.h] * scaleY;

	  if (shape.isRegular) {
	    var maxScale = Math.max(scaleX, scaleY);
	    width = shape[dimensionKeys.w] * maxScale;
	    height = shape[dimensionKeys.h] * maxScale;
	  }

	  var options = {
	    hasControls: false,
	    hasBorders: false,
	    scaleX: 1,
	    scaleY: 1
	  };
	  options[dimensionKeys.w] = width;
	  options[dimensionKeys.h] = height;
	  shape.set(options);
	}
	/**
	 * Adjust the dimension of shape on firing mouse move event
	 * @param {{x: number, y: number}} pointer - Pointer value
	 * @param {fabric.Object} shape - Shape object
	 * @ignore
	 */


	function adjustDimensionOnMouseMove(pointer, shape) {
	  var type = shape.type,
	      strokeWidth = shape.strokeWidth,
	      origin = shape.startPoint;
	  var divisor = DIVISOR[type];
	  var dimensionKeys = DIMENSION_KEYS[type];
	  var isTriangle = !!(shape.type === 'triangle');
	  var options = {};
	  var width = Math.abs(origin.x - pointer.x) / divisor;
	  var height = Math.abs(origin.y - pointer.y) / divisor;

	  if (width > strokeWidth) {
	    width -= strokeWidth / divisor;
	  }

	  if (height > strokeWidth) {
	    height -= strokeWidth / divisor;
	  }

	  if (shape.isRegular) {
	    width = height = Math.max(width, height);

	    if (isTriangle) {
	      height = Math.sqrt(3) / 2 * width;
	    }
	  }

	  options[dimensionKeys.w] = width;
	  options[dimensionKeys.h] = height;
	  shape.set(options);
	}
	/**
	 * Set each origin value to shape
	 * @param {fabric.Object} shape - Shape object
	 */


	function setOrigins(shape) {
	  var leftTopPoint = shape.getPointByOrigin('left', 'top');
	  var rightTopPoint = shape.getPointByOrigin('right', 'top');
	  var rightBottomPoint = shape.getPointByOrigin('right', 'bottom');
	  var leftBottomPoint = shape.getPointByOrigin('left', 'bottom');
	  shape.origins = {
	    lt: leftTopPoint,
	    rt: rightTopPoint,
	    rb: rightBottomPoint,
	    lb: leftBottomPoint
	  };
	}
	/**
	 * Resize the shape
	 * @param {fabric.Object} shape - Shape object
	 * @param {{x: number, y: number}} pointer - Mouse pointer values on canvas
	 * @param {boolean} isScaling - Whether the resizing action is scaling or not
	 */

	function resize(shape, pointer, isScaling) {
	  if (hasCenterOrigin(shape)) {
	    adjustOriginByStartPoint(pointer, shape);
	    setStartPoint(shape);
	  }

	  if (isScaling) {
	    adjustDimensionOnScaling(shape);
	  } else {
	    adjustDimensionOnMouseMove(pointer, shape);
	  }

	  adjustOriginByMovingPointer(pointer, shape);
	}
	/**
	 * Adjust the origin position of shape to center
	 * @param {fabric.Object} shape - Shape object
	 */

	function adjustOriginToCenter(shape) {
	  var centerPoint = shape.getPointByOrigin('center', 'center');
	  var originX = shape.originX,
	      originY = shape.originY;
	  var origin = shape.getPointByOrigin(originX, originY);
	  var left = shape.left + (centerPoint.x - origin.x);
	  var top = shape.top + (centerPoint.y - origin.y);
	  shape.set({
	    hasControls: true,
	    hasBorders: true,
	    originX: 'center',
	    originY: 'center',
	    left: left,
	    top: top
	  });
	  shape.setCoords(); // For left, top properties
	}

	var DEFAULT_TYPE = 'rect';
	var DEFAULT_OPTIONS = {
	  strokeWidth: 1,
	  stroke: '#000000',
	  fill: '#ffffff',
	  width: 1,
	  height: 1,
	  rx: 0,
	  ry: 0,
	  lockSkewingX: true,
	  lockSkewingY: true,
	  lockUniScaling: false,
	  bringForward: true,
	  isRegular: false
	};
	var shapeType = ['rect', 'circle', 'triangle'];
	/**
	 * Shape
	 * @class Shape
	 * @param {Graphics} graphics - Graphics instance
	 * @extends {Component}
	 * @ignore
	 */

	var Shape$1 =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Shape, _Component);

	  function Shape(graphics) {
	    var _this;

	    _classCallCheck(this, Shape);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shape).call(this, componentNames.SHAPE, graphics));
	    /**
	     * Object of The drawing shape
	     * @type {fabric.Object}
	     * @private
	     */

	    _this._shapeObj = null;
	    /**
	     * Type of the drawing shape
	     * @type {string}
	     * @private
	     */

	    _this._type = DEFAULT_TYPE;
	    /**
	     * Options to draw the shape
	     * @type {Object}
	     * @private
	     */

	    _this._options = extend({}, DEFAULT_OPTIONS);
	    /**
	     * Whether the shape object is selected or not
	     * @type {boolean}
	     * @private
	     */

	    _this._isSelected = false;
	    /**
	     * Pointer for drawing shape (x, y)
	     * @type {Object}
	     * @private
	     */

	    _this._startPoint = {};
	    /**
	     * Using shortcut on drawing shape
	     * @type {boolean}
	     * @private
	     */

	    _this._withShiftKey = false;
	    /**
	     * Event handler list
	     * @type {Object}
	     * @private
	     */

	    _this._handlers = {
	      mousedown: _this._onFabricMouseDown.bind(_assertThisInitialized(_this)),
	      mousemove: _this._onFabricMouseMove.bind(_assertThisInitialized(_this)),
	      mouseup: _this._onFabricMouseUp.bind(_assertThisInitialized(_this)),
	      keydown: _this._onKeyDown.bind(_assertThisInitialized(_this)),
	      keyup: _this._onKeyUp.bind(_assertThisInitialized(_this))
	    };
	    return _this;
	  }
	  /**
	   * Start to draw the shape on canvas
	   * @ignore
	   */


	  _createClass(Shape, [{
	    key: "start",
	    value: function start() {
	      var canvas = this.getCanvas();
	      this._isSelected = false;
	      canvas.defaultCursor = 'crosshair';
	      canvas.selection = false;
	      canvas.uniScaleTransform = true;
	      canvas.on({
	        'mouse:down': this._handlers.mousedown
	      });
	      fabric_2.util.addListener(document, 'keydown', this._handlers.keydown);
	      fabric_2.util.addListener(document, 'keyup', this._handlers.keyup);
	    }
	    /**
	     * End to draw the shape on canvas
	     * @ignore
	     */

	  }, {
	    key: "end",
	    value: function end() {
	      var canvas = this.getCanvas();
	      this._isSelected = false;
	      canvas.defaultCursor = 'default';
	      canvas.selection = true;
	      canvas.uniScaleTransform = false;
	      canvas.off({
	        'mouse:down': this._handlers.mousedown
	      });
	      fabric_2.util.removeListener(document, 'keydown', this._handlers.keydown);
	      fabric_2.util.removeListener(document, 'keyup', this._handlers.keyup);
	    }
	    /**
	     * Set states of the current drawing shape
	     * @ignore
	     * @param {string} type - Shape type (ex: 'rect', 'circle')
	     * @param {Object} [options] - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stoke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     */

	  }, {
	    key: "setStates",
	    value: function setStates(type, options) {
	      this._type = type;

	      if (options) {
	        this._options = extend(this._options, options);
	      }
	    }
	    /**
	     * Add the shape
	     * @ignore
	     * @param {string} type - Shape type (ex: 'rect', 'circle')
	     * @param {Object} options - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stroke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {number} [options.isRegular] - Whether scaling shape has 1:1 ratio or not
	     * @returns {Promise}
	     */

	  }, {
	    key: "add",
	    value: function add(type, options) {
	      var _this2 = this;

	      return new Promise(function (resolve) {
	        var canvas = _this2.getCanvas();

	        options = _this2._createOptions(options);

	        var shapeObj = _this2._createInstance(type, options);

	        _this2._bindEventOnShape(shapeObj);

	        canvas.add(shapeObj).setActiveObject(shapeObj);
	        resolve(_this2.graphics.createObjectProperties(shapeObj));
	      });
	    }
	    /**
	     * Change the shape
	     * @ignore
	     * @param {fabric.Object} shapeObj - Selected shape object on canvas
	     * @param {Object} options - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stroke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {number} [options.isRegular] - Whether scaling shape has 1:1 ratio or not
	     * @returns {Promise}
	     */

	  }, {
	    key: "change",
	    value: function change(shapeObj, options) {
	      var _this3 = this;

	      return new Promise(function (resolve, reject) {
	        if (Array.inArray(shapeObj.get('type'), shapeType) < 0) {
	          reject(rejectMessages.unsupportedType);
	        }

	        shapeObj.set(options);

	        _this3.getCanvas().renderAll();

	        resolve();
	      });
	    }
	    /**
	     * Create the instance of shape
	     * @param {string} type - Shape type
	     * @param {Object} options - Options to creat the shape
	     * @returns {fabric.Object} Shape instance
	     * @private
	     */

	  }, {
	    key: "_createInstance",
	    value: function _createInstance(type, options) {
	      var instance;

	      switch (type) {
	        case 'rect':
	          instance = new fabric_2.Rect(options);
	          break;

	        case 'circle':
	          instance = new fabric_2.Ellipse(extend({
	            type: 'circle'
	          }, options));
	          break;

	        case 'triangle':
	          instance = new fabric_2.Triangle(options);
	          break;

	        default:
	          instance = {};
	      }

	      return instance;
	    }
	    /**
	     * Get the options to create the shape
	     * @param {Object} options - Options to creat the shape
	     * @returns {Object} Shape options
	     * @private
	     */

	  }, {
	    key: "_createOptions",
	    value: function _createOptions(options) {
	      var selectionStyles = fObjectOptions.SELECTION_STYLE;
	      options = extend({}, DEFAULT_OPTIONS, this._options, selectionStyles, options);

	      if (options.isRegular) {
	        options.lockUniScaling = true;
	      }

	      return options;
	    }
	    /**
	     * Bind fabric events on the creating shape object
	     * @param {fabric.Object} shapeObj - Shape object
	     * @private
	     */

	  }, {
	    key: "_bindEventOnShape",
	    value: function _bindEventOnShape(shapeObj) {
	      var self = this;
	      var canvas = this.getCanvas();
	      shapeObj.on({
	        added: function added() {
	          self._shapeObj = this;
	          setOrigins(self._shapeObj);
	        },
	        selected: function selected() {
	          self._isSelected = true;
	          self._shapeObj = this;
	          canvas.uniScaleTransform = true;
	          canvas.defaultCursor = 'default';
	          setOrigins(self._shapeObj);
	        },
	        deselected: function deselected() {
	          self._isSelected = false;
	          self._shapeObj = null;
	          canvas.defaultCursor = 'crosshair';
	          canvas.uniScaleTransform = false;
	        },
	        modified: function modified() {
	          var currentObj = self._shapeObj;
	          adjustOriginToCenter(currentObj);
	          setOrigins(currentObj);
	        },
	        scaling: function scaling(fEvent) {
	          var pointer = canvas.getPointer(fEvent.e);
	          var currentObj = self._shapeObj;
	          canvas.setCursor('crosshair');
	          resize(currentObj, pointer, true);
	        }
	      });
	    }
	    /**
	     * MouseDown event handler on canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseDown",
	    value: function _onFabricMouseDown(fEvent) {
	      if (!fEvent.target) {
	        this._isSelected = false;
	        this._shapeObj = false;
	      }

	      if (!this._isSelected && !this._shapeObj) {
	        var canvas = this.getCanvas();
	        this._startPoint = canvas.getPointer(fEvent.e);
	        canvas.on({
	          'mouse:move': this._handlers.mousemove,
	          'mouse:up': this._handlers.mouseup
	        });
	      }
	    }
	    /**
	     * MouseDown event handler on canvas
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event object
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseMove",
	    value: function _onFabricMouseMove(fEvent) {
	      var _this4 = this;

	      var canvas = this.getCanvas();
	      var pointer = canvas.getPointer(fEvent.e);
	      var startPointX = this._startPoint.x;
	      var startPointY = this._startPoint.y;
	      var width = startPointX - pointer.x;
	      var height = startPointY - pointer.y;
	      var shape = this._shapeObj;

	      if (!shape) {
	        this.add(this._type, {
	          left: startPointX,
	          top: startPointY,
	          width: width,
	          height: height
	        }).then(function (objectProps) {
	          _this4.fire(eventNames.ADD_OBJECT, objectProps);
	        });
	      } else {
	        this._shapeObj.set({
	          isRegular: this._withShiftKey
	        });

	        resize(shape, pointer);
	        canvas.renderAll();
	      }
	    }
	    /**
	     * MouseUp event handler on canvas
	     * @private
	     */

	  }, {
	    key: "_onFabricMouseUp",
	    value: function _onFabricMouseUp() {
	      var canvas = this.getCanvas();
	      var shape = this._shapeObj;

	      if (shape) {
	        adjustOriginToCenter(shape);
	      }

	      this.fire(eventNames.ADD_OBJECT_AFTER, this.graphics.createObjectProperties(shape));
	      canvas.off({
	        'mouse:move': this._handlers.mousemove,
	        'mouse:up': this._handlers.mouseup
	      });
	    }
	    /**
	     * Keydown event handler on document
	     * @param {KeyboardEvent} e - Event object
	     * @private
	     */

	  }, {
	    key: "_onKeyDown",
	    value: function _onKeyDown(e) {
	      if (e.keyCode === keyCodes.SHIFT) {
	        this._withShiftKey = true;

	        if (this._shapeObj) {
	          this._shapeObj.isRegular = true;
	        }
	      }
	    }
	    /**
	     * Keyup event handler on document
	     * @param {KeyboardEvent} e - Event object
	     * @private
	     */

	  }, {
	    key: "_onKeyUp",
	    value: function _onKeyUp(e) {
	      if (e.keyCode === keyCodes.SHIFT) {
	        this._withShiftKey = false;

	        if (this._shapeObj) {
	          this._shapeObj.isRegular = false;
	        }
	      }
	    }
	  }]);

	  return Shape;
	}(Component);

	/**
	 * DrawingMode interface
	 * @class
	 * @param {string} name - drawing mode name
	 * @ignore
	 */

	var DrawingMode =
	/*#__PURE__*/
	function () {
	  function DrawingMode(name) {
	    _classCallCheck(this, DrawingMode);

	    /**
	     * the name of drawing mode
	     * @type {string}
	     */
	    this.name = name;
	  }
	  /**
	   * Get this drawing mode name;
	   * @returns {string} drawing mode name
	   */


	  _createClass(DrawingMode, [{
	    key: "getName",
	    value: function getName() {
	      return this.name;
	    }
	    /**
	    * start this drawing mode
	    * @param {Object} options - drawing mode options
	    * @abstract
	    */

	  }, {
	    key: "start",
	    value: function start() {
	      throw new Error(createMessage(errorTypes.UN_IMPLEMENTATION, 'start'));
	    }
	    /**
	     * stop this drawing mode
	     * @abstract
	     */

	  }, {
	    key: "stop",
	    value: function stop() {
	      throw new Error(createMessage(errorTypes.UN_IMPLEMENTATION, 'stop'));
	    }
	  }]);

	  return DrawingMode;
	}();

	/**
	 * CropperDrawingMode class
	 * @class
	 * @ignore
	 */

	var CropperDrawingMode =
	/*#__PURE__*/
	function (_DrawingMode) {
	  _inherits(CropperDrawingMode, _DrawingMode);

	  function CropperDrawingMode() {
	    _classCallCheck(this, CropperDrawingMode);

	    return _possibleConstructorReturn(this, _getPrototypeOf(CropperDrawingMode).call(this, drawingModes.CROPPER));
	  }
	  /**
	  * start this drawing mode
	  * @param {Graphics} graphics - Graphics instance
	  * @override
	  */


	  _createClass(CropperDrawingMode, [{
	    key: "start",
	    value: function start(graphics) {
	      var cropper = graphics.getComponent(componentNames.CROPPER);
	      cropper.start();
	    }
	    /**
	     * stop this drawing mode
	     * @param {Graphics} graphics - Graphics instance
	     * @override
	     */

	  }, {
	    key: "end",
	    value: function end(graphics) {
	      var cropper = graphics.getComponent(componentNames.CROPPER);
	      cropper.end();
	    }
	  }]);

	  return CropperDrawingMode;
	}(DrawingMode);

	/**
	 * FreeDrawingMode class
	 * @class
	 * @ignore
	 */

	var FreeDrawingMode =
	/*#__PURE__*/
	function (_DrawingMode) {
	  _inherits(FreeDrawingMode, _DrawingMode);

	  function FreeDrawingMode() {
	    _classCallCheck(this, FreeDrawingMode);

	    return _possibleConstructorReturn(this, _getPrototypeOf(FreeDrawingMode).call(this, drawingModes.FREE_DRAWING));
	  }
	  /**
	  * start this drawing mode
	  * @param {Graphics} graphics - Graphics instance
	  * @param {{width: ?number, color: ?string}} [options] - Brush width & color
	  * @override
	  */


	  _createClass(FreeDrawingMode, [{
	    key: "start",
	    value: function start(graphics, options) {
	      var freeDrawing = graphics.getComponent(componentNames.FREE_DRAWING);
	      freeDrawing.start(options);
	    }
	    /**
	     * stop this drawing mode
	     * @param {Graphics} graphics - Graphics instance
	     * @override
	     */

	  }, {
	    key: "end",
	    value: function end(graphics) {
	      var freeDrawing = graphics.getComponent(componentNames.FREE_DRAWING);
	      freeDrawing.end();
	    }
	  }]);

	  return FreeDrawingMode;
	}(DrawingMode);

	/**
	 * LineDrawingMode class
	 * @class
	 * @ignore
	 */

	var LineDrawingMode =
	/*#__PURE__*/
	function (_DrawingMode) {
	  _inherits(LineDrawingMode, _DrawingMode);

	  function LineDrawingMode() {
	    _classCallCheck(this, LineDrawingMode);

	    return _possibleConstructorReturn(this, _getPrototypeOf(LineDrawingMode).call(this, drawingModes.LINE_DRAWING));
	  }
	  /**
	  * start this drawing mode
	  * @param {Graphics} graphics - Graphics instance
	  * @param {{width: ?number, color: ?string}} [options] - Brush width & color
	  * @override
	  */


	  _createClass(LineDrawingMode, [{
	    key: "start",
	    value: function start(graphics, options) {
	      var lineDrawing = graphics.getComponent(componentNames.LINE);
	      lineDrawing.start(options);
	    }
	    /**
	     * stop this drawing mode
	     * @param {Graphics} graphics - Graphics instance
	     * @override
	     */

	  }, {
	    key: "end",
	    value: function end(graphics) {
	      var lineDrawing = graphics.getComponent(componentNames.LINE);
	      lineDrawing.end();
	    }
	  }]);

	  return LineDrawingMode;
	}(DrawingMode);

	/**
	 * ShapeDrawingMode class
	 * @class
	 * @ignore
	 */

	var ShapeDrawingMode =
	/*#__PURE__*/
	function (_DrawingMode) {
	  _inherits(ShapeDrawingMode, _DrawingMode);

	  function ShapeDrawingMode() {
	    _classCallCheck(this, ShapeDrawingMode);

	    return _possibleConstructorReturn(this, _getPrototypeOf(ShapeDrawingMode).call(this, drawingModes.SHAPE));
	  }
	  /**
	  * start this drawing mode
	  * @param {Graphics} graphics - Graphics instance
	  * @override
	  */


	  _createClass(ShapeDrawingMode, [{
	    key: "start",
	    value: function start(graphics) {
	      var shape = graphics.getComponent(componentNames.SHAPE);
	      shape.start();
	    }
	    /**
	     * stop this drawing mode
	     * @param {Graphics} graphics - Graphics instance
	     * @override
	     */

	  }, {
	    key: "end",
	    value: function end(graphics) {
	      var shape = graphics.getComponent(componentNames.SHAPE);
	      shape.end();
	    }
	  }]);

	  return ShapeDrawingMode;
	}(DrawingMode);

	/**
	 * TextDrawingMode class
	 * @class
	 * @ignore
	 */

	var TextDrawingMode =
	/*#__PURE__*/
	function (_DrawingMode) {
	  _inherits(TextDrawingMode, _DrawingMode);

	  function TextDrawingMode() {
	    _classCallCheck(this, TextDrawingMode);

	    return _possibleConstructorReturn(this, _getPrototypeOf(TextDrawingMode).call(this, drawingModes.TEXT));
	  }
	  /**
	  * start this drawing mode
	  * @param {Graphics} graphics - Graphics instance
	  * @override
	  */


	  _createClass(TextDrawingMode, [{
	    key: "start",
	    value: function start(graphics) {
	      var text = graphics.getComponent(componentNames.TEXT);
	      text.start();
	    }
	    /**
	     * stop this drawing mode
	     * @param {Graphics} graphics - Graphics instance
	     * @override
	     */

	  }, {
	    key: "end",
	    value: function end(graphics) {
	      var text = graphics.getComponent(componentNames.TEXT);
	      text.end();
	    }
	  }]);

	  return TextDrawingMode;
	}(DrawingMode);

	/**
	 * Iterates over own enumerable string keyed properties of an object and
	 * invokes `iteratee` for each property. The iteratee is invoked with three
	 * arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwnRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forOwn(object, iteratee) {
	  return object && _baseForOwn(object, _castFunction(iteratee));
	}

	var forOwn_1 = forOwn;

	var DEFAULT_CSS_MAX_WIDTH = 1000;
	var DEFAULT_CSS_MAX_HEIGHT = 800;
	var cssOnly = {
	  cssOnly: true
	};
	var backstoreOnly = {
	  backstoreOnly: true
	};
	/**
	 * Graphics class
	 * @class
	 * @param {string|jQuery|HTMLElement} wrapper - Wrapper's element or selector
	 * @param {Object} [option] - Canvas max width & height of css
	 *  @param {number} option.cssMaxWidth - Canvas css-max-width
	 *  @param {number} option.cssMaxHeight - Canvas css-max-height
	 *  @param {boolean} option.useItext - Use IText in text mode
	 *  @param {boolean} option.useDragAddIcon - Use dragable add in icon mode
	 * @ignore
	 */

	var Graphics =
	/*#__PURE__*/
	function () {
	  function Graphics(element) {
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        cssMaxWidth = _ref.cssMaxWidth,
	        cssMaxHeight = _ref.cssMaxHeight,
	        _ref$useItext = _ref.useItext,
	        useItext = _ref$useItext === void 0 ? false : _ref$useItext,
	        _ref$useDragAddIcon = _ref.useDragAddIcon,
	        useDragAddIcon = _ref$useDragAddIcon === void 0 ? false : _ref$useDragAddIcon;

	    _classCallCheck(this, Graphics);

	    /**
	     * Fabric image instance
	     * @type {fabric.Image}
	     */
	    this.canvasImage = null;
	    /**
	     * Max width of canvas elements
	     * @type {number}
	     */

	    this.cssMaxWidth = cssMaxWidth || DEFAULT_CSS_MAX_WIDTH;
	    /**
	     * Max height of canvas elements
	     * @type {number}
	     */

	    this.cssMaxHeight = cssMaxHeight || DEFAULT_CSS_MAX_HEIGHT;
	    /**
	     * Use Itext mode for text component
	     * @type {boolean}
	     */

	    this.useItext = useItext;
	    /**
	     * Use add drag icon mode for icon component
	     * @type {boolean}
	     */

	    this.useDragAddIcon = useDragAddIcon;
	    /**
	     * cropper Selection Style
	     * @type {Object}
	     */

	    this.cropSelectionStyle = {};
	    /**
	     * Image name
	     * @type {string}
	     */

	    this.imageName = '';
	    /**
	     * Object Map
	     * @type {Object}
	     * @private
	     */

	    this._objects = {};
	    /**
	     * Fabric-Canvas instance
	     * @type {fabric.Canvas}
	     * @private
	     */

	    this._canvas = null;
	    /**
	     * Drawing mode
	     * @type {string}
	     * @private
	     */

	    this._drawingMode = drawingModes.NORMAL;
	    /**
	     * DrawingMode map
	     * @type {Object.<string, DrawingMode>}
	     * @private
	     */

	    this._drawingModeMap = {};
	    /**
	     * Component map
	     * @type {Object.<string, Component>}
	     * @private
	     */

	    this._componentMap = {};
	    /**
	     * fabric event handlers
	     * @type {Object.<string, function>}
	     * @private
	     */

	    this._handler = {
	      onMouseDown: this._onMouseDown.bind(this),
	      onObjectAdded: this._onObjectAdded.bind(this),
	      onObjectRemoved: this._onObjectRemoved.bind(this),
	      onObjectMoved: this._onObjectMoved.bind(this),
	      onObjectScaled: this._onObjectScaled.bind(this),
	      onObjectSelected: this._onObjectSelected.bind(this),
	      onPathCreated: this._onPathCreated.bind(this),
	      onSelectionCleared: this._onSelectionCleared.bind(this),
	      onSelectionCreated: this._onSelectionCreated.bind(this)
	    };

	    this._setObjectCachingToFalse();

	    this._setCanvasElement(element);

	    this._createDrawingModeInstances();

	    this._createComponents();

	    this._attachCanvasEvents();
	  }
	  /**
	   * Destroy canvas element
	   */


	  _createClass(Graphics, [{
	    key: "destroy",
	    value: function destroy() {
	      var wrapperEl = this._canvas.wrapperEl;

	      this._canvas.clear();

	      wrapperEl.parentNode.removeChild(wrapperEl);
	    }
	    /**
	     * Deactivates all objects on canvas
	     * @returns {Graphics} this
	     */

	  }, {
	    key: "deactivateAll",
	    value: function deactivateAll() {
	      this._canvas.discardActiveObject();

	      return this;
	    }
	    /**
	     * Renders all objects on canvas
	     * @returns {Graphics} this
	     */

	  }, {
	    key: "renderAll",
	    value: function renderAll() {
	      this._canvas.renderAll();

	      return this;
	    }
	    /**
	     * Adds objects on canvas
	     * @param {Object|Array} objects - objects
	     */

	  }, {
	    key: "add",
	    value: function add(objects) {
	      var _this$_canvas;

	      var theArgs = [];

	      if (Array.isArray(objects)) {
	        theArgs = objects;
	      } else {
	        theArgs.push(objects);
	      }

	      (_this$_canvas = this._canvas).add.apply(_this$_canvas, _toConsumableArray(theArgs));
	    }
	    /**
	     * Removes the object or group
	     * @param {Object} target - graphics object or group
	     * @returns {boolean} true if contains or false
	     */

	  }, {
	    key: "contains",
	    value: function contains(target) {
	      return this._canvas.contains(target);
	    }
	    /**
	     * Gets all objects or group
	     * @returns {Array} all objects, shallow copy
	     */

	  }, {
	    key: "getObjects",
	    value: function getObjects() {
	      return this._canvas.getObjects().slice();
	    }
	    /**
	     * Get an object by id
	     * @param {number} id - object id
	     * @returns {fabric.Object} object corresponding id
	     */

	  }, {
	    key: "getObject",
	    value: function getObject(id) {
	      return this._objects[id];
	    }
	    /**
	     * Removes the object or group
	     * @param {Object} target - graphics object or group
	     */

	  }, {
	    key: "remove",
	    value: function remove(target) {
	      this._canvas.remove(target);
	    }
	    /**
	     * Removes all object or group
	     * @param {boolean} includesBackground - remove the background image or not
	     * @returns {Array} all objects array which is removed
	     */

	  }, {
	    key: "removeAll",
	    value: function removeAll(includesBackground) {
	      var canvas = this._canvas;
	      var objects = canvas.getObjects().slice();
	      canvas.remove.apply(canvas, _toConsumableArray(this._canvas.getObjects()));

	      if (includesBackground) {
	        canvas.clear();
	      }

	      return objects;
	    }
	    /**
	     * Removes an object or group by id
	     * @param {number} id - object id
	     * @returns {Array} removed objects
	     */

	  }, {
	    key: "removeObjectById",
	    value: function removeObjectById(id) {
	      var objects = [];
	      var canvas = this._canvas;
	      var target = this.getObject(id);
	      var isValidGroup = target && target.isType('group') && !target.isEmpty();

	      if (isValidGroup) {
	        canvas.discardActiveObject(); // restore states for each objects

	        target.forEachObject(function (obj) {
	          objects.push(obj);
	          canvas.remove(obj);
	        });
	      } else if (canvas.contains(target)) {
	        objects.push(target);
	        canvas.remove(target);
	      }

	      return objects;
	    }
	    /**
	     * Get an id by object instance
	     * @param {fabric.Object} object object
	     * @returns {number} object id if it exists or null
	     */

	  }, {
	    key: "getObjectId",
	    value: function getObjectId(object) {
	      var key = null;

	      for (key in this._objects) {
	        if (this._objects.hasOwnProperty(key)) {
	          if (object === this._objects[key]) {
	            return key;
	          }
	        }
	      }

	      return null;
	    }
	    /**
	     * Gets an active object or group
	     * @returns {Object} active object or group instance
	     */

	  }, {
	    key: "getActiveObject",
	    value: function getActiveObject() {
	      return this._canvas._activeObject;
	    }
	    /**
	     * Gets an active group object
	     * @returns {Object} active group object instance
	     */

	  }, {
	    key: "getActiveObjects",
	    value: function getActiveObjects() {
	      var activeObject = this._canvas._activeObject;
	      return activeObject && activeObject.type === 'activeSelection' ? activeObject : null;
	    }
	    /**
	     * Activates an object or group
	     * @param {Object} target - target object or group
	     */

	  }, {
	    key: "setActiveObject",
	    value: function setActiveObject(target) {
	      this._canvas.setActiveObject(target);
	    }
	    /**
	     * Set Crop selection style
	     * @param {Object} style - Selection styles
	     */

	  }, {
	    key: "setCropSelectionStyle",
	    value: function setCropSelectionStyle(style) {
	      this.cropSelectionStyle = style;
	    }
	    /**
	     * Get component
	     * @param {string} name - Component name
	     * @returns {Component}
	     */

	  }, {
	    key: "getComponent",
	    value: function getComponent(name) {
	      return this._componentMap[name];
	    }
	    /**
	     * Get current drawing mode
	     * @returns {string}
	     */

	  }, {
	    key: "getDrawingMode",
	    value: function getDrawingMode() {
	      return this._drawingMode;
	    }
	    /**
	     * Start a drawing mode. If the current mode is not 'NORMAL', 'stopDrawingMode()' will be called first.
	     * @param {String} mode Can be one of <I>'CROPPER', 'FREE_DRAWING', 'LINE', 'TEXT', 'SHAPE'</I>
	     * @param {Object} [option] parameters of drawing mode, it's available with 'FREE_DRAWING', 'LINE_DRAWING'
	     *  @param {Number} [option.width] brush width
	     *  @param {String} [option.color] brush color
	     * @returns {boolean} true if success or false
	     */

	  }, {
	    key: "startDrawingMode",
	    value: function startDrawingMode(mode, option) {
	      if (this._isSameDrawingMode(mode)) {
	        return true;
	      } // If the current mode is not 'NORMAL', 'stopDrawingMode()' will be called first.


	      this.stopDrawingMode();

	      var drawingModeInstance = this._getDrawingModeInstance(mode);

	      if (drawingModeInstance && drawingModeInstance.start) {
	        drawingModeInstance.start(this, option);
	        this._drawingMode = mode;
	      }

	      return !!drawingModeInstance;
	    }
	    /**
	     * Stop the current drawing mode and back to the 'NORMAL' mode
	     */

	  }, {
	    key: "stopDrawingMode",
	    value: function stopDrawingMode() {
	      if (this._isSameDrawingMode(drawingModes.NORMAL)) {
	        return;
	      }

	      var drawingModeInstance = this._getDrawingModeInstance(this.getDrawingMode());

	      if (drawingModeInstance && drawingModeInstance.end) {
	        drawingModeInstance.end(this);
	      }

	      this._drawingMode = drawingModes.NORMAL;
	    }
	    /**
	     * To data url from canvas
	     * @param {Object} options - options for toDataURL
	     *   @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     *   @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     *   @param {Number} [options.multiplier=1] Multiplier to scale by
	     *   @param {Number} [options.left] Cropping left offset. Introduced in fabric v1.2.14
	     *   @param {Number} [options.top] Cropping top offset. Introduced in fabric v1.2.14
	     *   @param {Number} [options.width] Cropping width. Introduced in fabric v1.2.14
	     *   @param {Number} [options.height] Cropping height. Introduced in fabric v1.2.14
	     * @returns {string} A DOMString containing the requested data URI.
	     */

	  }, {
	    key: "toDataURL",
	    value: function toDataURL(options) {
	      return this._canvas && this._canvas.toDataURL(options);
	    }
	    /**
	     * Save image(background) of canvas
	     * @param {string} name - Name of image
	     * @param {?fabric.Image} canvasImage - Fabric image instance
	     */

	  }, {
	    key: "setCanvasImage",
	    value: function setCanvasImage(name, canvasImage) {
	      if (canvasImage) {
	        stamp(canvasImage);
	      }

	      this.imageName = name;
	      this.canvasImage = canvasImage;
	    }
	    /**
	     * Set css max dimension
	     * @param {{width: number, height: number}} maxDimension - Max width & Max height
	     */

	  }, {
	    key: "setCssMaxDimension",
	    value: function setCssMaxDimension(maxDimension) {
	      this.cssMaxWidth = maxDimension.width || this.cssMaxWidth;
	      this.cssMaxHeight = maxDimension.height || this.cssMaxHeight;
	    }
	    /**
	     * Adjust canvas dimension with scaling image
	     */

	  }, {
	    key: "adjustCanvasDimension",
	    value: function adjustCanvasDimension() {
	      var canvasImage = this.canvasImage.scale(1);

	      var _canvasImage$getBound = canvasImage.getBoundingRect(),
	          width = _canvasImage$getBound.width,
	          height = _canvasImage$getBound.height;

	      var maxDimension = this._calcMaxDimension(width, height);

	      this.setCanvasCssDimension({
	        width: '100%',
	        height: '100%',
	        // Set height '' for IE9
	        'max-width': "".concat(maxDimension.width, "px"),
	        'max-height': "".concat(maxDimension.height, "px")
	      });
	      this.setCanvasBackstoreDimension({
	        width: width,
	        height: height
	      });

	      this._canvas.centerObject(canvasImage);
	    }
	    /**
	     * Set canvas dimension - css only
	     *  {@link http://fabricjs.com/docs/fabric.Canvas.html#setDimensions}
	     * @param {Object} dimension - Canvas css dimension
	     */

	  }, {
	    key: "setCanvasCssDimension",
	    value: function setCanvasCssDimension(dimension) {
	      this._canvas.setDimensions(dimension, cssOnly);
	    }
	    /**
	     * Set canvas dimension - backstore only
	     *  {@link http://fabricjs.com/docs/fabric.Canvas.html#setDimensions}
	     * @param {Object} dimension - Canvas backstore dimension
	     */

	  }, {
	    key: "setCanvasBackstoreDimension",
	    value: function setCanvasBackstoreDimension(dimension) {
	      this._canvas.setDimensions(dimension, backstoreOnly);
	    }
	    /**
	     * Set image properties
	     * {@link http://fabricjs.com/docs/fabric.Image.html#set}
	     * @param {Object} setting - Image properties
	     * @param {boolean} [withRendering] - If true, The changed image will be reflected in the canvas
	     */

	  }, {
	    key: "setImageProperties",
	    value: function setImageProperties(setting, withRendering) {
	      var canvasImage = this.canvasImage;

	      if (!canvasImage) {
	        return;
	      }

	      canvasImage.set(setting).setCoords();

	      if (withRendering) {
	        this._canvas.renderAll();
	      }
	    }
	    /**
	     * Returns canvas element of fabric.Canvas[[lower-canvas]]
	     * @returns {HTMLCanvasElement}
	     */

	  }, {
	    key: "getCanvasElement",
	    value: function getCanvasElement() {
	      return this._canvas.getElement();
	    }
	    /**
	     * Get fabric.Canvas instance
	     * @returns {fabric.Canvas}
	     * @private
	     */

	  }, {
	    key: "getCanvas",
	    value: function getCanvas() {
	      return this._canvas;
	    }
	    /**
	     * Get canvasImage (fabric.Image instance)
	     * @returns {fabric.Image}
	     */

	  }, {
	    key: "getCanvasImage",
	    value: function getCanvasImage() {
	      return this.canvasImage;
	    }
	    /**
	     * Get image name
	     * @returns {string}
	     */

	  }, {
	    key: "getImageName",
	    value: function getImageName() {
	      return this.imageName;
	    }
	    /**
	     * Add image object on canvas
	     * @param {string} imgUrl - Image url to make object
	     * @returns {Promise}
	     */

	  }, {
	    key: "addImageObject",
	    value: function addImageObject(imgUrl) {
	      var _this = this;

	      var callback = this._callbackAfterLoadingImageObject.bind(this);

	      return new Promise(function (resolve) {
	        fabric_2.Image.fromURL(imgUrl, function (image) {
	          callback(image);
	          resolve(_this.createObjectProperties(image));
	        }, {
	          crossOrigin: 'Anonymous'
	        });
	      });
	    }
	    /**
	     * Get center position of canvas
	     * @returns {Object} {left, top}
	     */

	  }, {
	    key: "getCenter",
	    value: function getCenter() {
	      return this._canvas.getCenter();
	    }
	    /**
	     * Get cropped rect
	     * @returns {Object} rect
	     */

	  }, {
	    key: "getCropzoneRect",
	    value: function getCropzoneRect() {
	      return this.getComponent(componentNames.CROPPER).getCropzoneRect();
	    }
	    /**
	     * Get cropped rect
	     * @param {number} [mode] cropzone rect mode
	     */

	  }, {
	    key: "setCropzoneRect",
	    value: function setCropzoneRect(mode) {
	      this.getComponent(componentNames.CROPPER).setCropzoneRect(mode);
	    }
	    /**
	     * Get cropped image data
	     * @param {Object} cropRect cropzone rect
	     *  @param {Number} cropRect.left left position
	     *  @param {Number} cropRect.top top position
	     *  @param {Number} cropRect.width width
	     *  @param {Number} cropRect.height height
	     * @returns {?{imageName: string, url: string}} cropped Image data
	     */

	  }, {
	    key: "getCroppedImageData",
	    value: function getCroppedImageData(cropRect) {
	      return this.getComponent(componentNames.CROPPER).getCroppedImageData(cropRect);
	    }
	    /**
	     * Set brush option
	     * @param {Object} option brush option
	     *  @param {Number} option.width width
	     *  @param {String} option.color color like 'FFFFFF', 'rgba(0, 0, 0, 0.5)'
	     */

	  }, {
	    key: "setBrush",
	    value: function setBrush(option) {
	      var drawingMode = this._drawingMode;
	      var compName = componentNames.FREE_DRAWING;

	      if (drawingMode === drawingModes.LINE) {
	        compName = drawingModes.LINE;
	      }

	      this.getComponent(compName).setBrush(option);
	    }
	    /**
	     * Set states of current drawing shape
	     * @param {string} type - Shape type (ex: 'rect', 'circle', 'triangle')
	     * @param {Object} [options] - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stoke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {number} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	     */

	  }, {
	    key: "setDrawingShape",
	    value: function setDrawingShape(type, options) {
	      this.getComponent(componentNames.SHAPE).setStates(type, options);
	    }
	    /**
	     * Register icon paths
	     * @param {Object} pathInfos - Path infos
	     *  @param {string} pathInfos.key - key
	     *  @param {string} pathInfos.value - value
	     */

	  }, {
	    key: "registerPaths",
	    value: function registerPaths(pathInfos) {
	      this.getComponent(componentNames.ICON).registerPaths(pathInfos);
	    }
	    /**
	     * Change cursor style
	     * @param {string} cursorType - cursor type
	     */

	  }, {
	    key: "changeCursor",
	    value: function changeCursor(cursorType) {
	      var canvas = this.getCanvas();
	      canvas.defaultCursor = cursorType;
	      canvas.renderAll();
	    }
	    /**
	     * Whether it has the filter or not
	     * @param {string} type - Filter type
	     * @returns {boolean} true if it has the filter
	     */

	  }, {
	    key: "hasFilter",
	    value: function hasFilter(type) {
	      return this.getComponent(componentNames.FILTER).hasFilter(type);
	    }
	    /**
	     * Set selection style of fabric object by init option
	     * @param {Object} styles - Selection styles
	     */

	  }, {
	    key: "setSelectionStyle",
	    value: function setSelectionStyle(styles) {
	      Object.assign(fObjectOptions.SELECTION_STYLE, styles);
	    }
	    /**
	     * Set object properties
	     * @param {number} id - object id
	     * @param {Object} props - props
	     *     @param {string} [props.fill] Color
	     *     @param {string} [props.fontFamily] Font type for text
	     *     @param {number} [props.fontSize] Size
	     *     @param {string} [props.fontStyle] Type of inclination (normal / italic)
	     *     @param {string} [props.fontWeight] Type of thicker or thinner looking (normal / bold)
	     *     @param {string} [props.textAlign] Type of text align (left / center / right)
	     *     @param {string} [props.textDecoraiton] Type of line (underline / line-throgh / overline)
	     * @returns {Object} applied properties
	     */

	  }, {
	    key: "setObjectProperties",
	    value: function setObjectProperties(id, props) {
	      var object = this.getObject(id);
	      var clone = Object.assign({}, props);
	      object.set(clone);
	      object.setCoords();
	      this.getCanvas().renderAll();
	      return clone;
	    }
	    /**
	     * Get object properties corresponding key
	     * @param {number} id - object id
	     * @param {Array<string>|ObjectProps|string} keys - property's key
	     * @returns {Object} properties
	     */

	  }, {
	    key: "getObjectProperties",
	    value: function getObjectProperties(id, keys) {
	      var object = this.getObject(id);
	      var props = {};

	      if (isString_1(keys)) {
	        props[keys] = object[keys];
	      } else if (Array.isArray(keys)) {
	        keys.map(function (value) {
	          props[value] = object[value];
	        });
	      } else {
	        forOwn_1(keys, function (_value, key) {
	          props[key] = object[key];
	        });
	      }

	      return props;
	    }
	    /**
	     * Get object position by originX, originY
	     * @param {number} id - object id
	     * @param {string} originX - can be 'left', 'center', 'right'
	     * @param {string} originY - can be 'top', 'center', 'bottom'
	     * @returns {Object} {{x:number, y: number}} position by origin if id is valid, or null
	     */

	  }, {
	    key: "getObjectPosition",
	    value: function getObjectPosition(id, originX, originY) {
	      var targetObj = this.getObject(id);

	      if (!targetObj) {
	        return null;
	      }

	      return targetObj.getPointByOrigin(originX, originY);
	    }
	    /**
	     * Set object position  by originX, originY
	     * @param {number} id - object id
	     * @param {Object} posInfo - position object
	     *  @param {number} posInfo.x - x position
	     *  @param {number} posInfo.y - y position
	     *  @param {string} posInfo.originX - can be 'left', 'center', 'right'
	     *  @param {string} posInfo.originY - can be 'top', 'center', 'bottom'
	     * @returns {boolean} true if target id is valid or false
	     */

	  }, {
	    key: "setObjectPosition",
	    value: function setObjectPosition(id, posInfo) {
	      var targetObj = this.getObject(id);
	      var x = posInfo.x,
	          y = posInfo.y,
	          originX = posInfo.originX,
	          originY = posInfo.originY;

	      if (!targetObj) {
	        return false;
	      }

	      var targetOrigin = targetObj.getPointByOrigin(originX, originY);
	      var centerOrigin = targetObj.getPointByOrigin('center', 'center');
	      var diffX = centerOrigin.x - targetOrigin.x;
	      var diffY = centerOrigin.y - targetOrigin.y;
	      targetObj.set({
	        left: x + diffX,
	        top: y + diffY
	      });
	      targetObj.setCoords();
	      return true;
	    }
	    /**
	     * Get the canvas size
	     * @returns {Object} {{width: number, height: number}} image size
	     */

	  }, {
	    key: "getCanvasSize",
	    value: function getCanvasSize() {
	      var image = this.getCanvasImage();
	      return {
	        width: image ? image.width : 0,
	        height: image ? image.height : 0
	      };
	    }
	    /**
	     * Get a DrawingMode instance
	     * @param {string} modeName - DrawingMode Class Name
	     * @returns {DrawingMode} DrawingMode instance
	     * @private
	     */

	  }, {
	    key: "_getDrawingModeInstance",
	    value: function _getDrawingModeInstance(modeName) {
	      return this._drawingModeMap[modeName];
	    }
	    /**
	     * Set object caching to false. This brought many bugs when draw Shape & cropzone
	     * @see http://fabricjs.com/fabric-object-caching
	     * @private
	     */

	  }, {
	    key: "_setObjectCachingToFalse",
	    value: function _setObjectCachingToFalse() {
	      fabric_2.Object.prototype.objectCaching = false;
	    }
	    /**
	     * Set canvas element to fabric.Canvas
	     * @param {jQuery|Element|string} element - Wrapper or canvas element or selector
	     * @private
	     */

	  }, {
	    key: "_setCanvasElement",
	    value: function _setCanvasElement(element) {
	      var selectedElement;
	      var canvasElement;

	      if (element.jquery) {
	        var _element = _slicedToArray(element, 1);

	        selectedElement = _element[0];
	      } else if (element.nodeType) {
	        selectedElement = element;
	      } else {
	        selectedElement = document.querySelector(element);
	      }

	      if (selectedElement.nodeName.toUpperCase() !== 'CANVAS') {
	        canvasElement = document.createElement('canvas');
	        selectedElement.appendChild(canvasElement);
	      }

	      this._canvas = new fabric_2.Canvas(canvasElement, {
	        containerClass: 'tui-image-editor-canvas-container',
	        enableRetinaScaling: false
	      });
	    }
	    /**
	     * Creates DrawingMode instances
	     * @private
	     */

	  }, {
	    key: "_createDrawingModeInstances",
	    value: function _createDrawingModeInstances() {
	      this._register(this._drawingModeMap, new CropperDrawingMode());

	      this._register(this._drawingModeMap, new FreeDrawingMode());

	      this._register(this._drawingModeMap, new LineDrawingMode());

	      this._register(this._drawingModeMap, new ShapeDrawingMode());

	      this._register(this._drawingModeMap, new TextDrawingMode());
	    }
	    /**
	     * Create components
	     * @private
	     */

	  }, {
	    key: "_createComponents",
	    value: function _createComponents() {
	      this._register(this._componentMap, new ImageLoader(this));

	      this._register(this._componentMap, new Cropper(this));

	      this._register(this._componentMap, new Flip$1(this));

	      this._register(this._componentMap, new Rotation(this));

	      this._register(this._componentMap, new FreeDrawing(this));

	      this._register(this._componentMap, new Line(this));

	      this._register(this._componentMap, new Text$1(this));

	      this._register(this._componentMap, new Icon$1(this));

	      this._register(this._componentMap, new Filter$1(this));

	      this._register(this._componentMap, new Shape$1(this));
	    }
	    /**
	     * Register component
	     * @param {Object} map - map object
	     * @param {Object} module - module which has getName method
	     * @private
	     */

	  }, {
	    key: "_register",
	    value: function _register(map, module) {
	      map[module.getName()] = module;
	    }
	    /**
	     * Get the current drawing mode is same with given mode
	     * @param {string} mode drawing mode
	     * @returns {boolean} true if same or false
	     */

	  }, {
	    key: "_isSameDrawingMode",
	    value: function _isSameDrawingMode(mode) {
	      return this.getDrawingMode() === mode;
	    }
	    /**
	     * Calculate max dimension of canvas
	     * The css-max dimension is dynamically decided with maintaining image ratio
	     * The css-max dimension is lower than canvas dimension (attribute of canvas, not css)
	     * @param {number} width - Canvas width
	     * @param {number} height - Canvas height
	     * @returns {{width: number, height: number}} - Max width & Max height
	     * @private
	     */

	  }, {
	    key: "_calcMaxDimension",
	    value: function _calcMaxDimension(width, height) {
	      var wScaleFactor = this.cssMaxWidth / width;
	      var hScaleFactor = this.cssMaxHeight / height;
	      var cssMaxWidth = Math.min(width, this.cssMaxWidth);
	      var cssMaxHeight = Math.min(height, this.cssMaxHeight);

	      if (wScaleFactor < 1 && wScaleFactor < hScaleFactor) {
	        cssMaxWidth = width * wScaleFactor;
	        cssMaxHeight = height * wScaleFactor;
	      } else if (hScaleFactor < 1 && hScaleFactor < wScaleFactor) {
	        cssMaxWidth = width * hScaleFactor;
	        cssMaxHeight = height * hScaleFactor;
	      }

	      return {
	        width: Math.floor(cssMaxWidth),
	        height: Math.floor(cssMaxHeight)
	      };
	    }
	    /**
	     * Callback function after loading image
	     * @param {fabric.Image} obj - Fabric image object
	     * @private
	     */

	  }, {
	    key: "_callbackAfterLoadingImageObject",
	    value: function _callbackAfterLoadingImageObject(obj) {
	      var centerPos = this.getCanvasImage().getCenterPoint();
	      obj.set(fObjectOptions.SELECTION_STYLE);
	      obj.set({
	        left: centerPos.x,
	        top: centerPos.y,
	        crossOrigin: 'Anonymous'
	      });
	      this.getCanvas().add(obj).setActiveObject(obj);
	    }
	    /**
	     * Attach canvas's events
	     */

	  }, {
	    key: "_attachCanvasEvents",
	    value: function _attachCanvasEvents() {
	      var canvas = this._canvas;
	      var handler = this._handler;
	      canvas.on({
	        'mouse:down': handler.onMouseDown,
	        'object:added': handler.onObjectAdded,
	        'object:removed': handler.onObjectRemoved,
	        'object:moving': handler.onObjectMoved,
	        'object:scaling': handler.onObjectScaled,
	        'object:selected': handler.onObjectSelected,
	        'path:created': handler.onPathCreated,
	        'selection:cleared': handler.onSelectionCleared,
	        'selection:created': handler.onSelectionCreated,
	        'selection:updated': handler.onObjectSelected
	      });
	    }
	    /**
	     * "mouse:down" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onMouseDown",
	    value: function _onMouseDown(fEvent) {
	      var originPointer = this._canvas.getPointer(fEvent.e);

	      this.fire(eventNames.MOUSE_DOWN, fEvent.e, originPointer);
	    }
	    /**
	     * "object:added" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onObjectAdded",
	    value: function _onObjectAdded(fEvent) {
	      var obj = fEvent.target;

	      if (obj.isType('cropzone')) {
	        return;
	      }

	      this._addFabricObject(obj);
	    }
	    /**
	     * "object:removed" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onObjectRemoved",
	    value: function _onObjectRemoved(fEvent) {
	      var obj = fEvent.target;

	      this._removeFabricObject(stamp(obj));
	    }
	    /**
	     * "object:moving" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onObjectMoved",
	    value: function _onObjectMoved(fEvent) {
	      var target = fEvent.target;
	      var params = this.createObjectProperties(target);
	      this.fire(eventNames.OBJECT_MOVED, params);
	    }
	    /**
	     * "object:scaling" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onObjectScaled",
	    value: function _onObjectScaled(fEvent) {
	      var target = fEvent.target;
	      var params = this.createObjectProperties(target);
	      this.fire(eventNames.OBJECT_SCALED, params);
	    }
	    /**
	     * "object:selected" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onObjectSelected",
	    value: function _onObjectSelected(fEvent) {
	      var target = fEvent.target;
	      var params = this.createObjectProperties(target);
	      this.fire(eventNames.OBJECT_ACTIVATED, params);
	    }
	    /**
	     * "path:created" canvas event handler
	     * @param {{path: fabric.Path}} obj - Path object
	     * @private
	     */

	  }, {
	    key: "_onPathCreated",
	    value: function _onPathCreated(obj) {
	      obj.path.set(fObjectOptions.SELECTION_STYLE);
	      var params = this.createObjectProperties(obj.path);
	      this.fire(eventNames.ADD_OBJECT, params);
	    }
	    /**
	     * "selction:cleared" canvas event handler
	     * @private
	     */

	  }, {
	    key: "_onSelectionCleared",
	    value: function _onSelectionCleared() {
	      this.fire(eventNames.SELECTION_CLEARED);
	    }
	    /**
	     * "selction:created" canvas event handler
	     * @param {{target: fabric.Object, e: MouseEvent}} fEvent - Fabric event
	     * @private
	     */

	  }, {
	    key: "_onSelectionCreated",
	    value: function _onSelectionCreated(fEvent) {
	      this.fire(eventNames.SELECTION_CREATED, fEvent.target);
	    }
	    /**
	     * Canvas discard selection all
	     */

	  }, {
	    key: "discardSelection",
	    value: function discardSelection() {
	      this._canvas.discardActiveObject();

	      this._canvas.renderAll();
	    }
	    /**
	     * Canvas Selectable status change
	     * @param {boolean} selectable - expect status
	     */

	  }, {
	    key: "changeSelectableAll",
	    value: function changeSelectableAll(selectable) {
	      this._canvas.forEachObject(function (obj) {
	        obj.selectable = selectable;
	        obj.hoverCursor = selectable ? 'move' : 'crosshair';
	      });
	    }
	    /**
	     * Return object's properties
	     * @param {fabric.Object} obj - fabric object
	     * @returns {Object} properties object
	     */

	  }, {
	    key: "createObjectProperties",
	    value: function createObjectProperties(obj) {
	      var predefinedKeys = ['left', 'top', 'width', 'height', 'fill', 'stroke', 'strokeWidth', 'opacity'];
	      var props = {
	        id: stamp(obj),
	        type: obj.type
	      };
	      Object.assign(props, getProperties(obj, predefinedKeys));

	      if (['i-text', 'text'].indexOf(obj.type) > -1) {
	        Object.assign(props, this._createTextProperties(obj, props));
	      }

	      return props;
	    }
	    /**
	     * Get text object's properties
	     * @param {fabric.Object} obj - fabric text object
	     * @param {Object} props - properties
	     * @returns {Object} properties object
	     */

	  }, {
	    key: "_createTextProperties",
	    value: function _createTextProperties(obj) {
	      var predefinedKeys = ['text', 'fontFamily', 'fontSize', 'fontStyle', 'textAlign', 'textDecoration'];
	      var props = {};
	      Object.assign(props, getProperties(obj, predefinedKeys));
	      return props;
	    }
	    /**
	     * Add object array by id
	     * @param {fabric.Object} obj - fabric object
	     * @returns {number} object id
	     */

	  }, {
	    key: "_addFabricObject",
	    value: function _addFabricObject(obj) {
	      var id = stamp(obj);
	      this._objects[id] = obj;
	      return id;
	    }
	    /**
	     * Remove an object in array yb id
	     * @param {number} id - object id
	     */

	  }, {
	    key: "_removeFabricObject",
	    value: function _removeFabricObject(id) {
	      delete this._objects[id];
	    }
	  }]);

	  return Graphics;
	}();
	CustomEvents.mixin(Graphics);

	/**
	 * Image editor
	 * @class
	 * @param {string|jQuery|HTMLElement} wrapper - Wrapper's element or selector
	 * @param {Object} [options] - Canvas max width & height of css
	 *  @param {number} [options.includeUI] - Use the provided UI
	 *    @param {Object} [options.includeUI.loadImage] - Basic editing image
	 *      @param {string} options.includeUI.loadImage.path - image path
	 *      @param {string} options.includeUI.loadImage.name - image name
	 *    @param {Object} [options.includeUI.theme] - Theme object
	 *    @param {Array} [options.includeUI.menu] - It can be selected when only specific menu is used. [default all]
	 *    @param {string} [options.includeUI.initMenu] - The first menu to be selected and started.
	 *    @param {Object} [options.includeUI.uiSize] - ui size of editor
	 *      @param {string} options.includeUI.uiSize.width - width of ui
	 *      @param {string} options.includeUI.uiSize.height - height of ui
	 *    @param {string} [options.includeUI.menuBarPosition=bottom] - Menu bar position [top | bottom | left | right]
	 *  @param {number} options.cssMaxWidth - Canvas css-max-width
	 *  @param {number} options.cssMaxHeight - Canvas css-max-height
	 *  @param {Object} [options.selectionStyle] - selection style
	 *  @param {string} [options.selectionStyle.cornerStyle] - selection corner style
	 *  @param {number} [options.selectionStyle.cornerSize] - selection corner size
	 *  @param {string} [options.selectionStyle.cornerColor] - selection corner color
	 *  @param {string} [options.selectionStyle.cornerStrokeColor] = selection corner stroke color
	 *  @param {boolean} [options.selectionStyle.transparentCorners] - selection corner transparent
	 *  @param {number} [options.selectionStyle.lineWidth] - selection line width
	 *  @param {string} [options.selectionStyle.borderColor] - selection border color
	 *  @param {number} [options.selectionStyle.rotatingPointOffset] - selection rotating point length
	 *  @param {Boolean} [options.usageStatistics=true] - Let us know the hostname. If you don't want to send the hostname, please set to false.
	 * @example
	 * var ImageEditor = require('tui-image-editor');
	 * var blackTheme = require('./js/theme/black-theme.js');
	 * var instance = new ImageEditor(document.querySelector('#tui-image-editor'), {
	 *   includeUI: {
	 *     loadImage: {
	 *       path: 'img/sampleImage.jpg',
	 *       name: 'SampleImage'
	 *     },
	 *     theme: blackTheme, // or whiteTheme
	 *     menu: ['shape', 'filter'],
	 *     initMenu: 'filter',
	 *     uiSize: {
	 *         width: '1000px',
	 *         height: '700px'
	 *     },
	 *     menuBarPosition: 'bottom'
	 *   },
	 *   cssMaxWidth: 700,
	 *   cssMaxHeight: 500,
	 *   selectionStyle: {
	 *     cornerSize: 20,
	 *     rotatingPointOffset: 70
	 *   }
	 * });
	 */

	var ImageEditor =
	/*#__PURE__*/
	function () {
	  function ImageEditor(wrapper, options) {
	    _classCallCheck(this, ImageEditor);

	    options = Object.assign({
	      includeUI: false,
	      usageStatistics: true
	    }, options);
	    this.mode = null;
	    this.activeObjectId = null;
	    /**
	     * UI instance
	     * @type {Ui}
	     */

	    if (options.includeUI) {
	      this.ui = new UI(wrapper, options.includeUI, this.getActions());
	      options = this.ui.setUiDefaultSelectionStyle(options);
	    }
	    /**
	     * Invoker
	     * @type {Invoker}
	     * @private
	     */


	    this._invoker = new Invoker();
	    /**
	     * Graphics instance
	     * @type {Graphics}
	     * @private
	     */

	    this._graphics = new Graphics(this.ui ? this.ui.getEditorArea() : wrapper, {
	      cssMaxWidth: options.cssMaxWidth,
	      cssMaxHeight: options.cssMaxHeight,
	      useItext: !!this.ui,
	      useDragAddIcon: !!this.ui
	    });
	    /**
	     * Event handler list
	     * @type {Object}
	     * @private
	     */

	    this._handlers = {
	      keydown: this._onKeyDown.bind(this),
	      mousedown: this._onMouseDown.bind(this),
	      objectActivated: this._onObjectActivated.bind(this),
	      objectMoved: this._onObjectMoved.bind(this),
	      objectScaled: this._onObjectScaled.bind(this),
	      createdPath: this._onCreatedPath,
	      addText: this._onAddText.bind(this),
	      addObject: this._onAddObject.bind(this),
	      addObjectAfter: this._onAddObjectAfter.bind(this),
	      textEditing: this._onTextEditing.bind(this),
	      textChanged: this._onTextChanged.bind(this),
	      iconCreateResize: this._onIconCreateResize.bind(this),
	      iconCreateEnd: this._onIconCreateEnd.bind(this),
	      selectionCleared: this._selectionCleared.bind(this),
	      selectionCreated: this._selectionCreated.bind(this)
	    };

	    this._attachInvokerEvents();

	    this._attachGraphicsEvents();

	    this._attachDomEvents();

	    this._setSelectionStyle(options.selectionStyle, {
	      applyCropSelectionStyle: options.applyCropSelectionStyle,
	      applyGroupSelectionStyle: options.applyGroupSelectionStyle
	    });

	    if (this.ui) {
	      this.ui.initCanvas();
	      this.setReAction();
	    }

	    fabric.enableGLFiltering = false;
	  }
	  /**
	   * Image filter result
	   * @typedef {Object} FilterResult
	   * @property {string} type - filter type like 'mask', 'Grayscale' and so on
	   * @property {string} action - action type like 'add', 'remove'
	   */

	  /**
	   * Flip status
	   * @typedef {Object} FlipStatus
	   * @property {boolean} flipX - x axis
	   * @property {boolean} flipY - y axis
	   * @property {Number} angle - angle
	   */

	  /**
	   * Rotation status
	   * @typedef {Number} RotateStatus
	   * @property {Number} angle - angle
	   */

	  /**
	   * Old and new Size
	   * @typedef {Object} SizeChange
	   * @property {Number} oldWidth - old width
	   * @property {Number} oldHeight - old height
	   * @property {Number} newWidth - new width
	   * @property {Number} newHeight - new height
	   */

	  /**
	   * @typedef {string} ErrorMsg - {string} error message
	   */

	  /**
	   * @typedef {Object} ObjectProps - graphics object properties
	   * @property {number} id - object id
	   * @property {string} type - object type
	   * @property {string} text - text content
	   * @property {(string | number)} left - Left
	   * @property {(string | number)} top - Top
	   * @property {(string | number)} width - Width
	   * @property {(string | number)} height - Height
	   * @property {string} fill - Color
	   * @property {string} stroke - Stroke
	   * @property {(string | number)} strokeWidth - StrokeWidth
	   * @property {string} fontFamily - Font type for text
	   * @property {number} fontSize - Font Size
	   * @property {string} fontStyle - Type of inclination (normal / italic)
	   * @property {string} fontWeight - Type of thicker or thinner looking (normal / bold)
	   * @property {string} textAlign - Type of text align (left / center / right)
	   * @property {string} textDecoraiton - Type of line (underline / line-throgh / overline)
	   */

	  /**
	   * Set selection style by init option
	   * @param {Object} selectionStyle - Selection styles
	   * @param {Object} applyTargets - Selection apply targets
	   *   @param {boolean} applyCropSelectionStyle - whether apply with crop selection style or not
	   *   @param {boolean} applyGroupSelectionStyle - whether apply with group selection style or not
	   * @private
	   */


	  _createClass(ImageEditor, [{
	    key: "_setSelectionStyle",
	    value: function _setSelectionStyle(selectionStyle, _ref) {
	      var applyCropSelectionStyle = _ref.applyCropSelectionStyle,
	          applyGroupSelectionStyle = _ref.applyGroupSelectionStyle;

	      if (selectionStyle) {
	        this._graphics.setSelectionStyle(selectionStyle);
	      }

	      if (applyCropSelectionStyle) {
	        this._graphics.setCropSelectionStyle(selectionStyle);
	      }

	      if (applyGroupSelectionStyle) {
	        this.on('selectionCreated', function (eventTarget) {
	          if (eventTarget.type === 'activeSelection') {
	            eventTarget.set(selectionStyle);
	          }
	        });
	      }
	    }
	    /**
	     * Attach invoker events
	     * @private
	     */

	  }, {
	    key: "_attachInvokerEvents",
	    value: function _attachInvokerEvents() {
	      var UNDO_STACK_CHANGED = eventNames.UNDO_STACK_CHANGED,
	          REDO_STACK_CHANGED = eventNames.REDO_STACK_CHANGED;
	      /**
	       * Undo stack changed event
	       * @event ImageEditor#undoStackChanged
	       * @param {Number} length - undo stack length
	       * @example
	       * imageEditor.on('undoStackChanged', function(length) {
	       *     console.log(length);
	       * });
	       */

	      this._invoker.on(UNDO_STACK_CHANGED, this.fire.bind(this, UNDO_STACK_CHANGED));
	      /**
	       * Redo stack changed event
	       * @event ImageEditor#redoStackChanged
	       * @param {Number} length - redo stack length
	       * @example
	       * imageEditor.on('redoStackChanged', function(length) {
	       *     console.log(length);
	       * });
	       */


	      this._invoker.on(REDO_STACK_CHANGED, this.fire.bind(this, REDO_STACK_CHANGED));
	    }
	    /**
	     * Attach canvas events
	     * @private
	     */

	  }, {
	    key: "_attachGraphicsEvents",
	    value: function _attachGraphicsEvents() {
	      this._graphics.on({
	        'mousedown': this._handlers.mousedown,
	        'objectMoved': this._handlers.objectMoved,
	        'objectScaled': this._handlers.objectScaled,
	        'objectActivated': this._handlers.objectActivated,
	        'addText': this._handlers.addText,
	        'addObject': this._handlers.addObject,
	        'textEditing': this._handlers.textEditing,
	        'textChanged': this._handlers.textChanged,
	        'iconCreateResize': this._handlers.iconCreateResize,
	        'iconCreateEnd': this._handlers.iconCreateEnd,
	        'selectionCleared': this._handlers.selectionCleared,
	        'selectionCreated': this._handlers.selectionCreated,
	        'addObjectAfter': this._handlers.addObjectAfter
	      });
	    }
	    /**
	     * Attach dom events
	     * @private
	     */

	  }, {
	    key: "_attachDomEvents",
	    value: function _attachDomEvents() {
	      // ImageEditor supports IE 9 higher
	      document.addEventListener('keydown', this._handlers.keydown);
	    }
	    /**
	     * Detach dom events
	     * @private
	     */

	  }, {
	    key: "_detachDomEvents",
	    value: function _detachDomEvents() {
	      // ImageEditor supports IE 9 higher
	      document.removeEventListener('keydown', this._handlers.keydown);
	    }
	    /**
	     * Keydown event handler
	     * @param {KeyboardEvent} e - Event object
	     * @private
	     */

	    /* eslint-disable complexity */

	  }, {
	    key: "_onKeyDown",
	    value: function _onKeyDown(e) {
	      var ctrlKey = e.ctrlKey,
	          keyCode = e.keyCode,
	          metaKey = e.metaKey;

	      var activeObject = this._graphics.getActiveObject();

	      var activeObjectGroup = this._graphics.getActiveObjects();

	      var existRemoveObject = activeObject || activeObjectGroup && activeObjectGroup.size();
	      var isModifierKey = ctrlKey || metaKey;

	      if (isModifierKey) {
	        if (keyCode === keyCodes.Z) {
	          // There is no error message on shortcut when it's empty
	          this.undo()['catch'](function () {});
	        } else if (keyCode === keyCodes.Y) {
	          // There is no error message on shortcut when it's empty
	          this.redo()['catch'](function () {});
	        }
	      }

	      var isDeleteKey = keyCode === keyCodes.BACKSPACE || keyCode === keyCodes.DEL;
	      var isEditing = activeObject && activeObject.isEditing;

	      if (!isEditing && isDeleteKey && existRemoveObject) {
	        e.preventDefault();
	        this.removeActiveObject();
	      }
	    }
	    /* eslint-enable complexity */

	    /**
	     * Remove Active Object
	     */

	  }, {
	    key: "removeActiveObject",
	    value: function removeActiveObject() {
	      var activeObject = this._graphics.getActiveObject();

	      var activeObjectGroup = this._graphics.getActiveObjects();

	      if (activeObjectGroup && activeObjectGroup.size()) {
	        this.discardSelection();

	        this._removeObjectStream(activeObjectGroup.getObjects());
	      } else if (activeObject) {
	        var activeObjectId = this._graphics.getObjectId(activeObject);

	        this.removeObject(activeObjectId);
	      }
	    }
	    /**
	     * RemoveObject Sequential processing for prevent invoke lock
	     * @param {Array.<Object>} targetObjects - target Objects for remove
	     * @returns {object} targetObjects
	     * @private
	     */

	  }, {
	    key: "_removeObjectStream",
	    value: function _removeObjectStream(targetObjects) {
	      var _this = this;

	      if (!targetObjects.length) {
	        return true;
	      }

	      var targetObject = targetObjects.pop();
	      return this.removeObject(this._graphics.getObjectId(targetObject)).then(function () {
	        return _this._removeObjectStream(targetObjects);
	      });
	    }
	    /**
	     * mouse down event handler
	     * @param {Event} event mouse down event
	     * @param {Object} originPointer origin pointer
	     *  @param {Number} originPointer.x x position
	     *  @param {Number} originPointer.y y position
	     * @private
	     */

	  }, {
	    key: "_onMouseDown",
	    value: function _onMouseDown(event, originPointer) {
	      /**
	       * The mouse down event with position x, y on canvas
	       * @event ImageEditor#mousedown
	       * @param {Object} event - browser mouse event object
	       * @param {Object} originPointer origin pointer
	       *  @param {Number} originPointer.x x position
	       *  @param {Number} originPointer.y y position
	       * @example
	       * imageEditor.on('mousedown', function(event, originPointer) {
	       *     console.log(event);
	       *     console.log(originPointer);
	       *     if (imageEditor.hasFilter('colorFilter')) {
	       *         imageEditor.applyFilter('colorFilter', {
	       *             x: parseInt(originPointer.x, 10),
	       *             y: parseInt(originPointer.y, 10)
	       *         });
	       *     }
	       * });
	       */
	      this.fire(eventNames.MOUSE_DOWN, event, originPointer);
	    }
	    /**
	     * Add a 'addObject' command
	     * @param {Object} obj - Fabric object
	     * @private
	     */

	  }, {
	    key: "_pushAddObjectCommand",
	    value: function _pushAddObjectCommand(obj) {
	      var command = create(commandNames.ADD_OBJECT, this._graphics, obj);

	      this._invoker.pushUndoStack(command);
	    }
	    /**
	     * 'objectActivated' event handler
	     * @param {ObjectProps} props - object properties
	     * @private
	     */

	  }, {
	    key: "_onObjectActivated",
	    value: function _onObjectActivated(props) {
	      /**
	       * The event when object is selected(aka activated).
	       * @event ImageEditor#objectActivated
	       * @param {ObjectProps} objectProps - object properties
	       * @example
	       * imageEditor.on('objectActivated', function(props) {
	       *     console.log(props);
	       *     console.log(props.type);
	       *     console.log(props.id);
	       * });
	       */
	      this.fire(eventNames.OBJECT_ACTIVATED, props);
	    }
	    /**
	     * 'objectMoved' event handler
	     * @param {ObjectProps} props - object properties
	     * @private
	     */

	  }, {
	    key: "_onObjectMoved",
	    value: function _onObjectMoved(props) {
	      /**
	       * The event when object is moved
	       * @event ImageEditor#objectMoved
	       * @param {ObjectProps} props - object properties
	       * @example
	       * imageEditor.on('objectMoved', function(props) {
	       *     console.log(props);
	       *     console.log(props.type);
	       * });
	       */
	      this.fire(eventNames.OBJECT_MOVED, props);
	    }
	    /**
	     * 'objectScaled' event handler
	     * @param {ObjectProps} props - object properties
	     * @private
	     */

	  }, {
	    key: "_onObjectScaled",
	    value: function _onObjectScaled(props) {
	      /**
	       * The event when scale factor is changed
	       * @event ImageEditor#objectScaled
	       * @param {ObjectProps} props - object properties
	       * @example
	       * imageEditor.on('objectScaled', function(props) {
	       *     console.log(props);
	       *     console.log(props.type);
	       * });
	       */
	      this.fire(eventNames.OBJECT_SCALED, props);
	    }
	    /**
	     * Get current drawing mode
	     * @returns {string}
	     * @example
	     * // Image editor drawing mode
	     * //
	     * //    NORMAL: 'NORMAL'
	     * //    CROPPER: 'CROPPER'
	     * //    FREE_DRAWING: 'FREE_DRAWING'
	     * //    LINE_DRAWING: 'LINE_DRAWING'
	     * //    TEXT: 'TEXT'
	     * //
	     * if (imageEditor.getDrawingMode() === 'FREE_DRAWING') {
	     *     imageEditor.stopDrawingMode();
	     * }
	     */

	  }, {
	    key: "getDrawingMode",
	    value: function getDrawingMode() {
	      return this._graphics.getDrawingMode();
	    }
	    /**
	     * Clear all objects
	     * @returns {Promise}
	     * @example
	     * imageEditor.clearObjects();
	     */

	  }, {
	    key: "clearObjects",
	    value: function clearObjects() {
	      return this.execute(commandNames.CLEAR_OBJECTS);
	    }
	    /**
	     * Deactivate all objects
	     * @example
	     * imageEditor.deactivateAll();
	     */

	  }, {
	    key: "deactivateAll",
	    value: function deactivateAll() {
	      this._graphics.deactivateAll();

	      this._graphics.renderAll();
	    }
	    /**
	     * discard selction
	     * @example
	     * imageEditor.discardSelection();
	     */

	  }, {
	    key: "discardSelection",
	    value: function discardSelection() {
	      this._graphics.discardSelection();
	    }
	    /**
	     * selectable status change
	     * @param {boolean} selectable - selctable status
	     * @example
	     * imageEditor.changeSelectableAll(false); // or true
	     */

	  }, {
	    key: "changeSelectableAll",
	    value: function changeSelectableAll(selectable) {
	      this._graphics.changeSelectableAll(selectable);
	    }
	    /**
	     * Invoke command
	     * @param {String} commandName - Command name
	     * @param {...*} args - Arguments for creating command
	     * @returns {Promise}
	     * @private
	     */

	  }, {
	    key: "execute",
	    value: function execute(commandName) {
	      var _this$_invoker;

	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // Inject an Graphics instance as first parameter
	      var theArgs = [this._graphics].concat(args);
	      return (_this$_invoker = this._invoker).execute.apply(_this$_invoker, [commandName].concat(_toConsumableArray(theArgs)));
	    }
	    /**
	     * Invoke command
	     * @param {String} commandName - Command name
	     * @param {...*} args - Arguments for creating command
	     * @returns {Promise}
	     * @private
	     */

	  }, {
	    key: "executeSilent",
	    value: function executeSilent(commandName) {
	      var _this$_invoker2;

	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      // Inject an Graphics instance as first parameter
	      var theArgs = [this._graphics].concat(args);
	      return (_this$_invoker2 = this._invoker).executeSilent.apply(_this$_invoker2, [commandName].concat(_toConsumableArray(theArgs)));
	    }
	    /**
	     * Undo
	     * @returns {Promise}
	     * @example
	     * imageEditor.undo();
	     */

	  }, {
	    key: "undo",
	    value: function undo() {
	      return this._invoker.undo();
	    }
	    /**
	     * Redo
	     * @returns {Promise}
	     * @example
	     * imageEditor.redo();
	     */

	  }, {
	    key: "redo",
	    value: function redo() {
	      return this._invoker.redo();
	    }
	    /**
	     * Load image from file
	     * @param {File} imgFile - Image file
	     * @param {string} [imageName] - imageName
	     * @returns {Promise<SizeChange, ErrorMsg>}
	     * @example
	     * imageEditor.loadImageFromFile(file).then(result => {
	     *      console.log('old : ' + result.oldWidth + ', ' + result.oldHeight);
	     *      console.log('new : ' + result.newWidth + ', ' + result.newHeight);
	     * });
	     */

	  }, {
	    key: "loadImageFromFile",
	    value: function loadImageFromFile(imgFile, imageName) {
	      if (!imgFile) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      var imgUrl = URL.createObjectURL(imgFile);
	      imageName = imageName || imgFile.name;
	      return this.loadImageFromURL(imgUrl, imageName).then(function (value) {
	        URL.revokeObjectURL(imgFile);
	        return value;
	      });
	    }
	    /**
	     * Load image from url
	     * @param {string} url - File url
	     * @param {string} imageName - imageName
	     * @returns {Promise<SizeChange, ErrorMsg>}
	     * @example
	     * imageEditor.loadImageFromURL('http://url/testImage.png', 'lena').then(result => {
	     *      console.log('old : ' + result.oldWidth + ', ' + result.oldHeight);
	     *      console.log('new : ' + result.newWidth + ', ' + result.newHeight);
	     * });
	     */

	  }, {
	    key: "loadImageFromURL",
	    value: function loadImageFromURL(url, imageName) {
	      if (!imageName || !url) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      return this.execute(commandNames.LOAD_IMAGE, imageName, url);
	    }
	    /**
	     * Add image object on canvas
	     * @param {string} imgUrl - Image url to make object
	     * @returns {Promise<ObjectProps, ErrorMsg>}
	     * @example
	     * imageEditor.addImageObject('path/fileName.jpg').then(objectProps => {
	     *     console.log(ojectProps.id);
	     * });
	     */

	  }, {
	    key: "addImageObject",
	    value: function addImageObject(imgUrl) {
	      if (!imgUrl) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      return this.execute(commandNames.ADD_IMAGE_OBJECT, imgUrl);
	    }
	    /**
	     * Start a drawing mode. If the current mode is not 'NORMAL', 'stopDrawingMode()' will be called first.
	     * @param {String} mode Can be one of <I>'CROPPER', 'FREE_DRAWING', 'LINE_DRAWING', 'TEXT', 'SHAPE'</I>
	     * @param {Object} [option] parameters of drawing mode, it's available with 'FREE_DRAWING', 'LINE_DRAWING'
	     *  @param {Number} [option.width] brush width
	     *  @param {String} [option.color] brush color
	     * @returns {boolean} true if success or false
	     * @example
	     * imageEditor.startDrawingMode('FREE_DRAWING', {
	     *      width: 10,
	     *      color: 'rgba(255,0,0,0.5)'
	     * });
	     */

	  }, {
	    key: "startDrawingMode",
	    value: function startDrawingMode(mode, option) {
	      return this._graphics.startDrawingMode(mode, option);
	    }
	    /**
	     * Stop the current drawing mode and back to the 'NORMAL' mode
	     * @example
	     * imageEditor.stopDrawingMode();
	     */

	  }, {
	    key: "stopDrawingMode",
	    value: function stopDrawingMode() {
	      this._graphics.stopDrawingMode();
	    }
	    /**
	     * Crop this image with rect
	     * @param {Object} rect crop rect
	     *  @param {Number} rect.left left position
	     *  @param {Number} rect.top top position
	     *  @param {Number} rect.width width
	     *  @param {Number} rect.height height
	     * @returns {Promise}
	     * @example
	     * imageEditor.crop(imageEditor.getCropzoneRect());
	     */

	  }, {
	    key: "crop",
	    value: function crop(rect) {
	      var data = this._graphics.getCroppedImageData(rect);

	      if (!data) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      return this.loadImageFromURL(data.url, data.imageName);
	    }
	    /**
	     * Get the cropping rect
	     * @returns {Object}  {{left: number, top: number, width: number, height: number}} rect
	     */

	  }, {
	    key: "getCropzoneRect",
	    value: function getCropzoneRect() {
	      return this._graphics.getCropzoneRect();
	    }
	    /**
	     * Set the cropping rect
	     * @param {number} [mode] crop rect mode [1, 1.5, 1.3333333333333333, 1.25, 1.7777777777777777]
	     */

	  }, {
	    key: "setCropzoneRect",
	    value: function setCropzoneRect(mode) {
	      this._graphics.setCropzoneRect(mode);
	    }
	    /**
	     * Flip
	     * @returns {Promise}
	     * @param {string} type - 'flipX' or 'flipY' or 'reset'
	     * @returns {Promise<FlipStatus, ErrorMsg>}
	     * @private
	     */

	  }, {
	    key: "_flip",
	    value: function _flip(type) {
	      return this.execute(commandNames.FLIP_IMAGE, type);
	    }
	    /**
	     * Flip x
	     * @returns {Promise<FlipStatus, ErrorMsg>}
	     * @example
	     * imageEditor.flipX().then((status => {
	     *     console.log('flipX: ', status.flipX);
	     *     console.log('flipY: ', status.flipY);
	     *     console.log('angle: ', status.angle);
	     * }).catch(message => {
	     *     console.log('error: ', message);
	     * });
	     */

	  }, {
	    key: "flipX",
	    value: function flipX() {
	      return this._flip('flipX');
	    }
	    /**
	     * Flip y
	     * @returns {Promise<FlipStatus, ErrorMsg>}
	     * @example
	     * imageEditor.flipY().then(status => {
	     *     console.log('flipX: ', status.flipX);
	     *     console.log('flipY: ', status.flipY);
	     *     console.log('angle: ', status.angle);
	     * }).catch(message => {
	     *     console.log('error: ', message);
	     * });
	     */

	  }, {
	    key: "flipY",
	    value: function flipY() {
	      return this._flip('flipY');
	    }
	    /**
	     * Reset flip
	     * @returns {Promise<FlipStatus, ErrorMsg>}
	     * @example
	     * imageEditor.resetFlip().then(status => {
	     *     console.log('flipX: ', status.flipX);
	     *     console.log('flipY: ', status.flipY);
	     *     console.log('angle: ', status.angle);
	     * }).catch(message => {
	     *     console.log('error: ', message);
	     * });;
	     */

	  }, {
	    key: "resetFlip",
	    value: function resetFlip() {
	      return this._flip('reset');
	    }
	    /**
	     * @param {string} type - 'rotate' or 'setAngle'
	     * @param {number} angle - angle value (degree)
	     * @param {boolean} isSilent - is silent execution or not
	     * @returns {Promise<RotateStatus, ErrorMsg>}
	     * @private
	     */

	  }, {
	    key: "_rotate",
	    value: function _rotate(type, angle, isSilent) {
	      var result = null;

	      if (isSilent) {
	        result = this.executeSilent(commands.ROTATE_IMAGE, type, angle);
	      } else {
	        result = this.execute(commands.ROTATE_IMAGE, type, angle);
	      }

	      return result;
	    }
	    /**
	     * Rotate image
	     * @returns {Promise}
	     * @param {number} angle - Additional angle to rotate image
	     * @returns {Promise<RotateStatus, ErrorMsg>}
	     * @example
	     * imageEditor.rotate(10); // angle = 10
	     * imageEditor.rotate(10); // angle = 20
	     * imageEidtor.rotate(5); // angle = 5
	     * imageEidtor.rotate(-95); // angle = -90
	     * imageEditor.rotate(10).then(status => {
	     *     console.log('angle: ', status.angle);
	     * })).catch(message => {
	     *     console.log('error: ', message);
	     * });
	     */

	  }, {
	    key: "rotate",
	    value: function rotate(angle, isSilent) {
	      return this._rotate('rotate', angle, isSilent);
	    }
	    /**
	     * Set angle
	     * @param {number} angle - Angle of image
	     * @param {boolean} isSilent - is silent execution or not
	     * @returns {Promise<RotateStatus, ErrorMsg>}
	     * @example
	     * imageEditor.setAngle(10); // angle = 10
	     * imageEditor.rotate(10); // angle = 20
	     * imageEidtor.setAngle(5); // angle = 5
	     * imageEidtor.rotate(50); // angle = 55
	     * imageEidtor.setAngle(-40); // angle = -40
	     * imageEditor.setAngle(10).then(status => {
	     *     console.log('angle: ', status.angle);
	     * })).catch(message => {
	     *     console.log('error: ', message);
	     * });
	     */

	  }, {
	    key: "setAngle",
	    value: function setAngle(angle, isSilent) {
	      return this._rotate('setAngle', angle, isSilent);
	    }
	    /**
	     * Set drawing brush
	     * @param {Object} option brush option
	     *  @param {Number} option.width width
	     *  @param {String} option.color color like 'FFFFFF', 'rgba(0, 0, 0, 0.5)'
	     * @example
	     * imageEditor.startDrawingMode('FREE_DRAWING');
	     * imageEditor.setBrush({
	     *     width: 12,
	     *     color: 'rgba(0, 0, 0, 0.5)'
	     * });
	     * imageEditor.setBrush({
	     *     width: 8,
	     *     color: 'FFFFFF'
	     * });
	     */

	  }, {
	    key: "setBrush",
	    value: function setBrush(option) {
	      this._graphics.setBrush(option);
	    }
	    /**
	     * Set states of current drawing shape
	     * @param {string} type - Shape type (ex: 'rect', 'circle', 'triangle')
	     * @param {Object} [options] - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stoke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {number} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	     * @example
	     * imageEditor.setDrawingShape('rect', {
	     *     fill: 'red',
	     *     width: 100,
	     *     height: 200
	     * });
	     * @example
	     * imageEditor.setDrawingShape('circle', {
	     *     fill: 'transparent',
	     *     stroke: 'blue',
	     *     strokeWidth: 3,
	     *     rx: 10,
	     *     ry: 100
	     * });
	     * @example
	     * imageEditor.setDrawingShape('triangle', { // When resizing, the shape keep the 1:1 ratio
	     *     width: 1,
	     *     height: 1,
	     *     isRegular: true
	     * });
	     * @example
	     * imageEditor.setDrawingShape('circle', { // When resizing, the shape keep the 1:1 ratio
	     *     rx: 10,
	     *     ry: 10,
	     *     isRegular: true
	     * });
	     */

	  }, {
	    key: "setDrawingShape",
	    value: function setDrawingShape(type, options) {
	      this._graphics.setDrawingShape(type, options);
	    }
	    /**
	     * Add shape
	     * @param {string} type - Shape type (ex: 'rect', 'circle', 'triangle')
	     * @param {Object} options - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stroke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {number} [options.left] - Shape x position
	     *      @param {number} [options.top] - Shape y position
	     *      @param {boolean} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	     * @returns {Promise<ObjectProps, ErrorMsg>}
	     * @example
	     * imageEditor.addShape('rect', {
	     *     fill: 'red',
	     *     stroke: 'blue',
	     *     strokeWidth: 3,
	     *     width: 100,
	     *     height: 200,
	     *     left: 10,
	     *     top: 10,
	     *     isRegular: true
	     * });
	     * @example
	     * imageEditor.addShape('circle', {
	     *     fill: 'red',
	     *     stroke: 'blue',
	     *     strokeWidth: 3,
	     *     rx: 10,
	     *     ry: 100,
	     *     isRegular: false
	     * }).then(objectProps => {
	     *     console.log(objectProps.id);
	     * });
	     */

	  }, {
	    key: "addShape",
	    value: function addShape(type, options) {
	      options = options || {};

	      this._setPositions(options);

	      return this.execute(commandNames.ADD_SHAPE, type, options);
	    }
	    /**
	     * Change shape
	     * @param {number} id - object id
	     * @param {Object} options - Shape options
	     *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	     *      @param {string} [options.stroke] - Shape outline color
	     *      @param {number} [options.strokeWidth] - Shape outline width
	     *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	     *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	     *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	     *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	     *      @param {boolean} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	     * @returns {Promise}
	     * @example
	     * // call after selecting shape object on canvas
	     * imageEditor.changeShape(id, { // change rectagle or triangle
	     *     fill: 'red',
	     *     stroke: 'blue',
	     *     strokeWidth: 3,
	     *     width: 100,
	     *     height: 200
	     * });
	     * @example
	     * // call after selecting shape object on canvas
	     * imageEditor.changeShape(id, { // change circle
	     *     fill: 'red',
	     *     stroke: 'blue',
	     *     strokeWidth: 3,
	     *     rx: 10,
	     *     ry: 100
	     * });
	     */

	  }, {
	    key: "changeShape",
	    value: function changeShape(id, options) {
	      return this.execute(commandNames.CHANGE_SHAPE, id, options);
	    }
	    /**
	     * Add text on image
	     * @param {string} text - Initial input text
	     * @param {Object} [options] Options for generating text
	     *     @param {Object} [options.styles] Initial styles
	     *         @param {string} [options.styles.fill] Color
	     *         @param {string} [options.styles.fontFamily] Font type for text
	     *         @param {number} [options.styles.fontSize] Size
	     *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)
	     *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)
	     *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)
	     *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)
	     *     @param {{x: number, y: number}} [options.position] - Initial position
	     * @returns {Promise}
	     * @example
	     * imageEditor.addText('init text');
	     * @example
	     * imageEditor.addText('init text', {
	     *     styles: {
	     *         fill: '#000',
	     *         fontSize: 20,
	     *         fontWeight: 'bold'
	     *     },
	     *     position: {
	     *         x: 10,
	     *         y: 10
	     *     }
	     * }).then(objectProps => {
	     *     console.log(objectProps.id);
	     * });
	     */

	  }, {
	    key: "addText",
	    value: function addText(text, options) {
	      text = text || '';
	      options = options || {};
	      return this.execute(commandNames.ADD_TEXT, text, options);
	    }
	    /**
	     * Change contents of selected text object on image
	     * @param {number} id - object id
	     * @param {string} text - Changing text
	     * @returns {Promise<ObjectProps, ErrorMsg>}
	     * @example
	     * imageEditor.changeText(id, 'change text');
	     */

	  }, {
	    key: "changeText",
	    value: function changeText(id, text) {
	      text = text || '';
	      return this.execute(commandNames.CHANGE_TEXT, id, text);
	    }
	    /**
	     * Set style
	     * @param {number} id - object id
	     * @param {Object} styleObj - text styles
	     *     @param {string} [styleObj.fill] Color
	     *     @param {string} [styleObj.fontFamily] Font type for text
	     *     @param {number} [styleObj.fontSize] Size
	     *     @param {string} [styleObj.fontStyle] Type of inclination (normal / italic)
	     *     @param {string} [styleObj.fontWeight] Type of thicker or thinner looking (normal / bold)
	     *     @param {string} [styleObj.textAlign] Type of text align (left / center / right)
	     *     @param {string} [styleObj.textDecoraiton] Type of line (underline / line-throgh / overline)
	     * @returns {Promise}
	     * @example
	     * imageEditor.changeTextStyle(id, {
	     *     fontStyle: 'italic'
	     * });
	     */

	  }, {
	    key: "changeTextStyle",
	    value: function changeTextStyle(id, styleObj) {
	      return this.execute(commandNames.CHANGE_TEXT_STYLE, id, styleObj);
	    }
	    /**
	     * change text mode
	     * @param {string} type - change type
	     * @private
	     */

	  }, {
	    key: "_changeActivateMode",
	    value: function _changeActivateMode(type) {
	      if (type !== 'ICON' && this.getDrawingMode() !== type) {
	        this.startDrawingMode(type);
	      }
	    }
	    /**
	     * 'textChanged' event handler
	     * @param {Object} objectProps changed object properties
	     * @private
	     */

	  }, {
	    key: "_onTextChanged",
	    value: function _onTextChanged(objectProps) {
	      this.changeText(objectProps.id, objectProps.text);
	    }
	    /**
	     * 'iconCreateResize' event handler
	     * @param {Object} originPointer origin pointer
	     *  @param {Number} originPointer.x x position
	     *  @param {Number} originPointer.y y position
	     * @private
	     */

	  }, {
	    key: "_onIconCreateResize",
	    value: function _onIconCreateResize(originPointer) {
	      this.fire(eventNames.ICON_CREATE_RESIZE, originPointer);
	    }
	    /**
	     * 'iconCreateEnd' event handler
	     * @param {Object} originPointer origin pointer
	     *  @param {Number} originPointer.x x position
	     *  @param {Number} originPointer.y y position
	     * @private
	     */

	  }, {
	    key: "_onIconCreateEnd",
	    value: function _onIconCreateEnd(originPointer) {
	      this.fire(eventNames.ICON_CREATE_END, originPointer);
	    }
	    /**
	     * 'textEditing' event handler
	     * @private
	     */

	  }, {
	    key: "_onTextEditing",
	    value: function _onTextEditing() {
	      /**
	       * The event which starts to edit text object
	       * @event ImageEditor#textEditing
	       * @example
	       * imageEditor.on('textEditing', function() {
	       *     console.log('text editing');
	       * });
	       */
	      this.fire(eventNames.TEXT_EDITING);
	    }
	    /**
	     * Mousedown event handler in case of 'TEXT' drawing mode
	     * @param {fabric.Event} event - Current mousedown event object
	     * @private
	     */

	  }, {
	    key: "_onAddText",
	    value: function _onAddText(event) {
	      /**
	       * The event when 'TEXT' drawing mode is enabled and click non-object area.
	       * @event ImageEditor#addText
	       * @param {Object} pos
	       *  @param {Object} pos.originPosition - Current position on origin canvas
	       *      @param {Number} pos.originPosition.x - x
	       *      @param {Number} pos.originPosition.y - y
	       *  @param {Object} pos.clientPosition - Current position on client area
	       *      @param {Number} pos.clientPosition.x - x
	       *      @param {Number} pos.clientPosition.y - y
	       * @example
	       * imageEditor.on('addText', function(pos) {
	       *     imageEditor.addText('Double Click', {
	       *         position: pos.originPosition
	       *     });
	       *     console.log('text position on canvas: ' + pos.originPosition);
	       *     console.log('text position on brwoser: ' + pos.clientPosition);
	       * });
	       */
	      this.fire(eventNames.ADD_TEXT, {
	        originPosition: event.originPosition,
	        clientPosition: event.clientPosition
	      });
	    }
	    /**
	     * 'addObject' event handler
	     * @param {Object} objectProps added object properties
	     * @private
	     */

	  }, {
	    key: "_onAddObject",
	    value: function _onAddObject(objectProps) {
	      var obj = this._graphics.getObject(objectProps.id);

	      this._pushAddObjectCommand(obj);
	    }
	    /**
	     * 'addObjectAfter' event handler
	     * @param {Object} objectProps added object properties
	     * @private
	     */

	  }, {
	    key: "_onAddObjectAfter",
	    value: function _onAddObjectAfter(objectProps) {
	      this.fire(eventNames.ADD_OBJECT_AFTER, objectProps);
	    }
	    /**
	     * 'selectionCleared' event handler
	     * @private
	     */

	  }, {
	    key: "_selectionCleared",
	    value: function _selectionCleared() {
	      this.fire(eventNames.SELECTION_CLEARED);
	    }
	    /**
	     * 'selectionCreated' event handler
	     * @param {Object} eventTarget - Fabric object
	     * @private
	     */

	  }, {
	    key: "_selectionCreated",
	    value: function _selectionCreated(eventTarget) {
	      this.fire(eventNames.SELECTION_CREATED, eventTarget);
	    }
	    /**
	     * Register custom icons
	     * @param {{iconType: string, pathValue: string}} infos - Infos to register icons
	     * @example
	     * imageEditor.registerIcons({
	     *     customIcon: 'M 0 0 L 20 20 L 10 10 Z',
	     *     customArrow: 'M 60 0 L 120 60 H 90 L 75 45 V 180 H 45 V 45 L 30 60 H 0 Z'
	     * });
	     */

	  }, {
	    key: "registerIcons",
	    value: function registerIcons(infos) {
	      this._graphics.registerPaths(infos);
	    }
	    /**
	     * Change canvas cursor type
	     * @param {string} cursorType - cursor type
	     * @example
	     * imageEditor.changeCursor('crosshair');
	     */

	  }, {
	    key: "changeCursor",
	    value: function changeCursor(cursorType) {
	      this._graphics.changeCursor(cursorType);
	    }
	    /**
	     * Add icon on canvas
	     * @param {string} type - Icon type ('arrow', 'cancel', custom icon name)
	     * @param {Object} options - Icon options
	     *      @param {string} [options.fill] - Icon foreground color
	     *      @param {number} [options.left] - Icon x position
	     *      @param {number} [options.top] - Icon y position
	     * @returns {Promise<ObjectProps, ErrorMsg>}
	     * @example
	     * imageEditor.addIcon('arrow'); // The position is center on canvas
	     * @example
	     * imageEditor.addIcon('arrow', {
	     *     left: 100,
	     *     top: 100
	     * }).then(objectProps => {
	     *     console.log(objectProps.id);
	     * });
	     */

	  }, {
	    key: "addIcon",
	    value: function addIcon(type, options) {
	      options = options || {};

	      this._setPositions(options);

	      return this.execute(commandNames.ADD_ICON, type, options);
	    }
	    /**
	     * Change icon color
	     * @param {number} id - object id
	     * @param {string} color - Color for icon
	     * @returns {Promise}
	     * @example
	     * imageEditor.changeIconColor(id, '#000000');
	     */

	  }, {
	    key: "changeIconColor",
	    value: function changeIconColor(id, color) {
	      return this.execute(commandNames.CHANGE_ICON_COLOR, id, color);
	    }
	    /**
	     * Remove an object or group by id
	     * @param {number} id - object id
	     * @returns {Promise}
	     * @example
	     * imageEditor.removeObject(id);
	     */

	  }, {
	    key: "removeObject",
	    value: function removeObject(id) {
	      return this.execute(commandNames.REMOVE_OBJECT, id);
	    }
	    /**
	     * Whether it has the filter or not
	     * @param {string} type - Filter type
	     * @returns {boolean} true if it has the filter
	     */

	  }, {
	    key: "hasFilter",
	    value: function hasFilter(type) {
	      return this._graphics.hasFilter(type);
	    }
	    /**
	     * Remove filter on canvas image
	     * @param {string} type - Filter type
	     * @returns {Promise<FilterResult, ErrorMsg>}
	     * @example
	     * imageEditor.removeFilter('Grayscale').then(obj => {
	     *     console.log('filterType: ', obj.type);
	     *     console.log('actType: ', obj.action);
	     * }).catch(message => {
	     *     console.log('error: ', message);
	     * });
	     */

	  }, {
	    key: "removeFilter",
	    value: function removeFilter(type) {
	      return this.execute(commandNames.REMOVE_FILTER, type);
	    }
	    /**
	     * Apply filter on canvas image
	     * @param {string} type - Filter type
	     * @param {Object} options - Options to apply filter
	     *  @param {number} options.maskObjId - masking image object id
	     * @returns {Promise<FilterResult, ErrorMsg>}
	     * @example
	     * imageEditor.applyFilter('Grayscale');
	     * @example
	     * imageEditor.applyFilter('mask', {maskObjId: id}).then(obj => {
	     *     console.log('filterType: ', obj.type);
	     *     console.log('actType: ', obj.action);
	     * }).catch(message => {
	     *     console.log('error: ', message);
	     * });;
	     */

	  }, {
	    key: "applyFilter",
	    value: function applyFilter(type, options) {
	      return this.execute(commandNames.APPLY_FILTER, type, options);
	    }
	    /**
	     * Get data url
	     * @param {Object} options - options for toDataURL
	     *   @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     *   @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     *   @param {Number} [options.multiplier=1] Multiplier to scale by
	     *   @param {Number} [options.left] Cropping left offset. Introduced in fabric v1.2.14
	     *   @param {Number} [options.top] Cropping top offset. Introduced in fabric v1.2.14
	     *   @param {Number} [options.width] Cropping width. Introduced in fabric v1.2.14
	     *   @param {Number} [options.height] Cropping height. Introduced in fabric v1.2.14
	     * @returns {string} A DOMString containing the requested data URI
	     * @example
	     * imgEl.src = imageEditor.toDataURL();
	     *
	     * imageEditor.loadImageFromURL(imageEditor.toDataURL(), 'FilterImage').then(() => {
	     *      imageEditor.addImageObject(imgUrl);
	     * });
	     */

	  }, {
	    key: "toDataURL",
	    value: function toDataURL(options) {
	      return this._graphics.toDataURL(options);
	    }
	    /**
	     * Get image name
	     * @returns {string} image name
	     * @example
	     * console.log(imageEditor.getImageName());
	     */

	  }, {
	    key: "getImageName",
	    value: function getImageName() {
	      return this._graphics.getImageName();
	    }
	    /**
	     * Clear undoStack
	     * @example
	     * imageEditor.clearUndoStack();
	     */

	  }, {
	    key: "clearUndoStack",
	    value: function clearUndoStack() {
	      this._invoker.clearUndoStack();
	    }
	    /**
	     * Clear redoStack
	     * @example
	     * imageEditor.clearRedoStack();
	     */

	  }, {
	    key: "clearRedoStack",
	    value: function clearRedoStack() {
	      this._invoker.clearRedoStack();
	    }
	    /**
	     * Whehter the undo stack is empty or not
	     * @returns {boolean}
	     * imageEditor.isEmptyUndoStack();
	     */

	  }, {
	    key: "isEmptyUndoStack",
	    value: function isEmptyUndoStack() {
	      return this._invoker.isEmptyUndoStack();
	    }
	    /**
	     * Whehter the redo stack is empty or not
	     * @returns {boolean}
	     * imageEditor.isEmptyRedoStack();
	     */

	  }, {
	    key: "isEmptyRedoStack",
	    value: function isEmptyRedoStack() {
	      return this._invoker.isEmptyRedoStack();
	    }
	    /**
	     * Resize canvas dimension
	     * @param {{width: number, height: number}} dimension - Max width & height
	     * @returns {Promise}
	     */

	  }, {
	    key: "resizeCanvasDimension",
	    value: function resizeCanvasDimension(dimension) {
	      if (!dimension) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      return this.execute(commandNames.RESIZE_CANVAS_DIMENSION, dimension);
	    }
	    /**
	     * Destroy
	     */

	  }, {
	    key: "destroy",
	    value: function destroy() {
	      var _this2 = this;

	      this.stopDrawingMode();

	      this._detachDomEvents();

	      this._graphics.destroy();

	      this._graphics = null;
	      forEach_1(this, function (value, key) {
	        _this2[key] = null;
	      });
	    }
	    /**
	     * Set position
	     * @param {Object} options - Position options (left or top)
	     * @private
	     */

	  }, {
	    key: "_setPositions",
	    value: function _setPositions(options) {
	      var centerPosition = this._graphics.getCenter();

	      if (isUndefined_1(options.left)) {
	        options.left = centerPosition.left;
	      }

	      if (isUndefined_1(options.top)) {
	        options.top = centerPosition.top;
	      }
	    }
	    /**
	     * Set properties of active object
	     * @param {number} id - object id
	     * @param {Object} keyValue - key & value
	     * @returns {Promise}
	     * @example
	     * imageEditor.setObjectProperties(id, {
	     *     left:100,
	     *     top:100,
	     *     width: 200,
	     *     height: 200,
	     *     opacity: 0.5
	     * });
	     */

	  }, {
	    key: "setObjectProperties",
	    value: function setObjectProperties(id, keyValue) {
	      return this.execute(commandNames.SET_OBJECT_PROPERTIES, id, keyValue);
	    }
	    /**
	     * Set properties of active object, Do not leave an invoke history.
	     * @param {number} id - object id
	     * @param {Object} keyValue - key & value
	     * @example
	     * imageEditor.setObjectPropertiesQuietly(id, {
	     *     left:100,
	     *     top:100,
	     *     width: 200,
	     *     height: 200,
	     *     opacity: 0.5
	     * });
	     */

	  }, {
	    key: "setObjectPropertiesQuietly",
	    value: function setObjectPropertiesQuietly(id, keyValue) {
	      this._graphics.setObjectProperties(id, keyValue);
	    }
	    /**
	     * Get properties of active object corresponding key
	     * @param {number} id - object id
	     * @param {Array<string>|ObjectProps|string} keys - property's key
	     * @returns {ObjectProps} properties if id is valid or null
	     * @example
	     * var props = imageEditor.getObjectProperties(id, 'left');
	     * console.log(props);
	     * @example
	     * var props = imageEditor.getObjectProperties(id, ['left', 'top', 'width', 'height']);
	     * console.log(props);
	     * @example
	     * var props = imageEditor.getObjectProperties(id, {
	     *     left: null,
	     *     top: null,
	     *     width: null,
	     *     height: null,
	     *     opacity: null
	     * });
	     * console.log(props);
	     */

	  }, {
	    key: "getObjectProperties",
	    value: function getObjectProperties(id, keys) {
	      var object = this._graphics.getObject(id);

	      if (!object) {
	        return null;
	      }

	      return this._graphics.getObjectProperties(id, keys);
	    }
	    /**
	     * Get the canvas size
	     * @returns {Object} {{width: number, height: number}} canvas size
	     * @example
	     * var canvasSize = imageEditor.getCanvasSize();
	     * console.log(canvasSize.width);
	     * console.height(canvasSize.height);
	     */

	  }, {
	    key: "getCanvasSize",
	    value: function getCanvasSize() {
	      return this._graphics.getCanvasSize();
	    }
	    /**
	     * Get object position by originX, originY
	     * @param {number} id - object id
	     * @param {string} originX - can be 'left', 'center', 'right'
	     * @param {string} originY - can be 'top', 'center', 'bottom'
	     * @returns {Object} {{x:number, y: number}} position by origin if id is valid, or null
	     * @example
	     * var position = imageEditor.getObjectPosition(id, 'left', 'top');
	     * console.log(position);
	     */

	  }, {
	    key: "getObjectPosition",
	    value: function getObjectPosition(id, originX, originY) {
	      return this._graphics.getObjectPosition(id, originX, originY);
	    }
	    /**
	     * Set object position  by originX, originY
	     * @param {number} id - object id
	     * @param {Object} posInfo - position object
	     *  @param {number} posInfo.x - x position
	     *  @param {number} posInfo.y - y position
	     *  @param {string} posInfo.originX - can be 'left', 'center', 'right'
	     *  @param {string} posInfo.originY - can be 'top', 'center', 'bottom'
	     * @returns {Promise}
	     * @example
	     * // align the object to 'left', 'top'
	     * imageEditor.setObjectPosition(id, {
	     *     x: 0,
	     *     y: 0,
	     *     originX: 'left',
	     *     originY: 'top'
	     * });
	     * @example
	     * // align the object to 'right', 'top'
	     * var canvasSize = imageEditor.getCanvasSize();
	     * imageEditor.setObjectPosition(id, {
	     *     x: canvasSize.width,
	     *     y: 0,
	     *     originX: 'right',
	     *     originY: 'top'
	     * });
	     * @example
	     * // align the object to 'left', 'bottom'
	     * var canvasSize = imageEditor.getCanvasSize();
	     * imageEditor.setObjectPosition(id, {
	     *     x: 0,
	     *     y: canvasSize.height,
	     *     originX: 'left',
	     *     originY: 'bottom'
	     * });
	     * @example
	     * // align the object to 'right', 'bottom'
	     * var canvasSize = imageEditor.getCanvasSize();
	     * imageEditor.setObjectPosition(id, {
	     *     x: canvasSize.width,
	     *     y: canvasSize.height,
	     *     originX: 'right',
	     *     originY: 'bottom'
	     * });
	     */

	  }, {
	    key: "setObjectPosition",
	    value: function setObjectPosition(id, posInfo) {
	      return this.execute(commandNames.SET_OBJECT_POSITION, id, posInfo);
	    }
	  }]);

	  return ImageEditor;
	}();
	action.mixin(ImageEditor);
	CustomEvents.mixin(ImageEditor);

	var _this = undefined;
	var ICON = componentNames.ICON;
	var addIcon = {
	  name: commandNames.ADD_ICON,

	  /**
	   * Add an icon
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Icon type ('arrow', 'cancel', custom icon name)
	   * @param {Object} options - Icon options
	   *      @param {string} [options.fill] - Icon foreground color
	   *      @param {string} [options.left] - Icon x position
	   *      @param {string} [options.top] - Icon y position
	   * @returns {Promise}
	   */
	  execute: function () {
	    var _execute = _asyncToGenerator(
	    /*#__PURE__*/
	    regeneratorRuntime.mark(function _callee(graphics, type, options) {
	      var iconComp, objectProps;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              iconComp = graphics.getComponent(ICON);
	              _context.next = 3;
	              return iconComp.add(type, options);

	            case 3:
	              objectProps = _context.sent;
	              _this.undoData.object = graphics.getObject(objectProps.id);
	              return _context.abrupt("return", objectProps);

	            case 6:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    function execute(_x, _x2, _x3) {
	      return _execute.apply(this, arguments);
	    }

	    return execute;
	  }(),

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function () {
	    var _undo = _asyncToGenerator(
	    /*#__PURE__*/
	    regeneratorRuntime.mark(function _callee2(graphics) {
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return graphics.remove(_this.undoData.object);

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function undo(_x4) {
	      return _undo.apply(this, arguments);
	    }

	    return undo;
	  }()
	};
	register(addIcon);

	var _this$1 = undefined;
	var addImageObject = {
	  name: commandNames.ADD_IMAGE_OBJECT,

	  /**
	   * Add an image object
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} imgUrl - Image url to make object
	   * @returns {Promise}
	   */
	  execute: function () {
	    var _execute = _asyncToGenerator(
	    /*#__PURE__*/
	    regeneratorRuntime.mark(function _callee(graphics, imgUrl) {
	      var objectProps;
	      return regeneratorRuntime.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return graphics.addImageObject(imgUrl);

	            case 2:
	              objectProps = _context.sent;
	              _this$1.undoData.object = graphics.getObject(objectProps.id);
	              return _context.abrupt("return", objectProps);

	            case 5:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    function execute(_x, _x2) {
	      return _execute.apply(this, arguments);
	    }

	    return execute;
	  }(),

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function () {
	    var _undo = _asyncToGenerator(
	    /*#__PURE__*/
	    regeneratorRuntime.mark(function _callee2(graphics) {
	      return regeneratorRuntime.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return graphics.remove(_this$1.undoData.object);

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function undo(_x3) {
	      return _undo.apply(this, arguments);
	    }

	    return undo;
	  }()
	};
	register(addImageObject);

	var addObject = {
	  name: commandNames.ADD_OBJECT,

	  /**
	   * Add an object
	   * @param {Graphics} graphics - Graphics instance
	   * @param {Object} object - Fabric object
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, object) {
	    return new Promise(function (resolve, reject) {
	      if (!graphics.contains(object)) {
	        graphics.add(object);
	        resolve(object);
	      } else {
	        reject(rejectMessages.addedObject);
	      }
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @param {Object} object - Fabric object
	   * @returns {Promise}
	   */
	  undo: function undo(graphics, object) {
	    return new Promise(function (resolve, reject) {
	      if (graphics.contains(object)) {
	        graphics.remove(object);
	        resolve(object);
	      } else {
	        reject(rejectMessages.noObject);
	      }
	    });
	  }
	};
	register(addObject);

	var SHAPE = componentNames.SHAPE;
	var addShape = {
	  name: commandNames.ADD_SHAPE,

	  /**
	   * Add a shape
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Shape type (ex: 'rect', 'circle', 'triangle')
	   * @param {Object} options - Shape options
	   *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	   *      @param {string} [options.stroke] - Shape outline color
	   *      @param {number} [options.strokeWidth] - Shape outline width
	   *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	   *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	   *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	   *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	   *      @param {number} [options.left] - Shape x position
	   *      @param {number} [options.top] - Shape y position
	   *      @param {number} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, type, options) {
	    var _this = this;

	    var shapeComp = graphics.getComponent(SHAPE);
	    return shapeComp.add(type, options).then(function (objectProps) {
	      _this.undoData.object = graphics.getObject(objectProps.id);
	      return objectProps;
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    graphics.remove(this.undoData.object);
	    return Promise.resolve();
	  }
	};
	register(addShape);

	var TEXT = componentNames.TEXT;
	var addText = {
	  name: commandNames.ADD_TEXT,

	  /**
	   * Add a text object
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} text - Initial input text
	   * @param {Object} [options] Options for text styles
	   *     @param {Object} [options.styles] Initial styles
	   *         @param {string} [options.styles.fill] Color
	   *         @param {string} [options.styles.fontFamily] Font type for text
	   *         @param {number} [options.styles.fontSize] Size
	   *         @param {string} [options.styles.fontStyle] Type of inclination (normal / italic)
	   *         @param {string} [options.styles.fontWeight] Type of thicker or thinner looking (normal / bold)
	   *         @param {string} [options.styles.textAlign] Type of text align (left / center / right)
	   *         @param {string} [options.styles.textDecoraiton] Type of line (underline / line-throgh / overline)
	   *     @param {{x: number, y: number}} [options.position] - Initial position
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, text, options) {
	    var _this = this;

	    var textComp = graphics.getComponent(TEXT);
	    return textComp.add(text, options).then(function (objectProps) {
	      _this.undoData.object = graphics.getObject(objectProps.id);
	      return objectProps;
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    graphics.remove(this.undoData.object);
	    return Promise.resolve();
	  }
	};
	register(addText);

	var FILTER = componentNames.FILTER;
	var applyFilter = {
	  name: commandNames.APPLY_FILTER,

	  /**
	   * Apply a filter into an image
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Filter type
	   * @param {Object} options - Filter options
	   *  @param {number} options.maskObjId - masking image object id
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, type, options) {
	    var filterComp = graphics.getComponent(FILTER);

	    if (type === 'mask') {
	      var maskObj = graphics.getObject(options.maskObjId);

	      if (!(maskObj && maskObj.isType('image'))) {
	        return Promise.reject(rejectMessages.invalidParameters);
	      }

	      options = {
	        mask: maskObj
	      };
	    }

	    if (type === 'mask') {
	      this.undoData.object = options.mask;
	      graphics.remove(options.mask);
	    } else {
	      this.undoData.options = filterComp.getOptions(type);
	    }

	    return filterComp.add(type, options);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Filter type
	   * @returns {Promise}
	   */
	  undo: function undo(graphics, type) {
	    var filterComp = graphics.getComponent(FILTER);

	    if (type === 'mask') {
	      var mask = this.undoData.object;
	      graphics.add(mask);
	      graphics.setActiveObject(mask);
	      return filterComp.remove(type);
	    } // options changed case


	    if (this.undoData.options) {
	      return filterComp.add(type, this.undoData.options);
	    } // filter added case


	    return filterComp.remove(type);
	  }
	};
	register(applyFilter);

	var ICON$1 = componentNames.ICON;
	var changeIconColor = {
	  name: commandNames.CHANGE_ICON_COLOR,

	  /**
	   * Change icon color
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {string} color - Color for icon
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, color) {
	    var _this = this;

	    return new Promise(function (resolve, reject) {
	      var iconComp = graphics.getComponent(ICON$1);
	      var targetObj = graphics.getObject(id);

	      if (!targetObj) {
	        reject(rejectMessages.noObject);
	      }

	      _this.undoData.object = targetObj;
	      _this.undoData.color = iconComp.getColor(targetObj);
	      iconComp.setColor(color, targetObj);
	      resolve();
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var iconComp = graphics.getComponent(ICON$1);
	    var _this$undoData$object = this.undoData.object,
	        icon = _this$undoData$object.object,
	        color = _this$undoData$object.color;
	    iconComp.setColor(color, icon);
	    return Promise.resolve();
	  }
	};
	register(changeIconColor);

	var SHAPE$1 = componentNames.SHAPE;
	var changeShape = {
	  name: commandNames.CHANGE_SHAPE,

	  /**
	   * Change a shape
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {Object} options - Shape options
	   *      @param {string} [options.fill] - Shape foreground color (ex: '#fff', 'transparent')
	   *      @param {string} [options.stroke] - Shape outline color
	   *      @param {number} [options.strokeWidth] - Shape outline width
	   *      @param {number} [options.width] - Width value (When type option is 'rect', this options can use)
	   *      @param {number} [options.height] - Height value (When type option is 'rect', this options can use)
	   *      @param {number} [options.rx] - Radius x value (When type option is 'circle', this options can use)
	   *      @param {number} [options.ry] - Radius y value (When type option is 'circle', this options can use)
	   *      @param {number} [options.left] - Shape x position
	   *      @param {number} [options.top] - Shape y position
	   *      @param {number} [options.isRegular] - Whether resizing shape has 1:1 ratio or not
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, options) {
	    var _this = this;

	    var shapeComp = graphics.getComponent(SHAPE$1);
	    var targetObj = graphics.getObject(id);

	    if (!targetObj) {
	      return Promise.reject(rejectMessages.noObject);
	    }

	    this.undoData.object = targetObj;
	    this.undoData.options = {};
	    forOwn_1(options, function (_value, key) {
	      _this.undoData.options[key] = targetObj[key];
	    });
	    return shapeComp.change(targetObj, options);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var shapeComp = graphics.getComponent(SHAPE$1);
	    var _this$undoData = this.undoData,
	        shape = _this$undoData.object,
	        options = _this$undoData.options;
	    return shapeComp.change(shape, options);
	  }
	};
	register(changeShape);

	var TEXT$1 = componentNames.TEXT;
	var changeText = {
	  name: commandNames.CHANGE_TEXT,

	  /**
	   * Change a text
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {string} text - Changing text
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, text) {
	    var textComp = graphics.getComponent(TEXT$1);
	    var targetObj = graphics.getObject(id);

	    if (!targetObj) {
	      return Promise.reject(rejectMessages.noObject);
	    }

	    this.undoData.object = targetObj;
	    this.undoData.text = textComp.getText(targetObj);
	    return textComp.change(targetObj, text);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var textComp = graphics.getComponent(TEXT$1);
	    var _this$undoData = this.undoData,
	        textObj = _this$undoData.object,
	        text = _this$undoData.text;
	    return textComp.change(textObj, text);
	  }
	};
	register(changeText);

	var TEXT$2 = componentNames.TEXT;
	var changeTextStyle = {
	  name: commandNames.CHANGE_TEXT_STYLE,

	  /**
	   * Change text styles
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {Object} styles - text styles
	   *     @param {string} [styles.fill] Color
	   *     @param {string} [styles.fontFamily] Font type for text
	   *     @param {number} [styles.fontSize] Size
	   *     @param {string} [styles.fontStyle] Type of inclination (normal / italic)
	   *     @param {string} [styles.fontWeight] Type of thicker or thinner looking (normal / bold)
	   *     @param {string} [styles.textAlign] Type of text align (left / center / right)
	   *     @param {string} [styles.textDecoraiton] Type of line (underline / line-throgh / overline)
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, styles) {
	    var _this = this;

	    var textComp = graphics.getComponent(TEXT$2);
	    var targetObj = graphics.getObject(id);

	    if (!targetObj) {
	      return Promise.reject(rejectMessages.noObject);
	    }

	    this.undoData.object = targetObj;
	    this.undoData.styles = {};
	    forOwn_1(styles, function (value, key) {
	      _this.undoData.styles[key] = targetObj[key];
	    });
	    return textComp.setStyle(targetObj, styles);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var textComp = graphics.getComponent(TEXT$2);
	    var _this$undoData = this.undoData,
	        textObj = _this$undoData.object,
	        styles = _this$undoData.styles;
	    return textComp.setStyle(textObj, styles);
	  }
	};
	register(changeTextStyle);

	var clearObjects = {
	  name: commandNames.CLEAR_OBJECTS,

	  /**
	   * Clear all objects without background (main) image
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  execute: function execute(graphics) {
	    var _this = this;

	    return new Promise(function (resolve) {
	      _this.undoData.objects = graphics.removeAll();
	      resolve();
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   * @ignore
	   */
	  undo: function undo(graphics) {
	    graphics.add(this.undoData.objects);
	    return Promise.resolve();
	  }
	};
	register(clearObjects);

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Flip an image
	 */
	var FLIP = componentNames.FLIP;
	var flip = {
	  name: commandNames.FLIP_IMAGE,

	  /**
	   * flip an image
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - 'flipX' or 'flipY' or 'reset'
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, type) {
	    var flipComp = graphics.getComponent(FLIP);
	    this.undoData.setting = flipComp.getCurrentSetting();
	    return flipComp[type]();
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var flipComp = graphics.getComponent(FLIP);
	    return flipComp.set(this.undoData.setting);
	  }
	};
	register(flip);

	var IMAGE_LOADER = componentNames.IMAGE_LOADER;
	var loadImage = {
	  name: commandNames.LOAD_IMAGE,

	  /**
	   * Load a background (main) image
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} imageName - Image name
	   * @param {string} imgUrl - Image Url
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, imageName, imgUrl) {
	    var loader = graphics.getComponent(IMAGE_LOADER);
	    var prevImage = loader.getCanvasImage();
	    var prevImageWidth = prevImage ? prevImage.width : 0;
	    var prevImageHeight = prevImage ? prevImage.height : 0;
	    var objects = graphics.removeAll(true).filter(function (objectItem) {
	      return objectItem.type !== 'cropzone';
	    });
	    objects.forEach(function (objectItem) {
	      objectItem.evented = true;
	    });
	    this.undoData = {
	      name: loader.getImageName(),
	      image: prevImage,
	      objects: objects
	    };
	    return loader.load(imageName, imgUrl).then(function (newImage) {
	      return {
	        oldWidth: prevImageWidth,
	        oldHeight: prevImageHeight,
	        newWidth: newImage.width,
	        newHeight: newImage.height
	      };
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var loader = graphics.getComponent(IMAGE_LOADER);
	    var _this$undoData = this.undoData,
	        objects = _this$undoData.objects,
	        name = _this$undoData.name,
	        image = _this$undoData.image;
	    graphics.removeAll(true);
	    graphics.add(objects);
	    return loader.load(name, image);
	  }
	};
	register(loadImage);

	/**
	 * @author NHN Ent. FE Development Team <dl_javascript@nhnent.com>
	 * @fileoverview Remove a filter from an image
	 */
	var FILTER$1 = componentNames.FILTER;
	var removeFilter = {
	  name: commandNames.REMOVE_FILTER,

	  /**
	   * Remove a filter from an image
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Filter type
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, type) {
	    var filterComp = graphics.getComponent(FILTER$1);
	    this.undoData.options = filterComp.getOptions(type);
	    return filterComp.remove(type);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - Filter type
	   * @returns {Promise}
	   */
	  undo: function undo(graphics, type) {
	    var filterComp = graphics.getComponent(FILTER$1);
	    var options = this.undoData.options;
	    return filterComp.add(type, options);
	  }
	};
	register(removeFilter);

	var removeObject = {
	  name: commandNames.REMOVE_OBJECT,

	  /**
	   * Remove an object
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id) {
	    var _this = this;

	    return new Promise(function (resolve, reject) {
	      _this.undoData.objects = graphics.removeObjectById(id);

	      if (_this.undoData.objects.length) {
	        resolve();
	      } else {
	        reject(rejectMessages.noObject);
	      }
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    graphics.add(this.undoData.objects);
	    return Promise.resolve();
	  }
	};
	register(removeObject);

	var resizeCanvasDimension = {
	  name: commandNames.RESIZE_CANVAS_DIMENSION,

	  /**
	   * resize the canvas with given dimension
	   * @param {Graphics} graphics - Graphics instance
	   * @param {{width: number, height: number}} dimension - Max width & height
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, dimension) {
	    var _this = this;

	    return new Promise(function (resolve) {
	      _this.undoData.size = {
	        width: graphics.cssMaxWidth,
	        height: graphics.cssMaxHeight
	      };
	      graphics.setCssMaxDimension(dimension);
	      graphics.adjustCanvasDimension();
	      resolve();
	    });
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    graphics.setCssMaxDimension(this.undoData.size);
	    graphics.adjustCanvasDimension();
	    return Promise.resolve();
	  }
	};
	register(resizeCanvasDimension);

	var ROTATION = componentNames.ROTATION;
	var rotate = {
	  name: commandNames.ROTATE_IMAGE,

	  /**
	   * Rotate an image
	   * @param {Graphics} graphics - Graphics instance
	   * @param {string} type - 'rotate' or 'setAngle'
	   * @param {number} angle - angle value (degree)
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, type, angle, isSilent) {
	    var rotationComp = graphics.getComponent(ROTATION);

	    if (!isSilent) {
	      this.undoData.angle = rotationComp.getCurrentAngle();
	    }

	    this.undoData.angle = rotationComp.getCurrentAngle();
	    return rotationComp[type](angle);
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var rotationComp = graphics.getComponent(ROTATION);

	    var _this$args = _slicedToArray(this.args, 3),
	        type = _this$args[1],
	        angle = _this$args[2];

	    if (type === 'setAngle') {
	      return rotationComp[type](this.undoData.angle);
	    }

	    return rotationComp.rotate(-angle);
	  }
	};
	register(rotate);

	var setObjectProperties = {
	  name: commandNames.SET_OBJECT_PROPERTIES,

	  /**
	   * Set object properties
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {Object} props - properties
	   *     @param {string} [props.fill] Color
	   *     @param {string} [props.fontFamily] Font type for text
	   *     @param {number} [props.fontSize] Size
	   *     @param {string} [props.fontStyle] Type of inclination (normal / italic)
	   *     @param {string} [props.fontWeight] Type of thicker or thinner looking (normal / bold)
	   *     @param {string} [props.textAlign] Type of text align (left / center / right)
	   *     @param {string} [props.textDecoraiton] Type of line (underline / line-throgh / overline)
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, props) {
	    var _this = this;

	    var targetObj = graphics.getObject(id);

	    if (!targetObj) {
	      return Promise.reject(rejectMessages.noObject);
	    }

	    this.undoData.props = {};
	    forOwn_1(props, function (_value, key) {
	      _this.undoData.props[key] = targetObj[key];
	    });
	    graphics.setObjectProperties(id, props);
	    return Promise.resolve();
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @returns {Promise}
	   */
	  undo: function undo(graphics, id) {
	    var props = this.undoData.props;
	    graphics.setObjectProperties(id, props);
	    return Promise.resolve();
	  }
	};
	register(setObjectProperties);

	var setObjectPosition = {
	  name: commandNames.SET_OBJECT_POSITION,

	  /**
	   * Set object properties
	   * @param {Graphics} graphics - Graphics instance
	   * @param {number} id - object id
	   * @param {Object} posInfo - position object
	   *  @param {number} posInfo.x - x position
	   *  @param {number} posInfo.y - y position
	   *  @param {string} posInfo.originX - can be 'left', 'center', 'right'
	   *  @param {string} posInfo.originY - can be 'top', 'center', 'bottom'
	   * @returns {Promise}
	   */
	  execute: function execute(graphics, id, posInfo) {
	    var targetObj = graphics.getObject(id);

	    if (!targetObj) {
	      return Promise.reject(rejectMessages.noObject);
	    }

	    this.undoData.objectId = id;
	    this.undoData.props = graphics.getObjectProperties(id, ['left', 'top']);
	    graphics.setObjectPosition(id, posInfo);
	    graphics.renderAll();
	    return Promise.resolve();
	  },

	  /**
	   * @param {Graphics} graphics - Graphics instance
	   * @returns {Promise}
	   */
	  undo: function undo(graphics) {
	    var _this$undoData = this.undoData,
	        objectId = _this$undoData.objectId,
	        props = _this$undoData.props;
	    graphics.setObjectProperties(objectId, props);
	    graphics.renderAll();
	    return Promise.resolve();
	  }
	};
	register(setObjectPosition);

	exports.ImageEditor = ImageEditor;

	return exports;

}({}));
//# sourceMappingURL=bundle.js.map
